/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

        /***/ "./node_modules/bech32/index.js":
        /*!**************************************!*\
          !*** ./node_modules/bech32/index.js ***!
          \**************************************/
        /***/ ((module) => {

            "use strict";
            eval("\nvar ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l'\n\n// pre-compute lookup table\nvar ALPHABET_MAP = {}\nfor (var z = 0; z < ALPHABET.length; z++) {\n  var x = ALPHABET.charAt(z)\n\n  if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')\n  ALPHABET_MAP[x] = z\n}\n\nfunction polymodStep (pre) {\n  var b = pre >> 25\n  return ((pre & 0x1FFFFFF) << 5) ^\n    (-((b >> 0) & 1) & 0x3b6a57b2) ^\n    (-((b >> 1) & 1) & 0x26508e6d) ^\n    (-((b >> 2) & 1) & 0x1ea119fa) ^\n    (-((b >> 3) & 1) & 0x3d4233dd) ^\n    (-((b >> 4) & 1) & 0x2a1462b3)\n}\n\nfunction prefixChk (prefix) {\n  var chk = 1\n  for (var i = 0; i < prefix.length; ++i) {\n    var c = prefix.charCodeAt(i)\n    if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'\n\n    chk = polymodStep(chk) ^ (c >> 5)\n  }\n  chk = polymodStep(chk)\n\n  for (i = 0; i < prefix.length; ++i) {\n    var v = prefix.charCodeAt(i)\n    chk = polymodStep(chk) ^ (v & 0x1f)\n  }\n  return chk\n}\n\nfunction encode (prefix, words, LIMIT) {\n  LIMIT = LIMIT || 90\n  if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')\n\n  prefix = prefix.toLowerCase()\n\n  // determine chk mod\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') throw new Error(chk)\n\n  var result = prefix + '1'\n  for (var i = 0; i < words.length; ++i) {\n    var x = words[i]\n    if ((x >> 5) !== 0) throw new Error('Non 5-bit word')\n\n    chk = polymodStep(chk) ^ x\n    result += ALPHABET.charAt(x)\n  }\n\n  for (i = 0; i < 6; ++i) {\n    chk = polymodStep(chk)\n  }\n  chk ^= 1\n\n  for (i = 0; i < 6; ++i) {\n    var v = (chk >> ((5 - i) * 5)) & 0x1f\n    result += ALPHABET.charAt(v)\n  }\n\n  return result\n}\n\nfunction __decode (str, LIMIT) {\n  LIMIT = LIMIT || 90\n  if (str.length < 8) return str + ' too short'\n  if (str.length > LIMIT) return 'Exceeds length limit'\n\n  // don't allow mixed case\n  var lowered = str.toLowerCase()\n  var uppered = str.toUpperCase()\n  if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str\n  str = lowered\n\n  var split = str.lastIndexOf('1')\n  if (split === -1) return 'No separator character for ' + str\n  if (split === 0) return 'Missing prefix for ' + str\n\n  var prefix = str.slice(0, split)\n  var wordChars = str.slice(split + 1)\n  if (wordChars.length < 6) return 'Data too short'\n\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') return chk\n\n  var words = []\n  for (var i = 0; i < wordChars.length; ++i) {\n    var c = wordChars.charAt(i)\n    var v = ALPHABET_MAP[c]\n    if (v === undefined) return 'Unknown character ' + c\n    chk = polymodStep(chk) ^ v\n\n    // not in the checksum?\n    if (i + 6 >= wordChars.length) continue\n    words.push(v)\n  }\n\n  if (chk !== 1) return 'Invalid checksum for ' + str\n  return { prefix: prefix, words: words }\n}\n\nfunction decodeUnsafe () {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n}\n\nfunction decode (str) {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n\n  throw new Error(res)\n}\n\nfunction convert (data, inBits, outBits, pad) {\n  var value = 0\n  var bits = 0\n  var maxV = (1 << outBits) - 1\n\n  var result = []\n  for (var i = 0; i < data.length; ++i) {\n    value = (value << inBits) | data[i]\n    bits += inBits\n\n    while (bits >= outBits) {\n      bits -= outBits\n      result.push((value >> bits) & maxV)\n    }\n  }\n\n  if (pad) {\n    if (bits > 0) {\n      result.push((value << (outBits - bits)) & maxV)\n    }\n  } else {\n    if (bits >= inBits) return 'Excess padding'\n    if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'\n  }\n\n  return result\n}\n\nfunction toWordsUnsafe (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n}\n\nfunction toWords (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nfunction fromWordsUnsafe (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n}\n\nfunction fromWords (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nmodule.exports = {\n  decodeUnsafe: decodeUnsafe,\n  decode: decode,\n  encode: encode,\n  toWordsUnsafe: toWordsUnsafe,\n  toWords: toWords,\n  fromWordsUnsafe: fromWordsUnsafe,\n  fromWords: fromWords\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmVjaDMyL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFZO0FBQ1o7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixxQkFBcUI7QUFDckM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLG1CQUFtQjtBQUNyQztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxjQUFjLG1CQUFtQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0Isa0JBQWtCO0FBQ3BDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7O0FBRUEsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLHNCQUFzQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2xpbWluYWwtYXBwLy4vbm9kZV9tb2R1bGVzL2JlY2gzMi9pbmRleC5qcz9iZjJiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xudmFyIEFMUEhBQkVUID0gJ3FwenJ5OXg4Z2YydHZkdzBzM2puNTRraGNlNm11YTdsJ1xuXG4vLyBwcmUtY29tcHV0ZSBsb29rdXAgdGFibGVcbnZhciBBTFBIQUJFVF9NQVAgPSB7fVxuZm9yICh2YXIgeiA9IDA7IHogPCBBTFBIQUJFVC5sZW5ndGg7IHorKykge1xuICB2YXIgeCA9IEFMUEhBQkVULmNoYXJBdCh6KVxuXG4gIGlmIChBTFBIQUJFVF9NQVBbeF0gIT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IFR5cGVFcnJvcih4ICsgJyBpcyBhbWJpZ3VvdXMnKVxuICBBTFBIQUJFVF9NQVBbeF0gPSB6XG59XG5cbmZ1bmN0aW9uIHBvbHltb2RTdGVwIChwcmUpIHtcbiAgdmFyIGIgPSBwcmUgPj4gMjVcbiAgcmV0dXJuICgocHJlICYgMHgxRkZGRkZGKSA8PCA1KSBeXG4gICAgKC0oKGIgPj4gMCkgJiAxKSAmIDB4M2I2YTU3YjIpIF5cbiAgICAoLSgoYiA+PiAxKSAmIDEpICYgMHgyNjUwOGU2ZCkgXlxuICAgICgtKChiID4+IDIpICYgMSkgJiAweDFlYTExOWZhKSBeXG4gICAgKC0oKGIgPj4gMykgJiAxKSAmIDB4M2Q0MjMzZGQpIF5cbiAgICAoLSgoYiA+PiA0KSAmIDEpICYgMHgyYTE0NjJiMylcbn1cblxuZnVuY3Rpb24gcHJlZml4Q2hrIChwcmVmaXgpIHtcbiAgdmFyIGNoayA9IDFcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVmaXgubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYyA9IHByZWZpeC5jaGFyQ29kZUF0KGkpXG4gICAgaWYgKGMgPCAzMyB8fCBjID4gMTI2KSByZXR1cm4gJ0ludmFsaWQgcHJlZml4ICgnICsgcHJlZml4ICsgJyknXG5cbiAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspIF4gKGMgPj4gNSlcbiAgfVxuICBjaGsgPSBwb2x5bW9kU3RlcChjaGspXG5cbiAgZm9yIChpID0gMDsgaSA8IHByZWZpeC5sZW5ndGg7ICsraSkge1xuICAgIHZhciB2ID0gcHJlZml4LmNoYXJDb2RlQXQoaSlcbiAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspIF4gKHYgJiAweDFmKVxuICB9XG4gIHJldHVybiBjaGtcbn1cblxuZnVuY3Rpb24gZW5jb2RlIChwcmVmaXgsIHdvcmRzLCBMSU1JVCkge1xuICBMSU1JVCA9IExJTUlUIHx8IDkwXG4gIGlmICgocHJlZml4Lmxlbmd0aCArIDcgKyB3b3Jkcy5sZW5ndGgpID4gTElNSVQpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4Y2VlZHMgbGVuZ3RoIGxpbWl0JylcblxuICBwcmVmaXggPSBwcmVmaXgudG9Mb3dlckNhc2UoKVxuXG4gIC8vIGRldGVybWluZSBjaGsgbW9kXG4gIHZhciBjaGsgPSBwcmVmaXhDaGsocHJlZml4KVxuICBpZiAodHlwZW9mIGNoayA9PT0gJ3N0cmluZycpIHRocm93IG5ldyBFcnJvcihjaGspXG5cbiAgdmFyIHJlc3VsdCA9IHByZWZpeCArICcxJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHdvcmRzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHggPSB3b3Jkc1tpXVxuICAgIGlmICgoeCA+PiA1KSAhPT0gMCkgdGhyb3cgbmV3IEVycm9yKCdOb24gNS1iaXQgd29yZCcpXG5cbiAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspIF4geFxuICAgIHJlc3VsdCArPSBBTFBIQUJFVC5jaGFyQXQoeClcbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCA2OyArK2kpIHtcbiAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspXG4gIH1cbiAgY2hrIF49IDFcblxuICBmb3IgKGkgPSAwOyBpIDwgNjsgKytpKSB7XG4gICAgdmFyIHYgPSAoY2hrID4+ICgoNSAtIGkpICogNSkpICYgMHgxZlxuICAgIHJlc3VsdCArPSBBTFBIQUJFVC5jaGFyQXQodilcbiAgfVxuXG4gIHJldHVybiByZXN1bHRcbn1cblxuZnVuY3Rpb24gX19kZWNvZGUgKHN0ciwgTElNSVQpIHtcbiAgTElNSVQgPSBMSU1JVCB8fCA5MFxuICBpZiAoc3RyLmxlbmd0aCA8IDgpIHJldHVybiBzdHIgKyAnIHRvbyBzaG9ydCdcbiAgaWYgKHN0ci5sZW5ndGggPiBMSU1JVCkgcmV0dXJuICdFeGNlZWRzIGxlbmd0aCBsaW1pdCdcblxuICAvLyBkb24ndCBhbGxvdyBtaXhlZCBjYXNlXG4gIHZhciBsb3dlcmVkID0gc3RyLnRvTG93ZXJDYXNlKClcbiAgdmFyIHVwcGVyZWQgPSBzdHIudG9VcHBlckNhc2UoKVxuICBpZiAoc3RyICE9PSBsb3dlcmVkICYmIHN0ciAhPT0gdXBwZXJlZCkgcmV0dXJuICdNaXhlZC1jYXNlIHN0cmluZyAnICsgc3RyXG4gIHN0ciA9IGxvd2VyZWRcblxuICB2YXIgc3BsaXQgPSBzdHIubGFzdEluZGV4T2YoJzEnKVxuICBpZiAoc3BsaXQgPT09IC0xKSByZXR1cm4gJ05vIHNlcGFyYXRvciBjaGFyYWN0ZXIgZm9yICcgKyBzdHJcbiAgaWYgKHNwbGl0ID09PSAwKSByZXR1cm4gJ01pc3NpbmcgcHJlZml4IGZvciAnICsgc3RyXG5cbiAgdmFyIHByZWZpeCA9IHN0ci5zbGljZSgwLCBzcGxpdClcbiAgdmFyIHdvcmRDaGFycyA9IHN0ci5zbGljZShzcGxpdCArIDEpXG4gIGlmICh3b3JkQ2hhcnMubGVuZ3RoIDwgNikgcmV0dXJuICdEYXRhIHRvbyBzaG9ydCdcblxuICB2YXIgY2hrID0gcHJlZml4Q2hrKHByZWZpeClcbiAgaWYgKHR5cGVvZiBjaGsgPT09ICdzdHJpbmcnKSByZXR1cm4gY2hrXG5cbiAgdmFyIHdvcmRzID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB3b3JkQ2hhcnMubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYyA9IHdvcmRDaGFycy5jaGFyQXQoaSlcbiAgICB2YXIgdiA9IEFMUEhBQkVUX01BUFtjXVxuICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHJldHVybiAnVW5rbm93biBjaGFyYWN0ZXIgJyArIGNcbiAgICBjaGsgPSBwb2x5bW9kU3RlcChjaGspIF4gdlxuXG4gICAgLy8gbm90IGluIHRoZSBjaGVja3N1bT9cbiAgICBpZiAoaSArIDYgPj0gd29yZENoYXJzLmxlbmd0aCkgY29udGludWVcbiAgICB3b3Jkcy5wdXNoKHYpXG4gIH1cblxuICBpZiAoY2hrICE9PSAxKSByZXR1cm4gJ0ludmFsaWQgY2hlY2tzdW0gZm9yICcgKyBzdHJcbiAgcmV0dXJuIHsgcHJlZml4OiBwcmVmaXgsIHdvcmRzOiB3b3JkcyB9XG59XG5cbmZ1bmN0aW9uIGRlY29kZVVuc2FmZSAoKSB7XG4gIHZhciByZXMgPSBfX2RlY29kZS5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gIGlmICh0eXBlb2YgcmVzID09PSAnb2JqZWN0JykgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBkZWNvZGUgKHN0cikge1xuICB2YXIgcmVzID0gX19kZWNvZGUuYXBwbHkobnVsbCwgYXJndW1lbnRzKVxuICBpZiAodHlwZW9mIHJlcyA9PT0gJ29iamVjdCcpIHJldHVybiByZXNcblxuICB0aHJvdyBuZXcgRXJyb3IocmVzKVxufVxuXG5mdW5jdGlvbiBjb252ZXJ0IChkYXRhLCBpbkJpdHMsIG91dEJpdHMsIHBhZCkge1xuICB2YXIgdmFsdWUgPSAwXG4gIHZhciBiaXRzID0gMFxuICB2YXIgbWF4ViA9ICgxIDw8IG91dEJpdHMpIC0gMVxuXG4gIHZhciByZXN1bHQgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyArK2kpIHtcbiAgICB2YWx1ZSA9ICh2YWx1ZSA8PCBpbkJpdHMpIHwgZGF0YVtpXVxuICAgIGJpdHMgKz0gaW5CaXRzXG5cbiAgICB3aGlsZSAoYml0cyA+PSBvdXRCaXRzKSB7XG4gICAgICBiaXRzIC09IG91dEJpdHNcbiAgICAgIHJlc3VsdC5wdXNoKCh2YWx1ZSA+PiBiaXRzKSAmIG1heFYpXG4gICAgfVxuICB9XG5cbiAgaWYgKHBhZCkge1xuICAgIGlmIChiaXRzID4gMCkge1xuICAgICAgcmVzdWx0LnB1c2goKHZhbHVlIDw8IChvdXRCaXRzIC0gYml0cykpICYgbWF4VilcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJpdHMgPj0gaW5CaXRzKSByZXR1cm4gJ0V4Y2VzcyBwYWRkaW5nJ1xuICAgIGlmICgodmFsdWUgPDwgKG91dEJpdHMgLSBiaXRzKSkgJiBtYXhWKSByZXR1cm4gJ05vbi16ZXJvIHBhZGRpbmcnXG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG5cbmZ1bmN0aW9uIHRvV29yZHNVbnNhZmUgKGJ5dGVzKSB7XG4gIHZhciByZXMgPSBjb252ZXJ0KGJ5dGVzLCA4LCA1LCB0cnVlKVxuICBpZiAoQXJyYXkuaXNBcnJheShyZXMpKSByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIHRvV29yZHMgKGJ5dGVzKSB7XG4gIHZhciByZXMgPSBjb252ZXJ0KGJ5dGVzLCA4LCA1LCB0cnVlKVxuICBpZiAoQXJyYXkuaXNBcnJheShyZXMpKSByZXR1cm4gcmVzXG5cbiAgdGhyb3cgbmV3IEVycm9yKHJlcylcbn1cblxuZnVuY3Rpb24gZnJvbVdvcmRzVW5zYWZlICh3b3Jkcykge1xuICB2YXIgcmVzID0gY29udmVydCh3b3JkcywgNSwgOCwgZmFsc2UpXG4gIGlmIChBcnJheS5pc0FycmF5KHJlcykpIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZnJvbVdvcmRzICh3b3Jkcykge1xuICB2YXIgcmVzID0gY29udmVydCh3b3JkcywgNSwgOCwgZmFsc2UpXG4gIGlmIChBcnJheS5pc0FycmF5KHJlcykpIHJldHVybiByZXNcblxuICB0aHJvdyBuZXcgRXJyb3IocmVzKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVjb2RlVW5zYWZlOiBkZWNvZGVVbnNhZmUsXG4gIGRlY29kZTogZGVjb2RlLFxuICBlbmNvZGU6IGVuY29kZSxcbiAgdG9Xb3Jkc1Vuc2FmZTogdG9Xb3Jkc1Vuc2FmZSxcbiAgdG9Xb3JkczogdG9Xb3JkcyxcbiAgZnJvbVdvcmRzVW5zYWZlOiBmcm9tV29yZHNVbnNhZmUsXG4gIGZyb21Xb3JkczogZnJvbVdvcmRzXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/bech32/index.js\n");

            /***/
        }),

        /***/ "./node_modules/bn.js/lib/bn.js":
        /*!**************************************!*\
          !*** ./node_modules/bn.js/lib/bn.js ***!
          \**************************************/
        /***/ (function (module, __unused_webpack_exports, __webpack_require__) {

            eval("/* module decorator */ module = __webpack_require__.nmd(module);\n(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {\n      Buffer = window.Buffer;\n    } else {\n      Buffer = (__webpack_require__(/*! buffer */ \"?8131\").Buffer);\n    }\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n      this.negative = 1;\n    }\n\n    if (start < number.length) {\n      if (base === 16) {\n        this._parseHex(number, start, endian);\n      } else {\n        this._parseBase(number, base, start);\n        if (endian === 'le') {\n          this._initArray(this.toArray(), base, endian);\n        }\n      }\n    }\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [number & 0x3ffffff];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [0];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this._strip();\n  };\n\n  function parseHex4Bits (string, index) {\n    var c = string.charCodeAt(index);\n    // '0' - '9'\n    if (c >= 48 && c <= 57) {\n      return c - 48;\n    // 'A' - 'F'\n    } else if (c >= 65 && c <= 70) {\n      return c - 55;\n    // 'a' - 'f'\n    } else if (c >= 97 && c <= 102) {\n      return c - 87;\n    } else {\n      assert(false, 'Invalid character in ' + string);\n    }\n  }\n\n  function parseHexByte (string, lowerBound, index) {\n    var r = parseHex4Bits(string, index);\n    if (index - 1 >= lowerBound) {\n      r |= parseHex4Bits(string, index - 1) << 4;\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start, endian) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    // 24-bits chunks\n    var off = 0;\n    var j = 0;\n\n    var w;\n    if (endian === 'be') {\n      for (i = number.length - 1; i >= start; i -= 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    } else {\n      var parseLength = number.length - start;\n      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    }\n\n    this._strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var b = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        b = c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        b = c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        b = c;\n      }\n      assert(c >= 0 && b < mul, 'Invalid character');\n      r += b;\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [0];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    this._strip();\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  function move (dest, src) {\n    dest.words = src.words;\n    dest.length = src.length;\n    dest.negative = src.negative;\n    dest.red = src.red;\n  }\n\n  BN.prototype._move = function _move (dest) {\n    move(dest, this);\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype._strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  // Check Symbol.for because not everywhere where Symbol defined\n  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility\n  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {\n    try {\n      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;\n    } catch (e) {\n      BN.prototype.inspect = inspect;\n    }\n  } else {\n    BN.prototype.inspect = inspect;\n  }\n\n  function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  }\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modrn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16, 2);\n  };\n\n  if (Buffer) {\n    BN.prototype.toBuffer = function toBuffer (endian, length) {\n      return this.toArrayLike(Buffer, endian, length);\n    };\n  }\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  var allocate = function allocate (ArrayType, size) {\n    if (ArrayType.allocUnsafe) {\n      return ArrayType.allocUnsafe(size);\n    }\n    return new ArrayType(size);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    this._strip();\n\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    var res = allocate(ArrayType, reqLength);\n    var postfix = endian === 'le' ? 'LE' : 'BE';\n    this['_toArrayLike' + postfix](res, byteLength);\n    return res;\n  };\n\n  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {\n    var position = 0;\n    var carry = 0;\n\n    for (var i = 0, shift = 0; i < this.length; i++) {\n      var word = (this.words[i] << shift) | carry;\n\n      res[position++] = word & 0xff;\n      if (position < res.length) {\n        res[position++] = (word >> 8) & 0xff;\n      }\n      if (position < res.length) {\n        res[position++] = (word >> 16) & 0xff;\n      }\n\n      if (shift === 6) {\n        if (position < res.length) {\n          res[position++] = (word >> 24) & 0xff;\n        }\n        carry = 0;\n        shift = 0;\n      } else {\n        carry = word >>> 24;\n        shift += 2;\n      }\n    }\n\n    if (position < res.length) {\n      res[position++] = carry;\n\n      while (position < res.length) {\n        res[position++] = 0;\n      }\n    }\n  };\n\n  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {\n    var position = res.length - 1;\n    var carry = 0;\n\n    for (var i = 0, shift = 0; i < this.length; i++) {\n      var word = (this.words[i] << shift) | carry;\n\n      res[position--] = word & 0xff;\n      if (position >= 0) {\n        res[position--] = (word >> 8) & 0xff;\n      }\n      if (position >= 0) {\n        res[position--] = (word >> 16) & 0xff;\n      }\n\n      if (shift === 6) {\n        if (position >= 0) {\n          res[position--] = (word >> 24) & 0xff;\n        }\n        carry = 0;\n        shift = 0;\n      } else {\n        carry = word >>> 24;\n        shift += 2;\n      }\n    }\n\n    if (position >= 0) {\n      res[position--] = carry;\n\n      while (position >= 0) {\n        res[position--] = 0;\n      }\n    }\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] >>> wbit) & 0x01;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this._strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this._strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this._strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this._strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this._strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out._strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out._strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    // Temporary disable, see https://github.com/indutny/bn.js/issues/211\n    // var fftm = new FFTM();\n    // return fftm.mulp(self, num, out);\n    return bigMulTo(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out._strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return isNegNum ? this.ineg() : this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this._strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) <= num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this._strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this._strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q._strip();\n    }\n    a._strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modrn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modrn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modrn = function modrn (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return isNegNum ? -acc : acc;\n  };\n\n  // WARNING: DEPRECATED\n  BN.prototype.modn = function modn (num) {\n    return this.modrn(num);\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    this._strip();\n    return isNegNum ? this.ineg() : this;\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this._strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      if (r.strip !== undefined) {\n        // r is a BN v4 instance\n        r.strip();\n      } else {\n        // r is a BN v5 instance\n        r._strip();\n      }\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n\n    move(a, a.umod(this.m)._forceRed(this));\n    return a;\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})( false || module, this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/bn.js/lib/bn.js\n");

            /***/
        }),

        /***/ "./node_modules/events/events.js":
        /*!***************************************!*\
          !*** ./node_modules/events/events.js ***!
          \***************************************/
        /***/ ((module) => {

            "use strict";
            eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/events/events.js\n");

            /***/
        }),

        /***/ "./node_modules/hash.js/lib/hash.js":
        /*!******************************************!*\
          !*** ./node_modules/hash.js/lib/hash.js ***!
          \******************************************/
        /***/ ((__unused_webpack_module, exports, __webpack_require__) => {

            eval("var hash = exports;\n\nhash.utils = __webpack_require__(/*! ./hash/utils */ \"./node_modules/hash.js/lib/hash/utils.js\");\nhash.common = __webpack_require__(/*! ./hash/common */ \"./node_modules/hash.js/lib/hash/common.js\");\nhash.sha = __webpack_require__(/*! ./hash/sha */ \"./node_modules/hash.js/lib/hash/sha.js\");\nhash.ripemd = __webpack_require__(/*! ./hash/ripemd */ \"./node_modules/hash.js/lib/hash/ripemd.js\");\nhash.hmac = __webpack_require__(/*! ./hash/hmac */ \"./node_modules/hash.js/lib/hash/hmac.js\");\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMsOERBQWM7QUFDbkMsY0FBYyxtQkFBTyxDQUFDLGdFQUFlO0FBQ3JDLFdBQVcsbUJBQU8sQ0FBQywwREFBWTtBQUMvQixjQUFjLG1CQUFPLENBQUMsZ0VBQWU7QUFDckMsWUFBWSxtQkFBTyxDQUFDLDREQUFhOztBQUVqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2xpbWluYWwtYXBwLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2guanM/N2Q5MiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaGFzaCA9IGV4cG9ydHM7XG5cbmhhc2gudXRpbHMgPSByZXF1aXJlKCcuL2hhc2gvdXRpbHMnKTtcbmhhc2guY29tbW9uID0gcmVxdWlyZSgnLi9oYXNoL2NvbW1vbicpO1xuaGFzaC5zaGEgPSByZXF1aXJlKCcuL2hhc2gvc2hhJyk7XG5oYXNoLnJpcGVtZCA9IHJlcXVpcmUoJy4vaGFzaC9yaXBlbWQnKTtcbmhhc2guaG1hYyA9IHJlcXVpcmUoJy4vaGFzaC9obWFjJyk7XG5cbi8vIFByb3h5IGhhc2ggZnVuY3Rpb25zIHRvIHRoZSBtYWluIG9iamVjdFxuaGFzaC5zaGExID0gaGFzaC5zaGEuc2hhMTtcbmhhc2guc2hhMjU2ID0gaGFzaC5zaGEuc2hhMjU2O1xuaGFzaC5zaGEyMjQgPSBoYXNoLnNoYS5zaGEyMjQ7XG5oYXNoLnNoYTM4NCA9IGhhc2guc2hhLnNoYTM4NDtcbmhhc2guc2hhNTEyID0gaGFzaC5zaGEuc2hhNTEyO1xuaGFzaC5yaXBlbWQxNjAgPSBoYXNoLnJpcGVtZC5yaXBlbWQxNjA7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/hash.js/lib/hash.js\n");

            /***/
        }),

        /***/ "./node_modules/hash.js/lib/hash/common.js":
        /*!*************************************************!*\
          !*** ./node_modules/hash.js/lib/hash/common.js ***!
          \*************************************************/
        /***/ ((__unused_webpack_module, exports, __webpack_require__) => {

            "use strict";
            eval("\n\nvar utils = __webpack_require__(/*! ./utils */ \"./node_modules/hash.js/lib/hash/utils.js\");\nvar assert = __webpack_require__(/*! minimalistic-assert */ \"./node_modules/minimalistic-assert/index.js\");\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9jb21tb24uanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLHlEQUFTO0FBQzdCLGFBQWEsbUJBQU8sQ0FBQyx3RUFBcUI7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0JBQW9CLGdCQUFnQjtBQUNwQztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLE9BQU87QUFDekI7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG9CQUFvQjtBQUN4Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCLG9CQUFvQjtBQUNwQztBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW1pbmFsLWFwcC8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL2NvbW1vbi5qcz9lZGM5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuZnVuY3Rpb24gQmxvY2tIYXNoKCkge1xuICB0aGlzLnBlbmRpbmcgPSBudWxsO1xuICB0aGlzLnBlbmRpbmdUb3RhbCA9IDA7XG4gIHRoaXMuYmxvY2tTaXplID0gdGhpcy5jb25zdHJ1Y3Rvci5ibG9ja1NpemU7XG4gIHRoaXMub3V0U2l6ZSA9IHRoaXMuY29uc3RydWN0b3Iub3V0U2l6ZTtcbiAgdGhpcy5obWFjU3RyZW5ndGggPSB0aGlzLmNvbnN0cnVjdG9yLmhtYWNTdHJlbmd0aDtcbiAgdGhpcy5wYWRMZW5ndGggPSB0aGlzLmNvbnN0cnVjdG9yLnBhZExlbmd0aCAvIDg7XG4gIHRoaXMuZW5kaWFuID0gJ2JpZyc7XG5cbiAgdGhpcy5fZGVsdGE4ID0gdGhpcy5ibG9ja1NpemUgLyA4O1xuICB0aGlzLl9kZWx0YTMyID0gdGhpcy5ibG9ja1NpemUgLyAzMjtcbn1cbmV4cG9ydHMuQmxvY2tIYXNoID0gQmxvY2tIYXNoO1xuXG5CbG9ja0hhc2gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShtc2csIGVuYykge1xuICAvLyBDb252ZXJ0IG1lc3NhZ2UgdG8gYXJyYXksIHBhZCBpdCwgYW5kIGpvaW4gaW50byAzMmJpdCBibG9ja3NcbiAgbXNnID0gdXRpbHMudG9BcnJheShtc2csIGVuYyk7XG4gIGlmICghdGhpcy5wZW5kaW5nKVxuICAgIHRoaXMucGVuZGluZyA9IG1zZztcbiAgZWxzZVxuICAgIHRoaXMucGVuZGluZyA9IHRoaXMucGVuZGluZy5jb25jYXQobXNnKTtcbiAgdGhpcy5wZW5kaW5nVG90YWwgKz0gbXNnLmxlbmd0aDtcblxuICAvLyBFbm91Z2ggZGF0YSwgdHJ5IHVwZGF0aW5nXG4gIGlmICh0aGlzLnBlbmRpbmcubGVuZ3RoID49IHRoaXMuX2RlbHRhOCkge1xuICAgIG1zZyA9IHRoaXMucGVuZGluZztcblxuICAgIC8vIFByb2Nlc3MgcGVuZGluZyBkYXRhIGluIGJsb2Nrc1xuICAgIHZhciByID0gbXNnLmxlbmd0aCAlIHRoaXMuX2RlbHRhODtcbiAgICB0aGlzLnBlbmRpbmcgPSBtc2cuc2xpY2UobXNnLmxlbmd0aCAtIHIsIG1zZy5sZW5ndGgpO1xuICAgIGlmICh0aGlzLnBlbmRpbmcubGVuZ3RoID09PSAwKVxuICAgICAgdGhpcy5wZW5kaW5nID0gbnVsbDtcblxuICAgIG1zZyA9IHV0aWxzLmpvaW4zMihtc2csIDAsIG1zZy5sZW5ndGggLSByLCB0aGlzLmVuZGlhbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpICs9IHRoaXMuX2RlbHRhMzIpXG4gICAgICB0aGlzLl91cGRhdGUobXNnLCBpLCBpICsgdGhpcy5fZGVsdGEzMik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkJsb2NrSGFzaC5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICB0aGlzLnVwZGF0ZSh0aGlzLl9wYWQoKSk7XG4gIGFzc2VydCh0aGlzLnBlbmRpbmcgPT09IG51bGwpO1xuXG4gIHJldHVybiB0aGlzLl9kaWdlc3QoZW5jKTtcbn07XG5cbkJsb2NrSGFzaC5wcm90b3R5cGUuX3BhZCA9IGZ1bmN0aW9uIHBhZCgpIHtcbiAgdmFyIGxlbiA9IHRoaXMucGVuZGluZ1RvdGFsO1xuICB2YXIgYnl0ZXMgPSB0aGlzLl9kZWx0YTg7XG4gIHZhciBrID0gYnl0ZXMgLSAoKGxlbiArIHRoaXMucGFkTGVuZ3RoKSAlIGJ5dGVzKTtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheShrICsgdGhpcy5wYWRMZW5ndGgpO1xuICByZXNbMF0gPSAweDgwO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGs7IGkrKylcbiAgICByZXNbaV0gPSAwO1xuXG4gIC8vIEFwcGVuZCBsZW5ndGhcbiAgbGVuIDw8PSAzO1xuICBpZiAodGhpcy5lbmRpYW4gPT09ICdiaWcnKSB7XG4gICAgZm9yICh2YXIgdCA9IDg7IHQgPCB0aGlzLnBhZExlbmd0aDsgdCsrKVxuICAgICAgcmVzW2krK10gPSAwO1xuXG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gMjQpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDE2KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiA4KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSBsZW4gJiAweGZmO1xuICB9IGVsc2Uge1xuICAgIHJlc1tpKytdID0gbGVuICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDgpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDE2KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAyNCkgJiAweGZmO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcblxuICAgIGZvciAodCA9IDg7IHQgPCB0aGlzLnBhZExlbmd0aDsgdCsrKVxuICAgICAgcmVzW2krK10gPSAwO1xuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/hash.js/lib/hash/common.js\n");

            /***/
        }),

        /***/ "./node_modules/hash.js/lib/hash/hmac.js":
        /*!***********************************************!*\
          !*** ./node_modules/hash.js/lib/hash/hmac.js ***!
          \***********************************************/
        /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            "use strict";
            eval("\n\nvar utils = __webpack_require__(/*! ./utils */ \"./node_modules/hash.js/lib/hash/utils.js\");\nvar assert = __webpack_require__(/*! minimalistic-assert */ \"./node_modules/minimalistic-assert/index.js\");\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9obWFjLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQyx5REFBUztBQUM3QixhQUFhLG1CQUFPLENBQUMsd0VBQXFCOztBQUUxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCLG9CQUFvQjtBQUMvQzs7QUFFQSxjQUFjLGdCQUFnQjtBQUM5QjtBQUNBOztBQUVBO0FBQ0EsY0FBYyxnQkFBZ0I7QUFDOUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGltaW5hbC1hcHAvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9obWFjLmpzPzIxMzciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG5mdW5jdGlvbiBIbWFjKGhhc2gsIGtleSwgZW5jKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBIbWFjKSlcbiAgICByZXR1cm4gbmV3IEhtYWMoaGFzaCwga2V5LCBlbmMpO1xuICB0aGlzLkhhc2ggPSBoYXNoO1xuICB0aGlzLmJsb2NrU2l6ZSA9IGhhc2guYmxvY2tTaXplIC8gODtcbiAgdGhpcy5vdXRTaXplID0gaGFzaC5vdXRTaXplIC8gODtcbiAgdGhpcy5pbm5lciA9IG51bGw7XG4gIHRoaXMub3V0ZXIgPSBudWxsO1xuXG4gIHRoaXMuX2luaXQodXRpbHMudG9BcnJheShrZXksIGVuYykpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBIbWFjO1xuXG5IbWFjLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQoa2V5KSB7XG4gIC8vIFNob3J0ZW4ga2V5LCBpZiBuZWVkZWRcbiAgaWYgKGtleS5sZW5ndGggPiB0aGlzLmJsb2NrU2l6ZSlcbiAgICBrZXkgPSBuZXcgdGhpcy5IYXNoKCkudXBkYXRlKGtleSkuZGlnZXN0KCk7XG4gIGFzc2VydChrZXkubGVuZ3RoIDw9IHRoaXMuYmxvY2tTaXplKTtcblxuICAvLyBBZGQgcGFkZGluZyB0byBrZXlcbiAgZm9yICh2YXIgaSA9IGtleS5sZW5ndGg7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgIGtleS5wdXNoKDApO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBrZXkubGVuZ3RoOyBpKyspXG4gICAga2V5W2ldIF49IDB4MzY7XG4gIHRoaXMuaW5uZXIgPSBuZXcgdGhpcy5IYXNoKCkudXBkYXRlKGtleSk7XG5cbiAgLy8gMHgzNiBeIDB4NWMgPSAweDZhXG4gIGZvciAoaSA9IDA7IGkgPCBrZXkubGVuZ3RoOyBpKyspXG4gICAga2V5W2ldIF49IDB4NmE7XG4gIHRoaXMub3V0ZXIgPSBuZXcgdGhpcy5IYXNoKCkudXBkYXRlKGtleSk7XG59O1xuXG5IbWFjLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUobXNnLCBlbmMpIHtcbiAgdGhpcy5pbm5lci51cGRhdGUobXNnLCBlbmMpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkhtYWMucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgdGhpcy5vdXRlci51cGRhdGUodGhpcy5pbm5lci5kaWdlc3QoKSk7XG4gIHJldHVybiB0aGlzLm91dGVyLmRpZ2VzdChlbmMpO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/hash.js/lib/hash/hmac.js\n");

            /***/
        }),

        /***/ "./node_modules/hash.js/lib/hash/ripemd.js":
        /*!*************************************************!*\
          !*** ./node_modules/hash.js/lib/hash/ripemd.js ***!
          \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./utils */ \"./node_modules/hash.js/lib/hash/utils.js\");\nvar common = __webpack_require__(/*! ./common */ \"./node_modules/hash.js/lib/hash/common.js\");\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9yaXBlbWQuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLHlEQUFTO0FBQzdCLGFBQWEsbUJBQU8sQ0FBQywyREFBVTs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsUUFBUTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW1pbmFsLWFwcC8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3JpcGVtZC5qcz9iYjQ0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG5cbnZhciByb3RsMzIgPSB1dGlscy5yb3RsMzI7XG52YXIgc3VtMzIgPSB1dGlscy5zdW0zMjtcbnZhciBzdW0zMl8zID0gdXRpbHMuc3VtMzJfMztcbnZhciBzdW0zMl80ID0gdXRpbHMuc3VtMzJfNDtcbnZhciBCbG9ja0hhc2ggPSBjb21tb24uQmxvY2tIYXNoO1xuXG5mdW5jdGlvbiBSSVBFTUQxNjAoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSSVBFTUQxNjApKVxuICAgIHJldHVybiBuZXcgUklQRU1EMTYwKCk7XG5cbiAgQmxvY2tIYXNoLmNhbGwodGhpcyk7XG5cbiAgdGhpcy5oID0gWyAweDY3NDUyMzAxLCAweGVmY2RhYjg5LCAweDk4YmFkY2ZlLCAweDEwMzI1NDc2LCAweGMzZDJlMWYwIF07XG4gIHRoaXMuZW5kaWFuID0gJ2xpdHRsZSc7XG59XG51dGlscy5pbmhlcml0cyhSSVBFTUQxNjAsIEJsb2NrSGFzaCk7XG5leHBvcnRzLnJpcGVtZDE2MCA9IFJJUEVNRDE2MDtcblxuUklQRU1EMTYwLmJsb2NrU2l6ZSA9IDUxMjtcblJJUEVNRDE2MC5vdXRTaXplID0gMTYwO1xuUklQRU1EMTYwLmhtYWNTdHJlbmd0aCA9IDE5MjtcblJJUEVNRDE2MC5wYWRMZW5ndGggPSA2NDtcblxuUklQRU1EMTYwLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKG1zZywgc3RhcnQpIHtcbiAgdmFyIEEgPSB0aGlzLmhbMF07XG4gIHZhciBCID0gdGhpcy5oWzFdO1xuICB2YXIgQyA9IHRoaXMuaFsyXTtcbiAgdmFyIEQgPSB0aGlzLmhbM107XG4gIHZhciBFID0gdGhpcy5oWzRdO1xuICB2YXIgQWggPSBBO1xuICB2YXIgQmggPSBCO1xuICB2YXIgQ2ggPSBDO1xuICB2YXIgRGggPSBEO1xuICB2YXIgRWggPSBFO1xuICBmb3IgKHZhciBqID0gMDsgaiA8IDgwOyBqKyspIHtcbiAgICB2YXIgVCA9IHN1bTMyKFxuICAgICAgcm90bDMyKFxuICAgICAgICBzdW0zMl80KEEsIGYoaiwgQiwgQywgRCksIG1zZ1tyW2pdICsgc3RhcnRdLCBLKGopKSxcbiAgICAgICAgc1tqXSksXG4gICAgICBFKTtcbiAgICBBID0gRTtcbiAgICBFID0gRDtcbiAgICBEID0gcm90bDMyKEMsIDEwKTtcbiAgICBDID0gQjtcbiAgICBCID0gVDtcbiAgICBUID0gc3VtMzIoXG4gICAgICByb3RsMzIoXG4gICAgICAgIHN1bTMyXzQoQWgsIGYoNzkgLSBqLCBCaCwgQ2gsIERoKSwgbXNnW3JoW2pdICsgc3RhcnRdLCBLaChqKSksXG4gICAgICAgIHNoW2pdKSxcbiAgICAgIEVoKTtcbiAgICBBaCA9IEVoO1xuICAgIEVoID0gRGg7XG4gICAgRGggPSByb3RsMzIoQ2gsIDEwKTtcbiAgICBDaCA9IEJoO1xuICAgIEJoID0gVDtcbiAgfVxuICBUID0gc3VtMzJfMyh0aGlzLmhbMV0sIEMsIERoKTtcbiAgdGhpcy5oWzFdID0gc3VtMzJfMyh0aGlzLmhbMl0sIEQsIEVoKTtcbiAgdGhpcy5oWzJdID0gc3VtMzJfMyh0aGlzLmhbM10sIEUsIEFoKTtcbiAgdGhpcy5oWzNdID0gc3VtMzJfMyh0aGlzLmhbNF0sIEEsIEJoKTtcbiAgdGhpcy5oWzRdID0gc3VtMzJfMyh0aGlzLmhbMF0sIEIsIENoKTtcbiAgdGhpcy5oWzBdID0gVDtcbn07XG5cblJJUEVNRDE2MC5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLCAnbGl0dGxlJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmgsICdsaXR0bGUnKTtcbn07XG5cbmZ1bmN0aW9uIGYoaiwgeCwgeSwgeikge1xuICBpZiAoaiA8PSAxNSlcbiAgICByZXR1cm4geCBeIHkgXiB6O1xuICBlbHNlIGlmIChqIDw9IDMxKVxuICAgIHJldHVybiAoeCAmIHkpIHwgKCh+eCkgJiB6KTtcbiAgZWxzZSBpZiAoaiA8PSA0NylcbiAgICByZXR1cm4gKHggfCAofnkpKSBeIHo7XG4gIGVsc2UgaWYgKGogPD0gNjMpXG4gICAgcmV0dXJuICh4ICYgeikgfCAoeSAmICh+eikpO1xuICBlbHNlXG4gICAgcmV0dXJuIHggXiAoeSB8ICh+eikpO1xufVxuXG5mdW5jdGlvbiBLKGopIHtcbiAgaWYgKGogPD0gMTUpXG4gICAgcmV0dXJuIDB4MDAwMDAwMDA7XG4gIGVsc2UgaWYgKGogPD0gMzEpXG4gICAgcmV0dXJuIDB4NWE4Mjc5OTk7XG4gIGVsc2UgaWYgKGogPD0gNDcpXG4gICAgcmV0dXJuIDB4NmVkOWViYTE7XG4gIGVsc2UgaWYgKGogPD0gNjMpXG4gICAgcmV0dXJuIDB4OGYxYmJjZGM7XG4gIGVsc2VcbiAgICByZXR1cm4gMHhhOTUzZmQ0ZTtcbn1cblxuZnVuY3Rpb24gS2goaikge1xuICBpZiAoaiA8PSAxNSlcbiAgICByZXR1cm4gMHg1MGEyOGJlNjtcbiAgZWxzZSBpZiAoaiA8PSAzMSlcbiAgICByZXR1cm4gMHg1YzRkZDEyNDtcbiAgZWxzZSBpZiAoaiA8PSA0NylcbiAgICByZXR1cm4gMHg2ZDcwM2VmMztcbiAgZWxzZSBpZiAoaiA8PSA2MylcbiAgICByZXR1cm4gMHg3YTZkNzZlOTtcbiAgZWxzZVxuICAgIHJldHVybiAweDAwMDAwMDAwO1xufVxuXG52YXIgciA9IFtcbiAgMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSxcbiAgNywgNCwgMTMsIDEsIDEwLCA2LCAxNSwgMywgMTIsIDAsIDksIDUsIDIsIDE0LCAxMSwgOCxcbiAgMywgMTAsIDE0LCA0LCA5LCAxNSwgOCwgMSwgMiwgNywgMCwgNiwgMTMsIDExLCA1LCAxMixcbiAgMSwgOSwgMTEsIDEwLCAwLCA4LCAxMiwgNCwgMTMsIDMsIDcsIDE1LCAxNCwgNSwgNiwgMixcbiAgNCwgMCwgNSwgOSwgNywgMTIsIDIsIDEwLCAxNCwgMSwgMywgOCwgMTEsIDYsIDE1LCAxM1xuXTtcblxudmFyIHJoID0gW1xuICA1LCAxNCwgNywgMCwgOSwgMiwgMTEsIDQsIDEzLCA2LCAxNSwgOCwgMSwgMTAsIDMsIDEyLFxuICA2LCAxMSwgMywgNywgMCwgMTMsIDUsIDEwLCAxNCwgMTUsIDgsIDEyLCA0LCA5LCAxLCAyLFxuICAxNSwgNSwgMSwgMywgNywgMTQsIDYsIDksIDExLCA4LCAxMiwgMiwgMTAsIDAsIDQsIDEzLFxuICA4LCA2LCA0LCAxLCAzLCAxMSwgMTUsIDAsIDUsIDEyLCAyLCAxMywgOSwgNywgMTAsIDE0LFxuICAxMiwgMTUsIDEwLCA0LCAxLCA1LCA4LCA3LCA2LCAyLCAxMywgMTQsIDAsIDMsIDksIDExXG5dO1xuXG52YXIgcyA9IFtcbiAgMTEsIDE0LCAxNSwgMTIsIDUsIDgsIDcsIDksIDExLCAxMywgMTQsIDE1LCA2LCA3LCA5LCA4LFxuICA3LCA2LCA4LCAxMywgMTEsIDksIDcsIDE1LCA3LCAxMiwgMTUsIDksIDExLCA3LCAxMywgMTIsXG4gIDExLCAxMywgNiwgNywgMTQsIDksIDEzLCAxNSwgMTQsIDgsIDEzLCA2LCA1LCAxMiwgNywgNSxcbiAgMTEsIDEyLCAxNCwgMTUsIDE0LCAxNSwgOSwgOCwgOSwgMTQsIDUsIDYsIDgsIDYsIDUsIDEyLFxuICA5LCAxNSwgNSwgMTEsIDYsIDgsIDEzLCAxMiwgNSwgMTIsIDEzLCAxNCwgMTEsIDgsIDUsIDZcbl07XG5cbnZhciBzaCA9IFtcbiAgOCwgOSwgOSwgMTEsIDEzLCAxNSwgMTUsIDUsIDcsIDcsIDgsIDExLCAxNCwgMTQsIDEyLCA2LFxuICA5LCAxMywgMTUsIDcsIDEyLCA4LCA5LCAxMSwgNywgNywgMTIsIDcsIDYsIDE1LCAxMywgMTEsXG4gIDksIDcsIDE1LCAxMSwgOCwgNiwgNiwgMTQsIDEyLCAxMywgNSwgMTQsIDEzLCAxMywgNywgNSxcbiAgMTUsIDUsIDgsIDExLCAxNCwgMTQsIDYsIDE0LCA2LCA5LCAxMiwgOSwgMTIsIDUsIDE1LCA4LFxuICA4LCA1LCAxMiwgOSwgMTIsIDUsIDE0LCA2LCA4LCAxMywgNiwgNSwgMTUsIDEzLCAxMSwgMTFcbl07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/hash.js/lib/hash/ripemd.js\n");

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha.js":
/*!**********************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nexports.sha1 = __webpack_require__(/*! ./sha/1 */ \"./node_modules/hash.js/lib/hash/sha/1.js\");\nexports.sha224 = __webpack_require__(/*! ./sha/224 */ \"./node_modules/hash.js/lib/hash/sha/224.js\");\nexports.sha256 = __webpack_require__(/*! ./sha/256 */ \"./node_modules/hash.js/lib/hash/sha/256.js\");\nexports.sha384 = __webpack_require__(/*! ./sha/384 */ \"./node_modules/hash.js/lib/hash/sha/384.js\");\nexports.sha512 = __webpack_require__(/*! ./sha/512 */ \"./node_modules/hash.js/lib/hash/sha/512.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsNkZBQWlDO0FBQ2pDLG1HQUFxQztBQUNyQyxtR0FBcUM7QUFDckMsbUdBQXFDO0FBQ3JDLG1HQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpbWluYWwtYXBwLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLmpzPzU5MTkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLnNoYTEgPSByZXF1aXJlKCcuL3NoYS8xJyk7XG5leHBvcnRzLnNoYTIyNCA9IHJlcXVpcmUoJy4vc2hhLzIyNCcpO1xuZXhwb3J0cy5zaGEyNTYgPSByZXF1aXJlKCcuL3NoYS8yNTYnKTtcbmV4cG9ydHMuc2hhMzg0ID0gcmVxdWlyZSgnLi9zaGEvMzg0Jyk7XG5leHBvcnRzLnNoYTUxMiA9IHJlcXVpcmUoJy4vc2hhLzUxMicpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/hash.js/lib/hash/sha.js\n");

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/1.js":
/*!************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/1.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../utils */ \"./node_modules/hash.js/lib/hash/utils.js\");\nvar common = __webpack_require__(/*! ../common */ \"./node_modules/hash.js/lib/hash/common.js\");\nvar shaCommon = __webpack_require__(/*! ./common */ \"./node_modules/hash.js/lib/hash/sha/common.js\");\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixZQUFZLG1CQUFPLENBQUMsMERBQVU7QUFDOUIsYUFBYSxtQkFBTyxDQUFDLDREQUFXO0FBQ2hDLGdCQUFnQixtQkFBTyxDQUFDLCtEQUFVOztBQUVsQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGtCQUFrQixRQUFRO0FBQzFCOztBQUVBLFFBQVEsY0FBYztBQUN0Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGNBQWMsY0FBYztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW1pbmFsLWFwcC8uL25vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8xLmpzPzEzZTIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xudmFyIHNoYUNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG5cbnZhciByb3RsMzIgPSB1dGlscy5yb3RsMzI7XG52YXIgc3VtMzIgPSB1dGlscy5zdW0zMjtcbnZhciBzdW0zMl81ID0gdXRpbHMuc3VtMzJfNTtcbnZhciBmdF8xID0gc2hhQ29tbW9uLmZ0XzE7XG52YXIgQmxvY2tIYXNoID0gY29tbW9uLkJsb2NrSGFzaDtcblxudmFyIHNoYTFfSyA9IFtcbiAgMHg1QTgyNzk5OSwgMHg2RUQ5RUJBMSxcbiAgMHg4RjFCQkNEQywgMHhDQTYyQzFENlxuXTtcblxuZnVuY3Rpb24gU0hBMSgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTEpKVxuICAgIHJldHVybiBuZXcgU0hBMSgpO1xuXG4gIEJsb2NrSGFzaC5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMHg2NzQ1MjMwMSwgMHhlZmNkYWI4OSwgMHg5OGJhZGNmZSxcbiAgICAweDEwMzI1NDc2LCAweGMzZDJlMWYwIF07XG4gIHRoaXMuVyA9IG5ldyBBcnJheSg4MCk7XG59XG5cbnV0aWxzLmluaGVyaXRzKFNIQTEsIEJsb2NrSGFzaCk7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTE7XG5cblNIQTEuYmxvY2tTaXplID0gNTEyO1xuU0hBMS5vdXRTaXplID0gMTYwO1xuU0hBMS5obWFjU3RyZW5ndGggPSA4MDtcblNIQTEucGFkTGVuZ3RoID0gNjQ7XG5cblNIQTEucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKG1zZywgc3RhcnQpIHtcbiAgdmFyIFcgPSB0aGlzLlc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKVxuICAgIFdbaV0gPSBtc2dbc3RhcnQgKyBpXTtcblxuICBmb3IoOyBpIDwgVy5sZW5ndGg7IGkrKylcbiAgICBXW2ldID0gcm90bDMyKFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl0sIDEpO1xuXG4gIHZhciBhID0gdGhpcy5oWzBdO1xuICB2YXIgYiA9IHRoaXMuaFsxXTtcbiAgdmFyIGMgPSB0aGlzLmhbMl07XG4gIHZhciBkID0gdGhpcy5oWzNdO1xuICB2YXIgZSA9IHRoaXMuaFs0XTtcblxuICBmb3IgKGkgPSAwOyBpIDwgVy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzID0gfn4oaSAvIDIwKTtcbiAgICB2YXIgdCA9IHN1bTMyXzUocm90bDMyKGEsIDUpLCBmdF8xKHMsIGIsIGMsIGQpLCBlLCBXW2ldLCBzaGExX0tbc10pO1xuICAgIGUgPSBkO1xuICAgIGQgPSBjO1xuICAgIGMgPSByb3RsMzIoYiwgMzApO1xuICAgIGIgPSBhO1xuICAgIGEgPSB0O1xuICB9XG5cbiAgdGhpcy5oWzBdID0gc3VtMzIodGhpcy5oWzBdLCBhKTtcbiAgdGhpcy5oWzFdID0gc3VtMzIodGhpcy5oWzFdLCBiKTtcbiAgdGhpcy5oWzJdID0gc3VtMzIodGhpcy5oWzJdLCBjKTtcbiAgdGhpcy5oWzNdID0gc3VtMzIodGhpcy5oWzNdLCBkKTtcbiAgdGhpcy5oWzRdID0gc3VtMzIodGhpcy5oWzRdLCBlKTtcbn07XG5cblNIQTEucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaCwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLCAnYmlnJyk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/hash.js/lib/hash/sha/1.js\n");

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/224.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/224.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../utils */ \"./node_modules/hash.js/lib/hash/utils.js\");\nvar SHA256 = __webpack_require__(/*! ./256 */ \"./node_modules/hash.js/lib/hash/sha/256.js\");\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMjI0LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQywwREFBVTtBQUM5QixhQUFhLG1CQUFPLENBQUMseURBQU87O0FBRTVCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2xpbWluYWwtYXBwLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzIyNC5qcz8wN2YyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBTSEEyNTYgPSByZXF1aXJlKCcuLzI1NicpO1xuXG5mdW5jdGlvbiBTSEEyMjQoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEEyMjQpKVxuICAgIHJldHVybiBuZXcgU0hBMjI0KCk7XG5cbiAgU0hBMjU2LmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFtcbiAgICAweGMxMDU5ZWQ4LCAweDM2N2NkNTA3LCAweDMwNzBkZDE3LCAweGY3MGU1OTM5LFxuICAgIDB4ZmZjMDBiMzEsIDB4Njg1ODE1MTEsIDB4NjRmOThmYTcsIDB4YmVmYTRmYTQgXTtcbn1cbnV0aWxzLmluaGVyaXRzKFNIQTIyNCwgU0hBMjU2KTtcbm1vZHVsZS5leHBvcnRzID0gU0hBMjI0O1xuXG5TSEEyMjQuYmxvY2tTaXplID0gNTEyO1xuU0hBMjI0Lm91dFNpemUgPSAyMjQ7XG5TSEEyMjQuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBMjI0LnBhZExlbmd0aCA9IDY0O1xuXG5TSEEyMjQucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIC8vIEp1c3QgdHJ1bmNhdGUgb3V0cHV0XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaC5zbGljZSgwLCA3KSwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLnNsaWNlKDAsIDcpLCAnYmlnJyk7XG59O1xuXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/hash.js/lib/hash/sha/224.js\n");

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/256.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/256.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../utils */ \"./node_modules/hash.js/lib/hash/utils.js\");\nvar common = __webpack_require__(/*! ../common */ \"./node_modules/hash.js/lib/hash/common.js\");\nvar shaCommon = __webpack_require__(/*! ./common */ \"./node_modules/hash.js/lib/hash/sha/common.js\");\nvar assert = __webpack_require__(/*! minimalistic-assert */ \"./node_modules/minimalistic-assert/index.js\");\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMjU2LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQywwREFBVTtBQUM5QixhQUFhLG1CQUFPLENBQUMsNERBQVc7QUFDaEMsZ0JBQWdCLG1CQUFPLENBQUMsK0RBQVU7QUFDbEMsYUFBYSxtQkFBTyxDQUFDLHdFQUFxQjs7QUFFMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxrQkFBa0IsUUFBUTtBQUMxQjtBQUNBLFNBQVMsY0FBYztBQUN2Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyxjQUFjO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2xpbWluYWwtYXBwLy4vbm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzI1Ni5qcz82ZWVkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBjb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcbnZhciBzaGFDb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxudmFyIHN1bTMyID0gdXRpbHMuc3VtMzI7XG52YXIgc3VtMzJfNCA9IHV0aWxzLnN1bTMyXzQ7XG52YXIgc3VtMzJfNSA9IHV0aWxzLnN1bTMyXzU7XG52YXIgY2gzMiA9IHNoYUNvbW1vbi5jaDMyO1xudmFyIG1hajMyID0gc2hhQ29tbW9uLm1hajMyO1xudmFyIHMwXzI1NiA9IHNoYUNvbW1vbi5zMF8yNTY7XG52YXIgczFfMjU2ID0gc2hhQ29tbW9uLnMxXzI1NjtcbnZhciBnMF8yNTYgPSBzaGFDb21tb24uZzBfMjU2O1xudmFyIGcxXzI1NiA9IHNoYUNvbW1vbi5nMV8yNTY7XG5cbnZhciBCbG9ja0hhc2ggPSBjb21tb24uQmxvY2tIYXNoO1xuXG52YXIgc2hhMjU2X0sgPSBbXG4gIDB4NDI4YTJmOTgsIDB4NzEzNzQ0OTEsIDB4YjVjMGZiY2YsIDB4ZTliNWRiYTUsXG4gIDB4Mzk1NmMyNWIsIDB4NTlmMTExZjEsIDB4OTIzZjgyYTQsIDB4YWIxYzVlZDUsXG4gIDB4ZDgwN2FhOTgsIDB4MTI4MzViMDEsIDB4MjQzMTg1YmUsIDB4NTUwYzdkYzMsXG4gIDB4NzJiZTVkNzQsIDB4ODBkZWIxZmUsIDB4OWJkYzA2YTcsIDB4YzE5YmYxNzQsXG4gIDB4ZTQ5YjY5YzEsIDB4ZWZiZTQ3ODYsIDB4MGZjMTlkYzYsIDB4MjQwY2ExY2MsXG4gIDB4MmRlOTJjNmYsIDB4NGE3NDg0YWEsIDB4NWNiMGE5ZGMsIDB4NzZmOTg4ZGEsXG4gIDB4OTgzZTUxNTIsIDB4YTgzMWM2NmQsIDB4YjAwMzI3YzgsIDB4YmY1OTdmYzcsXG4gIDB4YzZlMDBiZjMsIDB4ZDVhNzkxNDcsIDB4MDZjYTYzNTEsIDB4MTQyOTI5NjcsXG4gIDB4MjdiNzBhODUsIDB4MmUxYjIxMzgsIDB4NGQyYzZkZmMsIDB4NTMzODBkMTMsXG4gIDB4NjUwYTczNTQsIDB4NzY2YTBhYmIsIDB4ODFjMmM5MmUsIDB4OTI3MjJjODUsXG4gIDB4YTJiZmU4YTEsIDB4YTgxYTY2NGIsIDB4YzI0YjhiNzAsIDB4Yzc2YzUxYTMsXG4gIDB4ZDE5MmU4MTksIDB4ZDY5OTA2MjQsIDB4ZjQwZTM1ODUsIDB4MTA2YWEwNzAsXG4gIDB4MTlhNGMxMTYsIDB4MWUzNzZjMDgsIDB4Mjc0ODc3NGMsIDB4MzRiMGJjYjUsXG4gIDB4MzkxYzBjYjMsIDB4NGVkOGFhNGEsIDB4NWI5Y2NhNGYsIDB4NjgyZTZmZjMsXG4gIDB4NzQ4ZjgyZWUsIDB4NzhhNTYzNmYsIDB4ODRjODc4MTQsIDB4OGNjNzAyMDgsXG4gIDB4OTBiZWZmZmEsIDB4YTQ1MDZjZWIsIDB4YmVmOWEzZjcsIDB4YzY3MTc4ZjJcbl07XG5cbmZ1bmN0aW9uIFNIQTI1NigpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTI1NikpXG4gICAgcmV0dXJuIG5ldyBTSEEyNTYoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gW1xuICAgIDB4NmEwOWU2NjcsIDB4YmI2N2FlODUsIDB4M2M2ZWYzNzIsIDB4YTU0ZmY1M2EsXG4gICAgMHg1MTBlNTI3ZiwgMHg5YjA1Njg4YywgMHgxZjgzZDlhYiwgMHg1YmUwY2QxOVxuICBdO1xuICB0aGlzLmsgPSBzaGEyNTZfSztcbiAgdGhpcy5XID0gbmV3IEFycmF5KDY0KTtcbn1cbnV0aWxzLmluaGVyaXRzKFNIQTI1NiwgQmxvY2tIYXNoKTtcbm1vZHVsZS5leHBvcnRzID0gU0hBMjU2O1xuXG5TSEEyNTYuYmxvY2tTaXplID0gNTEyO1xuU0hBMjU2Lm91dFNpemUgPSAyNTY7XG5TSEEyNTYuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBMjU2LnBhZExlbmd0aCA9IDY0O1xuXG5TSEEyNTYucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKG1zZywgc3RhcnQpIHtcbiAgdmFyIFcgPSB0aGlzLlc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKVxuICAgIFdbaV0gPSBtc2dbc3RhcnQgKyBpXTtcbiAgZm9yICg7IGkgPCBXLmxlbmd0aDsgaSsrKVxuICAgIFdbaV0gPSBzdW0zMl80KGcxXzI1NihXW2kgLSAyXSksIFdbaSAtIDddLCBnMF8yNTYoV1tpIC0gMTVdKSwgV1tpIC0gMTZdKTtcblxuICB2YXIgYSA9IHRoaXMuaFswXTtcbiAgdmFyIGIgPSB0aGlzLmhbMV07XG4gIHZhciBjID0gdGhpcy5oWzJdO1xuICB2YXIgZCA9IHRoaXMuaFszXTtcbiAgdmFyIGUgPSB0aGlzLmhbNF07XG4gIHZhciBmID0gdGhpcy5oWzVdO1xuICB2YXIgZyA9IHRoaXMuaFs2XTtcbiAgdmFyIGggPSB0aGlzLmhbN107XG5cbiAgYXNzZXJ0KHRoaXMuay5sZW5ndGggPT09IFcubGVuZ3RoKTtcbiAgZm9yIChpID0gMDsgaSA8IFcubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgVDEgPSBzdW0zMl81KGgsIHMxXzI1NihlKSwgY2gzMihlLCBmLCBnKSwgdGhpcy5rW2ldLCBXW2ldKTtcbiAgICB2YXIgVDIgPSBzdW0zMihzMF8yNTYoYSksIG1hajMyKGEsIGIsIGMpKTtcbiAgICBoID0gZztcbiAgICBnID0gZjtcbiAgICBmID0gZTtcbiAgICBlID0gc3VtMzIoZCwgVDEpO1xuICAgIGQgPSBjO1xuICAgIGMgPSBiO1xuICAgIGIgPSBhO1xuICAgIGEgPSBzdW0zMihUMSwgVDIpO1xuICB9XG5cbiAgdGhpcy5oWzBdID0gc3VtMzIodGhpcy5oWzBdLCBhKTtcbiAgdGhpcy5oWzFdID0gc3VtMzIodGhpcy5oWzFdLCBiKTtcbiAgdGhpcy5oWzJdID0gc3VtMzIodGhpcy5oWzJdLCBjKTtcbiAgdGhpcy5oWzNdID0gc3VtMzIodGhpcy5oWzNdLCBkKTtcbiAgdGhpcy5oWzRdID0gc3VtMzIodGhpcy5oWzRdLCBlKTtcbiAgdGhpcy5oWzVdID0gc3VtMzIodGhpcy5oWzVdLCBmKTtcbiAgdGhpcy5oWzZdID0gc3VtMzIodGhpcy5oWzZdLCBnKTtcbiAgdGhpcy5oWzddID0gc3VtMzIodGhpcy5oWzddLCBoKTtcbn07XG5cblNIQTI1Ni5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmgsICdiaWcnKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/hash.js/lib/hash/sha/256.js\n");

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/384.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/384.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../utils */ \"./node_modules/hash.js/lib/hash/utils.js\");\n\nvar SHA512 = __webpack_require__(/*! ./512 */ \"./node_modules/hash.js/lib/hash/sha/512.js\");\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMzg0LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQywwREFBVTs7QUFFOUIsYUFBYSxtQkFBTyxDQUFDLHlEQUFPOztBQUU1QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGltaW5hbC1hcHAvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMzg0LmpzPzhiOTUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG52YXIgU0hBNTEyID0gcmVxdWlyZSgnLi81MTInKTtcblxuZnVuY3Rpb24gU0hBMzg0KCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBMzg0KSlcbiAgICByZXR1cm4gbmV3IFNIQTM4NCgpO1xuXG4gIFNIQTUxMi5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMHhjYmJiOWQ1ZCwgMHhjMTA1OWVkOCxcbiAgICAweDYyOWEyOTJhLCAweDM2N2NkNTA3LFxuICAgIDB4OTE1OTAxNWEsIDB4MzA3MGRkMTcsXG4gICAgMHgxNTJmZWNkOCwgMHhmNzBlNTkzOSxcbiAgICAweDY3MzMyNjY3LCAweGZmYzAwYjMxLFxuICAgIDB4OGViNDRhODcsIDB4Njg1ODE1MTEsXG4gICAgMHhkYjBjMmUwZCwgMHg2NGY5OGZhNyxcbiAgICAweDQ3YjU0ODFkLCAweGJlZmE0ZmE0IF07XG59XG51dGlscy5pbmhlcml0cyhTSEEzODQsIFNIQTUxMik7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTM4NDtcblxuU0hBMzg0LmJsb2NrU2l6ZSA9IDEwMjQ7XG5TSEEzODQub3V0U2l6ZSA9IDM4NDtcblNIQTM4NC5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEEzODQucGFkTGVuZ3RoID0gMTI4O1xuXG5TSEEzODQucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaC5zbGljZSgwLCAxMiksICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaC5zbGljZSgwLCAxMiksICdiaWcnKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/hash.js/lib/hash/sha/384.js\n");

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/512.js":
        /*!**************************************************!*\
          !*** ./node_modules/hash.js/lib/hash/sha/512.js ***!
          \**************************************************/
        /***/ ((module, __unused_webpack_exports, __webpack_require__) => {

            "use strict";
            eval("\n\nvar utils = __webpack_require__(/*! ../utils */ \"./node_modules/hash.js/lib/hash/utils.js\");\nvar common = __webpack_require__(/*! ../common */ \"./node_modules/hash.js/lib/hash/common.js\");\nvar assert = __webpack_require__(/*! minimalistic-assert */ \"./node_modules/minimalistic-assert/index.js\");\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/hash.js/lib/hash/sha/512.js\n");

            /***/
        }),

        /***/ "./node_modules/hash.js/lib/hash/sha/common.js":
        /*!*****************************************************!*\
          !*** ./node_modules/hash.js/lib/hash/sha/common.js ***!
          \*****************************************************/
        /***/ ((__unused_webpack_module, exports, __webpack_require__) => {

            "use strict";
            eval("\n\nvar utils = __webpack_require__(/*! ../utils */ \"./node_modules/hash.js/lib/hash/utils.js\");\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvY29tbW9uLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQywwREFBVTtBQUM5Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQSxZQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0EsV0FBVzs7QUFFWDtBQUNBO0FBQ0E7QUFDQSxjQUFjOztBQUVkO0FBQ0E7QUFDQTtBQUNBLGNBQWM7O0FBRWQ7QUFDQTtBQUNBO0FBQ0EsY0FBYzs7QUFFZDtBQUNBO0FBQ0E7QUFDQSxjQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGltaW5hbC1hcHAvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvY29tbW9uLmpzP2FhNTYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIHJvdHIzMiA9IHV0aWxzLnJvdHIzMjtcblxuZnVuY3Rpb24gZnRfMShzLCB4LCB5LCB6KSB7XG4gIGlmIChzID09PSAwKVxuICAgIHJldHVybiBjaDMyKHgsIHksIHopO1xuICBpZiAocyA9PT0gMSB8fCBzID09PSAzKVxuICAgIHJldHVybiBwMzIoeCwgeSwgeik7XG4gIGlmIChzID09PSAyKVxuICAgIHJldHVybiBtYWozMih4LCB5LCB6KTtcbn1cbmV4cG9ydHMuZnRfMSA9IGZ0XzE7XG5cbmZ1bmN0aW9uIGNoMzIoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSBeICgofngpICYgeik7XG59XG5leHBvcnRzLmNoMzIgPSBjaDMyO1xuXG5mdW5jdGlvbiBtYWozMih4LCB5LCB6KSB7XG4gIHJldHVybiAoeCAmIHkpIF4gKHggJiB6KSBeICh5ICYgeik7XG59XG5leHBvcnRzLm1hajMyID0gbWFqMzI7XG5cbmZ1bmN0aW9uIHAzMih4LCB5LCB6KSB7XG4gIHJldHVybiB4IF4geSBeIHo7XG59XG5leHBvcnRzLnAzMiA9IHAzMjtcblxuZnVuY3Rpb24gczBfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCAyKSBeIHJvdHIzMih4LCAxMykgXiByb3RyMzIoeCwgMjIpO1xufVxuZXhwb3J0cy5zMF8yNTYgPSBzMF8yNTY7XG5cbmZ1bmN0aW9uIHMxXzI1Nih4KSB7XG4gIHJldHVybiByb3RyMzIoeCwgNikgXiByb3RyMzIoeCwgMTEpIF4gcm90cjMyKHgsIDI1KTtcbn1cbmV4cG9ydHMuczFfMjU2ID0gczFfMjU2O1xuXG5mdW5jdGlvbiBnMF8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDcpIF4gcm90cjMyKHgsIDE4KSBeICh4ID4+PiAzKTtcbn1cbmV4cG9ydHMuZzBfMjU2ID0gZzBfMjU2O1xuXG5mdW5jdGlvbiBnMV8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDE3KSBeIHJvdHIzMih4LCAxOSkgXiAoeCA+Pj4gMTApO1xufVxuZXhwb3J0cy5nMV8yNTYgPSBnMV8yNTY7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/hash.js/lib/hash/sha/common.js\n");

            /***/
        }),

        /***/ "./node_modules/hash.js/lib/hash/utils.js":
        /*!************************************************!*\
          !*** ./node_modules/hash.js/lib/hash/utils.js ***!
          \************************************************/
        /***/ ((__unused_webpack_module, exports, __webpack_require__) => {

            "use strict";
            eval("\n\nvar assert = __webpack_require__(/*! minimalistic-assert */ \"./node_modules/minimalistic-assert/index.js\");\nvar inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC91dGlscy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixhQUFhLG1CQUFPLENBQUMsd0VBQXFCO0FBQzFDLGVBQWUsbUJBQU8sQ0FBQyw2REFBVTs7QUFFakMsZ0JBQWdCOztBQUVoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsZ0JBQWdCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsZ0JBQWdCO0FBQ2xDO0FBQ0E7QUFDQSxJQUFJO0FBQ0osZ0JBQWdCLGdCQUFnQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7O0FBRWY7QUFDQTtBQUNBLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsYUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTtBQUNBLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlOztBQUVmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixnQkFBZ0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYzs7QUFFZDtBQUNBO0FBQ0EseUJBQXlCLGdCQUFnQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7O0FBRWY7QUFDQTtBQUNBO0FBQ0EsY0FBYzs7QUFFZDtBQUNBO0FBQ0E7QUFDQSxjQUFjOztBQUVkO0FBQ0E7QUFDQTtBQUNBLGFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0EsZUFBZTs7QUFFZjtBQUNBO0FBQ0E7QUFDQSxlQUFlOztBQUVmO0FBQ0E7QUFDQTtBQUNBLGVBQWU7O0FBRWY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7O0FBRWhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCOztBQUVoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCOztBQUVsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjs7QUFFbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7O0FBRWxCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQjs7QUFFbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7O0FBRWhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGltaW5hbC1hcHAvLi9ub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC91dGlscy5qcz9jM2MwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmV4cG9ydHMuaW5oZXJpdHMgPSBpbmhlcml0cztcblxuZnVuY3Rpb24gaXNTdXJyb2dhdGVQYWlyKG1zZywgaSkge1xuICBpZiAoKG1zZy5jaGFyQ29kZUF0KGkpICYgMHhGQzAwKSAhPT0gMHhEODAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChpIDwgMCB8fCBpICsgMSA+PSBtc2cubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAobXNnLmNoYXJDb2RlQXQoaSArIDEpICYgMHhGQzAwKSA9PT0gMHhEQzAwO1xufVxuXG5mdW5jdGlvbiB0b0FycmF5KG1zZywgZW5jKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KG1zZykpXG4gICAgcmV0dXJuIG1zZy5zbGljZSgpO1xuICBpZiAoIW1zZylcbiAgICByZXR1cm4gW107XG4gIHZhciByZXMgPSBbXTtcbiAgaWYgKHR5cGVvZiBtc2cgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKCFlbmMpIHtcbiAgICAgIC8vIEluc3BpcmVkIGJ5IHN0cmluZ1RvVXRmOEJ5dGVBcnJheSgpIGluIGNsb3N1cmUtbGlicmFyeSBieSBHb29nbGVcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1saWJyYXJ5L2Jsb2IvODU5OGQ4NzI0MmFmNTlhYWMyMzMyNzA3NDJjODk4NGUyYjJiZGJlMC9jbG9zdXJlL2dvb2cvY3J5cHQvY3J5cHQuanMjTDExNy1MMTQzXG4gICAgICAvLyBBcGFjaGUgTGljZW5zZSAyLjBcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1saWJyYXJ5L2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAgICAgIHZhciBwID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjID0gbXNnLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmIChjIDwgMTI4KSB7XG4gICAgICAgICAgcmVzW3ArK10gPSBjO1xuICAgICAgICB9IGVsc2UgaWYgKGMgPCAyMDQ4KSB7XG4gICAgICAgICAgcmVzW3ArK10gPSAoYyA+PiA2KSB8IDE5MjtcbiAgICAgICAgICByZXNbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xuICAgICAgICB9IGVsc2UgaWYgKGlzU3Vycm9nYXRlUGFpcihtc2csIGkpKSB7XG4gICAgICAgICAgYyA9IDB4MTAwMDAgKyAoKGMgJiAweDAzRkYpIDw8IDEwKSArIChtc2cuY2hhckNvZGVBdCgrK2kpICYgMHgwM0ZGKTtcbiAgICAgICAgICByZXNbcCsrXSA9IChjID4+IDE4KSB8IDI0MDtcbiAgICAgICAgICByZXNbcCsrXSA9ICgoYyA+PiAxMikgJiA2MykgfCAxMjg7XG4gICAgICAgICAgcmVzW3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XG4gICAgICAgICAgcmVzW3ArK10gPSAoYyAmIDYzKSB8IDEyODtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNbcCsrXSA9IChjID4+IDEyKSB8IDIyNDtcbiAgICAgICAgICByZXNbcCsrXSA9ICgoYyA+PiA2KSAmIDYzKSB8IDEyODtcbiAgICAgICAgICByZXNbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbmMgPT09ICdoZXgnKSB7XG4gICAgICBtc2cgPSBtc2cucmVwbGFjZSgvW15hLXowLTldKy9pZywgJycpO1xuICAgICAgaWYgKG1zZy5sZW5ndGggJSAyICE9PSAwKVxuICAgICAgICBtc2cgPSAnMCcgKyBtc2c7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSArPSAyKVxuICAgICAgICByZXMucHVzaChwYXJzZUludChtc2dbaV0gKyBtc2dbaSArIDFdLCAxNikpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKVxuICAgICAgcmVzW2ldID0gbXNnW2ldIHwgMDtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy50b0FycmF5ID0gdG9BcnJheTtcblxuZnVuY3Rpb24gdG9IZXgobXNnKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgcmVzICs9IHplcm8yKG1zZ1tpXS50b1N0cmluZygxNikpO1xuICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy50b0hleCA9IHRvSGV4O1xuXG5mdW5jdGlvbiBodG9ubCh3KSB7XG4gIHZhciByZXMgPSAodyA+Pj4gMjQpIHxcbiAgICAgICAgICAgICgodyA+Pj4gOCkgJiAweGZmMDApIHxcbiAgICAgICAgICAgICgodyA8PCA4KSAmIDB4ZmYwMDAwKSB8XG4gICAgICAgICAgICAoKHcgJiAweGZmKSA8PCAyNCk7XG4gIHJldHVybiByZXMgPj4+IDA7XG59XG5leHBvcnRzLmh0b25sID0gaHRvbmw7XG5cbmZ1bmN0aW9uIHRvSGV4MzIobXNnLCBlbmRpYW4pIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB3ID0gbXNnW2ldO1xuICAgIGlmIChlbmRpYW4gPT09ICdsaXR0bGUnKVxuICAgICAgdyA9IGh0b25sKHcpO1xuICAgIHJlcyArPSB6ZXJvOCh3LnRvU3RyaW5nKDE2KSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMudG9IZXgzMiA9IHRvSGV4MzI7XG5cbmZ1bmN0aW9uIHplcm8yKHdvcmQpIHtcbiAgaWYgKHdvcmQubGVuZ3RoID09PSAxKVxuICAgIHJldHVybiAnMCcgKyB3b3JkO1xuICBlbHNlXG4gICAgcmV0dXJuIHdvcmQ7XG59XG5leHBvcnRzLnplcm8yID0gemVybzI7XG5cbmZ1bmN0aW9uIHplcm84KHdvcmQpIHtcbiAgaWYgKHdvcmQubGVuZ3RoID09PSA3KVxuICAgIHJldHVybiAnMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gNilcbiAgICByZXR1cm4gJzAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSA1KVxuICAgIHJldHVybiAnMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSA0KVxuICAgIHJldHVybiAnMDAwMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gMylcbiAgICByZXR1cm4gJzAwMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSAyKVxuICAgIHJldHVybiAnMDAwMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSAxKVxuICAgIHJldHVybiAnMDAwMDAwMCcgKyB3b3JkO1xuICBlbHNlXG4gICAgcmV0dXJuIHdvcmQ7XG59XG5leHBvcnRzLnplcm84ID0gemVybzg7XG5cbmZ1bmN0aW9uIGpvaW4zMihtc2csIHN0YXJ0LCBlbmQsIGVuZGlhbikge1xuICB2YXIgbGVuID0gZW5kIC0gc3RhcnQ7XG4gIGFzc2VydChsZW4gJSA0ID09PSAwKTtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheShsZW4gLyA0KTtcbiAgZm9yICh2YXIgaSA9IDAsIGsgPSBzdGFydDsgaSA8IHJlcy5sZW5ndGg7IGkrKywgayArPSA0KSB7XG4gICAgdmFyIHc7XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JpZycpXG4gICAgICB3ID0gKG1zZ1trXSA8PCAyNCkgfCAobXNnW2sgKyAxXSA8PCAxNikgfCAobXNnW2sgKyAyXSA8PCA4KSB8IG1zZ1trICsgM107XG4gICAgZWxzZVxuICAgICAgdyA9IChtc2dbayArIDNdIDw8IDI0KSB8IChtc2dbayArIDJdIDw8IDE2KSB8IChtc2dbayArIDFdIDw8IDgpIHwgbXNnW2tdO1xuICAgIHJlc1tpXSA9IHcgPj4+IDA7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuam9pbjMyID0gam9pbjMyO1xuXG5mdW5jdGlvbiBzcGxpdDMyKG1zZywgZW5kaWFuKSB7XG4gIHZhciByZXMgPSBuZXcgQXJyYXkobXNnLmxlbmd0aCAqIDQpO1xuICBmb3IgKHZhciBpID0gMCwgayA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyssIGsgKz0gNCkge1xuICAgIHZhciBtID0gbXNnW2ldO1xuICAgIGlmIChlbmRpYW4gPT09ICdiaWcnKSB7XG4gICAgICByZXNba10gPSBtID4+PiAyNDtcbiAgICAgIHJlc1trICsgMV0gPSAobSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgIHJlc1trICsgMl0gPSAobSA+Pj4gOCkgJiAweGZmO1xuICAgICAgcmVzW2sgKyAzXSA9IG0gJiAweGZmO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNbayArIDNdID0gbSA+Pj4gMjQ7XG4gICAgICByZXNbayArIDJdID0gKG0gPj4+IDE2KSAmIDB4ZmY7XG4gICAgICByZXNbayArIDFdID0gKG0gPj4+IDgpICYgMHhmZjtcbiAgICAgIHJlc1trXSA9IG0gJiAweGZmO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5zcGxpdDMyID0gc3BsaXQzMjtcblxuZnVuY3Rpb24gcm90cjMyKHcsIGIpIHtcbiAgcmV0dXJuICh3ID4+PiBiKSB8ICh3IDw8ICgzMiAtIGIpKTtcbn1cbmV4cG9ydHMucm90cjMyID0gcm90cjMyO1xuXG5mdW5jdGlvbiByb3RsMzIodywgYikge1xuICByZXR1cm4gKHcgPDwgYikgfCAodyA+Pj4gKDMyIC0gYikpO1xufVxuZXhwb3J0cy5yb3RsMzIgPSByb3RsMzI7XG5cbmZ1bmN0aW9uIHN1bTMyKGEsIGIpIHtcbiAgcmV0dXJuIChhICsgYikgPj4+IDA7XG59XG5leHBvcnRzLnN1bTMyID0gc3VtMzI7XG5cbmZ1bmN0aW9uIHN1bTMyXzMoYSwgYiwgYykge1xuICByZXR1cm4gKGEgKyBiICsgYykgPj4+IDA7XG59XG5leHBvcnRzLnN1bTMyXzMgPSBzdW0zMl8zO1xuXG5mdW5jdGlvbiBzdW0zMl80KGEsIGIsIGMsIGQpIHtcbiAgcmV0dXJuIChhICsgYiArIGMgKyBkKSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtMzJfNCA9IHN1bTMyXzQ7XG5cbmZ1bmN0aW9uIHN1bTMyXzUoYSwgYiwgYywgZCwgZSkge1xuICByZXR1cm4gKGEgKyBiICsgYyArIGQgKyBlKSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtMzJfNSA9IHN1bTMyXzU7XG5cbmZ1bmN0aW9uIHN1bTY0KGJ1ZiwgcG9zLCBhaCwgYWwpIHtcbiAgdmFyIGJoID0gYnVmW3Bvc107XG4gIHZhciBibCA9IGJ1Zltwb3MgKyAxXTtcblxuICB2YXIgbG8gPSAoYWwgKyBibCkgPj4+IDA7XG4gIHZhciBoaSA9IChsbyA8IGFsID8gMSA6IDApICsgYWggKyBiaDtcbiAgYnVmW3Bvc10gPSBoaSA+Pj4gMDtcbiAgYnVmW3BvcyArIDFdID0gbG87XG59XG5leHBvcnRzLnN1bTY0ID0gc3VtNjQ7XG5cbmZ1bmN0aW9uIHN1bTY0X2hpKGFoLCBhbCwgYmgsIGJsKSB7XG4gIHZhciBsbyA9IChhbCArIGJsKSA+Pj4gMDtcbiAgdmFyIGhpID0gKGxvIDwgYWwgPyAxIDogMCkgKyBhaCArIGJoO1xuICByZXR1cm4gaGkgPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0X2hpID0gc3VtNjRfaGk7XG5cbmZ1bmN0aW9uIHN1bTY0X2xvKGFoLCBhbCwgYmgsIGJsKSB7XG4gIHZhciBsbyA9IGFsICsgYmw7XG4gIHJldHVybiBsbyA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfbG8gPSBzdW02NF9sbztcblxuZnVuY3Rpb24gc3VtNjRfNF9oaShhaCwgYWwsIGJoLCBibCwgY2gsIGNsLCBkaCwgZGwpIHtcbiAgdmFyIGNhcnJ5ID0gMDtcbiAgdmFyIGxvID0gYWw7XG4gIGxvID0gKGxvICsgYmwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGFsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgY2wpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGNsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgZGwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGRsID8gMSA6IDA7XG5cbiAgdmFyIGhpID0gYWggKyBiaCArIGNoICsgZGggKyBjYXJyeTtcbiAgcmV0dXJuIGhpID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF80X2hpID0gc3VtNjRfNF9oaTtcblxuZnVuY3Rpb24gc3VtNjRfNF9sbyhhaCwgYWwsIGJoLCBibCwgY2gsIGNsLCBkaCwgZGwpIHtcbiAgdmFyIGxvID0gYWwgKyBibCArIGNsICsgZGw7XG4gIHJldHVybiBsbyA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfNF9sbyA9IHN1bTY0XzRfbG87XG5cbmZ1bmN0aW9uIHN1bTY0XzVfaGkoYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsLCBlaCwgZWwpIHtcbiAgdmFyIGNhcnJ5ID0gMDtcbiAgdmFyIGxvID0gYWw7XG4gIGxvID0gKGxvICsgYmwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGFsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgY2wpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGNsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgZGwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGRsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgZWwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGVsID8gMSA6IDA7XG5cbiAgdmFyIGhpID0gYWggKyBiaCArIGNoICsgZGggKyBlaCArIGNhcnJ5O1xuICByZXR1cm4gaGkgPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0XzVfaGkgPSBzdW02NF81X2hpO1xuXG5mdW5jdGlvbiBzdW02NF81X2xvKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wsIGRoLCBkbCwgZWgsIGVsKSB7XG4gIHZhciBsbyA9IGFsICsgYmwgKyBjbCArIGRsICsgZWw7XG5cbiAgcmV0dXJuIGxvID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF81X2xvID0gc3VtNjRfNV9sbztcblxuZnVuY3Rpb24gcm90cjY0X2hpKGFoLCBhbCwgbnVtKSB7XG4gIHZhciByID0gKGFsIDw8ICgzMiAtIG51bSkpIHwgKGFoID4+PiBudW0pO1xuICByZXR1cm4gciA+Pj4gMDtcbn1cbmV4cG9ydHMucm90cjY0X2hpID0gcm90cjY0X2hpO1xuXG5mdW5jdGlvbiByb3RyNjRfbG8oYWgsIGFsLCBudW0pIHtcbiAgdmFyIHIgPSAoYWggPDwgKDMyIC0gbnVtKSkgfCAoYWwgPj4+IG51bSk7XG4gIHJldHVybiByID4+PiAwO1xufVxuZXhwb3J0cy5yb3RyNjRfbG8gPSByb3RyNjRfbG87XG5cbmZ1bmN0aW9uIHNocjY0X2hpKGFoLCBhbCwgbnVtKSB7XG4gIHJldHVybiBhaCA+Pj4gbnVtO1xufVxuZXhwb3J0cy5zaHI2NF9oaSA9IHNocjY0X2hpO1xuXG5mdW5jdGlvbiBzaHI2NF9sbyhhaCwgYWwsIG51bSkge1xuICB2YXIgciA9IChhaCA8PCAoMzIgLSBudW0pKSB8IChhbCA+Pj4gbnVtKTtcbiAgcmV0dXJuIHIgPj4+IDA7XG59XG5leHBvcnRzLnNocjY0X2xvID0gc2hyNjRfbG87XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/hash.js/lib/hash/utils.js\n");

            /***/
        }),

        /***/ "./node_modules/inherits/inherits_browser.js":
        /*!***************************************************!*\
          !*** ./node_modules/inherits/inherits_browser.js ***!
          \***************************************************/
        /***/ ((module) => {

            eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGltaW5hbC1hcHAvLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcz8zZmI1Il0sInNvdXJjZXNDb250ZW50IjpbImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/inherits/inherits_browser.js\n");

            /***/
        }),

        /***/ "./node_modules/js-sha3/src/sha3.js":
        /*!******************************************!*\
          !*** ./node_modules/js-sha3/src/sha3.js ***!
          \******************************************/
        /***/ ((module, exports, __webpack_require__) => {

            eval("var __WEBPACK_AMD_DEFINE_RESULT__;/**\n * [js-sha3]{@link https://github.com/emn178/js-sha3}\n *\n * @version 0.8.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2015-2018\n * @license MIT\n */\n/*jslint bitwise: true */\n(function () {\n  'use strict';\n\n  var INPUT_ERROR = 'input is invalid type';\n  var FINALIZE_ERROR = 'finalize already called';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_SHA3_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = __webpack_require__.g;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && \"object\" === 'object' && module.exports;\n  var AMD =  true && __webpack_require__.amdO;\n  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];\n  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];\n  var KECCAK_PADDING = [1, 256, 65536, 16777216];\n  var PADDING = [6, 1536, 393216, 100663296];\n  var SHIFT = [0, 8, 16, 24];\n  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,\n    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,\n    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,\n    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,\n    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\n  var BITS = [224, 256, 384, 512];\n  var SHAKE_BITS = [128, 256];\n  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];\n  var CSHAKE_BYTEPAD = {\n    '128': 168,\n    '256': 136\n  };\n\n  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  var createOutputMethod = function (bits, padding, outputType) {\n    return function (message) {\n      return new Keccak(bits, padding, bits).update(message)[outputType]();\n    };\n  };\n\n  var createShakeOutputMethod = function (bits, padding, outputType) {\n    return function (message, outputBits) {\n      return new Keccak(bits, padding, outputBits).update(message)[outputType]();\n    };\n  };\n\n  var createCshakeOutputMethod = function (bits, padding, outputType) {\n    return function (message, outputBits, n, s) {\n      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();\n    };\n  };\n\n  var createKmacOutputMethod = function (bits, padding, outputType) {\n    return function (key, message, outputBits, s) {\n      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();\n    };\n  };\n\n  var createOutputMethods = function (method, createMethod, bits, padding) {\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createMethod(bits, padding, type);\n    }\n    return method;\n  };\n\n  var createMethod = function (bits, padding) {\n    var method = createOutputMethod(bits, padding, 'hex');\n    method.create = function () {\n      return new Keccak(bits, padding, bits);\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    return createOutputMethods(method, createOutputMethod, bits, padding);\n  };\n\n  var createShakeMethod = function (bits, padding) {\n    var method = createShakeOutputMethod(bits, padding, 'hex');\n    method.create = function (outputBits) {\n      return new Keccak(bits, padding, outputBits);\n    };\n    method.update = function (message, outputBits) {\n      return method.create(outputBits).update(message);\n    };\n    return createOutputMethods(method, createShakeOutputMethod, bits, padding);\n  };\n\n  var createCshakeMethod = function (bits, padding) {\n    var w = CSHAKE_BYTEPAD[bits];\n    var method = createCshakeOutputMethod(bits, padding, 'hex');\n    method.create = function (outputBits, n, s) {\n      if (!n && !s) {\n        return methods['shake' + bits].create(outputBits);\n      } else {\n        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);\n      }\n    };\n    method.update = function (message, outputBits, n, s) {\n      return method.create(outputBits, n, s).update(message);\n    };\n    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);\n  };\n\n  var createKmacMethod = function (bits, padding) {\n    var w = CSHAKE_BYTEPAD[bits];\n    var method = createKmacOutputMethod(bits, padding, 'hex');\n    method.create = function (key, outputBits, s) {\n      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);\n    };\n    method.update = function (key, message, outputBits, s) {\n      return method.create(key, outputBits, s).update(message);\n    };\n    return createOutputMethods(method, createKmacOutputMethod, bits, padding);\n  };\n\n  var algorithms = [\n    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },\n    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },\n    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },\n    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },\n    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }\n  ];\n\n  var methods = {}, methodNames = [];\n\n  for (var i = 0; i < algorithms.length; ++i) {\n    var algorithm = algorithms[i];\n    var bits = algorithm.bits;\n    for (var j = 0; j < bits.length; ++j) {\n      var methodName = algorithm.name + '_' + bits[j];\n      methodNames.push(methodName);\n      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);\n      if (algorithm.name !== 'sha3') {\n        var newMethodName = algorithm.name + bits[j];\n        methodNames.push(newMethodName);\n        methods[newMethodName] = methods[methodName];\n      }\n    }\n  }\n\n  function Keccak(bits, padding, outputBits) {\n    this.blocks = [];\n    this.s = [];\n    this.padding = padding;\n    this.outputBits = outputBits;\n    this.reset = true;\n    this.finalized = false;\n    this.block = 0;\n    this.start = 0;\n    this.blockCount = (1600 - (bits << 1)) >> 5;\n    this.byteCount = this.blockCount << 2;\n    this.outputBlocks = outputBits >> 5;\n    this.extraBytes = (outputBits & 31) >> 3;\n\n    for (var i = 0; i < 50; ++i) {\n      this.s[i] = 0;\n    }\n  }\n\n  Keccak.prototype.update = function (message) {\n    if (this.finalized) {\n      throw new Error(FINALIZE_ERROR);\n    }\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw new Error(INPUT_ERROR);\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw new Error(INPUT_ERROR);\n          }\n        }\n      } else {\n        throw new Error(INPUT_ERROR);\n      }\n      notString = true;\n    }\n    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,\n      blockCount = this.blockCount, index = 0, s = this.s, i, code;\n\n    while (index < length) {\n      if (this.reset) {\n        this.reset = false;\n        blocks[0] = this.block;\n        for (i = 1; i < blockCount + 1; ++i) {\n          blocks[i] = 0;\n        }\n      }\n      if (notString) {\n        for (i = this.start; index < length && i < byteCount; ++index) {\n          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n        }\n      } else {\n        for (i = this.start; index < length && i < byteCount; ++index) {\n          code = message.charCodeAt(index);\n          if (code < 0x80) {\n            blocks[i >> 2] |= code << SHIFT[i++ & 3];\n          } else if (code < 0x800) {\n            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else if (code < 0xd800 || code >= 0xe000) {\n            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else {\n            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      if (i >= byteCount) {\n        this.start = i - byteCount;\n        this.block = blocks[blockCount];\n        for (i = 0; i < blockCount; ++i) {\n          s[i] ^= blocks[i];\n        }\n        f(s);\n        this.reset = true;\n      } else {\n        this.start = i;\n      }\n    }\n    return this;\n  };\n\n  Keccak.prototype.encode = function (x, right) {\n    var o = x & 255, n = 1;\n    var bytes = [o];\n    x = x >> 8;\n    o = x & 255;\n    while (o > 0) {\n      bytes.unshift(o);\n      x = x >> 8;\n      o = x & 255;\n      ++n;\n    }\n    if (right) {\n      bytes.push(n);\n    } else {\n      bytes.unshift(n);\n    }\n    this.update(bytes);\n    return bytes.length;\n  };\n\n  Keccak.prototype.encodeString = function (str) {\n    var notString, type = typeof str;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (str === null) {\n          throw new Error(INPUT_ERROR);\n        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {\n          str = new Uint8Array(str);\n        } else if (!Array.isArray(str)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {\n            throw new Error(INPUT_ERROR);\n          }\n        }\n      } else {\n        throw new Error(INPUT_ERROR);\n      }\n      notString = true;\n    }\n    var bytes = 0, length = str.length;\n    if (notString) {\n      bytes = length;\n    } else {\n      for (var i = 0; i < str.length; ++i) {\n        var code = str.charCodeAt(i);\n        if (code < 0x80) {\n          bytes += 1;\n        } else if (code < 0x800) {\n          bytes += 2;\n        } else if (code < 0xd800 || code >= 0xe000) {\n          bytes += 3;\n        } else {\n          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));\n          bytes += 4;\n        }\n      }\n    }\n    bytes += this.encode(bytes * 8);\n    this.update(str);\n    return bytes;\n  };\n\n  Keccak.prototype.bytepad = function (strs, w) {\n    var bytes = this.encode(w);\n    for (var i = 0; i < strs.length; ++i) {\n      bytes += this.encodeString(strs[i]);\n    }\n    var paddingBytes = w - bytes % w;\n    var zeros = [];\n    zeros.length = paddingBytes;\n    this.update(zeros);\n    return this;\n  };\n\n  Keccak.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;\n    blocks[i >> 2] |= this.padding[i & 3];\n    if (this.lastByteIndex === this.byteCount) {\n      blocks[0] = blocks[blockCount];\n      for (i = 1; i < blockCount + 1; ++i) {\n        blocks[i] = 0;\n      }\n    }\n    blocks[blockCount - 1] |= 0x80000000;\n    for (i = 0; i < blockCount; ++i) {\n      s[i] ^= blocks[i];\n    }\n    f(s);\n  };\n\n  Keccak.prototype.toString = Keccak.prototype.hex = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var hex = '', block;\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        block = s[i];\n        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +\n          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +\n          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +\n          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];\n      }\n      if (j % blockCount === 0) {\n        f(s);\n        i = 0;\n      }\n    }\n    if (extraBytes) {\n      block = s[i];\n      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];\n      if (extraBytes > 1) {\n        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];\n      }\n      if (extraBytes > 2) {\n        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];\n      }\n    }\n    return hex;\n  };\n\n  Keccak.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var bytes = this.outputBits >> 3;\n    var buffer;\n    if (extraBytes) {\n      buffer = new ArrayBuffer((outputBlocks + 1) << 2);\n    } else {\n      buffer = new ArrayBuffer(bytes);\n    }\n    var array = new Uint32Array(buffer);\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        array[j] = s[i];\n      }\n      if (j % blockCount === 0) {\n        f(s);\n      }\n    }\n    if (extraBytes) {\n      array[i] = s[i];\n      buffer = buffer.slice(0, bytes);\n    }\n    return buffer;\n  };\n\n  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;\n\n  Keccak.prototype.digest = Keccak.prototype.array = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var array = [], offset, block;\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        offset = j << 2;\n        block = s[i];\n        array[offset] = block & 0xFF;\n        array[offset + 1] = (block >> 8) & 0xFF;\n        array[offset + 2] = (block >> 16) & 0xFF;\n        array[offset + 3] = (block >> 24) & 0xFF;\n      }\n      if (j % blockCount === 0) {\n        f(s);\n      }\n    }\n    if (extraBytes) {\n      offset = j << 2;\n      block = s[i];\n      array[offset] = block & 0xFF;\n      if (extraBytes > 1) {\n        array[offset + 1] = (block >> 8) & 0xFF;\n      }\n      if (extraBytes > 2) {\n        array[offset + 2] = (block >> 16) & 0xFF;\n      }\n    }\n    return array;\n  };\n\n  function Kmac(bits, padding, outputBits) {\n    Keccak.call(this, bits, padding, outputBits);\n  }\n\n  Kmac.prototype = new Keccak();\n\n  Kmac.prototype.finalize = function () {\n    this.encode(this.outputBits, true);\n    return Keccak.prototype.finalize.call(this);\n  };\n\n  var f = function (s) {\n    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,\n      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,\n      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,\n      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n    for (n = 0; n < 48; n += 2) {\n      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n\n      h = c8 ^ ((c2 << 1) | (c3 >>> 31));\n      l = c9 ^ ((c3 << 1) | (c2 >>> 31));\n      s[0] ^= h;\n      s[1] ^= l;\n      s[10] ^= h;\n      s[11] ^= l;\n      s[20] ^= h;\n      s[21] ^= l;\n      s[30] ^= h;\n      s[31] ^= l;\n      s[40] ^= h;\n      s[41] ^= l;\n      h = c0 ^ ((c4 << 1) | (c5 >>> 31));\n      l = c1 ^ ((c5 << 1) | (c4 >>> 31));\n      s[2] ^= h;\n      s[3] ^= l;\n      s[12] ^= h;\n      s[13] ^= l;\n      s[22] ^= h;\n      s[23] ^= l;\n      s[32] ^= h;\n      s[33] ^= l;\n      s[42] ^= h;\n      s[43] ^= l;\n      h = c2 ^ ((c6 << 1) | (c7 >>> 31));\n      l = c3 ^ ((c7 << 1) | (c6 >>> 31));\n      s[4] ^= h;\n      s[5] ^= l;\n      s[14] ^= h;\n      s[15] ^= l;\n      s[24] ^= h;\n      s[25] ^= l;\n      s[34] ^= h;\n      s[35] ^= l;\n      s[44] ^= h;\n      s[45] ^= l;\n      h = c4 ^ ((c8 << 1) | (c9 >>> 31));\n      l = c5 ^ ((c9 << 1) | (c8 >>> 31));\n      s[6] ^= h;\n      s[7] ^= l;\n      s[16] ^= h;\n      s[17] ^= l;\n      s[26] ^= h;\n      s[27] ^= l;\n      s[36] ^= h;\n      s[37] ^= l;\n      s[46] ^= h;\n      s[47] ^= l;\n      h = c6 ^ ((c0 << 1) | (c1 >>> 31));\n      l = c7 ^ ((c1 << 1) | (c0 >>> 31));\n      s[8] ^= h;\n      s[9] ^= l;\n      s[18] ^= h;\n      s[19] ^= l;\n      s[28] ^= h;\n      s[29] ^= l;\n      s[38] ^= h;\n      s[39] ^= l;\n      s[48] ^= h;\n      s[49] ^= l;\n\n      b0 = s[0];\n      b1 = s[1];\n      b32 = (s[11] << 4) | (s[10] >>> 28);\n      b33 = (s[10] << 4) | (s[11] >>> 28);\n      b14 = (s[20] << 3) | (s[21] >>> 29);\n      b15 = (s[21] << 3) | (s[20] >>> 29);\n      b46 = (s[31] << 9) | (s[30] >>> 23);\n      b47 = (s[30] << 9) | (s[31] >>> 23);\n      b28 = (s[40] << 18) | (s[41] >>> 14);\n      b29 = (s[41] << 18) | (s[40] >>> 14);\n      b20 = (s[2] << 1) | (s[3] >>> 31);\n      b21 = (s[3] << 1) | (s[2] >>> 31);\n      b2 = (s[13] << 12) | (s[12] >>> 20);\n      b3 = (s[12] << 12) | (s[13] >>> 20);\n      b34 = (s[22] << 10) | (s[23] >>> 22);\n      b35 = (s[23] << 10) | (s[22] >>> 22);\n      b16 = (s[33] << 13) | (s[32] >>> 19);\n      b17 = (s[32] << 13) | (s[33] >>> 19);\n      b48 = (s[42] << 2) | (s[43] >>> 30);\n      b49 = (s[43] << 2) | (s[42] >>> 30);\n      b40 = (s[5] << 30) | (s[4] >>> 2);\n      b41 = (s[4] << 30) | (s[5] >>> 2);\n      b22 = (s[14] << 6) | (s[15] >>> 26);\n      b23 = (s[15] << 6) | (s[14] >>> 26);\n      b4 = (s[25] << 11) | (s[24] >>> 21);\n      b5 = (s[24] << 11) | (s[25] >>> 21);\n      b36 = (s[34] << 15) | (s[35] >>> 17);\n      b37 = (s[35] << 15) | (s[34] >>> 17);\n      b18 = (s[45] << 29) | (s[44] >>> 3);\n      b19 = (s[44] << 29) | (s[45] >>> 3);\n      b10 = (s[6] << 28) | (s[7] >>> 4);\n      b11 = (s[7] << 28) | (s[6] >>> 4);\n      b42 = (s[17] << 23) | (s[16] >>> 9);\n      b43 = (s[16] << 23) | (s[17] >>> 9);\n      b24 = (s[26] << 25) | (s[27] >>> 7);\n      b25 = (s[27] << 25) | (s[26] >>> 7);\n      b6 = (s[36] << 21) | (s[37] >>> 11);\n      b7 = (s[37] << 21) | (s[36] >>> 11);\n      b38 = (s[47] << 24) | (s[46] >>> 8);\n      b39 = (s[46] << 24) | (s[47] >>> 8);\n      b30 = (s[8] << 27) | (s[9] >>> 5);\n      b31 = (s[9] << 27) | (s[8] >>> 5);\n      b12 = (s[18] << 20) | (s[19] >>> 12);\n      b13 = (s[19] << 20) | (s[18] >>> 12);\n      b44 = (s[29] << 7) | (s[28] >>> 25);\n      b45 = (s[28] << 7) | (s[29] >>> 25);\n      b26 = (s[38] << 8) | (s[39] >>> 24);\n      b27 = (s[39] << 8) | (s[38] >>> 24);\n      b8 = (s[48] << 14) | (s[49] >>> 18);\n      b9 = (s[49] << 14) | (s[48] >>> 18);\n\n      s[0] = b0 ^ (~b2 & b4);\n      s[1] = b1 ^ (~b3 & b5);\n      s[10] = b10 ^ (~b12 & b14);\n      s[11] = b11 ^ (~b13 & b15);\n      s[20] = b20 ^ (~b22 & b24);\n      s[21] = b21 ^ (~b23 & b25);\n      s[30] = b30 ^ (~b32 & b34);\n      s[31] = b31 ^ (~b33 & b35);\n      s[40] = b40 ^ (~b42 & b44);\n      s[41] = b41 ^ (~b43 & b45);\n      s[2] = b2 ^ (~b4 & b6);\n      s[3] = b3 ^ (~b5 & b7);\n      s[12] = b12 ^ (~b14 & b16);\n      s[13] = b13 ^ (~b15 & b17);\n      s[22] = b22 ^ (~b24 & b26);\n      s[23] = b23 ^ (~b25 & b27);\n      s[32] = b32 ^ (~b34 & b36);\n      s[33] = b33 ^ (~b35 & b37);\n      s[42] = b42 ^ (~b44 & b46);\n      s[43] = b43 ^ (~b45 & b47);\n      s[4] = b4 ^ (~b6 & b8);\n      s[5] = b5 ^ (~b7 & b9);\n      s[14] = b14 ^ (~b16 & b18);\n      s[15] = b15 ^ (~b17 & b19);\n      s[24] = b24 ^ (~b26 & b28);\n      s[25] = b25 ^ (~b27 & b29);\n      s[34] = b34 ^ (~b36 & b38);\n      s[35] = b35 ^ (~b37 & b39);\n      s[44] = b44 ^ (~b46 & b48);\n      s[45] = b45 ^ (~b47 & b49);\n      s[6] = b6 ^ (~b8 & b0);\n      s[7] = b7 ^ (~b9 & b1);\n      s[16] = b16 ^ (~b18 & b10);\n      s[17] = b17 ^ (~b19 & b11);\n      s[26] = b26 ^ (~b28 & b20);\n      s[27] = b27 ^ (~b29 & b21);\n      s[36] = b36 ^ (~b38 & b30);\n      s[37] = b37 ^ (~b39 & b31);\n      s[46] = b46 ^ (~b48 & b40);\n      s[47] = b47 ^ (~b49 & b41);\n      s[8] = b8 ^ (~b0 & b2);\n      s[9] = b9 ^ (~b1 & b3);\n      s[18] = b18 ^ (~b10 & b12);\n      s[19] = b19 ^ (~b11 & b13);\n      s[28] = b28 ^ (~b20 & b22);\n      s[29] = b29 ^ (~b21 & b23);\n      s[38] = b38 ^ (~b30 & b32);\n      s[39] = b39 ^ (~b31 & b33);\n      s[48] = b48 ^ (~b40 & b42);\n      s[49] = b49 ^ (~b41 & b43);\n\n      s[0] ^= RC[n];\n      s[1] ^= RC[n + 1];\n    }\n  };\n\n  if (COMMON_JS) {\n    module.exports = methods;\n  } else {\n    for (i = 0; i < methodNames.length; ++i) {\n      root[methodNames[i]] = methods[methodNames[i]];\n    }\n    if (AMD) {\n      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n        return methods;\n      }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    }\n  }\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/js-sha3/src/sha3.js\n");

            /***/
        }),

        /***/ "./node_modules/minimalistic-assert/index.js":
        /*!***************************************************!*\
          !*** ./node_modules/minimalistic-assert/index.js ***!
          \***************************************************/
        /***/ ((module) => {

            eval("module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbWluaW1hbGlzdGljLWFzc2VydC9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2xpbWluYWwtYXBwLy4vbm9kZV9tb2R1bGVzL21pbmltYWxpc3RpYy1hc3NlcnQvaW5kZXguanM/ZGEzZSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGFzc2VydDtcblxuZnVuY3Rpb24gYXNzZXJ0KHZhbCwgbXNnKSB7XG4gIGlmICghdmFsKVxuICAgIHRocm93IG5ldyBFcnJvcihtc2cgfHwgJ0Fzc2VydGlvbiBmYWlsZWQnKTtcbn1cblxuYXNzZXJ0LmVxdWFsID0gZnVuY3Rpb24gYXNzZXJ0RXF1YWwobCwgciwgbXNnKSB7XG4gIGlmIChsICE9IHIpXG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAoJ0Fzc2VydGlvbiBmYWlsZWQ6ICcgKyBsICsgJyAhPSAnICsgcikpO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/minimalistic-assert/index.js\n");

            /***/
        }),

        /***/ "./src/main.ts":
        /*!***********************************!*\
          !*** ./src/main.ts + 256 modules ***!
          \***********************************/
        /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

            "use strict";
            eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"App\": () => (/* binding */ App),\n  \"default\": () => (/* binding */ App)\n});\n\n;// CONCATENATED MODULE: ./src/networks/Network.ts\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\nclass Network {\r\n    constructor() {\r\n        this.ServerUrl = \"\";\r\n        this.AppId = \"\";\r\n        this.ChainId = 0;\r\n        this.Name = \"\";\r\n        this.ChainName = '';\r\n        this.NativeCurrencyName = \"\";\r\n        this.NativeSymbol = \"\";\r\n        this.NativeDecimal = 18;\r\n        this.RpcUrl = '';\r\n        this.BlockExplorer = '';\r\n        this.TestNetwork = true;\r\n        this.FaucetUrl = '';\r\n        this.BuyUrl = '';\r\n    }\r\n    get ChainIdHex() {\r\n        return '0x' + this.ChainId.toString(16);\r\n    }\r\n    addNetworkToWallet() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const web3 = yield AuthenticateService.enableWeb3();\r\n            if (!web3 || !web3.provider.request)\r\n                return;\r\n            web3.provider.request({\r\n                method: 'wallet_addEthereumChain',\r\n                params: [{\r\n                        chainId: '0x' + this.ChainId.toString(16),\r\n                        chainName: this.ChainName,\r\n                        nativeCurrency: {\r\n                            name: this.NativeCurrencyName,\r\n                            symbol: this.NativeSymbol,\r\n                            decimals: this.NativeDecimal\r\n                        },\r\n                        rpcUrls: [this.RpcUrl],\r\n                        blockExplorerUrls: [this.BlockExplorer]\r\n                    }]\r\n            }).catch((error) => {\r\n                console.log(error);\r\n            });\r\n        });\r\n    }\r\n    hasEnoughNativeTokens() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let blockchainService = new BlockchainService();\r\n            let balanceNative = yield blockchainService.getNativeBalance();\r\n            const balance = parseFloat(balanceNative);\r\n            if (balance < 0.005) {\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n    }\r\n    ;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/networks/TestNetwork.ts\n\r\nclass TestNetwork extends Network {\r\n    constructor() {\r\n        super();\r\n        this.ServerUrl = \"https://cloud-testnet.onrender.com\";\r\n        this.TestNetwork = true;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/networks/localhost-network.ts\n\r\n//localhost\r\nclass localhostNetwork extends TestNetwork {\r\n    constructor() {\r\n        super();\r\n        this.ChainId = 31337;\r\n        this.Name = \"localhost\";\r\n        this.ChainName = 'localhost test';\r\n        this.NativeCurrencyName = \"Ethereum\";\r\n        this.NativeSymbol = \"ETH\";\r\n        this.NativeDecimal = 18;\r\n        this.RpcUrl = 'http://127.0.0.1:8545/';\r\n        this.BlockExplorer = 'https://rinkeby.etherscan.io';\r\n        this.ServerUrl = \"http://localhost:10000\";\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/networks/mumbai-network.ts\n\r\nclass mumbaiNetwork extends TestNetwork {\r\n    constructor() {\r\n        super();\r\n        this.ChainId = 80001;\r\n        this.Name = \"mumbai\";\r\n        this.ChainName = 'Polygon Mumbai';\r\n        this.NativeCurrencyName = \"Matic\";\r\n        this.NativeSymbol = \"MATIC\";\r\n        this.NativeDecimal = 18;\r\n        this.RpcUrl = 'https://polygon-mumbai.g.alchemy.com/v2/FILTBk8FT9RzcRVxkMXIg7Ipl8JCNdK2';\r\n        this.BlockExplorer = 'https://mumbai.polygonscan.com/';\r\n        this.FaucetUrl = 'https://faucet.polygon.technology/';\r\n        this.BuyUrl = 'https://www.moonpay.com/buy/matic';\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/util/CookieHelper.ts\nclass CookieHelper {\r\n    constructor(doc) {\r\n        this.document = (doc) ? doc : document;\r\n    }\r\n    setCookie(name, value) {\r\n        let date = new Date();\r\n        this.deleteCookie(name);\r\n        this.document.cookie = name + \"=\" + value + \"; expires=Mon, 2 Dec \" + (date.getFullYear() + 1) + \" 12:00:00 UTC;path=/;SameSite=Strict;\";\r\n    }\r\n    getCookieValue(name) {\r\n        var _a;\r\n        return ((_a = this.document.cookie.match('(^|;)\\\\s*' + name + '\\\\s*=\\\\s*([^;]+)')) === null || _a === void 0 ? void 0 : _a.pop()) || '';\r\n    }\r\n    setCookieProvider(providerName) {\r\n        this.setCookie(\"provider\", providerName);\r\n    }\r\n    deleteCookie(name) {\r\n        this.document.cookie = name + \"=0; expires=Mon, 2 Dec 2020 12:00:00 UTC;path=/\";\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/networks/MainNetwork.ts\n\r\nclass MainNetwork extends Network {\r\n    constructor() {\r\n        super();\r\n        this.ServerUrl = \"https://cloud-mainnet.onrender.com\";\r\n        this.TestNetwork = false;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/networks/polygon-network.ts\n\r\nclass polygonNetwork extends MainNetwork {\r\n    constructor() {\r\n        super();\r\n        this.ChainId = 137;\r\n        this.Name = \"polygon\";\r\n        this.ChainName = 'Polygon Mainnet';\r\n        this.NativeCurrencyName = \"Matic\";\r\n        this.NativeSymbol = \"MATIC\";\r\n        this.NativeDecimal = 18;\r\n        this.RpcUrl = 'https://polygon-rpc.com/';\r\n        this.BlockExplorer = 'https://polygonscan.com/';\r\n        this.FaucetUrl = 'https://faucet.polygon.technology/';\r\n        this.BuyUrl = 'https://www.moonpay.com/buy/matic';\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/networks/NetworkType.ts\nvar NetworkType;\r\n(function (NetworkType) {\r\n    NetworkType[NetworkType[\"Mainnet\"] = 0] = \"Mainnet\";\r\n    NetworkType[NetworkType[\"Testnet\"] = 1] = \"Testnet\";\r\n})(NetworkType || (NetworkType = {}));\r\n\n;// CONCATENATED MODULE: ./src/networks/NetworkInfo.ts\n\r\n\r\n\r\n\r\n\r\nconst networkInfos = [localhostNetwork, mumbaiNetwork, polygonNetwork];\r\nclass NetworkInfo {\r\n    constructor() {\r\n    }\r\n    static getInstance() {\r\n        if (NetworkInfo.instance)\r\n            return NetworkInfo.instance;\r\n        NetworkInfo.instance = this.getNetworkInfo();\r\n        return NetworkInfo.instance;\r\n    }\r\n    static loadNetwork(networkName) {\r\n        NetworkInfo.instance = this.getNetworkInfo(networkName);\r\n    }\r\n    static setNetworkByChainId(chainId) {\r\n        let network = this.getNetworkInfoByChainId(chainId);\r\n        if (network) {\r\n            NetworkInfo.instance = network;\r\n            let cookieHelper = new CookieHelper(document);\r\n            cookieHelper.setCookie('network', network.Name);\r\n        }\r\n    }\r\n    static getNetworks(networkType) {\r\n        let networks = new Array();\r\n        let isLocalhost = window.location.host.indexOf('localhost') != -1;\r\n        networkInfos.forEach(networkInfoType => {\r\n            let tmp = new networkInfoType();\r\n            if (!isLocalhost && tmp.Name == \"localhost\")\r\n                return;\r\n            if (networkType === undefined) {\r\n                networks.push(tmp);\r\n            }\r\n            else {\r\n                if (networkType == NetworkType.Mainnet && !tmp.TestNetwork) {\r\n                    networks.push(tmp);\r\n                }\r\n                else if (networkType == NetworkType.Testnet && tmp.TestNetwork) {\r\n                    networks.push(tmp);\r\n                }\r\n            }\r\n        });\r\n        return networks;\r\n    }\r\n    static getNetworkInfoByChainId(chainId) {\r\n        let networkInfo;\r\n        networkInfos.forEach(networkInfoType => {\r\n            let tmp = new networkInfoType();\r\n            if (tmp.ChainId == chainId) {\r\n                networkInfo = tmp;\r\n            }\r\n        });\r\n        return networkInfo;\r\n    }\r\n    static getNetworkInfo(networkName) {\r\n        let cookieHelper = new CookieHelper(document);\r\n        // @ts-ignore\r\n        if (window.ethereum && window.ethereum.chainId) {\r\n            // @ts-ignore\r\n            let networkInfo = this.getNetworkNameByChainIdHex(window.ethereum.chainId);\r\n            if (networkInfo) {\r\n                return networkInfo;\r\n            }\r\n        }\r\n        if (!networkName)\r\n            networkName = cookieHelper.getCookieValue('network');\r\n        if (!networkName)\r\n            networkName = 'polygon';\r\n        let networkInfo = null;\r\n        networkInfos.forEach(networkInfoType => {\r\n            let tmp = new networkInfoType();\r\n            if (tmp.Name == networkName) {\r\n                networkInfo = tmp;\r\n            }\r\n        });\r\n        if (networkInfo)\r\n            return networkInfo;\r\n        console.error(\"Network '\" + networkName + \"' could not be found. Defaulting to Polygon network.\");\r\n        return new polygonNetwork();\r\n    }\r\n    static getNetworkNameByChainIdHex(chainIdHex) {\r\n        let networkInfo = undefined;\r\n        networkInfos.forEach(networkInfoType => {\r\n            let tmp = new networkInfoType();\r\n            if (tmp.ChainIdHex == chainIdHex) {\r\n                networkInfo = tmp;\r\n            }\r\n        });\r\n        return networkInfo;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/SwitchNetwork.html\n// Module\nvar code = \"<div id=\\\"switchNetworkInfo\\\">\\r\\n    You can choose any of these networks.\\r\\n    <div>\\r\\n        <h3>Mainnet - real money & stocks</h3>\\r\\n        {{#each mainNetworks}}\\r\\n        <button href=\\\"\\\" class=\\\"setNetwork\\\"\\r\\n                data-chainid=\\\"{{ChainId}}\\\">{{ChainName}}\\r\\n        </button>\\r\\n        {{/each}}\\r\\n    </div>\\r\\n    <div>\\r\\n        <h3>Testnet - fake money & stocks</h3>\\r\\n        {{#each testNetworks}}\\r\\n        <button href=\\\"\\\" class=\\\"setNetwork\\\"\\r\\n                data-chainid=\\\"{{ChainId}}\\\">{{ChainName}}\\r\\n        </button>\\r\\n        {{/each}}\\r\\n    </div>\\r\\n</div>\\r\\n<div id=\\\"jsSwitchNetworkNotWorking\\\" class=\\\"d-none\\\">\\r\\n    It seem as we can't add the network automatically for your, so you need to add it your self.\\r\\n    This is the information you need to add the network. You will need to figure out where to\\r\\n    add new network for your wallet, as it difference between wallets.\\r\\n    <form>\\r\\n        <label>ChainId:\\r\\n            <input id=\\\"switchChainId\\\"/>\\r\\n        </label>\\r\\n        <label>Chain name\\r\\n            <input id=\\\"switchChainName\\\"/>\\r\\n        </label>\\r\\n        <label>Currency name\\r\\n            <input id=\\\"switchCurrencyName\\\"/>\\r\\n        </label>\\r\\n        <label>\\r\\n            Symbol\\r\\n            <input id=\\\"switchSymbol\\\"/>\\r\\n        </label>\\r\\n        <label>Decimal\\r\\n            <input id=\\\"switchDecimal\\\"/>\\r\\n        </label>\\r\\n        <label>Rpc Url\\r\\n            <input id=\\\"switchRpcUrl\\\"/>\\r\\n        </label>\\r\\n    </form>\\r\\n</div>\";\n// Exports\n/* harmony default export */ const SwitchNetwork = (code);\n;// CONCATENATED MODULE: ./src/html/modal/Modal.html\n// Module\nvar Modal_code = \"<dialog id=\\\"liminal_market_modal_div\\\" data-title=\\\"{{{title}}}\\\">\\r\\n    <article>\\r\\n        <header>\\r\\n            <span>{{title}}</span>\\r\\n            <a href=\\\"#close\\\" aria-label=\\\"Close\\\" class=\\\"close\\\" id=\\\"liminal_market_modal_close\\\"></a>\\r\\n        </header>\\r\\n        {{{content}}}\\r\\n    </article>\\r\\n\\r\\n</dialog>\";\n// Exports\n/* harmony default export */ const modal_Modal = (Modal_code);\n;// CONCATENATED MODULE: ./src/ui/modals/Modal.ts\n\r\nclass Modal {\r\n    constructor() {\r\n        this.modalId = 'liminal_market_modal_div';\r\n    }\r\n    hideModal() {\r\n        let modalDiv = document.getElementById(this.modalId);\r\n        modalDiv === null || modalDiv === void 0 ? void 0 : modalDiv.removeAttribute('open');\r\n        if (this.onHide) {\r\n            this.onHide();\r\n        }\r\n    }\r\n    showModal(title, content, reuseModalIfSameTitle = false, onHide, hideOnOutsideClick = true) {\r\n        var _a;\r\n        let modalDiv = document.getElementById(this.modalId);\r\n        if (modalDiv) {\r\n            let modalTitle = modalDiv.dataset.title;\r\n            if (reuseModalIfSameTitle && modalTitle && modalTitle === title) {\r\n                modalDiv.setAttribute('open', '');\r\n                return false;\r\n            }\r\n        }\r\n        let template = Handlebars.compile(modal_Modal);\r\n        let obj = {\r\n            title: title, content: content\r\n        };\r\n        let html = template(obj);\r\n        if (modalDiv) {\r\n            document.body.removeChild(modalDiv);\r\n        }\r\n        document.body.insertAdjacentHTML('beforeend', html);\r\n        modalDiv = document.getElementById(this.modalId);\r\n        modalDiv.setAttribute('open', '');\r\n        if (hideOnOutsideClick) {\r\n            modalDiv.addEventListener('mousedown', (evt) => {\r\n                if (evt.target && evt.target.id === 'liminal_market_modal_div') {\r\n                    this.hideModal();\r\n                }\r\n            });\r\n        }\r\n        let liminal_market_modal_close = document.getElementById('liminal_market_modal_close');\r\n        if (liminal_market_modal_close)\r\n            liminal_market_modal_close.style.display = 'block';\r\n        (_a = document.getElementById('liminal_market_modal_close')) === null || _a === void 0 ? void 0 : _a.addEventListener('click', (evt) => {\r\n            evt.preventDefault();\r\n            this.hideModal();\r\n        });\r\n        this.onHide = onHide;\r\n        return true;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/services/broker/Security.ts\nclass Security {\r\n    constructor() {\r\n        this.Class = \"\";\r\n        this.Exchange = \"\";\r\n        this.Symbol = \"\";\r\n        this.Name = \"\";\r\n        this.Status = \"\";\r\n        this.Tradable = false;\r\n        this.Fractionable = false;\r\n        this.Logo = \"\";\r\n        this.Favorite = 0;\r\n        this.LogoPath = \"/img/logos/\";\r\n        this.LogoPath = \"/img/logos/\";\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/services/backend/BaseService.ts\nvar BaseService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\nclass BaseService {\r\n    constructor() {\r\n    }\r\n    get(path, data, options) {\r\n        return BaseService_awaiter(this, void 0, void 0, function* () {\r\n            let url = '';\r\n            let method = 'GET';\r\n            if (!options || !options.relativeUrl) {\r\n                url = App.Network.ServerUrl;\r\n            }\r\n            let params = new URLSearchParams(data);\r\n            if (!params.has('chainId')) {\r\n                params.set('chainId', App.Network.ChainId.toString());\r\n            }\r\n            if (!params.has('address')) {\r\n                params.set('address', App.User.address);\r\n            }\r\n            let response = yield fetch(this.getUrl(url, path) + '?' + params.toString(), {\r\n                method: method,\r\n                headers: { 'Authentication': 'Bearer: ' + App.User.token, 'Content-Type': 'application/json' }\r\n            });\r\n            let obj = yield response.json();\r\n            return (obj.result) ? obj.result : undefined;\r\n        });\r\n    }\r\n    post(path, data) {\r\n        return BaseService_awaiter(this, void 0, void 0, function* () {\r\n            if (!data) {\r\n                data = {};\r\n            }\r\n            data.chainId = (data.chainId) ? data.chainId : App.Network.ChainId;\r\n            data.address = (data.address) ? data.address : App.User.address;\r\n            console.log(this.getUrl(App.Network.ServerUrl, path));\r\n            let response = yield fetch(this.getUrl(App.Network.ServerUrl, path), {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Authentication': 'Bearer: ' + App.User.token,\r\n                    'Content-Type': 'application/json;charset=UTF-8'\r\n                },\r\n                body: JSON.stringify(data),\r\n            });\r\n            let obj = yield response.json();\r\n            if (obj.success)\r\n                return obj.result;\r\n            throw new Error(obj.error);\r\n        });\r\n    }\r\n    getUrl(ServerUrl, path) {\r\n        if (path.startsWith('/'))\r\n            return ServerUrl + path;\r\n        return ServerUrl + '/' + path;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/services/broker/SecuritiesService.ts\nvar SecuritiesService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\nclass SecuritiesService extends BaseService {\r\n    constructor() {\r\n        super();\r\n        this.securities = new Map();\r\n        this.symbols = [\"MSFT\", \"AAPL\", \"AMZN\", \"TSLA\", \"GOOGL\", \"GOOG\", \"GME\", \"META\", \"NVDA\", \"BRK.B\", \"JPM\", \"HD\", \"JNJ\", \"UNH\", \"PG\", \"BAC\", \"V\", \"ADBE\", \"NFLX\", \"CRM\", \"PFE\", \"DIS\", \"MA\", \"XOM\", \"TMO\", \"COST\"];\r\n        this.securities = new Map();\r\n        this.page = 1;\r\n    }\r\n    static getInstance() {\r\n        return SecuritiesService_awaiter(this, void 0, void 0, function* () {\r\n            if (!SecuritiesService.instance) {\r\n                SecuritiesService.instance = new SecuritiesService();\r\n                SecuritiesService.instance.securities = yield SecuritiesService.instance.getSecurities();\r\n            }\r\n            return SecuritiesService.instance;\r\n        });\r\n    }\r\n    getSecurities() {\r\n        return SecuritiesService_awaiter(this, void 0, void 0, function* () {\r\n            if (this.securities.size != 0)\r\n                return this.securities;\r\n            const results = yield (yield fetch('/securities/securities.json')).json();\r\n            for (let i = 0; i < results.length; i++) {\r\n                this.securities.set(results[i].Symbol, Object.assign(new Security, results[i]));\r\n            }\r\n            this.securitiesArray = Array.from(this.securities);\r\n            return this.securities;\r\n        });\r\n    }\r\n    getSecurityBySymbol(symbol) {\r\n        return SecuritiesService_awaiter(this, void 0, void 0, function* () {\r\n            let securities = yield this.getSecurities();\r\n            let security = securities.get(symbol);\r\n            return (security) ? security : new Security();\r\n        });\r\n    }\r\n    getTopSecurities() {\r\n        return SecuritiesService_awaiter(this, void 0, void 0, function* () {\r\n            let securities = yield this.getSecurities();\r\n            let topSecurities = new Array();\r\n            for (const symbol of this.symbols) {\r\n                let security = securities.get(symbol);\r\n                if (security) {\r\n                    topSecurities.push(security);\r\n                }\r\n            }\r\n            return topSecurities;\r\n        });\r\n    }\r\n    getPaginatingSecurities(page) {\r\n        return SecuritiesService_awaiter(this, void 0, void 0, function* () {\r\n            if (page == 0)\r\n                return this.getTopSecurities();\r\n            let securitiesOnPage = new Array();\r\n            let i = page * this.symbols.length;\r\n            let pageCount = i + 10;\r\n            for (; i < pageCount && i < this.securitiesArray.length; i++) {\r\n                securitiesOnPage.push(this.securitiesArray[i][1]);\r\n            }\r\n            return securitiesOnPage;\r\n        });\r\n    }\r\n    find(search) {\r\n        return SecuritiesService_awaiter(this, void 0, void 0, function* () {\r\n            let results = new Array();\r\n            search = search.toLocaleLowerCase();\r\n            this.securities.forEach(function (security) {\r\n                if (security.Symbol.toLowerCase().indexOf(search) != -1 ||\r\n                    security.Name.toLowerCase().indexOf(search) != -1) {\r\n                    results.push(security);\r\n                }\r\n            });\r\n            return results;\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/util/LoadingHelper.ts\nclass LoadingHelper {\r\n    static setLoading(element) {\r\n        if (LoadingHelper.lastElement) {\r\n            LoadingHelper.lastElement.removeAttribute('aria-busy');\r\n        }\r\n        if (!element)\r\n            return;\r\n        element.setAttribute('aria-busy', 'true');\r\n        LoadingHelper.lastElement = element;\r\n    }\r\n    static removeLoading() {\r\n        if (this.lastElement) {\r\n            this.lastElement.removeAttribute('aria-busy');\r\n        }\r\n    }\r\n}\r\nLoadingHelper.lastElement = undefined;\r\n\n;// CONCATENATED MODULE: ./src/util/WalletHelper.ts\nvar WalletHelper_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\nclass WalletHelper {\r\n    constructor() {\r\n    }\r\n    getAUsdAsset() {\r\n        return {\r\n            Logo: '../ausd.png'\r\n        };\r\n    }\r\n    addTokenToWallet(address, symbol, fallbackTimeout) {\r\n        return WalletHelper_awaiter(this, void 0, void 0, function* () {\r\n            let securitiesService = yield SecuritiesService.getInstance();\r\n            const asset = (symbol == 'aUSD') ? this.getAUsdAsset() : yield securitiesService.getSecurityBySymbol(symbol);\r\n            let connector = yield AuthenticateService.enableWeb3();\r\n            if (!connector || !connector.provider || !connector.provider.request) {\r\n                fallbackTimeout();\r\n                return;\r\n            }\r\n            let timeout = (WalletHelper.addTokenFallbackLoaded === undefined) ? 2 * 1000 : 200;\r\n            setTimeout(() => {\r\n                if (WalletHelper.addTokenFallbackLoaded !== false) {\r\n                    WalletHelper.addTokenFallbackLoaded = true;\r\n                    if (fallbackTimeout)\r\n                        fallbackTimeout();\r\n                }\r\n            }, timeout);\r\n            const wasAdded = yield connector.provider.request({\r\n                method: 'wallet_watchAsset',\r\n                params: [{\r\n                        type: 'ERC20',\r\n                        options: {\r\n                            address: address,\r\n                            symbol: symbol,\r\n                            decimals: 18,\r\n                            image: 'https://app.liminal.market/img/logos/' + asset.Logo,\r\n                        },\r\n                    }]\r\n            }).then((result) => {\r\n                WalletHelper.addTokenFallbackLoaded = false;\r\n                return true;\r\n            }).catch((error) => {\r\n                console.log(error);\r\n                return false;\r\n            }).finally(() => {\r\n                LoadingHelper.removeLoading();\r\n            });\r\n            return wasAdded;\r\n        });\r\n    }\r\n    ;\r\n    static isWebview() {\r\n        let ua = navigator.userAgent;\r\n        // if it says it's a webview, let's go with that\r\n        let rules = ['WebView',\r\n            // iOS webview will be the same as safari but missing \"Safari\"\r\n            '(iPhone|iPod|iPad)(?!.*Safari)',\r\n            // Android Lollipop and Above: webview will be the same as native but it will contain \"wv\"\r\n            // Android KitKat to lollipop webview will put {version}.0.0.0\r\n            'Android.*(wv|.0.0.0)',\r\n            // old chrome android webview agent\r\n            'Linux; U; Android',\r\n            'SDK'\r\n        ];\r\n        let webviewRegExp = new RegExp('(' + rules.join('|') + ')', 'ig');\r\n        return !!ua.match(webviewRegExp);\r\n    }\r\n    isMagic() {\r\n        return WalletHelper_awaiter(this, void 0, void 0, function* () {\r\n            const walletInfo = App.User.providerInfo;\r\n            const walletType = walletInfo.walletType;\r\n            return (walletType === \"magic\");\r\n        });\r\n    }\r\n    switchNetwork(network) {\r\n        return WalletHelper_awaiter(this, void 0, void 0, function* () {\r\n            NetworkInfo.setNetworkByChainId(network.ChainId);\r\n            return true;\r\n        });\r\n    }\r\n    static hideMagicWallet() {\r\n        let magicIframe = document.querySelector('.magic-iframe');\r\n        if (magicIframe && magicIframe.style.display == 'block')\r\n            magicIframe.style.display = 'none';\r\n    }\r\n}\r\nWalletHelper.addTokenFallbackLoaded = undefined;\r\n\n;// CONCATENATED MODULE: ./src/errors/GeneralError.ts\nclass GeneralError extends Error {\r\n    constructor(e) {\r\n        super();\r\n        this.code = 0;\r\n        this.stack = \"\";\r\n        if (!e.message) {\r\n            this.message = e.toString();\r\n        }\r\n        else if (e.message.data) {\r\n            this.code = e.message.data.code;\r\n            this.message = e.message.data.message;\r\n            this.error = e;\r\n            this.headers = e.message.headers;\r\n            this.stack = e.stack;\r\n        }\r\n        else if (typeof (e.data) == 'object') {\r\n            this.code = e.data.code;\r\n            this.message = e.data.message;\r\n            this.stack = e.stack;\r\n        }\r\n        else if (e.message) {\r\n            this.message = e.message;\r\n        }\r\n        else {\r\n            this.message = e.toString();\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/SwitchNetworkModal.ts\nvar SwitchNetworkModal_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass SwitchNetworkModal {\r\n    constructor() {\r\n    }\r\n    show() {\r\n        let template = Handlebars.compile(SwitchNetwork);\r\n        let testNetworks = NetworkInfo.getNetworks(NetworkType.Testnet);\r\n        let mainNetworks = NetworkInfo.getNetworks(NetworkType.Mainnet);\r\n        let content = template({ testNetworks, mainNetworks });\r\n        let modal = new Modal();\r\n        modal.showModal('Switch network', content, false);\r\n        let setNetworkLinks = document.querySelectorAll('.setNetwork');\r\n        setNetworkLinks.forEach(setNetworkLink => {\r\n            setNetworkLink.addEventListener('click', (evt) => SwitchNetworkModal_awaiter(this, void 0, void 0, function* () {\r\n                evt.preventDefault();\r\n                let dataset = evt.target.dataset;\r\n                this.selectedNetwork = NetworkInfo.getNetworkInfoByChainId(parseInt(dataset.chainid));\r\n                if (!this.selectedNetwork)\r\n                    throw new GeneralError('Could not find chainId:' + dataset.chainid);\r\n                let walletHelper = new WalletHelper();\r\n                let successAddingNetwork = yield walletHelper.switchNetwork(this.selectedNetwork)\r\n                    .catch((error) => {\r\n                    let jsSwitchNetworkNotWorking = document.getElementById('jsSwitchNetworkNotWorking');\r\n                    if (!jsSwitchNetworkNotWorking)\r\n                        throw error;\r\n                    jsSwitchNetworkNotWorking.classList.remove('d-none');\r\n                    let switchNetworkInfo = document.getElementById('switchNetworkInfo');\r\n                    switchNetworkInfo.classList.add('d-none');\r\n                    document.getElementById('switchChainId').value = dataset.chainid + ' or it might be: ' + '0x' + parseInt(dataset.chainid).toString(16);\r\n                    document.getElementById('switchChainName').value = this.selectedNetwork.Name;\r\n                    document.getElementById('switchCurrencyName').value = this.selectedNetwork.NativeCurrencyName;\r\n                    document.getElementById('switchSymbol').value = this.selectedNetwork.NativeSymbol;\r\n                    document.getElementById('switchDecimal').value = this.selectedNetwork.NativeDecimal.toString();\r\n                    document.getElementById('switchRpcUrl').value = this.selectedNetwork.RpcUrl;\r\n                });\r\n                if (successAddingNetwork) {\r\n                    modal.hideModal();\r\n                    let authenticationService = new AuthenticateService();\r\n                    yield authenticationService.logOut();\r\n                    location.reload();\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/logger/lib.esm/_version.js\nconst version = \"logger/5.7.0\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/logger/lib.esm/index.js\n\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\n\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nvar LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nvar ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n    ///////////////////\n    // Interaction Errors\n    // The user rejected the action, such as signing a message or sending\n    // a transaction\n    ErrorCode[\"ACTION_REJECTED\"] = \"ACTION_REJECTED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nclass Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/properties/lib.esm/_version.js\nconst _version_version = \"properties/5.7.0\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/properties/lib.esm/index.js\n\nvar lib_esm_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\nconst logger = new Logger(_version_version);\nfunction defineReadOnly(object, name, value) {\n    Object.defineProperty(object, name, {\n        enumerable: true,\n        value: value,\n        writable: false,\n    });\n}\n// Crawl up the constructor chain to find a static method\nfunction getStatic(ctor, key) {\n    for (let i = 0; i < 32; i++) {\n        if (ctor[key]) {\n            return ctor[key];\n        }\n        if (!ctor.prototype || typeof (ctor.prototype) !== \"object\") {\n            break;\n        }\n        ctor = Object.getPrototypeOf(ctor.prototype).constructor;\n    }\n    return null;\n}\nfunction resolveProperties(object) {\n    return lib_esm_awaiter(this, void 0, void 0, function* () {\n        const promises = Object.keys(object).map((key) => {\n            const value = object[key];\n            return Promise.resolve(value).then((v) => ({ key: key, value: v }));\n        });\n        const results = yield Promise.all(promises);\n        return results.reduce((accum, result) => {\n            accum[(result.key)] = result.value;\n            return accum;\n        }, {});\n    });\n}\nfunction checkProperties(object, properties) {\n    if (!object || typeof (object) !== \"object\") {\n        logger.throwArgumentError(\"invalid object\", \"object\", object);\n    }\n    Object.keys(object).forEach((key) => {\n        if (!properties[key]) {\n            logger.throwArgumentError(\"invalid object key - \" + key, \"transaction:\" + key, object);\n        }\n    });\n}\nfunction shallowCopy(object) {\n    const result = {};\n    for (const key in object) {\n        result[key] = object[key];\n    }\n    return result;\n}\nconst opaque = { bigint: true, boolean: true, \"function\": true, number: true, string: true };\nfunction _isFrozen(object) {\n    // Opaque objects are not mutable, so safe to copy by assignment\n    if (object === undefined || object === null || opaque[typeof (object)]) {\n        return true;\n    }\n    if (Array.isArray(object) || typeof (object) === \"object\") {\n        if (!Object.isFrozen(object)) {\n            return false;\n        }\n        const keys = Object.keys(object);\n        for (let i = 0; i < keys.length; i++) {\n            let value = null;\n            try {\n                value = object[keys[i]];\n            }\n            catch (error) {\n                // If accessing a value triggers an error, it is a getter\n                // designed to do so (e.g. Result) and is therefore \"frozen\"\n                continue;\n            }\n            if (!_isFrozen(value)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return logger.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, \"object\", object);\n}\n// Returns a new copy of object, such that no properties may be replaced.\n// New properties may be added only to objects.\nfunction _deepCopy(object) {\n    if (_isFrozen(object)) {\n        return object;\n    }\n    // Arrays are mutable, so we need to create a copy\n    if (Array.isArray(object)) {\n        return Object.freeze(object.map((item) => deepCopy(item)));\n    }\n    if (typeof (object) === \"object\") {\n        const result = {};\n        for (const key in object) {\n            const value = object[key];\n            if (value === undefined) {\n                continue;\n            }\n            defineReadOnly(result, key, deepCopy(value));\n        }\n        return result;\n    }\n    return logger.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, \"object\", object);\n}\nfunction deepCopy(object) {\n    return _deepCopy(object);\n}\nclass Description {\n    constructor(info) {\n        for (const key in info) {\n            this[key] = deepCopy(info[key]);\n        }\n    }\n}\n//# sourceMappingURL=index.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/providers/lib.esm/_version.js\nconst lib_esm_version_version = \"providers/5.7.2\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/abstract-signer/lib.esm/_version.js\nconst abstract_signer_lib_esm_version_version = \"abstract-signer/5.7.0\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/abstract-signer/lib.esm/index.js\n\nvar abstract_signer_lib_esm_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\nconst lib_esm_logger = new Logger(abstract_signer_lib_esm_version_version);\nconst allowedTransactionKeys = [\n    \"accessList\", \"ccipReadEnabled\", \"chainId\", \"customData\", \"data\", \"from\", \"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"to\", \"type\", \"value\"\n];\nconst forwardErrors = [\n    Logger.errors.INSUFFICIENT_FUNDS,\n    Logger.errors.NONCE_EXPIRED,\n    Logger.errors.REPLACEMENT_UNDERPRICED,\n];\n;\n;\nclass Signer {\n    ///////////////////\n    // Sub-classes MUST call super\n    constructor() {\n        lib_esm_logger.checkAbstract(new.target, Signer);\n        defineReadOnly(this, \"_isSigner\", true);\n    }\n    ///////////////////\n    // Sub-classes MAY override these\n    getBalance(blockTag) {\n        return abstract_signer_lib_esm_awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"getBalance\");\n            return yield this.provider.getBalance(this.getAddress(), blockTag);\n        });\n    }\n    getTransactionCount(blockTag) {\n        return abstract_signer_lib_esm_awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"getTransactionCount\");\n            return yield this.provider.getTransactionCount(this.getAddress(), blockTag);\n        });\n    }\n    // Populates \"from\" if unspecified, and estimates the gas for the transaction\n    estimateGas(transaction) {\n        return abstract_signer_lib_esm_awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"estimateGas\");\n            const tx = yield resolveProperties(this.checkTransaction(transaction));\n            return yield this.provider.estimateGas(tx);\n        });\n    }\n    // Populates \"from\" if unspecified, and calls with the transaction\n    call(transaction, blockTag) {\n        return abstract_signer_lib_esm_awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"call\");\n            const tx = yield resolveProperties(this.checkTransaction(transaction));\n            return yield this.provider.call(tx, blockTag);\n        });\n    }\n    // Populates all fields in a transaction, signs it and sends it to the network\n    sendTransaction(transaction) {\n        return abstract_signer_lib_esm_awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"sendTransaction\");\n            const tx = yield this.populateTransaction(transaction);\n            const signedTx = yield this.signTransaction(tx);\n            return yield this.provider.sendTransaction(signedTx);\n        });\n    }\n    getChainId() {\n        return abstract_signer_lib_esm_awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"getChainId\");\n            const network = yield this.provider.getNetwork();\n            return network.chainId;\n        });\n    }\n    getGasPrice() {\n        return abstract_signer_lib_esm_awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"getGasPrice\");\n            return yield this.provider.getGasPrice();\n        });\n    }\n    getFeeData() {\n        return abstract_signer_lib_esm_awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"getFeeData\");\n            return yield this.provider.getFeeData();\n        });\n    }\n    resolveName(name) {\n        return abstract_signer_lib_esm_awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"resolveName\");\n            return yield this.provider.resolveName(name);\n        });\n    }\n    // Checks a transaction does not contain invalid keys and if\n    // no \"from\" is provided, populates it.\n    // - does NOT require a provider\n    // - adds \"from\" is not present\n    // - returns a COPY (safe to mutate the result)\n    // By default called from: (overriding these prevents it)\n    //   - call\n    //   - estimateGas\n    //   - populateTransaction (and therefor sendTransaction)\n    checkTransaction(transaction) {\n        for (const key in transaction) {\n            if (allowedTransactionKeys.indexOf(key) === -1) {\n                lib_esm_logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\n            }\n        }\n        const tx = shallowCopy(transaction);\n        if (tx.from == null) {\n            tx.from = this.getAddress();\n        }\n        else {\n            // Make sure any provided address matches this signer\n            tx.from = Promise.all([\n                Promise.resolve(tx.from),\n                this.getAddress()\n            ]).then((result) => {\n                if (result[0].toLowerCase() !== result[1].toLowerCase()) {\n                    lib_esm_logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n                return result[0];\n            });\n        }\n        return tx;\n    }\n    // Populates ALL keys for a transaction and checks that \"from\" matches\n    // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n    // By default called from: (overriding these prevents it)\n    //   - sendTransaction\n    //\n    // Notes:\n    //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas\n    populateTransaction(transaction) {\n        return abstract_signer_lib_esm_awaiter(this, void 0, void 0, function* () {\n            const tx = yield resolveProperties(this.checkTransaction(transaction));\n            if (tx.to != null) {\n                tx.to = Promise.resolve(tx.to).then((to) => abstract_signer_lib_esm_awaiter(this, void 0, void 0, function* () {\n                    if (to == null) {\n                        return null;\n                    }\n                    const address = yield this.resolveName(to);\n                    if (address == null) {\n                        lib_esm_logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                    }\n                    return address;\n                }));\n                // Prevent this error from causing an UnhandledPromiseException\n                tx.to.catch((error) => { });\n            }\n            // Do not allow mixing pre-eip-1559 and eip-1559 properties\n            const hasEip1559 = (tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null);\n            if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {\n                lib_esm_logger.throwArgumentError(\"eip-1559 transaction do not support gasPrice\", \"transaction\", transaction);\n            }\n            else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {\n                lib_esm_logger.throwArgumentError(\"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"transaction\", transaction);\n            }\n            if ((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {\n                // Fully-formed EIP-1559 transaction (skip getFeeData)\n                tx.type = 2;\n            }\n            else if (tx.type === 0 || tx.type === 1) {\n                // Explicit Legacy or EIP-2930 transaction\n                // Populate missing gasPrice\n                if (tx.gasPrice == null) {\n                    tx.gasPrice = this.getGasPrice();\n                }\n            }\n            else {\n                // We need to get fee data to determine things\n                const feeData = yield this.getFeeData();\n                if (tx.type == null) {\n                    // We need to auto-detect the intended type of this transaction...\n                    if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                        // The network supports EIP-1559!\n                        // Upgrade transaction from null to eip-1559\n                        tx.type = 2;\n                        if (tx.gasPrice != null) {\n                            // Using legacy gasPrice property on an eip-1559 network,\n                            // so use gasPrice as both fee properties\n                            const gasPrice = tx.gasPrice;\n                            delete tx.gasPrice;\n                            tx.maxFeePerGas = gasPrice;\n                            tx.maxPriorityFeePerGas = gasPrice;\n                        }\n                        else {\n                            // Populate missing fee data\n                            if (tx.maxFeePerGas == null) {\n                                tx.maxFeePerGas = feeData.maxFeePerGas;\n                            }\n                            if (tx.maxPriorityFeePerGas == null) {\n                                tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                            }\n                        }\n                    }\n                    else if (feeData.gasPrice != null) {\n                        // Network doesn't support EIP-1559...\n                        // ...but they are trying to use EIP-1559 properties\n                        if (hasEip1559) {\n                            lib_esm_logger.throwError(\"network does not support EIP-1559\", Logger.errors.UNSUPPORTED_OPERATION, {\n                                operation: \"populateTransaction\"\n                            });\n                        }\n                        // Populate missing fee data\n                        if (tx.gasPrice == null) {\n                            tx.gasPrice = feeData.gasPrice;\n                        }\n                        // Explicitly set untyped transaction to legacy\n                        tx.type = 0;\n                    }\n                    else {\n                        // getFeeData has failed us.\n                        lib_esm_logger.throwError(\"failed to get consistent fee data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            operation: \"signer.getFeeData\"\n                        });\n                    }\n                }\n                else if (tx.type === 2) {\n                    // Explicitly using EIP-1559\n                    // Populate missing fee data\n                    if (tx.maxFeePerGas == null) {\n                        tx.maxFeePerGas = feeData.maxFeePerGas;\n                    }\n                    if (tx.maxPriorityFeePerGas == null) {\n                        tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                    }\n                }\n            }\n            if (tx.nonce == null) {\n                tx.nonce = this.getTransactionCount(\"pending\");\n            }\n            if (tx.gasLimit == null) {\n                tx.gasLimit = this.estimateGas(tx).catch((error) => {\n                    if (forwardErrors.indexOf(error.code) >= 0) {\n                        throw error;\n                    }\n                    return lib_esm_logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                        error: error,\n                        tx: tx\n                    });\n                });\n            }\n            if (tx.chainId == null) {\n                tx.chainId = this.getChainId();\n            }\n            else {\n                tx.chainId = Promise.all([\n                    Promise.resolve(tx.chainId),\n                    this.getChainId()\n                ]).then((results) => {\n                    if (results[1] !== 0 && results[0] !== results[1]) {\n                        lib_esm_logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n                    }\n                    return results[0];\n                });\n            }\n            return yield resolveProperties(tx);\n        });\n    }\n    ///////////////////\n    // Sub-classes SHOULD leave these alone\n    _checkProvider(operation) {\n        if (!this.provider) {\n            lib_esm_logger.throwError(\"missing provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: (operation || \"_checkProvider\")\n            });\n        }\n    }\n    static isSigner(value) {\n        return !!(value && value._isSigner);\n    }\n}\nclass VoidSigner extends Signer {\n    constructor(address, provider) {\n        super();\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"provider\", provider || null);\n    }\n    getAddress() {\n        return Promise.resolve(this.address);\n    }\n    _fail(message, operation) {\n        return Promise.resolve().then(() => {\n            lib_esm_logger.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, { operation: operation });\n        });\n    }\n    signMessage(message) {\n        return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n    }\n    signTransaction(transaction) {\n        return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n    }\n    _signTypedData(domain, types, value) {\n        return this._fail(\"VoidSigner cannot sign typed data\", \"signTypedData\");\n    }\n    connect(provider) {\n        return new VoidSigner(this.address, provider);\n    }\n}\n//# sourceMappingURL=index.js.map\n// EXTERNAL MODULE: ./node_modules/bn.js/lib/bn.js\nvar bn = __webpack_require__(\"./node_modules/bn.js/lib/bn.js\");\nvar bn_default = /*#__PURE__*/__webpack_require__.n(bn);\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/bytes/lib.esm/_version.js\nconst bytes_lib_esm_version_version = \"bytes/5.7.0\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/bytes/lib.esm/index.js\n\n\n\nconst bytes_lib_esm_logger = new Logger(bytes_lib_esm_version_version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nfunction isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nfunction isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        bytes_lib_esm_logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0\" + hex;\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                bytes_lib_esm_logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return bytes_lib_esm_logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nfunction concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nfunction stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nfunction zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        bytes_lib_esm_logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nfunction isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nfunction hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        bytes_lib_esm_logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                bytes_lib_esm_logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return bytes_lib_esm_logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nfunction hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nfunction hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        bytes_lib_esm_logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nfunction hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nfunction hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nfunction hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        bytes_lib_esm_logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nfunction hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        bytes_lib_esm_logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        bytes_lib_esm_logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nfunction splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n    if (isBytesLike(signature)) {\n        let bytes = arrayify(signature);\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n        }\n        else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        }\n        else {\n            bytes_lib_esm_logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                bytes_lib_esm_logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                bytes_lib_esm_logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                bytes_lib_esm_logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                bytes_lib_esm_logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    bytes_lib_esm_logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            bytes_lib_esm_logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            bytes_lib_esm_logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            bytes_lib_esm_logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                bytes_lib_esm_logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            bytes_lib_esm_logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n    return result;\n}\nfunction joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/bignumber/lib.esm/_version.js\nconst bignumber_lib_esm_version_version = \"bignumber/5.7.0\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\n\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardless.\n *\n */\n\nvar BN = (bn_default()).BN;\n\n\n\nconst bignumber_logger = new Logger(bignumber_lib_esm_version_version);\nconst _constructorGuard = {};\nconst MAX_SAFE = 0x1fffffffffffff;\nfunction isBigNumberish(value) {\n    return (value != null) && (BigNumber.isBigNumber(value) ||\n        (typeof (value) === \"number\" && (value % 1) === 0) ||\n        (typeof (value) === \"string\" && !!value.match(/^-?[0-9]+$/)) ||\n        isHexString(value) ||\n        (typeof (value) === \"bigint\") ||\n        isBytes(value));\n}\n// Only warn about passing 10 into radix once\nlet _warnedToStringRadix = false;\nclass BigNumber {\n    constructor(constructorGuard, hex) {\n        if (constructorGuard !== _constructorGuard) {\n            bignumber_logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new (BigNumber)\"\n            });\n        }\n        this._hex = hex;\n        this._isBigNumber = true;\n        Object.freeze(this);\n    }\n    fromTwos(value) {\n        return toBigNumber(toBN(this).fromTwos(value));\n    }\n    toTwos(value) {\n        return toBigNumber(toBN(this).toTwos(value));\n    }\n    abs() {\n        if (this._hex[0] === \"-\") {\n            return BigNumber.from(this._hex.substring(1));\n        }\n        return this;\n    }\n    add(other) {\n        return toBigNumber(toBN(this).add(toBN(other)));\n    }\n    sub(other) {\n        return toBigNumber(toBN(this).sub(toBN(other)));\n    }\n    div(other) {\n        const o = BigNumber.from(other);\n        if (o.isZero()) {\n            throwFault(\"division-by-zero\", \"div\");\n        }\n        return toBigNumber(toBN(this).div(toBN(other)));\n    }\n    mul(other) {\n        return toBigNumber(toBN(this).mul(toBN(other)));\n    }\n    mod(other) {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"division-by-zero\", \"mod\");\n        }\n        return toBigNumber(toBN(this).umod(value));\n    }\n    pow(other) {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"negative-power\", \"pow\");\n        }\n        return toBigNumber(toBN(this).pow(value));\n    }\n    and(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"and\");\n        }\n        return toBigNumber(toBN(this).and(value));\n    }\n    or(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"or\");\n        }\n        return toBigNumber(toBN(this).or(value));\n    }\n    xor(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"xor\");\n        }\n        return toBigNumber(toBN(this).xor(value));\n    }\n    mask(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"mask\");\n        }\n        return toBigNumber(toBN(this).maskn(value));\n    }\n    shl(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shl\");\n        }\n        return toBigNumber(toBN(this).shln(value));\n    }\n    shr(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shr\");\n        }\n        return toBigNumber(toBN(this).shrn(value));\n    }\n    eq(other) {\n        return toBN(this).eq(toBN(other));\n    }\n    lt(other) {\n        return toBN(this).lt(toBN(other));\n    }\n    lte(other) {\n        return toBN(this).lte(toBN(other));\n    }\n    gt(other) {\n        return toBN(this).gt(toBN(other));\n    }\n    gte(other) {\n        return toBN(this).gte(toBN(other));\n    }\n    isNegative() {\n        return (this._hex[0] === \"-\");\n    }\n    isZero() {\n        return toBN(this).isZero();\n    }\n    toNumber() {\n        try {\n            return toBN(this).toNumber();\n        }\n        catch (error) {\n            throwFault(\"overflow\", \"toNumber\", this.toString());\n        }\n        return null;\n    }\n    toBigInt() {\n        try {\n            return BigInt(this.toString());\n        }\n        catch (e) { }\n        return bignumber_logger.throwError(\"this platform does not support BigInt\", Logger.errors.UNSUPPORTED_OPERATION, {\n            value: this.toString()\n        });\n    }\n    toString() {\n        // Lots of people expect this, which we do not support, so check (See: #889)\n        if (arguments.length > 0) {\n            if (arguments[0] === 10) {\n                if (!_warnedToStringRadix) {\n                    _warnedToStringRadix = true;\n                    bignumber_logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n                }\n            }\n            else if (arguments[0] === 16) {\n                bignumber_logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n            }\n            else {\n                bignumber_logger.throwError(\"BigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n            }\n        }\n        return toBN(this).toString(10);\n    }\n    toHexString() {\n        return this._hex;\n    }\n    toJSON(key) {\n        return { type: \"BigNumber\", hex: this.toHexString() };\n    }\n    static from(value) {\n        if (value instanceof BigNumber) {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            if (value.match(/^-?0x[0-9a-f]+$/i)) {\n                return new BigNumber(_constructorGuard, toHex(value));\n            }\n            if (value.match(/^-?[0-9]+$/)) {\n                return new BigNumber(_constructorGuard, toHex(new BN(value)));\n            }\n            return bignumber_logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n        }\n        if (typeof (value) === \"number\") {\n            if (value % 1) {\n                throwFault(\"underflow\", \"BigNumber.from\", value);\n            }\n            if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n                throwFault(\"overflow\", \"BigNumber.from\", value);\n            }\n            return BigNumber.from(String(value));\n        }\n        const anyValue = value;\n        if (typeof (anyValue) === \"bigint\") {\n            return BigNumber.from(anyValue.toString());\n        }\n        if (isBytes(anyValue)) {\n            return BigNumber.from(hexlify(anyValue));\n        }\n        if (anyValue) {\n            // Hexable interface (takes priority)\n            if (anyValue.toHexString) {\n                const hex = anyValue.toHexString();\n                if (typeof (hex) === \"string\") {\n                    return BigNumber.from(hex);\n                }\n            }\n            else {\n                // For now, handle legacy JSON-ified values (goes away in v6)\n                let hex = anyValue._hex;\n                // New-form JSON\n                if (hex == null && anyValue.type === \"BigNumber\") {\n                    hex = anyValue.hex;\n                }\n                if (typeof (hex) === \"string\") {\n                    if (isHexString(hex) || (hex[0] === \"-\" && isHexString(hex.substring(1)))) {\n                        return BigNumber.from(hex);\n                    }\n                }\n            }\n        }\n        return bignumber_logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n    }\n    static isBigNumber(value) {\n        return !!(value && value._isBigNumber);\n    }\n}\n// Normalize the hex string\nfunction toHex(value) {\n    // For BN, call on the hex string\n    if (typeof (value) !== \"string\") {\n        return toHex(value.toString(16));\n    }\n    // If negative, prepend the negative sign to the normalized positive value\n    if (value[0] === \"-\") {\n        // Strip off the negative sign\n        value = value.substring(1);\n        // Cannot have multiple negative signs (e.g. \"--0x04\")\n        if (value[0] === \"-\") {\n            bignumber_logger.throwArgumentError(\"invalid hex\", \"value\", value);\n        }\n        // Call toHex on the positive component\n        value = toHex(value);\n        // Do not allow \"-0x00\"\n        if (value === \"0x00\") {\n            return value;\n        }\n        // Negate the value\n        return \"-\" + value;\n    }\n    // Add a \"0x\" prefix if missing\n    if (value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    // Normalize zero\n    if (value === \"0x\") {\n        return \"0x00\";\n    }\n    // Make the string even length\n    if (value.length % 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    // Trim to smallest even-length string\n    while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n        value = \"0x\" + value.substring(4);\n    }\n    return value;\n}\nfunction toBigNumber(value) {\n    return BigNumber.from(toHex(value));\n}\nfunction toBN(value) {\n    const hex = BigNumber.from(value).toHexString();\n    if (hex[0] === \"-\") {\n        return (new BN(\"-\" + hex.substring(3), 16));\n    }\n    return new BN(hex.substring(2), 16);\n}\nfunction throwFault(fault, operation, value) {\n    const params = { fault: fault, operation: operation };\n    if (value != null) {\n        params.value = value;\n    }\n    return bignumber_logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n}\n// value should have no prefix\nfunction _base36To16(value) {\n    return (new BN(value, 36)).toString(16);\n}\n// value should have no prefix\nfunction _base16To36(value) {\n    return (new BN(value, 16)).toString(36);\n}\n//# sourceMappingURL=bignumber.js.map\n// EXTERNAL MODULE: ./node_modules/js-sha3/src/sha3.js\nvar sha3 = __webpack_require__(\"./node_modules/js-sha3/src/sha3.js\");\nvar sha3_default = /*#__PURE__*/__webpack_require__.n(sha3);\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/keccak256/lib.esm/index.js\n\n\n\nfunction keccak256(data) {\n    return '0x' + sha3_default().keccak_256(arrayify(data));\n}\n//# sourceMappingURL=index.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/rlp/lib.esm/_version.js\nconst rlp_lib_esm_version_version = \"rlp/5.7.0\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/rlp/lib.esm/index.js\n\n//See: https://github.com/ethereum/wiki/wiki/RLP\n\n\n\nconst rlp_lib_esm_logger = new Logger(rlp_lib_esm_version_version);\nfunction arrayifyInteger(value) {\n    const result = [];\n    while (value) {\n        result.unshift(value & 0xff);\n        value >>= 8;\n    }\n    return result;\n}\nfunction unarrayifyInteger(data, offset, length) {\n    let result = 0;\n    for (let i = 0; i < length; i++) {\n        result = (result * 256) + data[offset + i];\n    }\n    return result;\n}\nfunction _encode(object) {\n    if (Array.isArray(object)) {\n        let payload = [];\n        object.forEach(function (child) {\n            payload = payload.concat(_encode(child));\n        });\n        if (payload.length <= 55) {\n            payload.unshift(0xc0 + payload.length);\n            return payload;\n        }\n        const length = arrayifyInteger(payload.length);\n        length.unshift(0xf7 + length.length);\n        return length.concat(payload);\n    }\n    if (!isBytesLike(object)) {\n        rlp_lib_esm_logger.throwArgumentError(\"RLP object must be BytesLike\", \"object\", object);\n    }\n    const data = Array.prototype.slice.call(arrayify(object));\n    if (data.length === 1 && data[0] <= 0x7f) {\n        return data;\n    }\n    else if (data.length <= 55) {\n        data.unshift(0x80 + data.length);\n        return data;\n    }\n    const length = arrayifyInteger(data.length);\n    length.unshift(0xb7 + length.length);\n    return length.concat(data);\n}\nfunction encode(object) {\n    return hexlify(_encode(object));\n}\nfunction _decodeChildren(data, offset, childOffset, length) {\n    const result = [];\n    while (childOffset < offset + 1 + length) {\n        const decoded = _decode(data, childOffset);\n        result.push(decoded.result);\n        childOffset += decoded.consumed;\n        if (childOffset > offset + 1 + length) {\n            rlp_lib_esm_logger.throwError(\"child data too short\", Logger.errors.BUFFER_OVERRUN, {});\n        }\n    }\n    return { consumed: (1 + length), result: result };\n}\n// returns { consumed: number, result: Object }\nfunction _decode(data, offset) {\n    if (data.length === 0) {\n        rlp_lib_esm_logger.throwError(\"data too short\", Logger.errors.BUFFER_OVERRUN, {});\n    }\n    // Array with extra length prefix\n    if (data[offset] >= 0xf8) {\n        const lengthLength = data[offset] - 0xf7;\n        if (offset + 1 + lengthLength > data.length) {\n            rlp_lib_esm_logger.throwError(\"data short segment too short\", Logger.errors.BUFFER_OVERRUN, {});\n        }\n        const length = unarrayifyInteger(data, offset + 1, lengthLength);\n        if (offset + 1 + lengthLength + length > data.length) {\n            rlp_lib_esm_logger.throwError(\"data long segment too short\", Logger.errors.BUFFER_OVERRUN, {});\n        }\n        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);\n    }\n    else if (data[offset] >= 0xc0) {\n        const length = data[offset] - 0xc0;\n        if (offset + 1 + length > data.length) {\n            rlp_lib_esm_logger.throwError(\"data array too short\", Logger.errors.BUFFER_OVERRUN, {});\n        }\n        return _decodeChildren(data, offset, offset + 1, length);\n    }\n    else if (data[offset] >= 0xb8) {\n        const lengthLength = data[offset] - 0xb7;\n        if (offset + 1 + lengthLength > data.length) {\n            rlp_lib_esm_logger.throwError(\"data array too short\", Logger.errors.BUFFER_OVERRUN, {});\n        }\n        const length = unarrayifyInteger(data, offset + 1, lengthLength);\n        if (offset + 1 + lengthLength + length > data.length) {\n            rlp_lib_esm_logger.throwError(\"data array too short\", Logger.errors.BUFFER_OVERRUN, {});\n        }\n        const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));\n        return { consumed: (1 + lengthLength + length), result: result };\n    }\n    else if (data[offset] >= 0x80) {\n        const length = data[offset] - 0x80;\n        if (offset + 1 + length > data.length) {\n            rlp_lib_esm_logger.throwError(\"data too short\", Logger.errors.BUFFER_OVERRUN, {});\n        }\n        const result = hexlify(data.slice(offset + 1, offset + 1 + length));\n        return { consumed: (1 + length), result: result };\n    }\n    return { consumed: 1, result: hexlify(data[offset]) };\n}\nfunction decode(data) {\n    const bytes = arrayify(data);\n    const decoded = _decode(bytes, 0);\n    if (decoded.consumed !== bytes.length) {\n        rlp_lib_esm_logger.throwArgumentError(\"invalid rlp data\", \"data\", data);\n    }\n    return decoded.result;\n}\n//# sourceMappingURL=index.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/address/lib.esm/_version.js\nconst address_lib_esm_version_version = \"address/5.7.0\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/address/lib.esm/index.js\n\n\n\n\n\n\n\nconst address_lib_esm_logger = new Logger(address_lib_esm_version_version);\nfunction getChecksumAddress(address) {\n    if (!isHexString(address, 20)) {\n        address_lib_esm_logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n    address = address.toLowerCase();\n    const chars = address.substring(2).split(\"\");\n    const expanded = new Uint8Array(40);\n    for (let i = 0; i < 40; i++) {\n        expanded[i] = chars[i].charCodeAt(0);\n    }\n    const hashed = arrayify(keccak256(expanded));\n    for (let i = 0; i < 40; i += 2) {\n        if ((hashed[i >> 1] >> 4) >= 8) {\n            chars[i] = chars[i].toUpperCase();\n        }\n        if ((hashed[i >> 1] & 0x0f) >= 8) {\n            chars[i + 1] = chars[i + 1].toUpperCase();\n        }\n    }\n    return \"0x\" + chars.join(\"\");\n}\n// Shims for environments that are missing some required constants and functions\nconst MAX_SAFE_INTEGER = 0x1fffffffffffff;\nfunction log10(x) {\n    if (Math.log10) {\n        return Math.log10(x);\n    }\n    return Math.log(x) / Math.LN10;\n}\n// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n// Create lookup table\nconst ibanLookup = {};\nfor (let i = 0; i < 10; i++) {\n    ibanLookup[String(i)] = String(i);\n}\nfor (let i = 0; i < 26; i++) {\n    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);\n}\n// How many decimal digits can we process? (for 64-bit float, this is 15)\nconst safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));\nfunction ibanChecksum(address) {\n    address = address.toUpperCase();\n    address = address.substring(4) + address.substring(0, 2) + \"00\";\n    let expanded = address.split(\"\").map((c) => { return ibanLookup[c]; }).join(\"\");\n    // Javascript can handle integers safely up to 15 (decimal) digits\n    while (expanded.length >= safeDigits) {\n        let block = expanded.substring(0, safeDigits);\n        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n    }\n    let checksum = String(98 - (parseInt(expanded, 10) % 97));\n    while (checksum.length < 2) {\n        checksum = \"0\" + checksum;\n    }\n    return checksum;\n}\n;\nfunction getAddress(address) {\n    let result = null;\n    if (typeof (address) !== \"string\") {\n        address_lib_esm_logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n        // Missing the 0x prefix\n        if (address.substring(0, 2) !== \"0x\") {\n            address = \"0x\" + address;\n        }\n        result = getChecksumAddress(address);\n        // It is a checksummed address with a bad checksum\n        if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {\n            address_lib_esm_logger.throwArgumentError(\"bad address checksum\", \"address\", address);\n        }\n        // Maybe ICAP? (we only support direct mode)\n    }\n    else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n        // It is an ICAP address with a bad checksum\n        if (address.substring(2, 4) !== ibanChecksum(address)) {\n            address_lib_esm_logger.throwArgumentError(\"bad icap checksum\", \"address\", address);\n        }\n        result = _base36To16(address.substring(4));\n        while (result.length < 40) {\n            result = \"0\" + result;\n        }\n        result = getChecksumAddress(\"0x\" + result);\n    }\n    else {\n        address_lib_esm_logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n    return result;\n}\nfunction isAddress(address) {\n    try {\n        getAddress(address);\n        return true;\n    }\n    catch (error) { }\n    return false;\n}\nfunction getIcapAddress(address) {\n    let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();\n    while (base36.length < 30) {\n        base36 = \"0\" + base36;\n    }\n    return \"XE\" + ibanChecksum(\"XE00\" + base36) + base36;\n}\n// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\nfunction getContractAddress(transaction) {\n    let from = null;\n    try {\n        from = getAddress(transaction.from);\n    }\n    catch (error) {\n        address_lib_esm_logger.throwArgumentError(\"missing from address\", \"transaction\", transaction);\n    }\n    const nonce = stripZeros(arrayify(BigNumber.from(transaction.nonce).toHexString()));\n    return getAddress(hexDataSlice(keccak256(encode([from, nonce])), 12));\n}\nfunction getCreate2Address(from, salt, initCodeHash) {\n    if (hexDataLength(salt) !== 32) {\n        address_lib_esm_logger.throwArgumentError(\"salt must be 32 bytes\", \"salt\", salt);\n    }\n    if (hexDataLength(initCodeHash) !== 32) {\n        address_lib_esm_logger.throwArgumentError(\"initCodeHash must be 32 bytes\", \"initCodeHash\", initCodeHash);\n    }\n    return getAddress(hexDataSlice(keccak256(concat([\"0xff\", getAddress(from), salt, initCodeHash])), 12));\n}\n//# sourceMappingURL=index.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/hash/lib.esm/_version.js\nconst hash_lib_esm_version_version = \"hash/5.7.0\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/strings/lib.esm/_version.js\nconst strings_lib_esm_version_version = \"strings/5.7.0\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/strings/lib.esm/utf8.js\n\n\n\n\nconst utf8_logger = new Logger(strings_lib_esm_version_version);\n///////////////////////////////\nvar UnicodeNormalizationForm;\n(function (UnicodeNormalizationForm) {\n    UnicodeNormalizationForm[\"current\"] = \"\";\n    UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\n    UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\n    UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\n    UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\n})(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));\n;\nvar Utf8ErrorReason;\n(function (Utf8ErrorReason) {\n    // A continuation byte was present where there was nothing to continue\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"UNEXPECTED_CONTINUE\"] = \"unexpected continuation byte\";\n    // An invalid (non-continuation) byte to start a UTF-8 codepoint was found\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"BAD_PREFIX\"] = \"bad codepoint prefix\";\n    // The string is too short to process the expected codepoint\n    // - offset = the index the codepoint began in\n    Utf8ErrorReason[\"OVERRUN\"] = \"string overrun\";\n    // A missing continuation byte was expected but not found\n    // - offset = the index the continuation byte was expected at\n    Utf8ErrorReason[\"MISSING_CONTINUE\"] = \"missing continuation byte\";\n    // The computed code point is outside the range for UTF-8\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; outside the UTF-8 range\n    Utf8ErrorReason[\"OUT_OF_RANGE\"] = \"out of UTF-8 range\";\n    // UTF-8 strings may not contain UTF-16 surrogate pairs\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range\n    Utf8ErrorReason[\"UTF16_SURROGATE\"] = \"UTF-16 surrogate\";\n    // The string is an overlong representation\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; already bounds checked\n    Utf8ErrorReason[\"OVERLONG\"] = \"overlong representation\";\n})(Utf8ErrorReason || (Utf8ErrorReason = {}));\n;\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\n    return utf8_logger.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, \"bytes\", bytes);\n}\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\n    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {\n        let i = 0;\n        for (let o = offset + 1; o < bytes.length; o++) {\n            if (bytes[o] >> 6 !== 0x02) {\n                break;\n            }\n            i++;\n        }\n        return i;\n    }\n    // This byte runs us past the end of the string, so just jump to the end\n    // (but the first byte was read already read and therefore skipped)\n    if (reason === Utf8ErrorReason.OVERRUN) {\n        return bytes.length - offset - 1;\n    }\n    // Nothing to skip\n    return 0;\n}\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\n    // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n    if (reason === Utf8ErrorReason.OVERLONG) {\n        output.push(badCodepoint);\n        return 0;\n    }\n    // Put the replacement character into the output\n    output.push(0xfffd);\n    // Otherwise, process as if ignoring errors\n    return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n}\n// Common error handing strategies\nconst Utf8ErrorFuncs = Object.freeze({\n    error: errorFunc,\n    ignore: ignoreFunc,\n    replace: replaceFunc\n});\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction getUtf8CodePoints(bytes, onError) {\n    if (onError == null) {\n        onError = Utf8ErrorFuncs.error;\n    }\n    bytes = arrayify(bytes);\n    const result = [];\n    let i = 0;\n    // Invalid bytes are ignored\n    while (i < bytes.length) {\n        const c = bytes[i++];\n        // 0xxx xxxx\n        if (c >> 7 === 0) {\n            result.push(c);\n            continue;\n        }\n        // Multibyte; how many bytes left for this character?\n        let extraLength = null;\n        let overlongMask = null;\n        // 110x xxxx 10xx xxxx\n        if ((c & 0xe0) === 0xc0) {\n            extraLength = 1;\n            overlongMask = 0x7f;\n            // 1110 xxxx 10xx xxxx 10xx xxxx\n        }\n        else if ((c & 0xf0) === 0xe0) {\n            extraLength = 2;\n            overlongMask = 0x7ff;\n            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n        }\n        else if ((c & 0xf8) === 0xf0) {\n            extraLength = 3;\n            overlongMask = 0xffff;\n        }\n        else {\n            if ((c & 0xc0) === 0x80) {\n                i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);\n            }\n            else {\n                i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);\n            }\n            continue;\n        }\n        // Do we have enough bytes in our data?\n        if (i - 1 + extraLength >= bytes.length) {\n            i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);\n            continue;\n        }\n        // Remove the length prefix from the char\n        let res = c & ((1 << (8 - extraLength - 1)) - 1);\n        for (let j = 0; j < extraLength; j++) {\n            let nextChar = bytes[i];\n            // Invalid continuation byte\n            if ((nextChar & 0xc0) != 0x80) {\n                i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);\n                res = null;\n                break;\n            }\n            ;\n            res = (res << 6) | (nextChar & 0x3f);\n            i++;\n        }\n        // See above loop for invalid continuation byte\n        if (res === null) {\n            continue;\n        }\n        // Maximum code point\n        if (res > 0x10ffff) {\n            i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Reserved for UTF-16 surrogate halves\n        if (res >= 0xd800 && res <= 0xdfff) {\n            i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Check for overlong sequences (more bytes than needed)\n        if (res <= overlongMask) {\n            i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        result.push(res);\n    }\n    return result;\n}\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\nfunction toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {\n    if (form != UnicodeNormalizationForm.current) {\n        utf8_logger.checkNormalize();\n        str = str.normalize(form);\n    }\n    let result = [];\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charCodeAt(i);\n        if (c < 0x80) {\n            result.push(c);\n        }\n        else if (c < 0x800) {\n            result.push((c >> 6) | 0xc0);\n            result.push((c & 0x3f) | 0x80);\n        }\n        else if ((c & 0xfc00) == 0xd800) {\n            i++;\n            const c2 = str.charCodeAt(i);\n            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\n                throw new Error(\"invalid utf-8 string\");\n            }\n            // Surrogate Pair\n            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n            result.push((pair >> 18) | 0xf0);\n            result.push(((pair >> 12) & 0x3f) | 0x80);\n            result.push(((pair >> 6) & 0x3f) | 0x80);\n            result.push((pair & 0x3f) | 0x80);\n        }\n        else {\n            result.push((c >> 12) | 0xe0);\n            result.push(((c >> 6) & 0x3f) | 0x80);\n            result.push((c & 0x3f) | 0x80);\n        }\n    }\n    return arrayify(result);\n}\n;\nfunction escapeChar(value) {\n    const hex = (\"0000\" + value.toString(16));\n    return \"\\\\u\" + hex.substring(hex.length - 4);\n}\nfunction _toEscapedUtf8String(bytes, onError) {\n    return '\"' + getUtf8CodePoints(bytes, onError).map((codePoint) => {\n        if (codePoint < 256) {\n            switch (codePoint) {\n                case 8: return \"\\\\b\";\n                case 9: return \"\\\\t\";\n                case 10: return \"\\\\n\";\n                case 13: return \"\\\\r\";\n                case 34: return \"\\\\\\\"\";\n                case 92: return \"\\\\\\\\\";\n            }\n            if (codePoint >= 32 && codePoint < 127) {\n                return String.fromCharCode(codePoint);\n            }\n        }\n        if (codePoint <= 0xffff) {\n            return escapeChar(codePoint);\n        }\n        codePoint -= 0x10000;\n        return escapeChar(((codePoint >> 10) & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);\n    }).join(\"\") + '\"';\n}\nfunction _toUtf8String(codePoints) {\n    return codePoints.map((codePoint) => {\n        if (codePoint <= 0xffff) {\n            return String.fromCharCode(codePoint);\n        }\n        codePoint -= 0x10000;\n        return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));\n    }).join(\"\");\n}\nfunction toUtf8String(bytes, onError) {\n    return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\nfunction toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {\n    return getUtf8CodePoints(toUtf8Bytes(str, form));\n}\n//# sourceMappingURL=utf8.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/hash/lib.esm/id.js\n\n\nfunction id(text) {\n    return keccak256(toUtf8Bytes(text));\n}\n//# sourceMappingURL=id.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/hash/lib.esm/typed-data.js\nvar typed_data_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\nconst typed_data_logger = new Logger(hash_lib_esm_version_version);\n\nconst padding = new Uint8Array(32);\npadding.fill(0);\nconst NegativeOne = BigNumber.from(-1);\nconst Zero = BigNumber.from(0);\nconst One = BigNumber.from(1);\nconst MaxUint256 = BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nfunction hexPadRight(value) {\n    const bytes = arrayify(value);\n    const padOffset = bytes.length % 32;\n    if (padOffset) {\n        return hexConcat([bytes, padding.slice(padOffset)]);\n    }\n    return hexlify(bytes);\n}\nconst hexTrue = hexZeroPad(One.toHexString(), 32);\nconst hexFalse = hexZeroPad(Zero.toHexString(), 32);\nconst domainFieldTypes = {\n    name: \"string\",\n    version: \"string\",\n    chainId: \"uint256\",\n    verifyingContract: \"address\",\n    salt: \"bytes32\"\n};\nconst domainFieldNames = [\n    \"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"\n];\nfunction checkString(key) {\n    return function (value) {\n        if (typeof (value) !== \"string\") {\n            typed_data_logger.throwArgumentError(`invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);\n        }\n        return value;\n    };\n}\nconst domainChecks = {\n    name: checkString(\"name\"),\n    version: checkString(\"version\"),\n    chainId: function (value) {\n        try {\n            return BigNumber.from(value).toString();\n        }\n        catch (error) { }\n        return typed_data_logger.throwArgumentError(`invalid domain value for \"chainId\"`, \"domain.chainId\", value);\n    },\n    verifyingContract: function (value) {\n        try {\n            return getAddress(value).toLowerCase();\n        }\n        catch (error) { }\n        return typed_data_logger.throwArgumentError(`invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n    },\n    salt: function (value) {\n        try {\n            const bytes = arrayify(value);\n            if (bytes.length !== 32) {\n                throw new Error(\"bad length\");\n            }\n            return hexlify(bytes);\n        }\n        catch (error) { }\n        return typed_data_logger.throwArgumentError(`invalid domain value \"salt\"`, \"domain.salt\", value);\n    }\n};\nfunction getBaseEncoder(type) {\n    // intXX and uintXX\n    {\n        const match = type.match(/^(u?)int(\\d*)$/);\n        if (match) {\n            const signed = (match[1] === \"\");\n            const width = parseInt(match[2] || \"256\");\n            if (width % 8 !== 0 || width > 256 || (match[2] && match[2] !== String(width))) {\n                typed_data_logger.throwArgumentError(\"invalid numeric width\", \"type\", type);\n            }\n            const boundsUpper = MaxUint256.mask(signed ? (width - 1) : width);\n            const boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne) : Zero;\n            return function (value) {\n                const v = BigNumber.from(value);\n                if (v.lt(boundsLower) || v.gt(boundsUpper)) {\n                    typed_data_logger.throwArgumentError(`value out-of-bounds for ${type}`, \"value\", value);\n                }\n                return hexZeroPad(v.toTwos(256).toHexString(), 32);\n            };\n        }\n    }\n    // bytesXX\n    {\n        const match = type.match(/^bytes(\\d+)$/);\n        if (match) {\n            const width = parseInt(match[1]);\n            if (width === 0 || width > 32 || match[1] !== String(width)) {\n                typed_data_logger.throwArgumentError(\"invalid bytes width\", \"type\", type);\n            }\n            return function (value) {\n                const bytes = arrayify(value);\n                if (bytes.length !== width) {\n                    typed_data_logger.throwArgumentError(`invalid length for ${type}`, \"value\", value);\n                }\n                return hexPadRight(value);\n            };\n        }\n    }\n    switch (type) {\n        case \"address\": return function (value) {\n            return hexZeroPad(getAddress(value), 32);\n        };\n        case \"bool\": return function (value) {\n            return ((!value) ? hexFalse : hexTrue);\n        };\n        case \"bytes\": return function (value) {\n            return keccak256(value);\n        };\n        case \"string\": return function (value) {\n            return id(value);\n        };\n    }\n    return null;\n}\nfunction encodeType(name, fields) {\n    return `${name}(${fields.map(({ name, type }) => (type + \" \" + name)).join(\",\")})`;\n}\nclass TypedDataEncoder {\n    constructor(types) {\n        defineReadOnly(this, \"types\", Object.freeze(deepCopy(types)));\n        defineReadOnly(this, \"_encoderCache\", {});\n        defineReadOnly(this, \"_types\", {});\n        // Link struct types to their direct child structs\n        const links = {};\n        // Link structs to structs which contain them as a child\n        const parents = {};\n        // Link all subtypes within a given struct\n        const subtypes = {};\n        Object.keys(types).forEach((type) => {\n            links[type] = {};\n            parents[type] = [];\n            subtypes[type] = {};\n        });\n        for (const name in types) {\n            const uniqueNames = {};\n            types[name].forEach((field) => {\n                // Check each field has a unique name\n                if (uniqueNames[field.name]) {\n                    typed_data_logger.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, \"types\", types);\n                }\n                uniqueNames[field.name] = true;\n                // Get the base type (drop any array specifiers)\n                const baseType = field.type.match(/^([^\\x5b]*)(\\x5b|$)/)[1];\n                if (baseType === name) {\n                    typed_data_logger.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, \"types\", types);\n                }\n                // Is this a base encoding type?\n                const encoder = getBaseEncoder(baseType);\n                if (encoder) {\n                    return;\n                }\n                if (!parents[baseType]) {\n                    typed_data_logger.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, \"types\", types);\n                }\n                // Add linkage\n                parents[baseType].push(name);\n                links[name][baseType] = true;\n            });\n        }\n        // Deduce the primary type\n        const primaryTypes = Object.keys(parents).filter((n) => (parents[n].length === 0));\n        if (primaryTypes.length === 0) {\n            typed_data_logger.throwArgumentError(\"missing primary type\", \"types\", types);\n        }\n        else if (primaryTypes.length > 1) {\n            typed_data_logger.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map((t) => (JSON.stringify(t))).join(\", \")}`, \"types\", types);\n        }\n        defineReadOnly(this, \"primaryType\", primaryTypes[0]);\n        // Check for circular type references\n        function checkCircular(type, found) {\n            if (found[type]) {\n                typed_data_logger.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, \"types\", types);\n            }\n            found[type] = true;\n            Object.keys(links[type]).forEach((child) => {\n                if (!parents[child]) {\n                    return;\n                }\n                // Recursively check children\n                checkCircular(child, found);\n                // Mark all ancestors as having this decendant\n                Object.keys(found).forEach((subtype) => {\n                    subtypes[subtype][child] = true;\n                });\n            });\n            delete found[type];\n        }\n        checkCircular(this.primaryType, {});\n        // Compute each fully describe type\n        for (const name in subtypes) {\n            const st = Object.keys(subtypes[name]);\n            st.sort();\n            this._types[name] = encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(\"\");\n        }\n    }\n    getEncoder(type) {\n        let encoder = this._encoderCache[type];\n        if (!encoder) {\n            encoder = this._encoderCache[type] = this._getEncoder(type);\n        }\n        return encoder;\n    }\n    _getEncoder(type) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return encoder;\n            }\n        }\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const subEncoder = this.getEncoder(subtype);\n            const length = parseInt(match[3]);\n            return (value) => {\n                if (length >= 0 && value.length !== length) {\n                    typed_data_logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n                }\n                let result = value.map(subEncoder);\n                if (this._types[subtype]) {\n                    result = result.map(keccak256);\n                }\n                return keccak256(hexConcat(result));\n            };\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            const encodedType = id(this._types[type]);\n            return (value) => {\n                const values = fields.map(({ name, type }) => {\n                    const result = this.getEncoder(type)(value[name]);\n                    if (this._types[type]) {\n                        return keccak256(result);\n                    }\n                    return result;\n                });\n                values.unshift(encodedType);\n                return hexConcat(values);\n            };\n        }\n        return typed_data_logger.throwArgumentError(`unknown type: ${type}`, \"type\", type);\n    }\n    encodeType(name) {\n        const result = this._types[name];\n        if (!result) {\n            typed_data_logger.throwArgumentError(`unknown type: ${JSON.stringify(name)}`, \"name\", name);\n        }\n        return result;\n    }\n    encodeData(type, value) {\n        return this.getEncoder(type)(value);\n    }\n    hashStruct(name, value) {\n        return keccak256(this.encodeData(name, value));\n    }\n    encode(value) {\n        return this.encodeData(this.primaryType, value);\n    }\n    hash(value) {\n        return this.hashStruct(this.primaryType, value);\n    }\n    _visit(type, value, callback) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return callback(type, value);\n            }\n        }\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const length = parseInt(match[3]);\n            if (length >= 0 && value.length !== length) {\n                typed_data_logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n            }\n            return value.map((v) => this._visit(subtype, v, callback));\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            return fields.reduce((accum, { name, type }) => {\n                accum[name] = this._visit(type, value[name], callback);\n                return accum;\n            }, {});\n        }\n        return typed_data_logger.throwArgumentError(`unknown type: ${type}`, \"type\", type);\n    }\n    visit(value, callback) {\n        return this._visit(this.primaryType, value, callback);\n    }\n    static from(types) {\n        return new TypedDataEncoder(types);\n    }\n    static getPrimaryType(types) {\n        return TypedDataEncoder.from(types).primaryType;\n    }\n    static hashStruct(name, types, value) {\n        return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n    static hashDomain(domain) {\n        const domainFields = [];\n        for (const name in domain) {\n            const type = domainFieldTypes[name];\n            if (!type) {\n                typed_data_logger.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name)}`, \"domain\", domain);\n            }\n            domainFields.push({ name, type });\n        }\n        domainFields.sort((a, b) => {\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n        });\n        return TypedDataEncoder.hashStruct(\"EIP712Domain\", { EIP712Domain: domainFields }, domain);\n    }\n    static encode(domain, types, value) {\n        return hexConcat([\n            \"0x1901\",\n            TypedDataEncoder.hashDomain(domain),\n            TypedDataEncoder.from(types).hash(value)\n        ]);\n    }\n    static hash(domain, types, value) {\n        return keccak256(TypedDataEncoder.encode(domain, types, value));\n    }\n    // Replaces all address types with ENS names with their looked up address\n    static resolveNames(domain, types, value, resolveName) {\n        return typed_data_awaiter(this, void 0, void 0, function* () {\n            // Make a copy to isolate it from the object passed in\n            domain = shallowCopy(domain);\n            // Look up all ENS names\n            const ensCache = {};\n            // Do we need to look up the domain's verifyingContract?\n            if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n                ensCache[domain.verifyingContract] = \"0x\";\n            }\n            // We are going to use the encoder to visit all the base values\n            const encoder = TypedDataEncoder.from(types);\n            // Get a list of all the addresses\n            encoder.visit(value, (type, value) => {\n                if (type === \"address\" && !isHexString(value, 20)) {\n                    ensCache[value] = \"0x\";\n                }\n                return value;\n            });\n            // Lookup each name\n            for (const name in ensCache) {\n                ensCache[name] = yield resolveName(name);\n            }\n            // Replace the domain verifyingContract if needed\n            if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n                domain.verifyingContract = ensCache[domain.verifyingContract];\n            }\n            // Replace all ENS names with their address\n            value = encoder.visit(value, (type, value) => {\n                if (type === \"address\" && ensCache[value]) {\n                    return ensCache[value];\n                }\n                return value;\n            });\n            return { domain, value };\n        });\n    }\n    static getPayload(domain, types, value) {\n        // Validate the domain fields\n        TypedDataEncoder.hashDomain(domain);\n        // Derive the EIP712Domain Struct reference type\n        const domainValues = {};\n        const domainTypes = [];\n        domainFieldNames.forEach((name) => {\n            const value = domain[name];\n            if (value == null) {\n                return;\n            }\n            domainValues[name] = domainChecks[name](value);\n            domainTypes.push({ name, type: domainFieldTypes[name] });\n        });\n        const encoder = TypedDataEncoder.from(types);\n        const typesWithDomain = shallowCopy(types);\n        if (typesWithDomain.EIP712Domain) {\n            typed_data_logger.throwArgumentError(\"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n        }\n        else {\n            typesWithDomain.EIP712Domain = domainTypes;\n        }\n        // Validate the data structures and types\n        encoder.encode(value);\n        return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type, value) => {\n                // bytes\n                if (type.match(/^bytes(\\d*)/)) {\n                    return hexlify(arrayify(value));\n                }\n                // uint or int\n                if (type.match(/^u?int/)) {\n                    return BigNumber.from(value).toString();\n                }\n                switch (type) {\n                    case \"address\":\n                        return value.toLowerCase();\n                    case \"bool\":\n                        return !!value;\n                    case \"string\":\n                        if (typeof (value) !== \"string\") {\n                            typed_data_logger.throwArgumentError(`invalid string`, \"value\", value);\n                        }\n                        return value;\n                }\n                return typed_data_logger.throwArgumentError(\"unsupported type\", \"type\", type);\n            })\n        };\n    }\n}\n//# sourceMappingURL=typed-data.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/constants/lib.esm/bignumbers.js\n\nconst bignumbers_NegativeOne = ( /*#__PURE__*/BigNumber.from(-1));\nconst bignumbers_Zero = ( /*#__PURE__*/BigNumber.from(0));\nconst bignumbers_One = ( /*#__PURE__*/BigNumber.from(1));\nconst Two = ( /*#__PURE__*/BigNumber.from(2));\nconst WeiPerEther = ( /*#__PURE__*/BigNumber.from(\"1000000000000000000\"));\nconst bignumbers_MaxUint256 = ( /*#__PURE__*/BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));\nconst MinInt256 = ( /*#__PURE__*/BigNumber.from(\"-0x8000000000000000000000000000000000000000000000000000000000000000\"));\nconst MaxInt256 = ( /*#__PURE__*/BigNumber.from(\"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"));\n\n//# sourceMappingURL=bignumbers.js.map\n// EXTERNAL MODULE: ./node_modules/hash.js/lib/hash.js\nvar hash = __webpack_require__(\"./node_modules/hash.js/lib/hash.js\");\nvar hash_default = /*#__PURE__*/__webpack_require__.n(hash);\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/signing-key/lib.esm/elliptic.js\n\n\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nfunction createCommonjsModule(fn, basedir, module) {\n\treturn module = {\n\t\tpath: basedir,\n\t\texports: {},\n\t\trequire: function (path, base) {\n\t\t\treturn commonjsRequire(path, (base === undefined || base === null) ? module.path : base);\n\t\t}\n\t}, fn(module, module.exports), module.exports;\n}\n\nfunction getDefaultExportFromNamespaceIfPresent (n) {\n\treturn n && Object.prototype.hasOwnProperty.call(n, 'default') ? n['default'] : n;\n}\n\nfunction getDefaultExportFromNamespaceIfNotNamed (n) {\n\treturn n && Object.prototype.hasOwnProperty.call(n, 'default') && Object.keys(n).length === 1 ? n['default'] : n;\n}\n\nfunction getAugmentedNamespace(n) {\n\tif (n.__esModule) return n;\n\tvar a = Object.defineProperty({}, '__esModule', {value: true});\n\tObject.keys(n).forEach(function (k) {\n\t\tvar d = Object.getOwnPropertyDescriptor(n, k);\n\t\tObject.defineProperty(a, k, d.get ? d : {\n\t\t\tenumerable: true,\n\t\t\tget: function () {\n\t\t\t\treturn n[k];\n\t\t\t}\n\t\t});\n\t});\n\treturn a;\n}\n\nfunction commonjsRequire () {\n\tthrow new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');\n}\n\nvar minimalisticAssert = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n\nvar utils_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nvar utils = exports;\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg !== 'string') {\n    for (var i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n    return res;\n  }\n  if (enc === 'hex') {\n    msg = msg.replace(/[^a-z0-9]+/ig, '');\n    if (msg.length % 2 !== 0)\n      msg = '0' + msg;\n    for (var i = 0; i < msg.length; i += 2)\n      res.push(parseInt(msg[i] + msg[i + 1], 16));\n  } else {\n    for (var i = 0; i < msg.length; i++) {\n      var c = msg.charCodeAt(i);\n      var hi = c >> 8;\n      var lo = c & 0xff;\n      if (hi)\n        res.push(hi, lo);\n      else\n        res.push(lo);\n    }\n  }\n  return res;\n}\nutils.toArray = toArray;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nutils.zero2 = zero2;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nutils.toHex = toHex;\n\nutils.encode = function encode(arr, enc) {\n  if (enc === 'hex')\n    return toHex(arr);\n  else\n    return arr;\n};\n});\n\nvar utils_1$1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nvar utils = exports;\n\n\n\n\nutils.assert = minimalisticAssert;\nutils.toArray = utils_1.toArray;\nutils.zero2 = utils_1.zero2;\nutils.toHex = utils_1.toHex;\nutils.encode = utils_1.encode;\n\n// Represent num in a w-NAF form\nfunction getNAF(num, w, bits) {\n  var naf = new Array(Math.max(num.bitLength(), bits) + 1);\n  naf.fill(0);\n\n  var ws = 1 << (w + 1);\n  var k = num.clone();\n\n  for (var i = 0; i < naf.length; i++) {\n    var z;\n    var mod = k.andln(ws - 1);\n    if (k.isOdd()) {\n      if (mod > (ws >> 1) - 1)\n        z = (ws >> 1) - mod;\n      else\n        z = mod;\n      k.isubn(z);\n    } else {\n      z = 0;\n    }\n\n    naf[i] = z;\n    k.iushrn(1);\n  }\n\n  return naf;\n}\nutils.getNAF = getNAF;\n\n// Represent k1, k2 in a Joint Sparse Form\nfunction getJSF(k1, k2) {\n  var jsf = [\n    [],\n    [],\n  ];\n\n  k1 = k1.clone();\n  k2 = k2.clone();\n  var d1 = 0;\n  var d2 = 0;\n  var m8;\n  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n    // First phase\n    var m14 = (k1.andln(3) + d1) & 3;\n    var m24 = (k2.andln(3) + d2) & 3;\n    if (m14 === 3)\n      m14 = -1;\n    if (m24 === 3)\n      m24 = -1;\n    var u1;\n    if ((m14 & 1) === 0) {\n      u1 = 0;\n    } else {\n      m8 = (k1.andln(7) + d1) & 7;\n      if ((m8 === 3 || m8 === 5) && m24 === 2)\n        u1 = -m14;\n      else\n        u1 = m14;\n    }\n    jsf[0].push(u1);\n\n    var u2;\n    if ((m24 & 1) === 0) {\n      u2 = 0;\n    } else {\n      m8 = (k2.andln(7) + d2) & 7;\n      if ((m8 === 3 || m8 === 5) && m14 === 2)\n        u2 = -m24;\n      else\n        u2 = m24;\n    }\n    jsf[1].push(u2);\n\n    // Second phase\n    if (2 * d1 === u1 + 1)\n      d1 = 1 - d1;\n    if (2 * d2 === u2 + 1)\n      d2 = 1 - d2;\n    k1.iushrn(1);\n    k2.iushrn(1);\n  }\n\n  return jsf;\n}\nutils.getJSF = getJSF;\n\nfunction cachedProperty(obj, name, computer) {\n  var key = '_' + name;\n  obj.prototype[name] = function cachedProperty() {\n    return this[key] !== undefined ? this[key] :\n      this[key] = computer.call(this);\n  };\n}\nutils.cachedProperty = cachedProperty;\n\nfunction parseBytes(bytes) {\n  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :\n    bytes;\n}\nutils.parseBytes = parseBytes;\n\nfunction intFromLE(bytes) {\n  return new (bn_default())(bytes, 'hex', 'le');\n}\nutils.intFromLE = intFromLE;\n});\n\n'use strict';\n\n\n\nvar getNAF = utils_1$1.getNAF;\nvar getJSF = utils_1$1.getJSF;\nvar assert$1 = utils_1$1.assert;\n\nfunction BaseCurve(type, conf) {\n  this.type = type;\n  this.p = new (bn_default())(conf.p, 16);\n\n  // Use Montgomery, when there is no fast reduction for the prime\n  this.red = conf.prime ? bn_default().red(conf.prime) : bn_default().mont(this.p);\n\n  // Useful for many curves\n  this.zero = new (bn_default())(0).toRed(this.red);\n  this.one = new (bn_default())(1).toRed(this.red);\n  this.two = new (bn_default())(2).toRed(this.red);\n\n  // Curve configuration, optional\n  this.n = conf.n && new (bn_default())(conf.n, 16);\n  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\n\n  // Temporary arrays\n  this._wnafT1 = new Array(4);\n  this._wnafT2 = new Array(4);\n  this._wnafT3 = new Array(4);\n  this._wnafT4 = new Array(4);\n\n  this._bitLength = this.n ? this.n.bitLength() : 0;\n\n  // Generalized Greg Maxwell's trick\n  var adjustCount = this.n && this.p.div(this.n);\n  if (!adjustCount || adjustCount.cmpn(100) > 0) {\n    this.redN = null;\n  } else {\n    this._maxwellTrick = true;\n    this.redN = this.n.toRed(this.red);\n  }\n}\nvar base = BaseCurve;\n\nBaseCurve.prototype.point = function point() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype.validate = function validate() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n  assert$1(p.precomputed);\n  var doubles = p._getDoubles();\n\n  var naf = getNAF(k, 1, this._bitLength);\n  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);\n  I /= 3;\n\n  // Translate into more windowed form\n  var repr = [];\n  var j;\n  var nafW;\n  for (j = 0; j < naf.length; j += doubles.step) {\n    nafW = 0;\n    for (var l = j + doubles.step - 1; l >= j; l--)\n      nafW = (nafW << 1) + naf[l];\n    repr.push(nafW);\n  }\n\n  var a = this.jpoint(null, null, null);\n  var b = this.jpoint(null, null, null);\n  for (var i = I; i > 0; i--) {\n    for (j = 0; j < repr.length; j++) {\n      nafW = repr[j];\n      if (nafW === i)\n        b = b.mixedAdd(doubles.points[j]);\n      else if (nafW === -i)\n        b = b.mixedAdd(doubles.points[j].neg());\n    }\n    a = a.add(b);\n  }\n  return a.toP();\n};\n\nBaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n  var w = 4;\n\n  // Precompute window\n  var nafPoints = p._getNAFPoints(w);\n  w = nafPoints.wnd;\n  var wnd = nafPoints.points;\n\n  // Get NAF form\n  var naf = getNAF(k, w, this._bitLength);\n\n  // Add `this`*(N+1) for every w-NAF index\n  var acc = this.jpoint(null, null, null);\n  for (var i = naf.length - 1; i >= 0; i--) {\n    // Count zeroes\n    for (var l = 0; i >= 0 && naf[i] === 0; i--)\n      l++;\n    if (i >= 0)\n      l++;\n    acc = acc.dblp(l);\n\n    if (i < 0)\n      break;\n    var z = naf[i];\n    assert$1(z !== 0);\n    if (p.type === 'affine') {\n      // J +- P\n      if (z > 0)\n        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());\n    } else {\n      // J +- J\n      if (z > 0)\n        acc = acc.add(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.add(wnd[(-z - 1) >> 1].neg());\n    }\n  }\n  return p.type === 'affine' ? acc.toP() : acc;\n};\n\nBaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,\n  points,\n  coeffs,\n  len,\n  jacobianResult) {\n  var wndWidth = this._wnafT1;\n  var wnd = this._wnafT2;\n  var naf = this._wnafT3;\n\n  // Fill all arrays\n  var max = 0;\n  var i;\n  var j;\n  var p;\n  for (i = 0; i < len; i++) {\n    p = points[i];\n    var nafPoints = p._getNAFPoints(defW);\n    wndWidth[i] = nafPoints.wnd;\n    wnd[i] = nafPoints.points;\n  }\n\n  // Comb small window NAFs\n  for (i = len - 1; i >= 1; i -= 2) {\n    var a = i - 1;\n    var b = i;\n    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);\n      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);\n      max = Math.max(naf[a].length, max);\n      max = Math.max(naf[b].length, max);\n      continue;\n    }\n\n    var comb = [\n      points[a], /* 1 */\n      null, /* 3 */\n      null, /* 5 */\n      points[b], /* 7 */\n    ];\n\n    // Try to avoid Projective points, if possible\n    if (points[a].y.cmp(points[b].y) === 0) {\n      comb[1] = points[a].add(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].add(points[b].neg());\n    } else {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    }\n\n    var index = [\n      -3, /* -1 -1 */\n      -1, /* -1 0 */\n      -5, /* -1 1 */\n      -7, /* 0 -1 */\n      0, /* 0 0 */\n      7, /* 0 1 */\n      5, /* 1 -1 */\n      1, /* 1 0 */\n      3,  /* 1 1 */\n    ];\n\n    var jsf = getJSF(coeffs[a], coeffs[b]);\n    max = Math.max(jsf[0].length, max);\n    naf[a] = new Array(max);\n    naf[b] = new Array(max);\n    for (j = 0; j < max; j++) {\n      var ja = jsf[0][j] | 0;\n      var jb = jsf[1][j] | 0;\n\n      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n      naf[b][j] = 0;\n      wnd[a] = comb;\n    }\n  }\n\n  var acc = this.jpoint(null, null, null);\n  var tmp = this._wnafT4;\n  for (i = max; i >= 0; i--) {\n    var k = 0;\n\n    while (i >= 0) {\n      var zero = true;\n      for (j = 0; j < len; j++) {\n        tmp[j] = naf[j][i] | 0;\n        if (tmp[j] !== 0)\n          zero = false;\n      }\n      if (!zero)\n        break;\n      k++;\n      i--;\n    }\n    if (i >= 0)\n      k++;\n    acc = acc.dblp(k);\n    if (i < 0)\n      break;\n\n    for (j = 0; j < len; j++) {\n      var z = tmp[j];\n      p;\n      if (z === 0)\n        continue;\n      else if (z > 0)\n        p = wnd[j][(z - 1) >> 1];\n      else if (z < 0)\n        p = wnd[j][(-z - 1) >> 1].neg();\n\n      if (p.type === 'affine')\n        acc = acc.mixedAdd(p);\n      else\n        acc = acc.add(p);\n    }\n  }\n  // Zeroify references\n  for (i = 0; i < len; i++)\n    wnd[i] = null;\n\n  if (jacobianResult)\n    return acc;\n  else\n    return acc.toP();\n};\n\nfunction BasePoint(curve, type) {\n  this.curve = curve;\n  this.type = type;\n  this.precomputed = null;\n}\nBaseCurve.BasePoint = BasePoint;\n\nBasePoint.prototype.eq = function eq(/*other*/) {\n  throw new Error('Not implemented');\n};\n\nBasePoint.prototype.validate = function validate() {\n  return this.curve.validate(this);\n};\n\nBaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n  bytes = utils_1$1.toArray(bytes, enc);\n\n  var len = this.p.byteLength();\n\n  // uncompressed, hybrid-odd, hybrid-even\n  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&\n      bytes.length - 1 === 2 * len) {\n    if (bytes[0] === 0x06)\n      assert$1(bytes[bytes.length - 1] % 2 === 0);\n    else if (bytes[0] === 0x07)\n      assert$1(bytes[bytes.length - 1] % 2 === 1);\n\n    var res =  this.point(bytes.slice(1, 1 + len),\n      bytes.slice(1 + len, 1 + 2 * len));\n\n    return res;\n  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&\n              bytes.length - 1 === len) {\n    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);\n  }\n  throw new Error('Unknown point format');\n};\n\nBasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\n  return this.encode(enc, true);\n};\n\nBasePoint.prototype._encode = function _encode(compact) {\n  var len = this.curve.p.byteLength();\n  var x = this.getX().toArray('be', len);\n\n  if (compact)\n    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);\n\n  return [ 0x04 ].concat(x, this.getY().toArray('be', len));\n};\n\nBasePoint.prototype.encode = function encode(enc, compact) {\n  return utils_1$1.encode(this._encode(compact), enc);\n};\n\nBasePoint.prototype.precompute = function precompute(power) {\n  if (this.precomputed)\n    return this;\n\n  var precomputed = {\n    doubles: null,\n    naf: null,\n    beta: null,\n  };\n  precomputed.naf = this._getNAFPoints(8);\n  precomputed.doubles = this._getDoubles(4, power);\n  precomputed.beta = this._getBeta();\n  this.precomputed = precomputed;\n\n  return this;\n};\n\nBasePoint.prototype._hasDoubles = function _hasDoubles(k) {\n  if (!this.precomputed)\n    return false;\n\n  var doubles = this.precomputed.doubles;\n  if (!doubles)\n    return false;\n\n  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\n};\n\nBasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n  if (this.precomputed && this.precomputed.doubles)\n    return this.precomputed.doubles;\n\n  var doubles = [ this ];\n  var acc = this;\n  for (var i = 0; i < power; i += step) {\n    for (var j = 0; j < step; j++)\n      acc = acc.dbl();\n    doubles.push(acc);\n  }\n  return {\n    step: step,\n    points: doubles,\n  };\n};\n\nBasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n  if (this.precomputed && this.precomputed.naf)\n    return this.precomputed.naf;\n\n  var res = [ this ];\n  var max = (1 << wnd) - 1;\n  var dbl = max === 1 ? null : this.dbl();\n  for (var i = 1; i < max; i++)\n    res[i] = res[i - 1].add(dbl);\n  return {\n    wnd: wnd,\n    points: res,\n  };\n};\n\nBasePoint.prototype._getBeta = function _getBeta() {\n  return null;\n};\n\nBasePoint.prototype.dblp = function dblp(k) {\n  var r = this;\n  for (var i = 0; i < k; i++)\n    r = r.dbl();\n  return r;\n};\n\nvar inherits_browser = createCommonjsModule(function (module) {\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor;\n      var TempCtor = function () {};\n      TempCtor.prototype = superCtor.prototype;\n      ctor.prototype = new TempCtor();\n      ctor.prototype.constructor = ctor;\n    }\n  };\n}\n});\n\n'use strict';\n\n\n\n\n\n\nvar assert$2 = utils_1$1.assert;\n\nfunction ShortCurve(conf) {\n  base.call(this, 'short', conf);\n\n  this.a = new (bn_default())(conf.a, 16).toRed(this.red);\n  this.b = new (bn_default())(conf.b, 16).toRed(this.red);\n  this.tinv = this.two.redInvm();\n\n  this.zeroA = this.a.fromRed().cmpn(0) === 0;\n  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;\n\n  // If the curve is endomorphic, precalculate beta and lambda\n  this.endo = this._getEndomorphism(conf);\n  this._endoWnafT1 = new Array(4);\n  this._endoWnafT2 = new Array(4);\n}\ninherits_browser(ShortCurve, base);\nvar short_1 = ShortCurve;\n\nShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {\n  // No efficient endomorphism\n  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)\n    return;\n\n  // Compute beta and lambda, that lambda * P = (beta * Px; Py)\n  var beta;\n  var lambda;\n  if (conf.beta) {\n    beta = new (bn_default())(conf.beta, 16).toRed(this.red);\n  } else {\n    var betas = this._getEndoRoots(this.p);\n    // Choose the smallest beta\n    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];\n    beta = beta.toRed(this.red);\n  }\n  if (conf.lambda) {\n    lambda = new (bn_default())(conf.lambda, 16);\n  } else {\n    // Choose the lambda that is matching selected beta\n    var lambdas = this._getEndoRoots(this.n);\n    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {\n      lambda = lambdas[0];\n    } else {\n      lambda = lambdas[1];\n      assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);\n    }\n  }\n\n  // Get basis vectors, used for balanced length-two representation\n  var basis;\n  if (conf.basis) {\n    basis = conf.basis.map(function(vec) {\n      return {\n        a: new (bn_default())(vec.a, 16),\n        b: new (bn_default())(vec.b, 16),\n      };\n    });\n  } else {\n    basis = this._getEndoBasis(lambda);\n  }\n\n  return {\n    beta: beta,\n    lambda: lambda,\n    basis: basis,\n  };\n};\n\nShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {\n  // Find roots of for x^2 + x + 1 in F\n  // Root = (-1 +- Sqrt(-3)) / 2\n  //\n  var red = num === this.p ? this.red : bn_default().mont(num);\n  var tinv = new (bn_default())(2).toRed(red).redInvm();\n  var ntinv = tinv.redNeg();\n\n  var s = new (bn_default())(3).toRed(red).redNeg().redSqrt().redMul(tinv);\n\n  var l1 = ntinv.redAdd(s).fromRed();\n  var l2 = ntinv.redSub(s).fromRed();\n  return [ l1, l2 ];\n};\n\nShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {\n  // aprxSqrt >= sqrt(this.n)\n  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));\n\n  // 3.74\n  // Run EGCD, until r(L + 1) < aprxSqrt\n  var u = lambda;\n  var v = this.n.clone();\n  var x1 = new (bn_default())(1);\n  var y1 = new (bn_default())(0);\n  var x2 = new (bn_default())(0);\n  var y2 = new (bn_default())(1);\n\n  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)\n  var a0;\n  var b0;\n  // First vector\n  var a1;\n  var b1;\n  // Second vector\n  var a2;\n  var b2;\n\n  var prevR;\n  var i = 0;\n  var r;\n  var x;\n  while (u.cmpn(0) !== 0) {\n    var q = v.div(u);\n    r = v.sub(q.mul(u));\n    x = x2.sub(q.mul(x1));\n    var y = y2.sub(q.mul(y1));\n\n    if (!a1 && r.cmp(aprxSqrt) < 0) {\n      a0 = prevR.neg();\n      b0 = x1;\n      a1 = r.neg();\n      b1 = x;\n    } else if (a1 && ++i === 2) {\n      break;\n    }\n    prevR = r;\n\n    v = u;\n    u = r;\n    x2 = x1;\n    x1 = x;\n    y2 = y1;\n    y1 = y;\n  }\n  a2 = r.neg();\n  b2 = x;\n\n  var len1 = a1.sqr().add(b1.sqr());\n  var len2 = a2.sqr().add(b2.sqr());\n  if (len2.cmp(len1) >= 0) {\n    a2 = a0;\n    b2 = b0;\n  }\n\n  // Normalize signs\n  if (a1.negative) {\n    a1 = a1.neg();\n    b1 = b1.neg();\n  }\n  if (a2.negative) {\n    a2 = a2.neg();\n    b2 = b2.neg();\n  }\n\n  return [\n    { a: a1, b: b1 },\n    { a: a2, b: b2 },\n  ];\n};\n\nShortCurve.prototype._endoSplit = function _endoSplit(k) {\n  var basis = this.endo.basis;\n  var v1 = basis[0];\n  var v2 = basis[1];\n\n  var c1 = v2.b.mul(k).divRound(this.n);\n  var c2 = v1.b.neg().mul(k).divRound(this.n);\n\n  var p1 = c1.mul(v1.a);\n  var p2 = c2.mul(v2.a);\n  var q1 = c1.mul(v1.b);\n  var q2 = c2.mul(v2.b);\n\n  // Calculate answer\n  var k1 = k.sub(p1).sub(p2);\n  var k2 = q1.add(q2).neg();\n  return { k1: k1, k2: k2 };\n};\n\nShortCurve.prototype.pointFromX = function pointFromX(x, odd) {\n  x = new (bn_default())(x, 16);\n  if (!x.red)\n    x = x.toRed(this.red);\n\n  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);\n  var y = y2.redSqrt();\n  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  // XXX Is there any way to tell if the number is odd without converting it\n  // to non-red form?\n  var isOdd = y.fromRed().isOdd();\n  if (odd && !isOdd || !odd && isOdd)\n    y = y.redNeg();\n\n  return this.point(x, y);\n};\n\nShortCurve.prototype.validate = function validate(point) {\n  if (point.inf)\n    return true;\n\n  var x = point.x;\n  var y = point.y;\n\n  var ax = this.a.redMul(x);\n  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);\n  return y.redSqr().redISub(rhs).cmpn(0) === 0;\n};\n\nShortCurve.prototype._endoWnafMulAdd =\n    function _endoWnafMulAdd(points, coeffs, jacobianResult) {\n      var npoints = this._endoWnafT1;\n      var ncoeffs = this._endoWnafT2;\n      for (var i = 0; i < points.length; i++) {\n        var split = this._endoSplit(coeffs[i]);\n        var p = points[i];\n        var beta = p._getBeta();\n\n        if (split.k1.negative) {\n          split.k1.ineg();\n          p = p.neg(true);\n        }\n        if (split.k2.negative) {\n          split.k2.ineg();\n          beta = beta.neg(true);\n        }\n\n        npoints[i * 2] = p;\n        npoints[i * 2 + 1] = beta;\n        ncoeffs[i * 2] = split.k1;\n        ncoeffs[i * 2 + 1] = split.k2;\n      }\n      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);\n\n      // Clean-up references to points and coefficients\n      for (var j = 0; j < i * 2; j++) {\n        npoints[j] = null;\n        ncoeffs[j] = null;\n      }\n      return res;\n    };\n\nfunction Point(curve, x, y, isRed) {\n  base.BasePoint.call(this, curve, 'affine');\n  if (x === null && y === null) {\n    this.x = null;\n    this.y = null;\n    this.inf = true;\n  } else {\n    this.x = new (bn_default())(x, 16);\n    this.y = new (bn_default())(y, 16);\n    // Force redgomery representation when loading from JSON\n    if (isRed) {\n      this.x.forceRed(this.curve.red);\n      this.y.forceRed(this.curve.red);\n    }\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red)\n      this.y = this.y.toRed(this.curve.red);\n    this.inf = false;\n  }\n}\ninherits_browser(Point, base.BasePoint);\n\nShortCurve.prototype.point = function point(x, y, isRed) {\n  return new Point(this, x, y, isRed);\n};\n\nShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {\n  return Point.fromJSON(this, obj, red);\n};\n\nPoint.prototype._getBeta = function _getBeta() {\n  if (!this.curve.endo)\n    return;\n\n  var pre = this.precomputed;\n  if (pre && pre.beta)\n    return pre.beta;\n\n  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n  if (pre) {\n    var curve = this.curve;\n    var endoMul = function(p) {\n      return curve.point(p.x.redMul(curve.endo.beta), p.y);\n    };\n    pre.beta = beta;\n    beta.precomputed = {\n      beta: null,\n      naf: pre.naf && {\n        wnd: pre.naf.wnd,\n        points: pre.naf.points.map(endoMul),\n      },\n      doubles: pre.doubles && {\n        step: pre.doubles.step,\n        points: pre.doubles.points.map(endoMul),\n      },\n    };\n  }\n  return beta;\n};\n\nPoint.prototype.toJSON = function toJSON() {\n  if (!this.precomputed)\n    return [ this.x, this.y ];\n\n  return [ this.x, this.y, this.precomputed && {\n    doubles: this.precomputed.doubles && {\n      step: this.precomputed.doubles.step,\n      points: this.precomputed.doubles.points.slice(1),\n    },\n    naf: this.precomputed.naf && {\n      wnd: this.precomputed.naf.wnd,\n      points: this.precomputed.naf.points.slice(1),\n    },\n  } ];\n};\n\nPoint.fromJSON = function fromJSON(curve, obj, red) {\n  if (typeof obj === 'string')\n    obj = JSON.parse(obj);\n  var res = curve.point(obj[0], obj[1], red);\n  if (!obj[2])\n    return res;\n\n  function obj2point(obj) {\n    return curve.point(obj[0], obj[1], red);\n  }\n\n  var pre = obj[2];\n  res.precomputed = {\n    beta: null,\n    doubles: pre.doubles && {\n      step: pre.doubles.step,\n      points: [ res ].concat(pre.doubles.points.map(obj2point)),\n    },\n    naf: pre.naf && {\n      wnd: pre.naf.wnd,\n      points: [ res ].concat(pre.naf.points.map(obj2point)),\n    },\n  };\n  return res;\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' y: ' + this.y.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  return this.inf;\n};\n\nPoint.prototype.add = function add(p) {\n  // O + P = P\n  if (this.inf)\n    return p;\n\n  // P + O = P\n  if (p.inf)\n    return this;\n\n  // P + P = 2P\n  if (this.eq(p))\n    return this.dbl();\n\n  // P + (-P) = O\n  if (this.neg().eq(p))\n    return this.curve.point(null, null);\n\n  // P + Q = O\n  if (this.x.cmp(p.x) === 0)\n    return this.curve.point(null, null);\n\n  var c = this.y.redSub(p.y);\n  if (c.cmpn(0) !== 0)\n    c = c.redMul(this.x.redSub(p.x).redInvm());\n  var nx = c.redSqr().redISub(this.x).redISub(p.x);\n  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n  return this.curve.point(nx, ny);\n};\n\nPoint.prototype.dbl = function dbl() {\n  if (this.inf)\n    return this;\n\n  // 2P = O\n  var ys1 = this.y.redAdd(this.y);\n  if (ys1.cmpn(0) === 0)\n    return this.curve.point(null, null);\n\n  var a = this.curve.a;\n\n  var x2 = this.x.redSqr();\n  var dyinv = ys1.redInvm();\n  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);\n\n  var nx = c.redSqr().redISub(this.x.redAdd(this.x));\n  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n  return this.curve.point(nx, ny);\n};\n\nPoint.prototype.getX = function getX() {\n  return this.x.fromRed();\n};\n\nPoint.prototype.getY = function getY() {\n  return this.y.fromRed();\n};\n\nPoint.prototype.mul = function mul(k) {\n  k = new (bn_default())(k, 16);\n  if (this.isInfinity())\n    return this;\n  else if (this._hasDoubles(k))\n    return this.curve._fixedNafMul(this, k);\n  else if (this.curve.endo)\n    return this.curve._endoWnafMulAdd([ this ], [ k ]);\n  else\n    return this.curve._wnafMul(this, k);\n};\n\nPoint.prototype.mulAdd = function mulAdd(k1, p2, k2) {\n  var points = [ this, p2 ];\n  var coeffs = [ k1, k2 ];\n  if (this.curve.endo)\n    return this.curve._endoWnafMulAdd(points, coeffs);\n  else\n    return this.curve._wnafMulAdd(1, points, coeffs, 2);\n};\n\nPoint.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {\n  var points = [ this, p2 ];\n  var coeffs = [ k1, k2 ];\n  if (this.curve.endo)\n    return this.curve._endoWnafMulAdd(points, coeffs, true);\n  else\n    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);\n};\n\nPoint.prototype.eq = function eq(p) {\n  return this === p ||\n         this.inf === p.inf &&\n             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);\n};\n\nPoint.prototype.neg = function neg(_precompute) {\n  if (this.inf)\n    return this;\n\n  var res = this.curve.point(this.x, this.y.redNeg());\n  if (_precompute && this.precomputed) {\n    var pre = this.precomputed;\n    var negate = function(p) {\n      return p.neg();\n    };\n    res.precomputed = {\n      naf: pre.naf && {\n        wnd: pre.naf.wnd,\n        points: pre.naf.points.map(negate),\n      },\n      doubles: pre.doubles && {\n        step: pre.doubles.step,\n        points: pre.doubles.points.map(negate),\n      },\n    };\n  }\n  return res;\n};\n\nPoint.prototype.toJ = function toJ() {\n  if (this.inf)\n    return this.curve.jpoint(null, null, null);\n\n  var res = this.curve.jpoint(this.x, this.y, this.curve.one);\n  return res;\n};\n\nfunction JPoint(curve, x, y, z) {\n  base.BasePoint.call(this, curve, 'jacobian');\n  if (x === null && y === null && z === null) {\n    this.x = this.curve.one;\n    this.y = this.curve.one;\n    this.z = new (bn_default())(0);\n  } else {\n    this.x = new (bn_default())(x, 16);\n    this.y = new (bn_default())(y, 16);\n    this.z = new (bn_default())(z, 16);\n  }\n  if (!this.x.red)\n    this.x = this.x.toRed(this.curve.red);\n  if (!this.y.red)\n    this.y = this.y.toRed(this.curve.red);\n  if (!this.z.red)\n    this.z = this.z.toRed(this.curve.red);\n\n  this.zOne = this.z === this.curve.one;\n}\ninherits_browser(JPoint, base.BasePoint);\n\nShortCurve.prototype.jpoint = function jpoint(x, y, z) {\n  return new JPoint(this, x, y, z);\n};\n\nJPoint.prototype.toP = function toP() {\n  if (this.isInfinity())\n    return this.curve.point(null, null);\n\n  var zinv = this.z.redInvm();\n  var zinv2 = zinv.redSqr();\n  var ax = this.x.redMul(zinv2);\n  var ay = this.y.redMul(zinv2).redMul(zinv);\n\n  return this.curve.point(ax, ay);\n};\n\nJPoint.prototype.neg = function neg() {\n  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n};\n\nJPoint.prototype.add = function add(p) {\n  // O + P = P\n  if (this.isInfinity())\n    return p;\n\n  // P + O = P\n  if (p.isInfinity())\n    return this;\n\n  // 12M + 4S + 7A\n  var pz2 = p.z.redSqr();\n  var z2 = this.z.redSqr();\n  var u1 = this.x.redMul(pz2);\n  var u2 = p.x.redMul(z2);\n  var s1 = this.y.redMul(pz2.redMul(p.z));\n  var s2 = p.y.redMul(z2.redMul(this.z));\n\n  var h = u1.redSub(u2);\n  var r = s1.redSub(s2);\n  if (h.cmpn(0) === 0) {\n    if (r.cmpn(0) !== 0)\n      return this.curve.jpoint(null, null, null);\n    else\n      return this.dbl();\n  }\n\n  var h2 = h.redSqr();\n  var h3 = h2.redMul(h);\n  var v = u1.redMul(h2);\n\n  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n  var nz = this.z.redMul(p.z).redMul(h);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.mixedAdd = function mixedAdd(p) {\n  // O + P = P\n  if (this.isInfinity())\n    return p.toJ();\n\n  // P + O = P\n  if (p.isInfinity())\n    return this;\n\n  // 8M + 3S + 7A\n  var z2 = this.z.redSqr();\n  var u1 = this.x;\n  var u2 = p.x.redMul(z2);\n  var s1 = this.y;\n  var s2 = p.y.redMul(z2).redMul(this.z);\n\n  var h = u1.redSub(u2);\n  var r = s1.redSub(s2);\n  if (h.cmpn(0) === 0) {\n    if (r.cmpn(0) !== 0)\n      return this.curve.jpoint(null, null, null);\n    else\n      return this.dbl();\n  }\n\n  var h2 = h.redSqr();\n  var h3 = h2.redMul(h);\n  var v = u1.redMul(h2);\n\n  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n  var nz = this.z.redMul(h);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.dblp = function dblp(pow) {\n  if (pow === 0)\n    return this;\n  if (this.isInfinity())\n    return this;\n  if (!pow)\n    return this.dbl();\n\n  var i;\n  if (this.curve.zeroA || this.curve.threeA) {\n    var r = this;\n    for (i = 0; i < pow; i++)\n      r = r.dbl();\n    return r;\n  }\n\n  // 1M + 2S + 1A + N * (4S + 5M + 8A)\n  // N = 1 => 6M + 6S + 9A\n  var a = this.curve.a;\n  var tinv = this.curve.tinv;\n\n  var jx = this.x;\n  var jy = this.y;\n  var jz = this.z;\n  var jz4 = jz.redSqr().redSqr();\n\n  // Reuse results\n  var jyd = jy.redAdd(jy);\n  for (i = 0; i < pow; i++) {\n    var jx2 = jx.redSqr();\n    var jyd2 = jyd.redSqr();\n    var jyd4 = jyd2.redSqr();\n    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n\n    var t1 = jx.redMul(jyd2);\n    var nx = c.redSqr().redISub(t1.redAdd(t1));\n    var t2 = t1.redISub(nx);\n    var dny = c.redMul(t2);\n    dny = dny.redIAdd(dny).redISub(jyd4);\n    var nz = jyd.redMul(jz);\n    if (i + 1 < pow)\n      jz4 = jz4.redMul(jyd4);\n\n    jx = nx;\n    jz = nz;\n    jyd = dny;\n  }\n\n  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);\n};\n\nJPoint.prototype.dbl = function dbl() {\n  if (this.isInfinity())\n    return this;\n\n  if (this.curve.zeroA)\n    return this._zeroDbl();\n  else if (this.curve.threeA)\n    return this._threeDbl();\n  else\n    return this._dbl();\n};\n\nJPoint.prototype._zeroDbl = function _zeroDbl() {\n  var nx;\n  var ny;\n  var nz;\n  // Z = 1\n  if (this.zOne) {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n    //     #doubling-mdbl-2007-bl\n    // 1M + 5S + 14A\n\n    // XX = X1^2\n    var xx = this.x.redSqr();\n    // YY = Y1^2\n    var yy = this.y.redSqr();\n    // YYYY = YY^2\n    var yyyy = yy.redSqr();\n    // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    s = s.redIAdd(s);\n    // M = 3 * XX + a; a = 0\n    var m = xx.redAdd(xx).redIAdd(xx);\n    // T = M ^ 2 - 2*S\n    var t = m.redSqr().redISub(s).redISub(s);\n\n    // 8 * YYYY\n    var yyyy8 = yyyy.redIAdd(yyyy);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n\n    // X3 = T\n    nx = t;\n    // Y3 = M * (S - T) - 8 * YYYY\n    ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n    // Z3 = 2*Y1\n    nz = this.y.redAdd(this.y);\n  } else {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n    //     #doubling-dbl-2009-l\n    // 2M + 5S + 13A\n\n    // A = X1^2\n    var a = this.x.redSqr();\n    // B = Y1^2\n    var b = this.y.redSqr();\n    // C = B^2\n    var c = b.redSqr();\n    // D = 2 * ((X1 + B)^2 - A - C)\n    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);\n    d = d.redIAdd(d);\n    // E = 3 * A\n    var e = a.redAdd(a).redIAdd(a);\n    // F = E^2\n    var f = e.redSqr();\n\n    // 8 * C\n    var c8 = c.redIAdd(c);\n    c8 = c8.redIAdd(c8);\n    c8 = c8.redIAdd(c8);\n\n    // X3 = F - 2 * D\n    nx = f.redISub(d).redISub(d);\n    // Y3 = E * (D - X3) - 8 * C\n    ny = e.redMul(d.redISub(nx)).redISub(c8);\n    // Z3 = 2 * Y1 * Z1\n    nz = this.y.redMul(this.z);\n    nz = nz.redIAdd(nz);\n  }\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype._threeDbl = function _threeDbl() {\n  var nx;\n  var ny;\n  var nz;\n  // Z = 1\n  if (this.zOne) {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html\n    //     #doubling-mdbl-2007-bl\n    // 1M + 5S + 15A\n\n    // XX = X1^2\n    var xx = this.x.redSqr();\n    // YY = Y1^2\n    var yy = this.y.redSqr();\n    // YYYY = YY^2\n    var yyyy = yy.redSqr();\n    // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    s = s.redIAdd(s);\n    // M = 3 * XX + a\n    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);\n    // T = M^2 - 2 * S\n    var t = m.redSqr().redISub(s).redISub(s);\n    // X3 = T\n    nx = t;\n    // Y3 = M * (S - T) - 8 * YYYY\n    var yyyy8 = yyyy.redIAdd(yyyy);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n    // Z3 = 2 * Y1\n    nz = this.y.redAdd(this.y);\n  } else {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\n    // 3M + 5S\n\n    // delta = Z1^2\n    var delta = this.z.redSqr();\n    // gamma = Y1^2\n    var gamma = this.y.redSqr();\n    // beta = X1 * gamma\n    var beta = this.x.redMul(gamma);\n    // alpha = 3 * (X1 - delta) * (X1 + delta)\n    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));\n    alpha = alpha.redAdd(alpha).redIAdd(alpha);\n    // X3 = alpha^2 - 8 * beta\n    var beta4 = beta.redIAdd(beta);\n    beta4 = beta4.redIAdd(beta4);\n    var beta8 = beta4.redAdd(beta4);\n    nx = alpha.redSqr().redISub(beta8);\n    // Z3 = (Y1 + Z1)^2 - gamma - delta\n    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);\n    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2\n    var ggamma8 = gamma.redSqr();\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);\n  }\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype._dbl = function _dbl() {\n  var a = this.curve.a;\n\n  // 4M + 6S + 10A\n  var jx = this.x;\n  var jy = this.y;\n  var jz = this.z;\n  var jz4 = jz.redSqr().redSqr();\n\n  var jx2 = jx.redSqr();\n  var jy2 = jy.redSqr();\n\n  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n\n  var jxd4 = jx.redAdd(jx);\n  jxd4 = jxd4.redIAdd(jxd4);\n  var t1 = jxd4.redMul(jy2);\n  var nx = c.redSqr().redISub(t1.redAdd(t1));\n  var t2 = t1.redISub(nx);\n\n  var jyd8 = jy2.redSqr();\n  jyd8 = jyd8.redIAdd(jyd8);\n  jyd8 = jyd8.redIAdd(jyd8);\n  jyd8 = jyd8.redIAdd(jyd8);\n  var ny = c.redMul(t2).redISub(jyd8);\n  var nz = jy.redAdd(jy).redMul(jz);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.trpl = function trpl() {\n  if (!this.curve.zeroA)\n    return this.dbl().add(this);\n\n  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl\n  // 5M + 10S + ...\n\n  // XX = X1^2\n  var xx = this.x.redSqr();\n  // YY = Y1^2\n  var yy = this.y.redSqr();\n  // ZZ = Z1^2\n  var zz = this.z.redSqr();\n  // YYYY = YY^2\n  var yyyy = yy.redSqr();\n  // M = 3 * XX + a * ZZ2; a = 0\n  var m = xx.redAdd(xx).redIAdd(xx);\n  // MM = M^2\n  var mm = m.redSqr();\n  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM\n  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n  e = e.redIAdd(e);\n  e = e.redAdd(e).redIAdd(e);\n  e = e.redISub(mm);\n  // EE = E^2\n  var ee = e.redSqr();\n  // T = 16*YYYY\n  var t = yyyy.redIAdd(yyyy);\n  t = t.redIAdd(t);\n  t = t.redIAdd(t);\n  t = t.redIAdd(t);\n  // U = (M + E)^2 - MM - EE - T\n  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);\n  // X3 = 4 * (X1 * EE - 4 * YY * U)\n  var yyu4 = yy.redMul(u);\n  yyu4 = yyu4.redIAdd(yyu4);\n  yyu4 = yyu4.redIAdd(yyu4);\n  var nx = this.x.redMul(ee).redISub(yyu4);\n  nx = nx.redIAdd(nx);\n  nx = nx.redIAdd(nx);\n  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)\n  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));\n  ny = ny.redIAdd(ny);\n  ny = ny.redIAdd(ny);\n  ny = ny.redIAdd(ny);\n  // Z3 = (Z1 + E)^2 - ZZ - EE\n  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.mul = function mul(k, kbase) {\n  k = new (bn_default())(k, kbase);\n\n  return this.curve._wnafMul(this, k);\n};\n\nJPoint.prototype.eq = function eq(p) {\n  if (p.type === 'affine')\n    return this.eq(p.toJ());\n\n  if (this === p)\n    return true;\n\n  // x1 * z2^2 == x2 * z1^2\n  var z2 = this.z.redSqr();\n  var pz2 = p.z.redSqr();\n  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)\n    return false;\n\n  // y1 * z2^3 == y2 * z1^3\n  var z3 = z2.redMul(this.z);\n  var pz3 = pz2.redMul(p.z);\n  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;\n};\n\nJPoint.prototype.eqXToP = function eqXToP(x) {\n  var zs = this.z.redSqr();\n  var rx = x.toRed(this.curve.red).redMul(zs);\n  if (this.x.cmp(rx) === 0)\n    return true;\n\n  var xc = x.clone();\n  var t = this.curve.redN.redMul(zs);\n  for (;;) {\n    xc.iadd(this.curve.n);\n    if (xc.cmp(this.curve.p) >= 0)\n      return false;\n\n    rx.redIAdd(t);\n    if (this.x.cmp(rx) === 0)\n      return true;\n  }\n};\n\nJPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC JPoint Infinity>';\n  return '<EC JPoint x: ' + this.x.toString(16, 2) +\n      ' y: ' + this.y.toString(16, 2) +\n      ' z: ' + this.z.toString(16, 2) + '>';\n};\n\nJPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.z.cmpn(0) === 0;\n};\n\nvar curve_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nvar curve = exports;\n\ncurve.base = base;\ncurve.short = short_1;\ncurve.mont = /*RicMoo:ethers:require(./mont)*/(null);\ncurve.edwards = /*RicMoo:ethers:require(./edwards)*/(null);\n});\n\nvar curves_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nvar curves = exports;\n\n\n\n\n\nvar assert = utils_1$1.assert;\n\nfunction PresetCurve(options) {\n  if (options.type === 'short')\n    this.curve = new curve_1.short(options);\n  else if (options.type === 'edwards')\n    this.curve = new curve_1.edwards(options);\n  else\n    this.curve = new curve_1.mont(options);\n  this.g = this.curve.g;\n  this.n = this.curve.n;\n  this.hash = options.hash;\n\n  assert(this.g.validate(), 'Invalid curve');\n  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');\n}\ncurves.PresetCurve = PresetCurve;\n\nfunction defineCurve(name, options) {\n  Object.defineProperty(curves, name, {\n    configurable: true,\n    enumerable: true,\n    get: function() {\n      var curve = new PresetCurve(options);\n      Object.defineProperty(curves, name, {\n        configurable: true,\n        enumerable: true,\n        value: curve,\n      });\n      return curve;\n    },\n  });\n}\n\ndefineCurve('p192', {\n  type: 'short',\n  prime: 'p192',\n  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',\n  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',\n  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',\n  hash: (hash_default()).sha256,\n  gRed: false,\n  g: [\n    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',\n    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',\n  ],\n});\n\ndefineCurve('p224', {\n  type: 'short',\n  prime: 'p224',\n  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',\n  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',\n  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',\n  hash: (hash_default()).sha256,\n  gRed: false,\n  g: [\n    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',\n    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',\n  ],\n});\n\ndefineCurve('p256', {\n  type: 'short',\n  prime: null,\n  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',\n  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',\n  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',\n  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',\n  hash: (hash_default()).sha256,\n  gRed: false,\n  g: [\n    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',\n    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',\n  ],\n});\n\ndefineCurve('p384', {\n  type: 'short',\n  prime: null,\n  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'fffffffe ffffffff 00000000 00000000 ffffffff',\n  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'fffffffe ffffffff 00000000 00000000 fffffffc',\n  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +\n     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',\n  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +\n     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',\n  hash: (hash_default()).sha384,\n  gRed: false,\n  g: [\n    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +\n    '5502f25d bf55296c 3a545e38 72760ab7',\n    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +\n    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',\n  ],\n});\n\ndefineCurve('p521', {\n  type: 'short',\n  prime: null,\n  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff',\n  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff fffffffc',\n  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +\n     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +\n     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',\n  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +\n     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',\n  hash: (hash_default()).sha512,\n  gRed: false,\n  g: [\n    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +\n    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +\n    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',\n    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +\n    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +\n    '3fad0761 353c7086 a272c240 88be9476 9fd16650',\n  ],\n});\n\ndefineCurve('curve25519', {\n  type: 'mont',\n  prime: 'p25519',\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n  a: '76d06',\n  b: '1',\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n  hash: (hash_default()).sha256,\n  gRed: false,\n  g: [\n    '9',\n  ],\n});\n\ndefineCurve('ed25519', {\n  type: 'edwards',\n  prime: 'p25519',\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n  a: '-1',\n  c: '1',\n  // -121665 * (121666^(-1)) (mod P)\n  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n  hash: (hash_default()).sha256,\n  gRed: false,\n  g: [\n    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',\n\n    // 4/5\n    '6666666666666666666666666666666666666666666666666666666666666658',\n  ],\n});\n\nvar pre;\ntry {\n  pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/(null).crash();\n} catch (e) {\n  pre = undefined;\n}\n\ndefineCurve('secp256k1', {\n  type: 'short',\n  prime: 'k256',\n  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',\n  a: '0',\n  b: '7',\n  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',\n  h: '1',\n  hash: (hash_default()).sha256,\n\n  // Precomputed endomorphism\n  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',\n  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',\n  basis: [\n    {\n      a: '3086d221a7d46bcde86c90e49284eb15',\n      b: '-e4437ed6010e88286f547fa90abfe4c3',\n    },\n    {\n      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',\n      b: '3086d221a7d46bcde86c90e49284eb15',\n    },\n  ],\n\n  gRed: false,\n  g: [\n    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',\n    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',\n    pre,\n  ],\n});\n});\n\n'use strict';\n\n\n\n\n\nfunction HmacDRBG(options) {\n  if (!(this instanceof HmacDRBG))\n    return new HmacDRBG(options);\n  this.hash = options.hash;\n  this.predResist = !!options.predResist;\n\n  this.outLen = this.hash.outSize;\n  this.minEntropy = options.minEntropy || this.hash.hmacStrength;\n\n  this._reseed = null;\n  this.reseedInterval = null;\n  this.K = null;\n  this.V = null;\n\n  var entropy = utils_1.toArray(options.entropy, options.entropyEnc || 'hex');\n  var nonce = utils_1.toArray(options.nonce, options.nonceEnc || 'hex');\n  var pers = utils_1.toArray(options.pers, options.persEnc || 'hex');\n  minimalisticAssert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n  this._init(entropy, nonce, pers);\n}\nvar hmacDrbg = HmacDRBG;\n\nHmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n  var seed = entropy.concat(nonce).concat(pers);\n\n  this.K = new Array(this.outLen / 8);\n  this.V = new Array(this.outLen / 8);\n  for (var i = 0; i < this.V.length; i++) {\n    this.K[i] = 0x00;\n    this.V[i] = 0x01;\n  }\n\n  this._update(seed);\n  this._reseed = 1;\n  this.reseedInterval = 0x1000000000000;  // 2^48\n};\n\nHmacDRBG.prototype._hmac = function hmac() {\n  return new (hash_default()).hmac(this.hash, this.K);\n};\n\nHmacDRBG.prototype._update = function update(seed) {\n  var kmac = this._hmac()\n                 .update(this.V)\n                 .update([ 0x00 ]);\n  if (seed)\n    kmac = kmac.update(seed);\n  this.K = kmac.digest();\n  this.V = this._hmac().update(this.V).digest();\n  if (!seed)\n    return;\n\n  this.K = this._hmac()\n               .update(this.V)\n               .update([ 0x01 ])\n               .update(seed)\n               .digest();\n  this.V = this._hmac().update(this.V).digest();\n};\n\nHmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n  // Optional entropy enc\n  if (typeof entropyEnc !== 'string') {\n    addEnc = add;\n    add = entropyEnc;\n    entropyEnc = null;\n  }\n\n  entropy = utils_1.toArray(entropy, entropyEnc);\n  add = utils_1.toArray(add, addEnc);\n\n  minimalisticAssert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n\n  this._update(entropy.concat(add || []));\n  this._reseed = 1;\n};\n\nHmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n  if (this._reseed > this.reseedInterval)\n    throw new Error('Reseed is required');\n\n  // Optional encoding\n  if (typeof enc !== 'string') {\n    addEnc = add;\n    add = enc;\n    enc = null;\n  }\n\n  // Optional additional data\n  if (add) {\n    add = utils_1.toArray(add, addEnc || 'hex');\n    this._update(add);\n  }\n\n  var temp = [];\n  while (temp.length < len) {\n    this.V = this._hmac().update(this.V).digest();\n    temp = temp.concat(this.V);\n  }\n\n  var res = temp.slice(0, len);\n  this._update(add);\n  this._reseed++;\n  return utils_1.encode(res, enc);\n};\n\n'use strict';\n\n\n\nvar assert$3 = utils_1$1.assert;\n\nfunction KeyPair(ec, options) {\n  this.ec = ec;\n  this.priv = null;\n  this.pub = null;\n\n  // KeyPair(ec, { priv: ..., pub: ... })\n  if (options.priv)\n    this._importPrivate(options.priv, options.privEnc);\n  if (options.pub)\n    this._importPublic(options.pub, options.pubEnc);\n}\nvar key = KeyPair;\n\nKeyPair.fromPublic = function fromPublic(ec, pub, enc) {\n  if (pub instanceof KeyPair)\n    return pub;\n\n  return new KeyPair(ec, {\n    pub: pub,\n    pubEnc: enc,\n  });\n};\n\nKeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {\n  if (priv instanceof KeyPair)\n    return priv;\n\n  return new KeyPair(ec, {\n    priv: priv,\n    privEnc: enc,\n  });\n};\n\nKeyPair.prototype.validate = function validate() {\n  var pub = this.getPublic();\n\n  if (pub.isInfinity())\n    return { result: false, reason: 'Invalid public key' };\n  if (!pub.validate())\n    return { result: false, reason: 'Public key is not a point' };\n  if (!pub.mul(this.ec.curve.n).isInfinity())\n    return { result: false, reason: 'Public key * N != O' };\n\n  return { result: true, reason: null };\n};\n\nKeyPair.prototype.getPublic = function getPublic(compact, enc) {\n  // compact is optional argument\n  if (typeof compact === 'string') {\n    enc = compact;\n    compact = null;\n  }\n\n  if (!this.pub)\n    this.pub = this.ec.g.mul(this.priv);\n\n  if (!enc)\n    return this.pub;\n\n  return this.pub.encode(enc, compact);\n};\n\nKeyPair.prototype.getPrivate = function getPrivate(enc) {\n  if (enc === 'hex')\n    return this.priv.toString(16, 2);\n  else\n    return this.priv;\n};\n\nKeyPair.prototype._importPrivate = function _importPrivate(key, enc) {\n  this.priv = new (bn_default())(key, enc || 16);\n\n  // Ensure that the priv won't be bigger than n, otherwise we may fail\n  // in fixed multiplication method\n  this.priv = this.priv.umod(this.ec.curve.n);\n};\n\nKeyPair.prototype._importPublic = function _importPublic(key, enc) {\n  if (key.x || key.y) {\n    // Montgomery points only have an `x` coordinate.\n    // Weierstrass/Edwards points on the other hand have both `x` and\n    // `y` coordinates.\n    if (this.ec.curve.type === 'mont') {\n      assert$3(key.x, 'Need x coordinate');\n    } else if (this.ec.curve.type === 'short' ||\n               this.ec.curve.type === 'edwards') {\n      assert$3(key.x && key.y, 'Need both x and y coordinate');\n    }\n    this.pub = this.ec.curve.point(key.x, key.y);\n    return;\n  }\n  this.pub = this.ec.curve.decodePoint(key, enc);\n};\n\n// ECDH\nKeyPair.prototype.derive = function derive(pub) {\n  if(!pub.validate()) {\n    assert$3(pub.validate(), 'public point not validated');\n  }\n  return pub.mul(this.priv).getX();\n};\n\n// ECDSA\nKeyPair.prototype.sign = function sign(msg, enc, options) {\n  return this.ec.sign(msg, this, enc, options);\n};\n\nKeyPair.prototype.verify = function verify(msg, signature) {\n  return this.ec.verify(msg, signature, this);\n};\n\nKeyPair.prototype.inspect = function inspect() {\n  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +\n         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';\n};\n\n'use strict';\n\n\n\n\nvar assert$4 = utils_1$1.assert;\n\nfunction Signature(options, enc) {\n  if (options instanceof Signature)\n    return options;\n\n  if (this._importDER(options, enc))\n    return;\n\n  assert$4(options.r && options.s, 'Signature without r or s');\n  this.r = new (bn_default())(options.r, 16);\n  this.s = new (bn_default())(options.s, 16);\n  if (options.recoveryParam === undefined)\n    this.recoveryParam = null;\n  else\n    this.recoveryParam = options.recoveryParam;\n}\nvar signature = Signature;\n\nfunction Position() {\n  this.place = 0;\n}\n\nfunction getLength(buf, p) {\n  var initial = buf[p.place++];\n  if (!(initial & 0x80)) {\n    return initial;\n  }\n  var octetLen = initial & 0xf;\n\n  // Indefinite length or overflow\n  if (octetLen === 0 || octetLen > 4) {\n    return false;\n  }\n\n  var val = 0;\n  for (var i = 0, off = p.place; i < octetLen; i++, off++) {\n    val <<= 8;\n    val |= buf[off];\n    val >>>= 0;\n  }\n\n  // Leading zeroes\n  if (val <= 0x7f) {\n    return false;\n  }\n\n  p.place = off;\n  return val;\n}\n\nfunction rmPadding(buf) {\n  var i = 0;\n  var len = buf.length - 1;\n  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {\n    i++;\n  }\n  if (i === 0) {\n    return buf;\n  }\n  return buf.slice(i);\n}\n\nSignature.prototype._importDER = function _importDER(data, enc) {\n  data = utils_1$1.toArray(data, enc);\n  var p = new Position();\n  if (data[p.place++] !== 0x30) {\n    return false;\n  }\n  var len = getLength(data, p);\n  if (len === false) {\n    return false;\n  }\n  if ((len + p.place) !== data.length) {\n    return false;\n  }\n  if (data[p.place++] !== 0x02) {\n    return false;\n  }\n  var rlen = getLength(data, p);\n  if (rlen === false) {\n    return false;\n  }\n  var r = data.slice(p.place, rlen + p.place);\n  p.place += rlen;\n  if (data[p.place++] !== 0x02) {\n    return false;\n  }\n  var slen = getLength(data, p);\n  if (slen === false) {\n    return false;\n  }\n  if (data.length !== slen + p.place) {\n    return false;\n  }\n  var s = data.slice(p.place, slen + p.place);\n  if (r[0] === 0) {\n    if (r[1] & 0x80) {\n      r = r.slice(1);\n    } else {\n      // Leading zeroes\n      return false;\n    }\n  }\n  if (s[0] === 0) {\n    if (s[1] & 0x80) {\n      s = s.slice(1);\n    } else {\n      // Leading zeroes\n      return false;\n    }\n  }\n\n  this.r = new (bn_default())(r);\n  this.s = new (bn_default())(s);\n  this.recoveryParam = null;\n\n  return true;\n};\n\nfunction constructLength(arr, len) {\n  if (len < 0x80) {\n    arr.push(len);\n    return;\n  }\n  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);\n  arr.push(octets | 0x80);\n  while (--octets) {\n    arr.push((len >>> (octets << 3)) & 0xff);\n  }\n  arr.push(len);\n}\n\nSignature.prototype.toDER = function toDER(enc) {\n  var r = this.r.toArray();\n  var s = this.s.toArray();\n\n  // Pad values\n  if (r[0] & 0x80)\n    r = [ 0 ].concat(r);\n  // Pad values\n  if (s[0] & 0x80)\n    s = [ 0 ].concat(s);\n\n  r = rmPadding(r);\n  s = rmPadding(s);\n\n  while (!s[0] && !(s[1] & 0x80)) {\n    s = s.slice(1);\n  }\n  var arr = [ 0x02 ];\n  constructLength(arr, r.length);\n  arr = arr.concat(r);\n  arr.push(0x02);\n  constructLength(arr, s.length);\n  var backHalf = arr.concat(s);\n  var res = [ 0x30 ];\n  constructLength(res, backHalf.length);\n  res = res.concat(backHalf);\n  return utils_1$1.encode(res, enc);\n};\n\n'use strict';\n\n\n\n\n\nvar rand = /*RicMoo:ethers:require(brorand)*/(function() { throw new Error('unsupported'); });\nvar assert$5 = utils_1$1.assert;\n\n\n\n\nfunction EC(options) {\n  if (!(this instanceof EC))\n    return new EC(options);\n\n  // Shortcut `elliptic.ec(curve-name)`\n  if (typeof options === 'string') {\n    assert$5(Object.prototype.hasOwnProperty.call(curves_1, options),\n      'Unknown curve ' + options);\n\n    options = curves_1[options];\n  }\n\n  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`\n  if (options instanceof curves_1.PresetCurve)\n    options = { curve: options };\n\n  this.curve = options.curve.curve;\n  this.n = this.curve.n;\n  this.nh = this.n.ushrn(1);\n  this.g = this.curve.g;\n\n  // Point on curve\n  this.g = options.curve.g;\n  this.g.precompute(options.curve.n.bitLength() + 1);\n\n  // Hash for function for DRBG\n  this.hash = options.hash || options.curve.hash;\n}\nvar ec = EC;\n\nEC.prototype.keyPair = function keyPair(options) {\n  return new key(this, options);\n};\n\nEC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {\n  return key.fromPrivate(this, priv, enc);\n};\n\nEC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {\n  return key.fromPublic(this, pub, enc);\n};\n\nEC.prototype.genKeyPair = function genKeyPair(options) {\n  if (!options)\n    options = {};\n\n  // Instantiate Hmac_DRBG\n  var drbg = new hmacDrbg({\n    hash: this.hash,\n    pers: options.pers,\n    persEnc: options.persEnc || 'utf8',\n    entropy: options.entropy || rand(this.hash.hmacStrength),\n    entropyEnc: options.entropy && options.entropyEnc || 'utf8',\n    nonce: this.n.toArray(),\n  });\n\n  var bytes = this.n.byteLength();\n  var ns2 = this.n.sub(new (bn_default())(2));\n  for (;;) {\n    var priv = new (bn_default())(drbg.generate(bytes));\n    if (priv.cmp(ns2) > 0)\n      continue;\n\n    priv.iaddn(1);\n    return this.keyFromPrivate(priv);\n  }\n};\n\nEC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {\n  var delta = msg.byteLength() * 8 - this.n.bitLength();\n  if (delta > 0)\n    msg = msg.ushrn(delta);\n  if (!truncOnly && msg.cmp(this.n) >= 0)\n    return msg.sub(this.n);\n  else\n    return msg;\n};\n\nEC.prototype.sign = function sign(msg, key, enc, options) {\n  if (typeof enc === 'object') {\n    options = enc;\n    enc = null;\n  }\n  if (!options)\n    options = {};\n\n  key = this.keyFromPrivate(key, enc);\n  msg = this._truncateToN(new (bn_default())(msg, 16));\n\n  // Zero-extend key to provide enough entropy\n  var bytes = this.n.byteLength();\n  var bkey = key.getPrivate().toArray('be', bytes);\n\n  // Zero-extend nonce to have the same byte size as N\n  var nonce = msg.toArray('be', bytes);\n\n  // Instantiate Hmac_DRBG\n  var drbg = new hmacDrbg({\n    hash: this.hash,\n    entropy: bkey,\n    nonce: nonce,\n    pers: options.pers,\n    persEnc: options.persEnc || 'utf8',\n  });\n\n  // Number of bytes to generate\n  var ns1 = this.n.sub(new (bn_default())(1));\n\n  for (var iter = 0; ; iter++) {\n    var k = options.k ?\n      options.k(iter) :\n      new (bn_default())(drbg.generate(this.n.byteLength()));\n    k = this._truncateToN(k, true);\n    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)\n      continue;\n\n    var kp = this.g.mul(k);\n    if (kp.isInfinity())\n      continue;\n\n    var kpX = kp.getX();\n    var r = kpX.umod(this.n);\n    if (r.cmpn(0) === 0)\n      continue;\n\n    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));\n    s = s.umod(this.n);\n    if (s.cmpn(0) === 0)\n      continue;\n\n    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |\n                        (kpX.cmp(r) !== 0 ? 2 : 0);\n\n    // Use complement of `s`, if it is > `n / 2`\n    if (options.canonical && s.cmp(this.nh) > 0) {\n      s = this.n.sub(s);\n      recoveryParam ^= 1;\n    }\n\n    return new signature({ r: r, s: s, recoveryParam: recoveryParam });\n  }\n};\n\nEC.prototype.verify = function verify(msg, signature$1, key, enc) {\n  msg = this._truncateToN(new (bn_default())(msg, 16));\n  key = this.keyFromPublic(key, enc);\n  signature$1 = new signature(signature$1, 'hex');\n\n  // Perform primitive values validation\n  var r = signature$1.r;\n  var s = signature$1.s;\n  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)\n    return false;\n  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)\n    return false;\n\n  // Validate signature\n  var sinv = s.invm(this.n);\n  var u1 = sinv.mul(msg).umod(this.n);\n  var u2 = sinv.mul(r).umod(this.n);\n  var p;\n\n  if (!this.curve._maxwellTrick) {\n    p = this.g.mulAdd(u1, key.getPublic(), u2);\n    if (p.isInfinity())\n      return false;\n\n    return p.getX().umod(this.n).cmp(r) === 0;\n  }\n\n  // NOTE: Greg Maxwell's trick, inspired by:\n  // https://git.io/vad3K\n\n  p = this.g.jmulAdd(u1, key.getPublic(), u2);\n  if (p.isInfinity())\n    return false;\n\n  // Compare `p.x` of Jacobian point with `r`,\n  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the\n  // inverse of `p.z^2`\n  return p.eqXToP(r);\n};\n\nEC.prototype.recoverPubKey = function(msg, signature$1, j, enc) {\n  assert$5((3 & j) === j, 'The recovery param is more than two bits');\n  signature$1 = new signature(signature$1, enc);\n\n  var n = this.n;\n  var e = new (bn_default())(msg);\n  var r = signature$1.r;\n  var s = signature$1.s;\n\n  // A set LSB signifies that the y-coordinate is odd\n  var isYOdd = j & 1;\n  var isSecondKey = j >> 1;\n  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)\n    throw new Error('Unable to find sencond key candinate');\n\n  // 1.1. Let x = r + jn.\n  if (isSecondKey)\n    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);\n  else\n    r = this.curve.pointFromX(r, isYOdd);\n\n  var rInv = signature$1.r.invm(n);\n  var s1 = n.sub(e).mul(rInv).umod(n);\n  var s2 = s.mul(rInv).umod(n);\n\n  // 1.6.1 Compute Q = r^-1 (sR -  eG)\n  //               Q = r^-1 (sR + -eG)\n  return this.g.mulAdd(s1, r, s2);\n};\n\nEC.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {\n  signature$1 = new signature(signature$1, enc);\n  if (signature$1.recoveryParam !== null)\n    return signature$1.recoveryParam;\n\n  for (var i = 0; i < 4; i++) {\n    var Qprime;\n    try {\n      Qprime = this.recoverPubKey(e, signature$1, i);\n    } catch (e) {\n      continue;\n    }\n\n    if (Qprime.eq(Q))\n      return i;\n  }\n  throw new Error('Unable to find valid recovery factor');\n};\n\nvar elliptic_1 = createCommonjsModule(function (module, exports) {\n'use strict';\n\nvar elliptic = exports;\n\nelliptic.version = /*RicMoo:ethers*/{ version: \"6.5.4\" }.version;\nelliptic.utils = utils_1$1;\nelliptic.rand = /*RicMoo:ethers:require(brorand)*/(function() { throw new Error('unsupported'); });\nelliptic.curve = curve_1;\nelliptic.curves = curves_1;\n\n// Protocols\nelliptic.ec = ec;\nelliptic.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/(null);\n});\n\nvar EC$1 = elliptic_1.ec;\n\n\n//# sourceMappingURL=elliptic.js.map\n\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/signing-key/lib.esm/_version.js\nconst signing_key_lib_esm_version_version = \"signing-key/5.7.0\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/signing-key/lib.esm/index.js\n\n\n\n\n\n\nconst signing_key_lib_esm_logger = new Logger(signing_key_lib_esm_version_version);\nlet _curve = null;\nfunction getCurve() {\n    if (!_curve) {\n        _curve = new EC$1(\"secp256k1\");\n    }\n    return _curve;\n}\nclass SigningKey {\n    constructor(privateKey) {\n        defineReadOnly(this, \"curve\", \"secp256k1\");\n        defineReadOnly(this, \"privateKey\", hexlify(privateKey));\n        if (hexDataLength(this.privateKey) !== 32) {\n            signing_key_lib_esm_logger.throwArgumentError(\"invalid private key\", \"privateKey\", \"[[ REDACTED ]]\");\n        }\n        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n        defineReadOnly(this, \"publicKey\", \"0x\" + keyPair.getPublic(false, \"hex\"));\n        defineReadOnly(this, \"compressedPublicKey\", \"0x\" + keyPair.getPublic(true, \"hex\"));\n        defineReadOnly(this, \"_isSigningKey\", true);\n    }\n    _addPoint(other) {\n        const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));\n        const p1 = getCurve().keyFromPublic(arrayify(other));\n        return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n    }\n    signDigest(digest) {\n        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n        const digestBytes = arrayify(digest);\n        if (digestBytes.length !== 32) {\n            signing_key_lib_esm_logger.throwArgumentError(\"bad digest length\", \"digest\", digest);\n        }\n        const signature = keyPair.sign(digestBytes, { canonical: true });\n        return splitSignature({\n            recoveryParam: signature.recoveryParam,\n            r: hexZeroPad(\"0x\" + signature.r.toString(16), 32),\n            s: hexZeroPad(\"0x\" + signature.s.toString(16), 32),\n        });\n    }\n    computeSharedSecret(otherKey) {\n        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n        const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));\n        return hexZeroPad(\"0x\" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n    }\n    static isSigningKey(value) {\n        return !!(value && value._isSigningKey);\n    }\n}\nfunction recoverPublicKey(digest, signature) {\n    const sig = splitSignature(signature);\n    const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };\n    return \"0x\" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode(\"hex\", false);\n}\nfunction computePublicKey(key, compressed) {\n    const bytes = arrayify(key);\n    if (bytes.length === 32) {\n        const signingKey = new SigningKey(bytes);\n        if (compressed) {\n            return \"0x\" + getCurve().keyFromPrivate(bytes).getPublic(true, \"hex\");\n        }\n        return signingKey.publicKey;\n    }\n    else if (bytes.length === 33) {\n        if (compressed) {\n            return hexlify(bytes);\n        }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(false, \"hex\");\n    }\n    else if (bytes.length === 65) {\n        if (!compressed) {\n            return hexlify(bytes);\n        }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(true, \"hex\");\n    }\n    return signing_key_lib_esm_logger.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n}\n//# sourceMappingURL=index.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/transactions/lib.esm/_version.js\nconst transactions_lib_esm_version_version = \"transactions/5.7.0\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/transactions/lib.esm/index.js\n\n\n\n\n\n\n\n\n\n\n\nconst transactions_lib_esm_logger = new Logger(transactions_lib_esm_version_version);\nvar TransactionTypes;\n(function (TransactionTypes) {\n    TransactionTypes[TransactionTypes[\"legacy\"] = 0] = \"legacy\";\n    TransactionTypes[TransactionTypes[\"eip2930\"] = 1] = \"eip2930\";\n    TransactionTypes[TransactionTypes[\"eip1559\"] = 2] = \"eip1559\";\n})(TransactionTypes || (TransactionTypes = {}));\n;\n///////////////////////////////\nfunction handleAddress(value) {\n    if (value === \"0x\") {\n        return null;\n    }\n    return getAddress(value);\n}\nfunction handleNumber(value) {\n    if (value === \"0x\") {\n        return bignumbers_Zero;\n    }\n    return BigNumber.from(value);\n}\n// Legacy Transaction Fields\nconst transactionFields = [\n    { name: \"nonce\", maxLength: 32, numeric: true },\n    { name: \"gasPrice\", maxLength: 32, numeric: true },\n    { name: \"gasLimit\", maxLength: 32, numeric: true },\n    { name: \"to\", length: 20 },\n    { name: \"value\", maxLength: 32, numeric: true },\n    { name: \"data\" },\n];\nconst lib_esm_allowedTransactionKeys = {\n    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, type: true, value: true\n};\nfunction computeAddress(key) {\n    const publicKey = computePublicKey(key);\n    return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));\n}\nfunction recoverAddress(digest, signature) {\n    return computeAddress(recoverPublicKey(arrayify(digest), signature));\n}\nfunction formatNumber(value, name) {\n    const result = stripZeros(BigNumber.from(value).toHexString());\n    if (result.length > 32) {\n        transactions_lib_esm_logger.throwArgumentError(\"invalid length for \" + name, (\"transaction:\" + name), value);\n    }\n    return result;\n}\nfunction accessSetify(addr, storageKeys) {\n    return {\n        address: getAddress(addr),\n        storageKeys: (storageKeys || []).map((storageKey, index) => {\n            if (hexDataLength(storageKey) !== 32) {\n                transactions_lib_esm_logger.throwArgumentError(\"invalid access list storageKey\", `accessList[${addr}:${index}]`, storageKey);\n            }\n            return storageKey.toLowerCase();\n        })\n    };\n}\nfunction accessListify(value) {\n    if (Array.isArray(value)) {\n        return value.map((set, index) => {\n            if (Array.isArray(set)) {\n                if (set.length > 2) {\n                    transactions_lib_esm_logger.throwArgumentError(\"access list expected to be [ address, storageKeys[] ]\", `value[${index}]`, set);\n                }\n                return accessSetify(set[0], set[1]);\n            }\n            return accessSetify(set.address, set.storageKeys);\n        });\n    }\n    const result = Object.keys(value).map((addr) => {\n        const storageKeys = value[addr].reduce((accum, storageKey) => {\n            accum[storageKey] = true;\n            return accum;\n        }, {});\n        return accessSetify(addr, Object.keys(storageKeys).sort());\n    });\n    result.sort((a, b) => (a.address.localeCompare(b.address)));\n    return result;\n}\nfunction formatAccessList(value) {\n    return accessListify(value).map((set) => [set.address, set.storageKeys]);\n}\nfunction _serializeEip1559(transaction, signature) {\n    // If there is an explicit gasPrice, make sure it matches the\n    // EIP-1559 fees; otherwise they may not understand what they\n    // think they are setting in terms of fee.\n    if (transaction.gasPrice != null) {\n        const gasPrice = BigNumber.from(transaction.gasPrice);\n        const maxFeePerGas = BigNumber.from(transaction.maxFeePerGas || 0);\n        if (!gasPrice.eq(maxFeePerGas)) {\n            transactions_lib_esm_logger.throwArgumentError(\"mismatch EIP-1559 gasPrice != maxFeePerGas\", \"tx\", {\n                gasPrice, maxFeePerGas\n            });\n        }\n    }\n    const fields = [\n        formatNumber(transaction.chainId || 0, \"chainId\"),\n        formatNumber(transaction.nonce || 0, \"nonce\"),\n        formatNumber(transaction.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\n        formatNumber(transaction.maxFeePerGas || 0, \"maxFeePerGas\"),\n        formatNumber(transaction.gasLimit || 0, \"gasLimit\"),\n        ((transaction.to != null) ? getAddress(transaction.to) : \"0x\"),\n        formatNumber(transaction.value || 0, \"value\"),\n        (transaction.data || \"0x\"),\n        (formatAccessList(transaction.accessList || []))\n    ];\n    if (signature) {\n        const sig = splitSignature(signature);\n        fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n        fields.push(stripZeros(sig.r));\n        fields.push(stripZeros(sig.s));\n    }\n    return hexConcat([\"0x02\", encode(fields)]);\n}\nfunction _serializeEip2930(transaction, signature) {\n    const fields = [\n        formatNumber(transaction.chainId || 0, \"chainId\"),\n        formatNumber(transaction.nonce || 0, \"nonce\"),\n        formatNumber(transaction.gasPrice || 0, \"gasPrice\"),\n        formatNumber(transaction.gasLimit || 0, \"gasLimit\"),\n        ((transaction.to != null) ? getAddress(transaction.to) : \"0x\"),\n        formatNumber(transaction.value || 0, \"value\"),\n        (transaction.data || \"0x\"),\n        (formatAccessList(transaction.accessList || []))\n    ];\n    if (signature) {\n        const sig = splitSignature(signature);\n        fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n        fields.push(stripZeros(sig.r));\n        fields.push(stripZeros(sig.s));\n    }\n    return hexConcat([\"0x01\", encode(fields)]);\n}\n// Legacy Transactions and EIP-155\nfunction _serialize(transaction, signature) {\n    checkProperties(transaction, lib_esm_allowedTransactionKeys);\n    const raw = [];\n    transactionFields.forEach(function (fieldInfo) {\n        let value = transaction[fieldInfo.name] || ([]);\n        const options = {};\n        if (fieldInfo.numeric) {\n            options.hexPad = \"left\";\n        }\n        value = arrayify(hexlify(value, options));\n        // Fixed-width field\n        if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {\n            transactions_lib_esm_logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, (\"transaction:\" + fieldInfo.name), value);\n        }\n        // Variable-width (with a maximum)\n        if (fieldInfo.maxLength) {\n            value = stripZeros(value);\n            if (value.length > fieldInfo.maxLength) {\n                transactions_lib_esm_logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, (\"transaction:\" + fieldInfo.name), value);\n            }\n        }\n        raw.push(hexlify(value));\n    });\n    let chainId = 0;\n    if (transaction.chainId != null) {\n        // A chainId was provided; if non-zero we'll use EIP-155\n        chainId = transaction.chainId;\n        if (typeof (chainId) !== \"number\") {\n            transactions_lib_esm_logger.throwArgumentError(\"invalid transaction.chainId\", \"transaction\", transaction);\n        }\n    }\n    else if (signature && !isBytesLike(signature) && signature.v > 28) {\n        // No chainId provided, but the signature is signing with EIP-155; derive chainId\n        chainId = Math.floor((signature.v - 35) / 2);\n    }\n    // We have an EIP-155 transaction (chainId was specified and non-zero)\n    if (chainId !== 0) {\n        raw.push(hexlify(chainId)); // @TODO: hexValue?\n        raw.push(\"0x\");\n        raw.push(\"0x\");\n    }\n    // Requesting an unsigned transaction\n    if (!signature) {\n        return encode(raw);\n    }\n    // The splitSignature will ensure the transaction has a recoveryParam in the\n    // case that the signTransaction function only adds a v.\n    const sig = splitSignature(signature);\n    // We pushed a chainId and null r, s on for hashing only; remove those\n    let v = 27 + sig.recoveryParam;\n    if (chainId !== 0) {\n        raw.pop();\n        raw.pop();\n        raw.pop();\n        v += chainId * 2 + 8;\n        // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!\n        if (sig.v > 28 && sig.v !== v) {\n            transactions_lib_esm_logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n        }\n    }\n    else if (sig.v !== v) {\n        transactions_lib_esm_logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n    }\n    raw.push(hexlify(v));\n    raw.push(stripZeros(arrayify(sig.r)));\n    raw.push(stripZeros(arrayify(sig.s)));\n    return encode(raw);\n}\nfunction serialize(transaction, signature) {\n    // Legacy and EIP-155 Transactions\n    if (transaction.type == null || transaction.type === 0) {\n        if (transaction.accessList != null) {\n            transactions_lib_esm_logger.throwArgumentError(\"untyped transactions do not support accessList; include type: 1\", \"transaction\", transaction);\n        }\n        return _serialize(transaction, signature);\n    }\n    // Typed Transactions (EIP-2718)\n    switch (transaction.type) {\n        case 1:\n            return _serializeEip2930(transaction, signature);\n        case 2:\n            return _serializeEip1559(transaction, signature);\n        default:\n            break;\n    }\n    return transactions_lib_esm_logger.throwError(`unsupported transaction type: ${transaction.type}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"serializeTransaction\",\n        transactionType: transaction.type\n    });\n}\nfunction _parseEipSignature(tx, fields, serialize) {\n    try {\n        const recid = handleNumber(fields[0]).toNumber();\n        if (recid !== 0 && recid !== 1) {\n            throw new Error(\"bad recid\");\n        }\n        tx.v = recid;\n    }\n    catch (error) {\n        transactions_lib_esm_logger.throwArgumentError(\"invalid v for transaction type: 1\", \"v\", fields[0]);\n    }\n    tx.r = hexZeroPad(fields[1], 32);\n    tx.s = hexZeroPad(fields[2], 32);\n    try {\n        const digest = keccak256(serialize(tx));\n        tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });\n    }\n    catch (error) { }\n}\nfunction _parseEip1559(payload) {\n    const transaction = decode(payload.slice(1));\n    if (transaction.length !== 9 && transaction.length !== 12) {\n        transactions_lib_esm_logger.throwArgumentError(\"invalid component count for transaction type: 2\", \"payload\", hexlify(payload));\n    }\n    const maxPriorityFeePerGas = handleNumber(transaction[2]);\n    const maxFeePerGas = handleNumber(transaction[3]);\n    const tx = {\n        type: 2,\n        chainId: handleNumber(transaction[0]).toNumber(),\n        nonce: handleNumber(transaction[1]).toNumber(),\n        maxPriorityFeePerGas: maxPriorityFeePerGas,\n        maxFeePerGas: maxFeePerGas,\n        gasPrice: null,\n        gasLimit: handleNumber(transaction[4]),\n        to: handleAddress(transaction[5]),\n        value: handleNumber(transaction[6]),\n        data: transaction[7],\n        accessList: accessListify(transaction[8]),\n    };\n    // Unsigned EIP-1559 Transaction\n    if (transaction.length === 9) {\n        return tx;\n    }\n    tx.hash = keccak256(payload);\n    _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);\n    return tx;\n}\nfunction _parseEip2930(payload) {\n    const transaction = decode(payload.slice(1));\n    if (transaction.length !== 8 && transaction.length !== 11) {\n        transactions_lib_esm_logger.throwArgumentError(\"invalid component count for transaction type: 1\", \"payload\", hexlify(payload));\n    }\n    const tx = {\n        type: 1,\n        chainId: handleNumber(transaction[0]).toNumber(),\n        nonce: handleNumber(transaction[1]).toNumber(),\n        gasPrice: handleNumber(transaction[2]),\n        gasLimit: handleNumber(transaction[3]),\n        to: handleAddress(transaction[4]),\n        value: handleNumber(transaction[5]),\n        data: transaction[6],\n        accessList: accessListify(transaction[7])\n    };\n    // Unsigned EIP-2930 Transaction\n    if (transaction.length === 8) {\n        return tx;\n    }\n    tx.hash = keccak256(payload);\n    _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);\n    return tx;\n}\n// Legacy Transactions and EIP-155\nfunction _parse(rawTransaction) {\n    const transaction = decode(rawTransaction);\n    if (transaction.length !== 9 && transaction.length !== 6) {\n        transactions_lib_esm_logger.throwArgumentError(\"invalid raw transaction\", \"rawTransaction\", rawTransaction);\n    }\n    const tx = {\n        nonce: handleNumber(transaction[0]).toNumber(),\n        gasPrice: handleNumber(transaction[1]),\n        gasLimit: handleNumber(transaction[2]),\n        to: handleAddress(transaction[3]),\n        value: handleNumber(transaction[4]),\n        data: transaction[5],\n        chainId: 0\n    };\n    // Legacy unsigned transaction\n    if (transaction.length === 6) {\n        return tx;\n    }\n    try {\n        tx.v = BigNumber.from(transaction[6]).toNumber();\n    }\n    catch (error) {\n        // @TODO: What makes snese to do? The v is too big\n        return tx;\n    }\n    tx.r = hexZeroPad(transaction[7], 32);\n    tx.s = hexZeroPad(transaction[8], 32);\n    if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {\n        // EIP-155 unsigned transaction\n        tx.chainId = tx.v;\n        tx.v = 0;\n    }\n    else {\n        // Signed Transaction\n        tx.chainId = Math.floor((tx.v - 35) / 2);\n        if (tx.chainId < 0) {\n            tx.chainId = 0;\n        }\n        let recoveryParam = tx.v - 27;\n        const raw = transaction.slice(0, 6);\n        if (tx.chainId !== 0) {\n            raw.push(hexlify(tx.chainId));\n            raw.push(\"0x\");\n            raw.push(\"0x\");\n            recoveryParam -= tx.chainId * 2 + 8;\n        }\n        const digest = keccak256(encode(raw));\n        try {\n            tx.from = recoverAddress(digest, { r: hexlify(tx.r), s: hexlify(tx.s), recoveryParam: recoveryParam });\n        }\n        catch (error) { }\n        tx.hash = keccak256(rawTransaction);\n    }\n    tx.type = null;\n    return tx;\n}\nfunction parse(rawTransaction) {\n    const payload = arrayify(rawTransaction);\n    // Legacy and EIP-155 Transactions\n    if (payload[0] > 0x7f) {\n        return _parse(payload);\n    }\n    // Typed Transaction (EIP-2718)\n    switch (payload[0]) {\n        case 1:\n            return _parseEip2930(payload);\n        case 2:\n            return _parseEip1559(payload);\n        default:\n            break;\n    }\n    return transactions_lib_esm_logger.throwError(`unsupported transaction type: ${payload[0]}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"parseTransaction\",\n        transactionType: payload[0]\n    });\n}\n//# sourceMappingURL=index.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/base64/lib.esm/base64.js\n\n\nfunction base64_decode(textData) {\n    textData = atob(textData);\n    const data = [];\n    for (let i = 0; i < textData.length; i++) {\n        data.push(textData.charCodeAt(i));\n    }\n    return arrayify(data);\n}\nfunction base64_encode(data) {\n    data = arrayify(data);\n    let textData = \"\";\n    for (let i = 0; i < data.length; i++) {\n        textData += String.fromCharCode(data[i]);\n    }\n    return btoa(textData);\n}\n//# sourceMappingURL=base64.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/web/lib.esm/_version.js\nconst web_lib_esm_version_version = \"web/5.7.1\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/web/lib.esm/geturl.js\n\nvar geturl_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nfunction getUrl(href, options) {\n    return geturl_awaiter(this, void 0, void 0, function* () {\n        if (options == null) {\n            options = {};\n        }\n        const request = {\n            method: (options.method || \"GET\"),\n            headers: (options.headers || {}),\n            body: (options.body || undefined),\n        };\n        if (options.skipFetchSetup !== true) {\n            request.mode = \"cors\"; // no-cors, cors, *same-origin\n            request.cache = \"no-cache\"; // *default, no-cache, reload, force-cache, only-if-cached\n            request.credentials = \"same-origin\"; // include, *same-origin, omit\n            request.redirect = \"follow\"; // manual, *follow, error\n            request.referrer = \"client\"; // no-referrer, *client\n        }\n        ;\n        if (options.fetchOptions != null) {\n            const opts = options.fetchOptions;\n            if (opts.mode) {\n                request.mode = (opts.mode);\n            }\n            if (opts.cache) {\n                request.cache = (opts.cache);\n            }\n            if (opts.credentials) {\n                request.credentials = (opts.credentials);\n            }\n            if (opts.redirect) {\n                request.redirect = (opts.redirect);\n            }\n            if (opts.referrer) {\n                request.referrer = opts.referrer;\n            }\n        }\n        const response = yield fetch(href, request);\n        const body = yield response.arrayBuffer();\n        const headers = {};\n        if (response.headers.forEach) {\n            response.headers.forEach((value, key) => {\n                headers[key.toLowerCase()] = value;\n            });\n        }\n        else {\n            ((response.headers).keys)().forEach((key) => {\n                headers[key.toLowerCase()] = response.headers.get(key);\n            });\n        }\n        return {\n            headers: headers,\n            statusCode: response.status,\n            statusMessage: response.statusText,\n            body: arrayify(new Uint8Array(body)),\n        };\n    });\n}\n//# sourceMappingURL=geturl.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/web/lib.esm/index.js\n\nvar web_lib_esm_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\nconst web_lib_esm_logger = new Logger(web_lib_esm_version_version);\n\nfunction staller(duration) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\nfunction bodyify(value, type) {\n    if (value == null) {\n        return null;\n    }\n    if (typeof (value) === \"string\") {\n        return value;\n    }\n    if (isBytesLike(value)) {\n        if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n            try {\n                return toUtf8String(value);\n            }\n            catch (error) { }\n            ;\n        }\n        return hexlify(value);\n    }\n    return value;\n}\nfunction unpercent(value) {\n    return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n        return String.fromCharCode(parseInt(code, 16));\n    }));\n}\n// This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\nfunction _fetchData(connection, body, processFunc) {\n    // How many times to retry in the event of a throttle\n    const attemptLimit = (typeof (connection) === \"object\" && connection.throttleLimit != null) ? connection.throttleLimit : 12;\n    web_lib_esm_logger.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0), \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n    const throttleCallback = ((typeof (connection) === \"object\") ? connection.throttleCallback : null);\n    const throttleSlotInterval = ((typeof (connection) === \"object\" && typeof (connection.throttleSlotInterval) === \"number\") ? connection.throttleSlotInterval : 100);\n    web_lib_esm_logger.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0), \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n    const errorPassThrough = ((typeof (connection) === \"object\") ? !!(connection.errorPassThrough) : false);\n    const headers = {};\n    let url = null;\n    // @TODO: Allow ConnectionInfo to override some of these values\n    const options = {\n        method: \"GET\",\n    };\n    let allow304 = false;\n    let timeout = 2 * 60 * 1000;\n    if (typeof (connection) === \"string\") {\n        url = connection;\n    }\n    else if (typeof (connection) === \"object\") {\n        if (connection == null || connection.url == null) {\n            web_lib_esm_logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n        }\n        url = connection.url;\n        if (typeof (connection.timeout) === \"number\" && connection.timeout > 0) {\n            timeout = connection.timeout;\n        }\n        if (connection.headers) {\n            for (const key in connection.headers) {\n                headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };\n                if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n                    allow304 = true;\n                }\n            }\n        }\n        options.allowGzip = !!connection.allowGzip;\n        if (connection.user != null && connection.password != null) {\n            if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n                web_lib_esm_logger.throwError(\"basic authentication requires a secure https url\", Logger.errors.INVALID_ARGUMENT, { argument: \"url\", url: url, user: connection.user, password: \"[REDACTED]\" });\n            }\n            const authorization = connection.user + \":\" + connection.password;\n            headers[\"authorization\"] = {\n                key: \"Authorization\",\n                value: \"Basic \" + base64_encode(toUtf8Bytes(authorization))\n            };\n        }\n        if (connection.skipFetchSetup != null) {\n            options.skipFetchSetup = !!connection.skipFetchSetup;\n        }\n        if (connection.fetchOptions != null) {\n            options.fetchOptions = shallowCopy(connection.fetchOptions);\n        }\n    }\n    const reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\n    const dataMatch = ((url) ? url.match(reData) : null);\n    if (dataMatch) {\n        try {\n            const response = {\n                statusCode: 200,\n                statusMessage: \"OK\",\n                headers: { \"content-type\": (dataMatch[1] || \"text/plain\") },\n                body: (dataMatch[2] ? base64_decode(dataMatch[3]) : unpercent(dataMatch[3]))\n            };\n            let result = response.body;\n            if (processFunc) {\n                result = processFunc(response.body, response);\n            }\n            return Promise.resolve(result);\n        }\n        catch (error) {\n            web_lib_esm_logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                body: bodyify(dataMatch[1], dataMatch[2]),\n                error: error,\n                requestBody: null,\n                requestMethod: \"GET\",\n                url: url\n            });\n        }\n    }\n    if (body) {\n        options.method = \"POST\";\n        options.body = body;\n        if (headers[\"content-type\"] == null) {\n            headers[\"content-type\"] = { key: \"Content-Type\", value: \"application/octet-stream\" };\n        }\n        if (headers[\"content-length\"] == null) {\n            headers[\"content-length\"] = { key: \"Content-Length\", value: String(body.length) };\n        }\n    }\n    const flatHeaders = {};\n    Object.keys(headers).forEach((key) => {\n        const header = headers[key];\n        flatHeaders[header.key] = header.value;\n    });\n    options.headers = flatHeaders;\n    const runningTimeout = (function () {\n        let timer = null;\n        const promise = new Promise(function (resolve, reject) {\n            if (timeout) {\n                timer = setTimeout(() => {\n                    if (timer == null) {\n                        return;\n                    }\n                    timer = null;\n                    reject(web_lib_esm_logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        timeout: timeout,\n                        url: url\n                    }));\n                }, timeout);\n            }\n        });\n        const cancel = function () {\n            if (timer == null) {\n                return;\n            }\n            clearTimeout(timer);\n            timer = null;\n        };\n        return { promise, cancel };\n    })();\n    const runningFetch = (function () {\n        return web_lib_esm_awaiter(this, void 0, void 0, function* () {\n            for (let attempt = 0; attempt < attemptLimit; attempt++) {\n                let response = null;\n                try {\n                    response = yield getUrl(url, options);\n                    if (attempt < attemptLimit) {\n                        if (response.statusCode === 301 || response.statusCode === 302) {\n                            // Redirection; for now we only support absolute locataions\n                            const location = response.headers.location || \"\";\n                            if (options.method === \"GET\" && location.match(/^https:/)) {\n                                url = response.headers.location;\n                                continue;\n                            }\n                        }\n                        else if (response.statusCode === 429) {\n                            // Exponential back-off throttling\n                            let tryAgain = true;\n                            if (throttleCallback) {\n                                tryAgain = yield throttleCallback(attempt, url);\n                            }\n                            if (tryAgain) {\n                                let stall = 0;\n                                const retryAfter = response.headers[\"retry-after\"];\n                                if (typeof (retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                                    stall = parseInt(retryAfter) * 1000;\n                                }\n                                else {\n                                    stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                                }\n                                //console.log(\"Stalling 429\");\n                                yield staller(stall);\n                                continue;\n                            }\n                        }\n                    }\n                }\n                catch (error) {\n                    response = error.response;\n                    if (response == null) {\n                        runningTimeout.cancel();\n                        web_lib_esm_logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n                            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                            requestMethod: options.method,\n                            serverError: error,\n                            url: url\n                        });\n                    }\n                }\n                let body = response.body;\n                if (allow304 && response.statusCode === 304) {\n                    body = null;\n                }\n                else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {\n                    runningTimeout.cancel();\n                    web_lib_esm_logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n                        status: response.statusCode,\n                        headers: response.headers,\n                        body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"] : null)),\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        url: url\n                    });\n                }\n                if (processFunc) {\n                    try {\n                        const result = yield processFunc(body, response);\n                        runningTimeout.cancel();\n                        return result;\n                    }\n                    catch (error) {\n                        // Allow the processFunc to trigger a throttle\n                        if (error.throttleRetry && attempt < attemptLimit) {\n                            let tryAgain = true;\n                            if (throttleCallback) {\n                                tryAgain = yield throttleCallback(attempt, url);\n                            }\n                            if (tryAgain) {\n                                const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                                //console.log(\"Stalling callback\");\n                                yield staller(timeout);\n                                continue;\n                            }\n                        }\n                        runningTimeout.cancel();\n                        web_lib_esm_logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                            body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"] : null)),\n                            error: error,\n                            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                            requestMethod: options.method,\n                            url: url\n                        });\n                    }\n                }\n                runningTimeout.cancel();\n                // If we had a processFunc, it either returned a T or threw above.\n                // The \"body\" is now a Uint8Array.\n                return body;\n            }\n            return web_lib_esm_logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n                requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                requestMethod: options.method,\n                url: url\n            });\n        });\n    })();\n    return Promise.race([runningTimeout.promise, runningFetch]);\n}\nfunction fetchJson(connection, json, processFunc) {\n    let processJsonFunc = (value, response) => {\n        let result = null;\n        if (value != null) {\n            try {\n                result = JSON.parse(toUtf8String(value));\n            }\n            catch (error) {\n                web_lib_esm_logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n                    body: value,\n                    error: error\n                });\n            }\n        }\n        if (processFunc) {\n            result = processFunc(result, response);\n        }\n        return result;\n    };\n    // If we have json to send, we must\n    // - add content-type of application/json (unless already overridden)\n    // - convert the json to bytes\n    let body = null;\n    if (json != null) {\n        body = toUtf8Bytes(json);\n        // Create a connection with the content-type set for JSON\n        const updated = (typeof (connection) === \"string\") ? ({ url: connection }) : shallowCopy(connection);\n        if (updated.headers) {\n            const hasContentType = (Object.keys(updated.headers).filter((k) => (k.toLowerCase() === \"content-type\")).length) !== 0;\n            if (!hasContentType) {\n                updated.headers = shallowCopy(updated.headers);\n                updated.headers[\"content-type\"] = \"application/json\";\n            }\n        }\n        else {\n            updated.headers = { \"content-type\": \"application/json\" };\n        }\n        connection = updated;\n    }\n    return _fetchData(connection, body, processJsonFunc);\n}\nfunction poll(func, options) {\n    if (!options) {\n        options = {};\n    }\n    options = shallowCopy(options);\n    if (options.floor == null) {\n        options.floor = 0;\n    }\n    if (options.ceiling == null) {\n        options.ceiling = 10000;\n    }\n    if (options.interval == null) {\n        options.interval = 250;\n    }\n    return new Promise(function (resolve, reject) {\n        let timer = null;\n        let done = false;\n        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n        const cancel = () => {\n            if (done) {\n                return false;\n            }\n            done = true;\n            if (timer) {\n                clearTimeout(timer);\n            }\n            return true;\n        };\n        if (options.timeout) {\n            timer = setTimeout(() => {\n                if (cancel()) {\n                    reject(new Error(\"timeout\"));\n                }\n            }, options.timeout);\n        }\n        const retryLimit = options.retryLimit;\n        let attempt = 0;\n        function check() {\n            return func().then(function (result) {\n                // If we have a result, or are allowed null then we're done\n                if (result !== undefined) {\n                    if (cancel()) {\n                        resolve(result);\n                    }\n                }\n                else if (options.oncePoll) {\n                    options.oncePoll.once(\"poll\", check);\n                }\n                else if (options.onceBlock) {\n                    options.onceBlock.once(\"block\", check);\n                    // Otherwise, exponential back-off (up to 10s) our next request\n                }\n                else if (!done) {\n                    attempt++;\n                    if (attempt > retryLimit) {\n                        if (cancel()) {\n                            reject(new Error(\"retry limit reached\"));\n                        }\n                        return;\n                    }\n                    let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                    if (timeout < options.floor) {\n                        timeout = options.floor;\n                    }\n                    if (timeout > options.ceiling) {\n                        timeout = options.ceiling;\n                    }\n                    setTimeout(check, timeout);\n                }\n                return null;\n            }, function (error) {\n                if (cancel()) {\n                    reject(error);\n                }\n            });\n        }\n        check();\n    });\n}\n//# sourceMappingURL=index.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/abstract-provider/lib.esm/_version.js\nconst abstract_provider_lib_esm_version_version = \"abstract-provider/5.7.0\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/abstract-provider/lib.esm/index.js\n\nvar abstract_provider_lib_esm_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\nconst abstract_provider_lib_esm_logger = new Logger(abstract_provider_lib_esm_version_version);\n;\n;\n//export type CallTransactionable = {\n//    call(transaction: TransactionRequest): Promise<TransactionResponse>;\n//};\nclass ForkEvent extends Description {\n    static isForkEvent(value) {\n        return !!(value && value._isForkEvent);\n    }\n}\nclass BlockForkEvent extends ForkEvent {\n    constructor(blockHash, expiry) {\n        if (!isHexString(blockHash, 32)) {\n            abstract_provider_lib_esm_logger.throwArgumentError(\"invalid blockHash\", \"blockHash\", blockHash);\n        }\n        super({\n            _isForkEvent: true,\n            _isBlockForkEvent: true,\n            expiry: (expiry || 0),\n            blockHash: blockHash\n        });\n    }\n}\nclass TransactionForkEvent extends ForkEvent {\n    constructor(hash, expiry) {\n        if (!isHexString(hash, 32)) {\n            abstract_provider_lib_esm_logger.throwArgumentError(\"invalid transaction hash\", \"hash\", hash);\n        }\n        super({\n            _isForkEvent: true,\n            _isTransactionForkEvent: true,\n            expiry: (expiry || 0),\n            hash: hash\n        });\n    }\n}\nclass TransactionOrderForkEvent extends ForkEvent {\n    constructor(beforeHash, afterHash, expiry) {\n        if (!isHexString(beforeHash, 32)) {\n            abstract_provider_lib_esm_logger.throwArgumentError(\"invalid transaction hash\", \"beforeHash\", beforeHash);\n        }\n        if (!isHexString(afterHash, 32)) {\n            abstract_provider_lib_esm_logger.throwArgumentError(\"invalid transaction hash\", \"afterHash\", afterHash);\n        }\n        super({\n            _isForkEvent: true,\n            _isTransactionOrderForkEvent: true,\n            expiry: (expiry || 0),\n            beforeHash: beforeHash,\n            afterHash: afterHash\n        });\n    }\n}\n///////////////////////////////\n// Exported Abstracts\nclass Provider {\n    constructor() {\n        abstract_provider_lib_esm_logger.checkAbstract(new.target, Provider);\n        defineReadOnly(this, \"_isProvider\", true);\n    }\n    getFeeData() {\n        return abstract_provider_lib_esm_awaiter(this, void 0, void 0, function* () {\n            const { block, gasPrice } = yield resolveProperties({\n                block: this.getBlock(\"latest\"),\n                gasPrice: this.getGasPrice().catch((error) => {\n                    // @TODO: Why is this now failing on Calaveras?\n                    //console.log(error);\n                    return null;\n                })\n            });\n            let lastBaseFeePerGas = null, maxFeePerGas = null, maxPriorityFeePerGas = null;\n            if (block && block.baseFeePerGas) {\n                // We may want to compute this more accurately in the future,\n                // using the formula \"check if the base fee is correct\".\n                // See: https://eips.ethereum.org/EIPS/eip-1559\n                lastBaseFeePerGas = block.baseFeePerGas;\n                maxPriorityFeePerGas = BigNumber.from(\"1500000000\");\n                maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);\n            }\n            return { lastBaseFeePerGas, maxFeePerGas, maxPriorityFeePerGas, gasPrice };\n        });\n    }\n    // Alias for \"on\"\n    addListener(eventName, listener) {\n        return this.on(eventName, listener);\n    }\n    // Alias for \"off\"\n    removeListener(eventName, listener) {\n        return this.off(eventName, listener);\n    }\n    static isProvider(value) {\n        return !!(value && value._isProvider);\n    }\n}\n//# sourceMappingURL=index.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/basex/lib.esm/index.js\n/**\n * var basex = require(\"base-x\");\n *\n * This implementation is heavily based on base-x. The main reason to\n * deviate was to prevent the dependency of Buffer.\n *\n * Contributors:\n *\n * base-x encoding\n * Forked from https://github.com/cryptocoinjs/bs58\n * Originally written by Mike Hearn for BitcoinJ\n * Copyright (c) 2011 Google Inc\n * Ported to JavaScript by Stefan Thomas\n * Merged Buffer refactorings from base58-native by Stephen Pair\n * Copyright (c) 2013 BitPay Inc\n *\n * The MIT License (MIT)\n *\n * Copyright base-x contributors (c) 2016\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n *\n */\n\n\nclass BaseX {\n    constructor(alphabet) {\n        defineReadOnly(this, \"alphabet\", alphabet);\n        defineReadOnly(this, \"base\", alphabet.length);\n        defineReadOnly(this, \"_alphabetMap\", {});\n        defineReadOnly(this, \"_leader\", alphabet.charAt(0));\n        // pre-compute lookup table\n        for (let i = 0; i < alphabet.length; i++) {\n            this._alphabetMap[alphabet.charAt(i)] = i;\n        }\n    }\n    encode(value) {\n        let source = arrayify(value);\n        if (source.length === 0) {\n            return \"\";\n        }\n        let digits = [0];\n        for (let i = 0; i < source.length; ++i) {\n            let carry = source[i];\n            for (let j = 0; j < digits.length; ++j) {\n                carry += digits[j] << 8;\n                digits[j] = carry % this.base;\n                carry = (carry / this.base) | 0;\n            }\n            while (carry > 0) {\n                digits.push(carry % this.base);\n                carry = (carry / this.base) | 0;\n            }\n        }\n        let string = \"\";\n        // deal with leading zeros\n        for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {\n            string += this._leader;\n        }\n        // convert digits to a string\n        for (let q = digits.length - 1; q >= 0; --q) {\n            string += this.alphabet[digits[q]];\n        }\n        return string;\n    }\n    decode(value) {\n        if (typeof (value) !== \"string\") {\n            throw new TypeError(\"Expected String\");\n        }\n        let bytes = [];\n        if (value.length === 0) {\n            return new Uint8Array(bytes);\n        }\n        bytes.push(0);\n        for (let i = 0; i < value.length; i++) {\n            let byte = this._alphabetMap[value[i]];\n            if (byte === undefined) {\n                throw new Error(\"Non-base\" + this.base + \" character\");\n            }\n            let carry = byte;\n            for (let j = 0; j < bytes.length; ++j) {\n                carry += bytes[j] * this.base;\n                bytes[j] = carry & 0xff;\n                carry >>= 8;\n            }\n            while (carry > 0) {\n                bytes.push(carry & 0xff);\n                carry >>= 8;\n            }\n        }\n        // deal with leading zeros\n        for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {\n            bytes.push(0);\n        }\n        return arrayify(new Uint8Array(bytes.reverse()));\n    }\n}\nconst Base32 = new BaseX(\"abcdefghijklmnopqrstuvwxyz234567\");\nconst Base58 = new BaseX(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\");\n\n//console.log(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\"))\n//console.log(Base58.encode(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\")))\n//# sourceMappingURL=index.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/constants/lib.esm/hashes.js\nconst HashZero = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n//# sourceMappingURL=hashes.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js\n/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n// https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js\nfunction flat(array, depth) {\n    if (depth == null) {\n        depth = 1;\n    }\n    const result = [];\n    const forEach = result.forEach;\n    const flatDeep = function (arr, depth) {\n        forEach.call(arr, function (val) {\n            if (depth > 0 && Array.isArray(val)) {\n                flatDeep(val, depth - 1);\n            }\n            else {\n                result.push(val);\n            }\n        });\n    };\n    flatDeep(array, depth);\n    return result;\n}\nfunction fromEntries(array) {\n    const result = {};\n    for (let i = 0; i < array.length; i++) {\n        const value = array[i];\n        result[value[0]] = value[1];\n    }\n    return result;\n}\nfunction decode_arithmetic(bytes) {\n    let pos = 0;\n    function u16() { return (bytes[pos++] << 8) | bytes[pos++]; }\n    // decode the frequency table\n    let symbol_count = u16();\n    let total = 1;\n    let acc = [0, 1]; // first symbol has frequency 1\n    for (let i = 1; i < symbol_count; i++) {\n        acc.push(total += u16());\n    }\n    // skip the sized-payload that the last 3 symbols index into\n    let skip = u16();\n    let pos_payload = pos;\n    pos += skip;\n    let read_width = 0;\n    let read_buffer = 0;\n    function read_bit() {\n        if (read_width == 0) {\n            // this will read beyond end of buffer\n            // but (undefined|0) => zero pad\n            read_buffer = (read_buffer << 8) | bytes[pos++];\n            read_width = 8;\n        }\n        return (read_buffer >> --read_width) & 1;\n    }\n    const N = 31;\n    const FULL = Math.pow(2, N);\n    const HALF = FULL >>> 1;\n    const QRTR = HALF >> 1;\n    const MASK = FULL - 1;\n    // fill register\n    let register = 0;\n    for (let i = 0; i < N; i++)\n        register = (register << 1) | read_bit();\n    let symbols = [];\n    let low = 0;\n    let range = FULL; // treat like a float\n    while (true) {\n        let value = Math.floor((((register - low + 1) * total) - 1) / range);\n        let start = 0;\n        let end = symbol_count;\n        while (end - start > 1) { // binary search\n            let mid = (start + end) >>> 1;\n            if (value < acc[mid]) {\n                end = mid;\n            }\n            else {\n                start = mid;\n            }\n        }\n        if (start == 0)\n            break; // first symbol is end mark\n        symbols.push(start);\n        let a = low + Math.floor(range * acc[start] / total);\n        let b = low + Math.floor(range * acc[start + 1] / total) - 1;\n        while (((a ^ b) & HALF) == 0) {\n            register = (register << 1) & MASK | read_bit();\n            a = (a << 1) & MASK;\n            b = (b << 1) & MASK | 1;\n        }\n        while (a & ~b & QRTR) {\n            register = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();\n            a = (a << 1) ^ HALF;\n            b = ((b ^ HALF) << 1) | HALF | 1;\n        }\n        low = a;\n        range = 1 + b - a;\n    }\n    let offset = symbol_count - 4;\n    return symbols.map(x => {\n        switch (x - offset) {\n            case 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);\n            case 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);\n            case 1: return offset + bytes[pos_payload++];\n            default: return x - 1;\n        }\n    });\n}\n// returns an iterator which returns the next symbol\nfunction read_payload(v) {\n    let pos = 0;\n    return () => v[pos++];\n}\nfunction read_compressed_payload(bytes) {\n    return read_payload(decode_arithmetic(bytes));\n}\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\nfunction signed(i) {\n    return (i & 1) ? (~i >> 1) : (i >> 1);\n}\nfunction read_counts(n, next) {\n    let v = Array(n);\n    for (let i = 0; i < n; i++)\n        v[i] = 1 + next();\n    return v;\n}\nfunction read_ascending(n, next) {\n    let v = Array(n);\n    for (let i = 0, x = -1; i < n; i++)\n        v[i] = x += 1 + next();\n    return v;\n}\nfunction read_deltas(n, next) {\n    let v = Array(n);\n    for (let i = 0, x = 0; i < n; i++)\n        v[i] = x += signed(next());\n    return v;\n}\nfunction read_member_array(next, lookup) {\n    let v = read_ascending(next(), next);\n    let n = next();\n    let vX = read_ascending(n, next);\n    let vN = read_counts(n, next);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < vN[i]; j++) {\n            v.push(vX[i] + j);\n        }\n    }\n    return lookup ? v.map(x => lookup[x]) : v;\n}\n// returns array of \n// [x, ys] => single replacement rule\n// [x, ys, n, dx, dx] => linear map\nfunction read_mapped_map(next) {\n    let ret = [];\n    while (true) {\n        let w = next();\n        if (w == 0)\n            break;\n        ret.push(read_linear_table(w, next));\n    }\n    while (true) {\n        let w = next() - 1;\n        if (w < 0)\n            break;\n        ret.push(read_replacement_table(w, next));\n    }\n    return fromEntries(flat(ret));\n}\nfunction read_zero_terminated_array(next) {\n    let v = [];\n    while (true) {\n        let i = next();\n        if (i == 0)\n            break;\n        v.push(i);\n    }\n    return v;\n}\nfunction read_transposed(n, w, next) {\n    let m = Array(n).fill(undefined).map(() => []);\n    for (let i = 0; i < w; i++) {\n        read_deltas(n, next).forEach((x, j) => m[j].push(x));\n    }\n    return m;\n}\nfunction read_linear_table(w, next) {\n    let dx = 1 + next();\n    let dy = next();\n    let vN = read_zero_terminated_array(next);\n    let m = read_transposed(vN.length, 1 + w, next);\n    return flat(m.map((v, i) => {\n        const x = v[0], ys = v.slice(1);\n        //let [x, ...ys] = v;\n        //return Array(vN[i]).fill().map((_, j) => {\n        return Array(vN[i]).fill(undefined).map((_, j) => {\n            let j_dy = j * dy;\n            return [x + j * dx, ys.map(y => y + j_dy)];\n        });\n    }));\n}\nfunction read_replacement_table(w, next) {\n    let n = 1 + next();\n    let m = read_transposed(n, 1 + w, next);\n    return m.map(v => [v[0], v.slice(1)]);\n}\nfunction read_emoji_trie(next) {\n    let sorted = read_member_array(next).sort((a, b) => a - b);\n    return read();\n    function read() {\n        let branches = [];\n        while (true) {\n            let keys = read_member_array(next, sorted);\n            if (keys.length == 0)\n                break;\n            branches.push({ set: new Set(keys), node: read() });\n        }\n        branches.sort((a, b) => b.set.size - a.set.size); // sort by likelihood\n        let temp = next();\n        let valid = temp % 3;\n        temp = (temp / 3) | 0;\n        let fe0f = !!(temp & 1);\n        temp >>= 1;\n        let save = temp == 1;\n        let check = temp == 2;\n        return { branches, valid, fe0f, save, check };\n    }\n}\n//# sourceMappingURL=decoder.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js\n/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n\n\nfunction getData() {\n    return read_compressed_payload(base64_decode(''));\n}\n//# sourceMappingURL=include.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js\n/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n\n\nconst r = getData();\n\n// @TODO: This should be lazily loaded\nconst VALID = new Set(read_member_array(r));\nconst IGNORED = new Set(read_member_array(r));\nconst MAPPED = read_mapped_map(r);\nconst EMOJI_ROOT = read_emoji_trie(r);\n//const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));\n//const STOP = 0x2E;\nconst HYPHEN = 0x2D;\nconst UNDERSCORE = 0x5F;\nfunction explode_cp(name) {\n    return toUtf8CodePoints(name);\n}\nfunction filter_fe0f(cps) {\n    return cps.filter(cp => cp != 0xFE0F);\n}\nfunction ens_normalize_post_check(name) {\n    for (let label of name.split('.')) {\n        let cps = explode_cp(label);\n        try {\n            for (let i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {\n                if (cps[i] !== UNDERSCORE) {\n                    throw new Error(`underscore only allowed at start`);\n                }\n            }\n            if (cps.length >= 4 && cps.every(cp => cp < 0x80) && cps[2] === HYPHEN && cps[3] === HYPHEN) {\n                throw new Error(`invalid label extension`);\n            }\n        }\n        catch (err) {\n            throw new Error(`Invalid label \"${label}\": ${err.message}`);\n        }\n    }\n    return name;\n}\nfunction ens_normalize(name) {\n    return ens_normalize_post_check(normalize(name, filter_fe0f));\n}\nfunction normalize(name, emoji_filter) {\n    let input = explode_cp(name).reverse(); // flip for pop\n    let output = [];\n    while (input.length) {\n        let emoji = consume_emoji_reversed(input);\n        if (emoji) {\n            output.push(...emoji_filter(emoji));\n            continue;\n        }\n        let cp = input.pop();\n        if (VALID.has(cp)) {\n            output.push(cp);\n            continue;\n        }\n        if (IGNORED.has(cp)) {\n            continue;\n        }\n        let cps = MAPPED[cp];\n        if (cps) {\n            output.push(...cps);\n            continue;\n        }\n        throw new Error(`Disallowed codepoint: 0x${cp.toString(16).toUpperCase()}`);\n    }\n    return ens_normalize_post_check(nfc(String.fromCodePoint(...output)));\n}\nfunction nfc(s) {\n    return s.normalize('NFC');\n}\nfunction consume_emoji_reversed(cps, eaten) {\n    var _a;\n    let node = EMOJI_ROOT;\n    let emoji;\n    let saved;\n    let stack = [];\n    let pos = cps.length;\n    if (eaten)\n        eaten.length = 0; // clear input buffer (if needed)\n    while (pos) {\n        let cp = cps[--pos];\n        node = (_a = node.branches.find(x => x.set.has(cp))) === null || _a === void 0 ? void 0 : _a.node;\n        if (!node)\n            break;\n        if (node.save) { // remember\n            saved = cp;\n        }\n        else if (node.check) { // check exclusion\n            if (cp === saved)\n                break;\n        }\n        stack.push(cp);\n        if (node.fe0f) {\n            stack.push(0xFE0F);\n            if (pos > 0 && cps[pos - 1] == 0xFE0F)\n                pos--; // consume optional FE0F\n        }\n        if (node.valid) { // this is a valid emoji (so far)\n            emoji = stack.slice(); // copy stack\n            if (node.valid == 2)\n                emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)\n            if (eaten)\n                eaten.push(...cps.slice(pos).reverse()); // copy input (if needed)\n            cps.length = pos; // truncate\n        }\n    }\n    return emoji;\n}\n//# sourceMappingURL=lib.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/hash/lib.esm/namehash.js\n\n\n\n\n\nconst namehash_logger = new Logger(hash_lib_esm_version_version);\n\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\nfunction checkComponent(comp) {\n    if (comp.length === 0) {\n        throw new Error(\"invalid ENS name; empty component\");\n    }\n    return comp;\n}\nfunction ensNameSplit(name) {\n    const bytes = toUtf8Bytes(ens_normalize(name));\n    const comps = [];\n    if (name.length === 0) {\n        return comps;\n    }\n    let last = 0;\n    for (let i = 0; i < bytes.length; i++) {\n        const d = bytes[i];\n        // A separator (i.e. \".\"); copy this component\n        if (d === 0x2e) {\n            comps.push(checkComponent(bytes.slice(last, i)));\n            last = i + 1;\n        }\n    }\n    // There was a stray separator at the end of the name\n    if (last >= bytes.length) {\n        throw new Error(\"invalid ENS name; empty component\");\n    }\n    comps.push(checkComponent(bytes.slice(last)));\n    return comps;\n}\nfunction ensNormalize(name) {\n    return ensNameSplit(name).map((comp) => toUtf8String(comp)).join(\".\");\n}\nfunction isValidName(name) {\n    try {\n        return (ensNameSplit(name).length !== 0);\n    }\n    catch (error) { }\n    return false;\n}\nfunction namehash(name) {\n    /* istanbul ignore if */\n    if (typeof (name) !== \"string\") {\n        namehash_logger.throwArgumentError(\"invalid ENS name; not a string\", \"name\", name);\n    }\n    let result = Zeros;\n    const comps = ensNameSplit(name);\n    while (comps.length) {\n        result = keccak256(concat([result, keccak256(comps.pop())]));\n    }\n    return hexlify(result);\n}\nfunction dnsEncode(name) {\n    return hexlify(concat(ensNameSplit(name).map((comp) => {\n        // DNS does not allow components over 63 bytes in length\n        if (comp.length > 63) {\n            throw new Error(\"invalid DNS encoded entry; length exceeds 63 bytes\");\n        }\n        const bytes = new Uint8Array(comp.length + 1);\n        bytes.set(comp, 1);\n        bytes[0] = bytes.length - 1;\n        return bytes;\n    }))) + \"00\";\n}\n//# sourceMappingURL=namehash.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/networks/lib.esm/_version.js\nconst networks_lib_esm_version_version = \"networks/5.7.1\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/networks/lib.esm/index.js\n\n\n\nconst networks_lib_esm_logger = new Logger(networks_lib_esm_version_version);\n;\nfunction isRenetworkable(value) {\n    return (value && typeof (value.renetwork) === \"function\");\n}\nfunction ethDefaultProvider(network) {\n    const func = function (providers, options) {\n        if (options == null) {\n            options = {};\n        }\n        const providerList = [];\n        if (providers.InfuraProvider && options.infura !== \"-\") {\n            try {\n                providerList.push(new providers.InfuraProvider(network, options.infura));\n            }\n            catch (error) { }\n        }\n        if (providers.EtherscanProvider && options.etherscan !== \"-\") {\n            try {\n                providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n            }\n            catch (error) { }\n        }\n        if (providers.AlchemyProvider && options.alchemy !== \"-\") {\n            try {\n                providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n            }\n            catch (error) { }\n        }\n        if (providers.PocketProvider && options.pocket !== \"-\") {\n            // These networks are currently faulty on Pocket as their\n            // network does not handle the Berlin hardfork, which is\n            // live on these ones.\n            // @TODO: This goes away once Pocket has upgraded their nodes\n            const skip = [\"goerli\", \"ropsten\", \"rinkeby\", \"sepolia\"];\n            try {\n                const provider = new providers.PocketProvider(network, options.pocket);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            }\n            catch (error) { }\n        }\n        if (providers.CloudflareProvider && options.cloudflare !== \"-\") {\n            try {\n                providerList.push(new providers.CloudflareProvider(network));\n            }\n            catch (error) { }\n        }\n        if (providers.AnkrProvider && options.ankr !== \"-\") {\n            try {\n                const skip = [\"ropsten\"];\n                const provider = new providers.AnkrProvider(network, options.ankr);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            }\n            catch (error) { }\n        }\n        if (providerList.length === 0) {\n            return null;\n        }\n        if (providers.FallbackProvider) {\n            let quorum = 1;\n            if (options.quorum != null) {\n                quorum = options.quorum;\n            }\n            else if (network === \"homestead\") {\n                quorum = 2;\n            }\n            return new providers.FallbackProvider(providerList, quorum);\n        }\n        return providerList[0];\n    };\n    func.renetwork = function (network) {\n        return ethDefaultProvider(network);\n    };\n    return func;\n}\nfunction etcDefaultProvider(url, network) {\n    const func = function (providers, options) {\n        if (providers.JsonRpcProvider) {\n            return new providers.JsonRpcProvider(url, network);\n        }\n        return null;\n    };\n    func.renetwork = function (network) {\n        return etcDefaultProvider(url, network);\n    };\n    return func;\n}\nconst homestead = {\n    chainId: 1,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"homestead\",\n    _defaultProvider: ethDefaultProvider(\"homestead\")\n};\nconst ropsten = {\n    chainId: 3,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"ropsten\",\n    _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\nconst classicMordor = {\n    chainId: 63,\n    name: \"classicMordor\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\n// See: https://chainlist.org\nconst networks = {\n    unspecified: { chainId: 0, name: \"unspecified\" },\n    homestead: homestead,\n    mainnet: homestead,\n    morden: { chainId: 2, name: \"morden\" },\n    ropsten: ropsten,\n    testnet: ropsten,\n    rinkeby: {\n        chainId: 4,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"rinkeby\",\n        _defaultProvider: ethDefaultProvider(\"rinkeby\")\n    },\n    kovan: {\n        chainId: 42,\n        name: \"kovan\",\n        _defaultProvider: ethDefaultProvider(\"kovan\")\n    },\n    goerli: {\n        chainId: 5,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"goerli\",\n        _defaultProvider: ethDefaultProvider(\"goerli\")\n    },\n    kintsugi: { chainId: 1337702, name: \"kintsugi\" },\n    sepolia: {\n        chainId: 11155111,\n        name: \"sepolia\",\n        _defaultProvider: ethDefaultProvider(\"sepolia\")\n    },\n    // ETC (See: #351)\n    classic: {\n        chainId: 61,\n        name: \"classic\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n    },\n    classicMorden: { chainId: 62, name: \"classicMorden\" },\n    classicMordor: classicMordor,\n    classicTestnet: classicMordor,\n    classicKotti: {\n        chainId: 6,\n        name: \"classicKotti\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n    },\n    xdai: { chainId: 100, name: \"xdai\" },\n    matic: {\n        chainId: 137,\n        name: \"matic\",\n        _defaultProvider: ethDefaultProvider(\"matic\")\n    },\n    maticmum: { chainId: 80001, name: \"maticmum\" },\n    optimism: {\n        chainId: 10,\n        name: \"optimism\",\n        _defaultProvider: ethDefaultProvider(\"optimism\")\n    },\n    \"optimism-kovan\": { chainId: 69, name: \"optimism-kovan\" },\n    \"optimism-goerli\": { chainId: 420, name: \"optimism-goerli\" },\n    arbitrum: { chainId: 42161, name: \"arbitrum\" },\n    \"arbitrum-rinkeby\": { chainId: 421611, name: \"arbitrum-rinkeby\" },\n    \"arbitrum-goerli\": { chainId: 421613, name: \"arbitrum-goerli\" },\n    bnb: { chainId: 56, name: \"bnb\" },\n    bnbt: { chainId: 97, name: \"bnbt\" },\n};\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\nfunction getNetwork(network) {\n    // No network (null)\n    if (network == null) {\n        return null;\n    }\n    if (typeof (network) === \"number\") {\n        for (const name in networks) {\n            const standard = networks[name];\n            if (standard.chainId === network) {\n                return {\n                    name: standard.name,\n                    chainId: standard.chainId,\n                    ensAddress: (standard.ensAddress || null),\n                    _defaultProvider: (standard._defaultProvider || null)\n                };\n            }\n        }\n        return {\n            chainId: network,\n            name: \"unknown\"\n        };\n    }\n    if (typeof (network) === \"string\") {\n        const standard = networks[network];\n        if (standard == null) {\n            return null;\n        }\n        return {\n            name: standard.name,\n            chainId: standard.chainId,\n            ensAddress: standard.ensAddress,\n            _defaultProvider: (standard._defaultProvider || null)\n        };\n    }\n    const standard = networks[network.name];\n    // Not a standard network; check that it is a valid network in general\n    if (!standard) {\n        if (typeof (network.chainId) !== \"number\") {\n            networks_lib_esm_logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n        }\n        return network;\n    }\n    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n    if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n        networks_lib_esm_logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n    }\n    // @TODO: In the next major version add an attach function to a defaultProvider\n    // class and move the _defaultProvider internal to this file (extend Network)\n    let defaultProvider = network._defaultProvider || null;\n    if (defaultProvider == null && standard._defaultProvider) {\n        if (isRenetworkable(standard._defaultProvider)) {\n            defaultProvider = standard._defaultProvider.renetwork(network);\n        }\n        else {\n            defaultProvider = standard._defaultProvider;\n        }\n    }\n    // Standard Network (allow overriding the ENS address)\n    return {\n        name: network.name,\n        chainId: standard.chainId,\n        ensAddress: (network.ensAddress || standard.ensAddress || null),\n        _defaultProvider: defaultProvider\n    };\n}\n//# sourceMappingURL=index.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/sha2/lib.esm/types.js\nvar SupportedAlgorithm;\n(function (SupportedAlgorithm) {\n    SupportedAlgorithm[\"sha256\"] = \"sha256\";\n    SupportedAlgorithm[\"sha512\"] = \"sha512\";\n})(SupportedAlgorithm || (SupportedAlgorithm = {}));\n;\n//# sourceMappingURL=types.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/sha2/lib.esm/_version.js\nconst sha2_lib_esm_version_version = \"sha2/5.7.0\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/sha2/lib.esm/sha2.js\n\n\n//const _ripemd160 = _hash.ripemd160;\n\n\n\n\nconst sha2_logger = new Logger(sha2_lib_esm_version_version);\nfunction ripemd160(data) {\n    return \"0x\" + (hash_default().ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nfunction sha256(data) {\n    return \"0x\" + (hash_default().sha256().update(arrayify(data)).digest(\"hex\"));\n}\nfunction sha512(data) {\n    return \"0x\" + (hash_default().sha512().update(arrayify(data)).digest(\"hex\"));\n}\nfunction computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        sha2_logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash_default().hmac((hash_default())[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map\n// EXTERNAL MODULE: ./node_modules/bech32/index.js\nvar bech32 = __webpack_require__(\"./node_modules/bech32/index.js\");\nvar bech32_default = /*#__PURE__*/__webpack_require__.n(bech32);\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/constants/lib.esm/addresses.js\nconst AddressZero = \"0x0000000000000000000000000000000000000000\";\n//# sourceMappingURL=addresses.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/providers/lib.esm/formatter.js\n\n\n\n\n\n\n\n\n\nconst formatter_logger = new Logger(lib_esm_version_version);\nclass Formatter {\n    constructor() {\n        this.formats = this.getDefaultFormats();\n    }\n    getDefaultFormats() {\n        const formats = ({});\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n        const strictData = (v) => { return this.data(v, true); };\n        formats.transaction = {\n            hash: hash,\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n            confirmations: Formatter.allowNull(number, null),\n            from: address,\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n            creates: Formatter.allowNull(address, null),\n            raw: Formatter.allowNull(data),\n        };\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n        formats.block = {\n            hash: Formatter.allowNull(hash),\n            parentHash: hash,\n            number: number,\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n            miner: Formatter.allowNull(address),\n            extraData: data,\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n            topics: Formatter.arrayOf(hash),\n            transactionHash: hash,\n            logIndex: number,\n        };\n        return formats;\n    }\n    accessList(accessList) {\n        return accessListify(accessList || []);\n    }\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number) {\n        if (number === \"0x\") {\n            return 0;\n        }\n        return BigNumber.from(number).toNumber();\n    }\n    type(number) {\n        if (number === \"0x\" || number == null) {\n            return 0;\n        }\n        return BigNumber.from(number).toNumber();\n    }\n    // Strict! Used on input.\n    bigNumber(value) {\n        return BigNumber.from(value);\n    }\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value) {\n        if (typeof (value) === \"boolean\") {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") {\n                return true;\n            }\n            if (value === \"false\") {\n                return false;\n            }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n    hex(value, strict) {\n        if (typeof (value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") {\n                value = \"0x\" + value;\n            }\n            if (isHexString(value)) {\n                return value.toLowerCase();\n            }\n        }\n        return formatter_logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n    data(value, strict) {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n    // Requires an address\n    // Strict! Used on input.\n    address(value) {\n        return getAddress(value);\n    }\n    callAddress(value) {\n        if (!isHexString(value, 32)) {\n            return null;\n        }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null : address;\n    }\n    contractAddress(value) {\n        return getContractAddress(value);\n    }\n    // Strict! Used on input.\n    blockTag(blockTag) {\n        if (blockTag == null) {\n            return \"latest\";\n        }\n        if (blockTag === \"earliest\") {\n            return \"0x0\";\n        }\n        switch (blockTag) {\n            case \"earliest\": return \"0x0\";\n            case \"latest\":\n            case \"pending\":\n            case \"safe\":\n            case \"finalized\":\n                return blockTag;\n        }\n        if (typeof (blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(blockTag);\n        }\n        throw new Error(\"invalid blockTag\");\n    }\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value, strict) {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return formatter_logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value) {\n        if (value == null) {\n            return null;\n        }\n        const v = BigNumber.from(value);\n        try {\n            return v.toNumber();\n        }\n        catch (error) { }\n        return null;\n    }\n    uint256(value) {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n    _block(value, format) {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = (value._difficulty != null) ? value._difficulty : value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null : BigNumber.from(difficulty));\n        return result;\n    }\n    block(value) {\n        return this._block(value, this.formats.block);\n    }\n    blockWithTransactions(value) {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n    // Strict! Used on input.\n    transactionRequest(value) {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n    transactionResponse(transaction) {\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n        if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {\n            transaction.accessList = [];\n        }\n        const result = Formatter.check(this.formats.transaction, transaction);\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n            result.chainId = chainId;\n        }\n        else {\n            let chainId = transaction.networkId;\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n            if (typeof (chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) {\n                    chainId = 0;\n                }\n                chainId = parseInt(chainId);\n            }\n            if (typeof (chainId) !== \"number\") {\n                chainId = 0;\n            }\n            result.chainId = chainId;\n        }\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n        return result;\n    }\n    transaction(value) {\n        return parse(value);\n    }\n    receiptLog(value) {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n    receipt(value) {\n        const result = Formatter.check(this.formats.receipt, value);\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        formatter_logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                }\n                else {\n                    formatter_logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            }\n            else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                formatter_logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n        return result;\n    }\n    topics(value) {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n        }\n        else if (value != null) {\n            return this.hash(value, true);\n        }\n        return null;\n    }\n    filter(value) {\n        return Formatter.check(this.formats.filter, value);\n    }\n    filterLog(value) {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n    static check(format, object) {\n        const result = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) {\n                    result[key] = value;\n                }\n            }\n            catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n    // if value is null-ish, nullValue is returned\n    static allowNull(format, nullValue) {\n        return (function (value) {\n            if (value == null) {\n                return nullValue;\n            }\n            return format(value);\n        });\n    }\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format, replaceValue) {\n        return (function (value) {\n            if (!value) {\n                return replaceValue;\n            }\n            return format(value);\n        });\n    }\n    // Requires an Array satisfying check\n    static arrayOf(format) {\n        return (function (array) {\n            if (!Array.isArray(array)) {\n                throw new Error(\"not an array\");\n            }\n            const result = [];\n            array.forEach(function (value) {\n                result.push(format(value));\n            });\n            return result;\n        });\n    }\n}\nfunction isCommunityResourcable(value) {\n    return (value && typeof (value.isCommunityResource) === \"function\");\n}\nfunction isCommunityResource(value) {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n// Show the throttle message only once\nlet throttleMessage = false;\nfunction showThrottleMessage() {\n    if (throttleMessage) {\n        return;\n    }\n    throttleMessage = true;\n    console.log(\"========= NOTICE =========\");\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n//# sourceMappingURL=formatter.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/providers/lib.esm/base-provider.js\n\nvar base_provider_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst base_provider_logger = new Logger(lib_esm_version_version);\n\nconst MAX_CCIP_REDIRECTS = 10;\n//////////////////////////////\n// Event Serializeing\nfunction checkTopic(topic) {\n    if (topic == null) {\n        return \"null\";\n    }\n    if (hexDataLength(topic) !== 32) {\n        base_provider_logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n    }\n    return topic.toLowerCase();\n}\nfunction serializeTopics(topics) {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) {\n        topics.pop();\n    }\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            // Only track unique OR-topics\n            const unique = {};\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n            return sorted.join(\"|\");\n        }\n        else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\nfunction deserializeTopics(data) {\n    if (data === \"\") {\n        return [];\n    }\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") {\n            return [];\n        }\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null : topic);\n        });\n        return ((comps.length === 1) ? comps[0] : comps);\n    });\n}\nfunction getEventTag(eventName) {\n    if (typeof (eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n    }\n    else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n    }\n    else if (ForkEvent.isForkEvent(eventName)) {\n        base_provider_logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n    }\n    else if (eventName && typeof (eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n    throw new Error(\"invalid event - \" + eventName);\n}\n//////////////////////////////\n// Helper Object\nfunction getTime() {\n    return (new Date()).getTime();\n}\nfunction stall(duration) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n//////////////////////////////\n// Provider Object\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nclass base_provider_Event {\n    constructor(tag, listener, once) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n        this._lastBlockNumber = -2;\n        this._inflight = false;\n    }\n    get event() {\n        switch (this.type) {\n            case \"tx\":\n                return this.hash;\n            case \"filter\":\n                return this.filter;\n        }\n        return this.tag;\n    }\n    get type() {\n        return this.tag.split(\":\")[0];\n    }\n    get hash() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") {\n            return null;\n        }\n        return comps[1];\n    }\n    get filter() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") {\n            return null;\n        }\n        const address = comps[1];\n        const topics = deserializeTopics(comps[2]);\n        const filter = {};\n        if (topics.length > 0) {\n            filter.topics = topics;\n        }\n        if (address && address !== \"*\") {\n            filter.address = address;\n        }\n        return filter;\n    }\n    pollable() {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n;\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos = {\n    \"0\": { symbol: \"btc\", p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\": { symbol: \"ltc\", p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\": { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\": { symbol: \"eth\", ilk: \"eth\" },\n    \"61\": { symbol: \"etc\", ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\nfunction bytes32ify(value) {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data) {\n    return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\nfunction _parseString(result, start) {\n    try {\n        return toUtf8String(_parseBytes(result, start));\n    }\n    catch (error) { }\n    return null;\n}\nfunction _parseBytes(result, start) {\n    if (result === \"0x\") {\n        return null;\n    }\n    const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link) {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    }\n    else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    }\n    else {\n        base_provider_logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n    return `https:/\\/gateway.ipfs.io/ipfs/${link}`;\n}\nfunction numPad(value) {\n    const result = arrayify(value);\n    if (result.length > 32) {\n        throw new Error(\"internal; should not happen\");\n    }\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\nfunction bytesPad(value) {\n    if ((value.length % 32) === 0) {\n        return value;\n    }\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas) {\n    const result = [];\n    let byteCount = 0;\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(null);\n        byteCount += 32;\n    }\n    for (let i = 0; i < datas.length; i++) {\n        const data = arrayify(datas[i]);\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n    return hexConcat(result);\n}\nclass Resolver {\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider, address, name, resolvedAddress) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n    supportsWildcard() {\n        if (!this._supportsEip2544) {\n            // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n            this._supportsEip2544 = this.provider.call({\n                to: this.address,\n                data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n            }).then((result) => {\n                return BigNumber.from(result).eq(1);\n            }).catch((error) => {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    return false;\n                }\n                // Rethrow the error: link is down, etc. Let future attempts retry.\n                this._supportsEip2544 = null;\n                throw error;\n            });\n        }\n        return this._supportsEip2544;\n    }\n    _fetch(selector, parameters) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            // e.g. keccak256(\"addr(bytes32,uint256)\")\n            const tx = {\n                to: this.address,\n                ccipReadEnabled: true,\n                data: hexConcat([selector, namehash(this.name), (parameters || \"0x\")])\n            };\n            // Wildcard support; use EIP-2544 to resolve the request\n            let parseBytes = false;\n            if (yield this.supportsWildcard()) {\n                parseBytes = true;\n                // selector(\"resolve(bytes,bytes)\")\n                tx.data = hexConcat([\"0x9061b923\", encodeBytes([dnsEncode(this.name), tx.data])]);\n            }\n            try {\n                let result = yield this.provider.call(tx);\n                if ((arrayify(result).length % 32) === 4) {\n                    base_provider_logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                        transaction: tx, data: result\n                    });\n                }\n                if (parseBytes) {\n                    result = _parseBytes(result, 0);\n                }\n                return result;\n            }\n            catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    return null;\n                }\n                throw error;\n            }\n        });\n    }\n    _fetchBytes(selector, parameters) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            const result = yield this._fetch(selector, parameters);\n            if (result != null) {\n                return _parseBytes(result, 0);\n            }\n            return null;\n        });\n    }\n    _getAddress(coinType, hexBytes) {\n        const coinInfo = coinInfos[String(coinType)];\n        if (coinInfo == null) {\n            base_provider_logger.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${coinType})`\n            });\n        }\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n        const bytes = arrayify(hexBytes);\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([[coinInfo.p2pkh], (\"0x\" + p2pkh[2])]));\n                }\n            }\n        }\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([[coinInfo.p2sh], (\"0x\" + p2sh[2])]));\n                }\n            }\n        }\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            }\n            else {\n                version = -1;\n            }\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32_default().toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32_default().encode(coinInfo.prefix, words);\n            }\n        }\n        return null;\n    }\n    getAddress(coinType) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            if (coinType == null) {\n                coinType = 60;\n            }\n            // If Ethereum, use the standard `addr(bytes32)`\n            if (coinType === 60) {\n                try {\n                    // keccak256(\"addr(bytes32)\")\n                    const result = yield this._fetch(\"0x3b3b57de\");\n                    // No address\n                    if (result === \"0x\" || result === HashZero) {\n                        return null;\n                    }\n                    return this.provider.formatter.callAddress(result);\n                }\n                catch (error) {\n                    if (error.code === Logger.errors.CALL_EXCEPTION) {\n                        return null;\n                    }\n                    throw error;\n                }\n            }\n            // keccak256(\"addr(bytes32,uint256\")\n            const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n            // No address\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // Compute the address\n            const address = this._getAddress(coinType, hexBytes);\n            if (address == null) {\n                base_provider_logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: `getAddress(${coinType})`,\n                    coinType: coinType,\n                    data: hexBytes\n                });\n            }\n            return address;\n        });\n    }\n    getAvatar() {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            const linkage = [{ type: \"name\", content: this.name }];\n            try {\n                // test data for ricmoo.eth\n                //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n                const avatar = yield this.getText(\"avatar\");\n                if (avatar == null) {\n                    return null;\n                }\n                for (let i = 0; i < matchers.length; i++) {\n                    const match = avatar.match(matchers[i]);\n                    if (match == null) {\n                        continue;\n                    }\n                    const scheme = match[1].toLowerCase();\n                    switch (scheme) {\n                        case \"https\":\n                            linkage.push({ type: \"url\", content: avatar });\n                            return { linkage, url: avatar };\n                        case \"data\":\n                            linkage.push({ type: \"data\", content: avatar });\n                            return { linkage, url: avatar };\n                        case \"ipfs\":\n                            linkage.push({ type: \"ipfs\", content: avatar });\n                            return { linkage, url: getIpfsLink(avatar) };\n                        case \"erc721\":\n                        case \"erc1155\": {\n                            // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                            const selector = (scheme === \"erc721\") ? \"0xc87b56dd\" : \"0x0e89341c\";\n                            linkage.push({ type: scheme, content: avatar });\n                            // The owner of this name\n                            const owner = (this._resolvedAddress || (yield this.getAddress()));\n                            const comps = (match[2] || \"\").split(\"/\");\n                            if (comps.length !== 2) {\n                                return null;\n                            }\n                            const addr = yield this.provider.formatter.address(comps[0]);\n                            const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n                            // Check that this account owns the token\n                            if (scheme === \"erc721\") {\n                                // ownerOf(uint256 tokenId)\n                                const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({\n                                    to: addr, data: hexConcat([\"0x6352211e\", tokenId])\n                                }));\n                                if (owner !== tokenOwner) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"owner\", content: tokenOwner });\n                            }\n                            else if (scheme === \"erc1155\") {\n                                // balanceOf(address owner, uint256 tokenId)\n                                const balance = BigNumber.from(yield this.provider.call({\n                                    to: addr, data: hexConcat([\"0x00fdd58e\", hexZeroPad(owner, 32), tokenId])\n                                }));\n                                if (balance.isZero()) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"balance\", content: balance.toString() });\n                            }\n                            // Call the token contract for the metadata URL\n                            const tx = {\n                                to: this.provider.formatter.address(comps[0]),\n                                data: hexConcat([selector, tokenId])\n                            };\n                            let metadataUrl = _parseString(yield this.provider.call(tx), 0);\n                            if (metadataUrl == null) {\n                                return null;\n                            }\n                            linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n                            // ERC-1155 allows a generic {id} in the URL\n                            if (scheme === \"erc1155\") {\n                                metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                                linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                            }\n                            // Transform IPFS metadata links\n                            if (metadataUrl.match(/^ipfs:/i)) {\n                                metadataUrl = getIpfsLink(metadataUrl);\n                            }\n                            linkage.push({ type: \"metadata-url\", content: metadataUrl });\n                            // Get the token metadata\n                            const metadata = yield fetchJson(metadataUrl);\n                            if (!metadata) {\n                                return null;\n                            }\n                            linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n                            // Pull the image URL out\n                            let imageUrl = metadata.image;\n                            if (typeof (imageUrl) !== \"string\") {\n                                return null;\n                            }\n                            if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                                // Allow\n                            }\n                            else {\n                                // Transform IPFS link to gateway\n                                const ipfs = imageUrl.match(matcherIpfs);\n                                if (ipfs == null) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                                imageUrl = getIpfsLink(imageUrl);\n                            }\n                            linkage.push({ type: \"url\", content: imageUrl });\n                            return { linkage, url: imageUrl };\n                        }\n                    }\n                }\n            }\n            catch (error) { }\n            return null;\n        });\n    }\n    getContentHash() {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            // keccak256(\"contenthash()\")\n            const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\");\n            // No contenthash\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // IPFS (CID: 1, Type: DAG-PB)\n            const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n            if (ipfs) {\n                const length = parseInt(ipfs[3], 16);\n                if (ipfs[4].length === length * 2) {\n                    return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n                }\n            }\n            // IPNS (CID: 1, Type: libp2p-key)\n            const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n            if (ipns) {\n                const length = parseInt(ipns[3], 16);\n                if (ipns[4].length === length * 2) {\n                    return \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]);\n                }\n            }\n            // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n            const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n            if (swarm) {\n                if (swarm[1].length === (32 * 2)) {\n                    return \"bzz:/\\/\" + swarm[1];\n                }\n            }\n            const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n            if (skynet) {\n                if (skynet[1].length === (34 * 2)) {\n                    // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n                    const urlSafe = { \"=\": \"\", \"+\": \"-\", \"/\": \"_\" };\n                    const hash = base64_encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, (a) => (urlSafe[a]));\n                    return \"sia:/\\/\" + hash;\n                }\n            }\n            return base_provider_logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"getContentHash()\",\n                data: hexBytes\n            });\n        });\n    }\n    getText(key) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            // The key encoded as parameter to fetchBytes\n            let keyBytes = toUtf8Bytes(key);\n            // The nodehash consumes the first slot, so the string pointer targets\n            // offset 64, with the length at offset 64 and data starting at offset 96\n            keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);\n            // Pad to word-size (32 bytes)\n            if ((keyBytes.length % 32) !== 0) {\n                keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32))]);\n            }\n            const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            return toUtf8String(hexBytes);\n        });\n    }\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nclass BaseProvider extends Provider {\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n    constructor(network) {\n        super();\n        // Events being listened to\n        this._events = [];\n        this._emitted = { block: -2 };\n        this.disableCcipRead = false;\n        this.formatter = new.target.getFormatter();\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) {\n            network = this.detectNetwork();\n        }\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n        }\n        else {\n            const knownNetwork = getStatic(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n            }\n            else {\n                base_provider_logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n        this._maxInternalBlockNumber = -1024;\n        this._lastBlockNumber = -2;\n        this._maxFilterBlockRange = 10;\n        this._pollingInterval = 4000;\n        this._fastQueryDate = 0;\n    }\n    _ready() {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            if (this._network == null) {\n                let network = null;\n                if (this._networkPromise) {\n                    try {\n                        network = yield this._networkPromise;\n                    }\n                    catch (error) { }\n                }\n                // Try the Provider's network detection (this MUST throw if it cannot)\n                if (network == null) {\n                    network = yield this.detectNetwork();\n                }\n                // This should never happen; every Provider sub-class should have\n                // suggested a network by here (or have thrown).\n                if (!network) {\n                    base_provider_logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n                }\n                // Possible this call stacked so do not call defineReadOnly again\n                if (this._network == null) {\n                    if (this.anyNetwork) {\n                        this._network = network;\n                    }\n                    else {\n                        defineReadOnly(this, \"_network\", network);\n                    }\n                    this.emit(\"network\", network, null);\n                }\n            }\n            return this._network;\n        });\n    }\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready() {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter() {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network) {\n        return getNetwork((network == null) ? \"homestead\" : network);\n    }\n    ccipReadFetch(tx, calldata, urls) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            if (this.disableCcipRead || urls.length === 0) {\n                return null;\n            }\n            const sender = tx.to.toLowerCase();\n            const data = calldata.toLowerCase();\n            const errorMessages = [];\n            for (let i = 0; i < urls.length; i++) {\n                const url = urls[i];\n                // URL expansion\n                const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n                // If no {data} is present, use POST; otherwise GET\n                const json = (url.indexOf(\"{data}\") >= 0) ? null : JSON.stringify({ data, sender });\n                const result = yield fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n                    value.status = response.statusCode;\n                    return value;\n                });\n                if (result.data) {\n                    return result.data;\n                }\n                const errorMessage = (result.message || \"unknown error\");\n                // 4xx indicates the result is not present; stop\n                if (result.status >= 400 && result.status < 500) {\n                    return base_provider_logger.throwError(`response not found during CCIP fetch: ${errorMessage}`, Logger.errors.SERVER_ERROR, { url, errorMessage });\n                }\n                // 5xx indicates server issue; try the next url\n                errorMessages.push(errorMessage);\n            }\n            return base_provider_logger.throwError(`error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(\", \")}`, Logger.errors.SERVER_ERROR, {\n                urls, errorMessages\n            });\n        });\n    }\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    _getInternalBlockNumber(maxAge) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this._ready();\n            // Allowing stale data up to maxAge old\n            if (maxAge > 0) {\n                // While there are pending internal block requests...\n                while (this._internalBlockNumber) {\n                    // ...\"remember\" which fetch we started with\n                    const internalBlockNumber = this._internalBlockNumber;\n                    try {\n                        // Check the result is not too stale\n                        const result = yield internalBlockNumber;\n                        if ((getTime() - result.respTime) <= maxAge) {\n                            return result.blockNumber;\n                        }\n                        // Too old; fetch a new value\n                        break;\n                    }\n                    catch (error) {\n                        // The fetch rejected; if we are the first to get the\n                        // rejection, drop through so we replace it with a new\n                        // fetch; all others blocked will then get that fetch\n                        // which won't match the one they \"remembered\" and loop\n                        if (this._internalBlockNumber === internalBlockNumber) {\n                            break;\n                        }\n                    }\n                }\n            }\n            const reqTime = getTime();\n            const checkInternalBlockNumber = resolveProperties({\n                blockNumber: this.perform(\"getBlockNumber\", {}),\n                networkError: this.getNetwork().then((network) => (null), (error) => (error))\n            }).then(({ blockNumber, networkError }) => {\n                if (networkError) {\n                    // Unremember this bad internal block number\n                    if (this._internalBlockNumber === checkInternalBlockNumber) {\n                        this._internalBlockNumber = null;\n                    }\n                    throw networkError;\n                }\n                const respTime = getTime();\n                blockNumber = BigNumber.from(blockNumber).toNumber();\n                if (blockNumber < this._maxInternalBlockNumber) {\n                    blockNumber = this._maxInternalBlockNumber;\n                }\n                this._maxInternalBlockNumber = blockNumber;\n                this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n                return { blockNumber, reqTime, respTime };\n            });\n            this._internalBlockNumber = checkInternalBlockNumber;\n            // Swallow unhandled exceptions; if needed they are handled else where\n            checkInternalBlockNumber.catch((error) => {\n                // Don't null the dead (rejected) fetch, if it has already been updated\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n            });\n            return (yield checkInternalBlockNumber).blockNumber;\n        });\n    }\n    poll() {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            const pollId = nextPollId++;\n            // Track all running promises, so we can trigger a post-poll once they are complete\n            const runners = [];\n            let blockNumber = null;\n            try {\n                blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n            }\n            catch (error) {\n                this.emit(\"error\", error);\n                return;\n            }\n            this._setFastBlockNumber(blockNumber);\n            // Emit a poll event after we have the latest (fast) block number\n            this.emit(\"poll\", pollId, blockNumber);\n            // If the block has not changed, meh.\n            if (blockNumber === this._lastBlockNumber) {\n                this.emit(\"didPoll\", pollId);\n                return;\n            }\n            // First polling cycle, trigger a \"block\" events\n            if (this._emitted.block === -2) {\n                this._emitted.block = blockNumber - 1;\n            }\n            if (Math.abs((this._emitted.block) - blockNumber) > 1000) {\n                base_provider_logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);\n                this.emit(\"error\", base_provider_logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                    blockNumber: blockNumber,\n                    event: \"blockSkew\",\n                    previousBlockNumber: this._emitted.block\n                }));\n                this.emit(\"block\", blockNumber);\n            }\n            else {\n                // Notify all listener for each block that has passed\n                for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n                    this.emit(\"block\", i);\n                }\n            }\n            // The emitted block was updated, check for obsolete events\n            if (this._emitted.block !== blockNumber) {\n                this._emitted.block = blockNumber;\n                Object.keys(this._emitted).forEach((key) => {\n                    // The block event does not expire\n                    if (key === \"block\") {\n                        return;\n                    }\n                    // The block we were at when we emitted this event\n                    const eventBlockNumber = this._emitted[key];\n                    // We cannot garbage collect pending transactions or blocks here\n                    // They should be garbage collected by the Provider when setting\n                    // \"pending\" events\n                    if (eventBlockNumber === \"pending\") {\n                        return;\n                    }\n                    // Evict any transaction hashes or block hashes over 12 blocks\n                    // old, since they should not return null anyways\n                    if (blockNumber - eventBlockNumber > 12) {\n                        delete this._emitted[key];\n                    }\n                });\n            }\n            // First polling cycle\n            if (this._lastBlockNumber === -2) {\n                this._lastBlockNumber = blockNumber - 1;\n            }\n            // Find all transaction hashes we are waiting on\n            this._events.forEach((event) => {\n                switch (event.type) {\n                    case \"tx\": {\n                        const hash = event.hash;\n                        let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                            if (!receipt || receipt.blockNumber == null) {\n                                return null;\n                            }\n                            this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                            this.emit(hash, receipt);\n                            return null;\n                        }).catch((error) => { this.emit(\"error\", error); });\n                        runners.push(runner);\n                        break;\n                    }\n                    case \"filter\": {\n                        // We only allow a single getLogs to be in-flight at a time\n                        if (!event._inflight) {\n                            event._inflight = true;\n                            // This is the first filter for this event, so we want to\n                            // restrict events to events that happened no earlier than now\n                            if (event._lastBlockNumber === -2) {\n                                event._lastBlockNumber = blockNumber - 1;\n                            }\n                            // Filter from the last *known* event; due to load-balancing\n                            // and some nodes returning updated block numbers before\n                            // indexing events, a logs result with 0 entries cannot be\n                            // trusted and we must retry a range which includes it again\n                            const filter = event.filter;\n                            filter.fromBlock = event._lastBlockNumber + 1;\n                            filter.toBlock = blockNumber;\n                            // Prevent fitler ranges from growing too wild, since it is quite\n                            // likely there just haven't been any events to move the lastBlockNumber.\n                            const minFromBlock = filter.toBlock - this._maxFilterBlockRange;\n                            if (minFromBlock > filter.fromBlock) {\n                                filter.fromBlock = minFromBlock;\n                            }\n                            if (filter.fromBlock < 0) {\n                                filter.fromBlock = 0;\n                            }\n                            const runner = this.getLogs(filter).then((logs) => {\n                                // Allow the next getLogs\n                                event._inflight = false;\n                                if (logs.length === 0) {\n                                    return;\n                                }\n                                logs.forEach((log) => {\n                                    // Only when we get an event for a given block number\n                                    // can we trust the events are indexed\n                                    if (log.blockNumber > event._lastBlockNumber) {\n                                        event._lastBlockNumber = log.blockNumber;\n                                    }\n                                    // Make sure we stall requests to fetch blocks and txs\n                                    this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                    this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                                    this.emit(filter, log);\n                                });\n                            }).catch((error) => {\n                                this.emit(\"error\", error);\n                                // Allow another getLogs (the range was not updated)\n                                event._inflight = false;\n                            });\n                            runners.push(runner);\n                        }\n                        break;\n                    }\n                }\n            });\n            this._lastBlockNumber = blockNumber;\n            // Once all events for this loop have been processed, emit \"didPoll\"\n            Promise.all(runners).then(() => {\n                this.emit(\"didPoll\", pollId);\n            }).catch((error) => { this.emit(\"error\", error); });\n            return;\n        });\n    }\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber) {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) {\n            this.poll();\n        }\n    }\n    get network() {\n        return this._network;\n    }\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    detectNetwork() {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            return base_provider_logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"provider.detectNetwork\"\n            });\n        });\n    }\n    getNetwork() {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            const network = yield this._ready();\n            // Make sure we are still connected to the same network; this is\n            // only an external call for backends which can have the underlying\n            // network change spontaneously\n            const currentNetwork = yield this.detectNetwork();\n            if (network.chainId !== currentNetwork.chainId) {\n                // We are allowing network changes, things can get complex fast;\n                // make sure you know what you are doing if you use \"any\"\n                if (this.anyNetwork) {\n                    this._network = currentNetwork;\n                    // Reset all internal block number guards and caches\n                    this._lastBlockNumber = -2;\n                    this._fastBlockNumber = null;\n                    this._fastBlockNumberPromise = null;\n                    this._fastQueryDate = 0;\n                    this._emitted.block = -2;\n                    this._maxInternalBlockNumber = -1024;\n                    this._internalBlockNumber = null;\n                    // The \"network\" event MUST happen before this method resolves\n                    // so any events have a chance to unregister, so we stall an\n                    // additional event loop before returning from /this/ call\n                    this.emit(\"network\", currentNetwork, network);\n                    yield stall(0);\n                    return this._network;\n                }\n                const error = base_provider_logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                    event: \"changed\",\n                    network: network,\n                    detectedNetwork: currentNetwork\n                });\n                this.emit(\"error\", error);\n                throw error;\n            }\n            return network;\n        });\n    }\n    get blockNumber() {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber : -1;\n    }\n    get polling() {\n        return (this._poller != null);\n    }\n    set polling(value) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) {\n                            this.poll();\n                        }\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n        }\n        else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n    get pollingInterval() {\n        return this._pollingInterval;\n    }\n    set pollingInterval(value) {\n        if (typeof (value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n        this._pollingInterval = value;\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n    _getFastBlockNumber() {\n        const now = getTime();\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n        return this._fastBlockNumberPromise;\n    }\n    _setFastBlockNumber(blockNumber) {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n            return;\n        }\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n    waitForTransaction(transactionHash, confirmations, timeout) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            return this._waitForTransaction(transactionHash, (confirmations == null) ? 1 : confirmations, timeout || 0, null);\n        });\n    }\n    _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            const receipt = yield this.getTransactionReceipt(transactionHash);\n            // Receipt is already good\n            if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n                return receipt;\n            }\n            // Poll until the receipt is good...\n            return new Promise((resolve, reject) => {\n                const cancelFuncs = [];\n                let done = false;\n                const alreadyDone = function () {\n                    if (done) {\n                        return true;\n                    }\n                    done = true;\n                    cancelFuncs.forEach((func) => { func(); });\n                    return false;\n                };\n                const minedHandler = (receipt) => {\n                    if (receipt.confirmations < confirmations) {\n                        return;\n                    }\n                    if (alreadyDone()) {\n                        return;\n                    }\n                    resolve(receipt);\n                };\n                this.on(transactionHash, minedHandler);\n                cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n                if (replaceable) {\n                    let lastBlockNumber = replaceable.startBlock;\n                    let scannedBlock = null;\n                    const replaceHandler = (blockNumber) => base_provider_awaiter(this, void 0, void 0, function* () {\n                        if (done) {\n                            return;\n                        }\n                        // Wait 1 second; this is only used in the case of a fault, so\n                        // we will trade off a little bit of latency for more consistent\n                        // results and fewer JSON-RPC calls\n                        yield stall(1000);\n                        this.getTransactionCount(replaceable.from).then((nonce) => base_provider_awaiter(this, void 0, void 0, function* () {\n                            if (done) {\n                                return;\n                            }\n                            if (nonce <= replaceable.nonce) {\n                                lastBlockNumber = blockNumber;\n                            }\n                            else {\n                                // First check if the transaction was mined\n                                {\n                                    const mined = yield this.getTransaction(transactionHash);\n                                    if (mined && mined.blockNumber != null) {\n                                        return;\n                                    }\n                                }\n                                // First time scanning. We start a little earlier for some\n                                // wiggle room here to handle the eventually consistent nature\n                                // of blockchain (e.g. the getTransactionCount was for a\n                                // different block)\n                                if (scannedBlock == null) {\n                                    scannedBlock = lastBlockNumber - 3;\n                                    if (scannedBlock < replaceable.startBlock) {\n                                        scannedBlock = replaceable.startBlock;\n                                    }\n                                }\n                                while (scannedBlock <= blockNumber) {\n                                    if (done) {\n                                        return;\n                                    }\n                                    const block = yield this.getBlockWithTransactions(scannedBlock);\n                                    for (let ti = 0; ti < block.transactions.length; ti++) {\n                                        const tx = block.transactions[ti];\n                                        // Successfully mined!\n                                        if (tx.hash === transactionHash) {\n                                            return;\n                                        }\n                                        // Matches our transaction from and nonce; its a replacement\n                                        if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                            if (done) {\n                                                return;\n                                            }\n                                            // Get the receipt of the replacement\n                                            const receipt = yield this.waitForTransaction(tx.hash, confirmations);\n                                            // Already resolved or rejected (prolly a timeout)\n                                            if (alreadyDone()) {\n                                                return;\n                                            }\n                                            // The reason we were replaced\n                                            let reason = \"replaced\";\n                                            if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                                reason = \"repriced\";\n                                            }\n                                            else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                                reason = \"cancelled\";\n                                            }\n                                            // Explain why we were replaced\n                                            reject(base_provider_logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                                cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                                reason,\n                                                replacement: this._wrapTransaction(tx),\n                                                hash: transactionHash,\n                                                receipt\n                                            }));\n                                            return;\n                                        }\n                                    }\n                                    scannedBlock++;\n                                }\n                            }\n                            if (done) {\n                                return;\n                            }\n                            this.once(\"block\", replaceHandler);\n                        }), (error) => {\n                            if (done) {\n                                return;\n                            }\n                            this.once(\"block\", replaceHandler);\n                        });\n                    });\n                    if (done) {\n                        return;\n                    }\n                    this.once(\"block\", replaceHandler);\n                    cancelFuncs.push(() => {\n                        this.removeListener(\"block\", replaceHandler);\n                    });\n                }\n                if (typeof (timeout) === \"number\" && timeout > 0) {\n                    const timer = setTimeout(() => {\n                        if (alreadyDone()) {\n                            return;\n                        }\n                        reject(base_provider_logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                    }, timeout);\n                    if (timer.unref) {\n                        timer.unref();\n                    }\n                    cancelFuncs.push(() => { clearTimeout(timer); });\n                }\n            });\n        });\n    }\n    getBlockNumber() {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            return this._getInternalBlockNumber(0);\n        });\n    }\n    getGasPrice() {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const result = yield this.perform(\"getGasPrice\", {});\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return base_provider_logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getGasPrice\",\n                    result, error\n                });\n            }\n        });\n    }\n    getBalance(addressOrName, blockTag) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getBalance\", params);\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return base_provider_logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getBalance\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getTransactionCount(addressOrName, blockTag) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getTransactionCount\", params);\n            try {\n                return BigNumber.from(result).toNumber();\n            }\n            catch (error) {\n                return base_provider_logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getTransactionCount\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getCode(addressOrName, blockTag) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getCode\", params);\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return base_provider_logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getCode\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getStorageAt(addressOrName, position, blockTag) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag),\n                position: Promise.resolve(position).then((p) => hexValue(p))\n            });\n            const result = yield this.perform(\"getStorageAt\", params);\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return base_provider_logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getStorageAt\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx, hash, startBlock) {\n        if (hash != null && hexDataLength(hash) !== 32) {\n            throw new Error(\"invalid response - sendTransaction\");\n        }\n        const result = tx;\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            base_provider_logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n        result.wait = (confirms, timeout) => base_provider_awaiter(this, void 0, void 0, function* () {\n            if (confirms == null) {\n                confirms = 1;\n            }\n            if (timeout == null) {\n                timeout = 0;\n            }\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n            const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) {\n                return null;\n            }\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n            if (receipt.status === 0) {\n                base_provider_logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        });\n        return result;\n    }\n    sendTransaction(signedTransaction) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n            const tx = this.formatter.transaction(signedTransaction);\n            if (tx.confirmations == null) {\n                tx.confirmations = 0;\n            }\n            const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            try {\n                const hash = yield this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n                return this._wrapTransaction(tx, hash, blockNumber);\n            }\n            catch (error) {\n                error.transaction = tx;\n                error.transactionHash = tx.hash;\n                throw error;\n            }\n        });\n    }\n    _getTransactionRequest(transaction) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            const values = yield transaction;\n            const tx = {};\n            [\"from\", \"to\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v) : null));\n            });\n            [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v) : null));\n            });\n            [\"type\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v : null));\n            });\n            if (values.accessList) {\n                tx.accessList = this.formatter.accessList(values.accessList);\n            }\n            [\"data\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v) : null));\n            });\n            return this.formatter.transactionRequest(yield resolveProperties(tx));\n        });\n    }\n    _getFilter(filter) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            filter = yield filter;\n            const result = {};\n            if (filter.address != null) {\n                result.address = this._getAddress(filter.address);\n            }\n            [\"blockHash\", \"topics\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = filter[key];\n            });\n            [\"fromBlock\", \"toBlock\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = this._getBlockTag(filter[key]);\n            });\n            return this.formatter.filter(yield resolveProperties(result));\n        });\n    }\n    _call(transaction, blockTag, attempt) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            if (attempt >= MAX_CCIP_REDIRECTS) {\n                base_provider_logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                    redirects: attempt, transaction\n                });\n            }\n            const txSender = transaction.to;\n            const result = yield this.perform(\"call\", { transaction, blockTag });\n            // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n            if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && (hexDataLength(result) % 32 === 4)) {\n                try {\n                    const data = hexDataSlice(result, 4);\n                    // Check the sender of the OffchainLookup matches the transaction\n                    const sender = hexDataSlice(data, 0, 32);\n                    if (!BigNumber.from(sender).eq(txSender)) {\n                        base_provider_logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    // Read the URLs from the response\n                    const urls = [];\n                    const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n                    const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n                    const urlsData = hexDataSlice(data, urlsOffset + 32);\n                    for (let u = 0; u < urlsLength; u++) {\n                        const url = _parseString(urlsData, u * 32);\n                        if (url == null) {\n                            base_provider_logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                                name: \"OffchainLookup\",\n                                signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                                transaction, data: result\n                            });\n                        }\n                        urls.push(url);\n                    }\n                    // Get the CCIP calldata to forward\n                    const calldata = _parseBytes(data, 64);\n                    // Get the callbackSelector (bytes4)\n                    if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                        base_provider_logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    const callbackSelector = hexDataSlice(data, 96, 100);\n                    // Get the extra data to send back to the contract as context\n                    const extraData = _parseBytes(data, 128);\n                    const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);\n                    if (ccipResult == null) {\n                        base_provider_logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    const tx = {\n                        to: txSender,\n                        data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])\n                    };\n                    return this._call(tx, blockTag, attempt + 1);\n                }\n                catch (error) {\n                    if (error.code === Logger.errors.SERVER_ERROR) {\n                        throw error;\n                    }\n                }\n            }\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return base_provider_logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"call\",\n                    params: { transaction, blockTag }, result, error\n                });\n            }\n        });\n    }\n    call(transaction, blockTag) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const resolved = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction),\n                blockTag: this._getBlockTag(blockTag),\n                ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n            });\n            return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);\n        });\n    }\n    estimateGas(transaction) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction)\n            });\n            const result = yield this.perform(\"estimateGas\", params);\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return base_provider_logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"estimateGas\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    _getAddress(addressOrName) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            addressOrName = yield addressOrName;\n            if (typeof (addressOrName) !== \"string\") {\n                base_provider_logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n            }\n            const address = yield this.resolveName(addressOrName);\n            if (address == null) {\n                base_provider_logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: `resolveName(${JSON.stringify(addressOrName)})`\n                });\n            }\n            return address;\n        });\n    }\n    _getBlock(blockHashOrBlockTag, includeTransactions) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            blockHashOrBlockTag = yield blockHashOrBlockTag;\n            // If blockTag is a number (not \"latest\", etc), this is the block number\n            let blockNumber = -128;\n            const params = {\n                includeTransactions: !!includeTransactions\n            };\n            if (isHexString(blockHashOrBlockTag, 32)) {\n                params.blockHash = blockHashOrBlockTag;\n            }\n            else {\n                try {\n                    params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);\n                    if (isHexString(params.blockTag)) {\n                        blockNumber = parseInt(params.blockTag.substring(2), 16);\n                    }\n                }\n                catch (error) {\n                    base_provider_logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n                }\n            }\n            return poll(() => base_provider_awaiter(this, void 0, void 0, function* () {\n                const block = yield this.perform(\"getBlock\", params);\n                // Block was not found\n                if (block == null) {\n                    // For blockhashes, if we didn't say it existed, that blockhash may\n                    // not exist. If we did see it though, perhaps from a log, we know\n                    // it exists, and this node is just not caught up yet.\n                    if (params.blockHash != null) {\n                        if (this._emitted[\"b:\" + params.blockHash] == null) {\n                            return null;\n                        }\n                    }\n                    // For block tags, if we are asking for a future block, we return null\n                    if (params.blockTag != null) {\n                        if (blockNumber > this._emitted.block) {\n                            return null;\n                        }\n                    }\n                    // Retry on the next block\n                    return undefined;\n                }\n                // Add transactions\n                if (includeTransactions) {\n                    let blockNumber = null;\n                    for (let i = 0; i < block.transactions.length; i++) {\n                        const tx = block.transactions[i];\n                        if (tx.blockNumber == null) {\n                            tx.confirmations = 0;\n                        }\n                        else if (tx.confirmations == null) {\n                            if (blockNumber == null) {\n                                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                            }\n                            // Add the confirmations using the fast block number (pessimistic)\n                            let confirmations = (blockNumber - tx.blockNumber) + 1;\n                            if (confirmations <= 0) {\n                                confirmations = 1;\n                            }\n                            tx.confirmations = confirmations;\n                        }\n                    }\n                    const blockWithTxs = this.formatter.blockWithTransactions(block);\n                    blockWithTxs.transactions = blockWithTxs.transactions.map((tx) => this._wrapTransaction(tx));\n                    return blockWithTxs;\n                }\n                return this.formatter.block(block);\n            }), { oncePoll: this });\n        });\n    }\n    getBlock(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, false));\n    }\n    getBlockWithTransactions(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, true));\n    }\n    getTransaction(transactionHash) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => base_provider_awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransaction\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                const tx = this.formatter.transactionResponse(result);\n                if (tx.blockNumber == null) {\n                    tx.confirmations = 0;\n                }\n                else if (tx.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - tx.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    tx.confirmations = confirmations;\n                }\n                return this._wrapTransaction(tx);\n            }), { oncePoll: this });\n        });\n    }\n    getTransactionReceipt(transactionHash) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => base_provider_awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransactionReceipt\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                // \"geth-etc\" returns receipts before they are ready\n                if (result.blockHash == null) {\n                    return undefined;\n                }\n                const receipt = this.formatter.receipt(result);\n                if (receipt.blockNumber == null) {\n                    receipt.confirmations = 0;\n                }\n                else if (receipt.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    receipt.confirmations = confirmations;\n                }\n                return receipt;\n            }), { oncePoll: this });\n        });\n    }\n    getLogs(filter) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({ filter: this._getFilter(filter) });\n            const logs = yield this.perform(\"getLogs\", params);\n            logs.forEach((log) => {\n                if (log.removed == null) {\n                    log.removed = false;\n                }\n            });\n            return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n        });\n    }\n    getEtherPrice() {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            return this.perform(\"getEtherPrice\", {});\n        });\n    }\n    _getBlockTag(blockTag) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            blockTag = yield blockTag;\n            if (typeof (blockTag) === \"number\" && blockTag < 0) {\n                if (blockTag % 1) {\n                    base_provider_logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n                }\n                let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                blockNumber += blockTag;\n                if (blockNumber < 0) {\n                    blockNumber = 0;\n                }\n                return this.formatter.blockTag(blockNumber);\n            }\n            return this.formatter.blockTag(blockTag);\n        });\n    }\n    getResolver(name) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            let currentName = name;\n            while (true) {\n                if (currentName === \"\" || currentName === \".\") {\n                    return null;\n                }\n                // Optimization since the eth node cannot change and does\n                // not have a wildcard resolver\n                if (name !== \"eth\" && currentName === \"eth\") {\n                    return null;\n                }\n                // Check the current node for a resolver\n                const addr = yield this._getResolver(currentName, \"getResolver\");\n                // Found a resolver!\n                if (addr != null) {\n                    const resolver = new Resolver(this, addr, name);\n                    // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                    if (currentName !== name && !(yield resolver.supportsWildcard())) {\n                        return null;\n                    }\n                    return resolver;\n                }\n                // Get the parent node\n                currentName = currentName.split(\".\").slice(1).join(\".\");\n            }\n        });\n    }\n    _getResolver(name, operation) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            if (operation == null) {\n                operation = \"ENS\";\n            }\n            const network = yield this.getNetwork();\n            // No ENS...\n            if (!network.ensAddress) {\n                base_provider_logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, { operation, network: network.name });\n            }\n            try {\n                // keccak256(\"resolver(bytes32)\")\n                const addrData = yield this.call({\n                    to: network.ensAddress,\n                    data: (\"0x0178b8bf\" + namehash(name).substring(2))\n                });\n                return this.formatter.callAddress(addrData);\n            }\n            catch (error) {\n                // ENS registry cannot throw errors on resolver(bytes32)\n            }\n            return null;\n        });\n    }\n    resolveName(name) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            name = yield name;\n            // If it is already an address, nothing to resolve\n            try {\n                return Promise.resolve(this.formatter.address(name));\n            }\n            catch (error) {\n                // If is is a hexstring, the address is bad (See #694)\n                if (isHexString(name)) {\n                    throw error;\n                }\n            }\n            if (typeof (name) !== \"string\") {\n                base_provider_logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n            }\n            // Get the addr from the resolver\n            const resolver = yield this.getResolver(name);\n            if (!resolver) {\n                return null;\n            }\n            return yield resolver.getAddress();\n        });\n    }\n    lookupAddress(address) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            address = yield address;\n            address = this.formatter.address(address);\n            const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n            const resolverAddr = yield this._getResolver(node, \"lookupAddress\");\n            if (resolverAddr == null) {\n                return null;\n            }\n            // keccak(\"name(bytes32)\")\n            const name = _parseString(yield this.call({\n                to: resolverAddr,\n                data: (\"0x691f3431\" + namehash(node).substring(2))\n            }), 0);\n            const addr = yield this.resolveName(name);\n            if (addr != address) {\n                return null;\n            }\n            return name;\n        });\n    }\n    getAvatar(nameOrAddress) {\n        return base_provider_awaiter(this, void 0, void 0, function* () {\n            let resolver = null;\n            if (isHexString(nameOrAddress)) {\n                // Address; reverse lookup\n                const address = this.formatter.address(nameOrAddress);\n                const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n                const resolverAddress = yield this._getResolver(node, \"getAvatar\");\n                if (!resolverAddress) {\n                    return null;\n                }\n                // Try resolving the avatar against the addr.reverse resolver\n                resolver = new Resolver(this, resolverAddress, node);\n                try {\n                    const avatar = yield resolver.getAvatar();\n                    if (avatar) {\n                        return avatar.url;\n                    }\n                }\n                catch (error) {\n                    if (error.code !== Logger.errors.CALL_EXCEPTION) {\n                        throw error;\n                    }\n                }\n                // Try getting the name and performing forward lookup; allowing wildcards\n                try {\n                    // keccak(\"name(bytes32)\")\n                    const name = _parseString(yield this.call({\n                        to: resolverAddress,\n                        data: (\"0x691f3431\" + namehash(node).substring(2))\n                    }), 0);\n                    resolver = yield this.getResolver(name);\n                }\n                catch (error) {\n                    if (error.code !== Logger.errors.CALL_EXCEPTION) {\n                        throw error;\n                    }\n                    return null;\n                }\n            }\n            else {\n                // ENS name; forward lookup with wildcard\n                resolver = yield this.getResolver(nameOrAddress);\n                if (!resolver) {\n                    return null;\n                }\n            }\n            const avatar = yield resolver.getAvatar();\n            if (avatar == null) {\n                return null;\n            }\n            return avatar.url;\n        });\n    }\n    perform(method, params) {\n        return base_provider_logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n    _startEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _stopEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _addEventListener(eventName, listener, once) {\n        const event = new base_provider_Event(getEventTag(eventName), listener, once);\n        this._events.push(event);\n        this._startEvent(event);\n        return this;\n    }\n    on(eventName, listener) {\n        return this._addEventListener(eventName, listener, false);\n    }\n    once(eventName, listener) {\n        return this._addEventListener(eventName, listener, true);\n    }\n    emit(eventName, ...args) {\n        let result = false;\n        let stopped = [];\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) {\n                return true;\n            }\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n            result = true;\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n            return true;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!eventName) {\n            return this._events.length;\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n    listeners(eventName) {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n    off(eventName, listener) {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n        const stopped = [];\n        let found = false;\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) {\n                return true;\n            }\n            if (found) {\n                return true;\n            }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n    removeAllListeners(eventName) {\n        let stopped = [];\n        if (eventName == null) {\n            stopped = this._events;\n            this._events = [];\n        }\n        else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) {\n                    return true;\n                }\n                stopped.push(event);\n                return false;\n            });\n        }\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n}\n//# sourceMappingURL=base-provider.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js\n\nvar json_rpc_provider_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\n\n\n\nconst json_rpc_provider_logger = new Logger(lib_esm_version_version);\n\nconst errorGas = [\"call\", \"estimateGas\"];\nfunction spelunk(value, requireData) {\n    if (value == null) {\n        return null;\n    }\n    // These *are* the droids we're looking for.\n    if (typeof (value.message) === \"string\" && value.message.match(\"reverted\")) {\n        const data = isHexString(value.data) ? value.data : null;\n        if (!requireData || data) {\n            return { message: value.message, data };\n        }\n    }\n    // Spelunk further...\n    if (typeof (value) === \"object\") {\n        for (const key in value) {\n            const result = spelunk(value[key], requireData);\n            if (result) {\n                return result;\n            }\n        }\n        return null;\n    }\n    // Might be a JSON string we can further descend...\n    if (typeof (value) === \"string\") {\n        try {\n            return spelunk(JSON.parse(value), requireData);\n        }\n        catch (error) { }\n    }\n    return null;\n}\nfunction checkError(method, error, params) {\n    const transaction = params.transaction || params.signedTransaction;\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\") {\n        const result = spelunk(error, true);\n        if (result) {\n            return result.data;\n        }\n        // Nothing descriptive..\n        json_rpc_provider_logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n            data: \"0x\", transaction, error\n        });\n    }\n    if (method === \"estimateGas\") {\n        // Try to find something, with a preference on SERVER_ERROR body\n        let result = spelunk(error.body, false);\n        if (result == null) {\n            result = spelunk(error, false);\n        }\n        // Found \"reverted\", this is a CALL_EXCEPTION\n        if (result) {\n            json_rpc_provider_logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                reason: result.message, method, transaction, error\n            });\n        }\n    }\n    // @TODO: Should we spelunk for message too?\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof (error.error.message) === \"string\") {\n        message = error.error.message;\n    }\n    else if (typeof (error.body) === \"string\") {\n        message = error.body;\n    }\n    else if (typeof (error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {\n        json_rpc_provider_logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n    // \"nonce too low\"\n    if (message.match(/nonce (is )?too low/i)) {\n        json_rpc_provider_logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n        json_rpc_provider_logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/i)) {\n        json_rpc_provider_logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {\n        json_rpc_provider_logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n    throw error;\n}\nfunction timer(timeout) {\n    return new Promise(function (resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\nfunction getResult(payload) {\n    if (payload.error) {\n        // @TODO: not any\n        const error = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n    return payload.result;\n}\nfunction getLowerCase(value) {\n    if (value) {\n        return value.toLowerCase();\n    }\n    return value;\n}\nconst json_rpc_provider_constructorGuard = {};\nclass JsonRpcSigner extends Signer {\n    constructor(constructorGuard, provider, addressOrIndex) {\n        super();\n        if (constructorGuard !== json_rpc_provider_constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n        defineReadOnly(this, \"provider\", provider);\n        if (addressOrIndex == null) {\n            addressOrIndex = 0;\n        }\n        if (typeof (addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n        }\n        else if (typeof (addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n        }\n        else {\n            json_rpc_provider_logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n    connect(provider) {\n        return json_rpc_provider_logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n    connectUnchecked() {\n        return new UncheckedJsonRpcSigner(json_rpc_provider_constructorGuard, this.provider, this._address || this._index);\n    }\n    getAddress() {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                json_rpc_provider_logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index]);\n        });\n    }\n    sendUncheckedTransaction(transaction) {\n        transaction = shallowCopy(transaction);\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) {\n                address = address.toLowerCase();\n            }\n            return address;\n        });\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then((to) => json_rpc_provider_awaiter(this, void 0, void 0, function* () {\n                if (to == null) {\n                    return null;\n                }\n                const address = yield this.provider.resolveName(to);\n                if (address == null) {\n                    json_rpc_provider_logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            }));\n        }\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    json_rpc_provider_logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            }\n            else {\n                tx.from = sender;\n            }\n            const hexTx = this.provider.constructor.hexlifyTransaction(tx, { from: true });\n            return this.provider.send(\"eth_sendTransaction\", [hexTx]).then((hash) => {\n                return hash;\n            }, (error) => {\n                if (typeof (error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    json_rpc_provider_logger.throwError(\"user rejected transaction\", Logger.errors.ACTION_REJECTED, {\n                        action: \"sendTransaction\",\n                        transaction: tx\n                    });\n                }\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n    signTransaction(transaction) {\n        return json_rpc_provider_logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n    sendTransaction(transaction) {\n        return json_rpc_provider_awaiter(this, void 0, void 0, function* () {\n            // This cannot be mined any earlier than any recent block\n            const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n            // Send the transaction\n            const hash = yield this.sendUncheckedTransaction(transaction);\n            try {\n                // Unfortunately, JSON-RPC only provides and opaque transaction hash\n                // for a response, and we need the actual transaction, so we poll\n                // for it; it should show up very quickly\n                return yield poll(() => json_rpc_provider_awaiter(this, void 0, void 0, function* () {\n                    const tx = yield this.provider.getTransaction(hash);\n                    if (tx === null) {\n                        return undefined;\n                    }\n                    return this.provider._wrapTransaction(tx, hash, blockNumber);\n                }), { oncePoll: this.provider });\n            }\n            catch (error) {\n                error.transactionHash = hash;\n                throw error;\n            }\n        });\n    }\n    signMessage(message) {\n        return json_rpc_provider_awaiter(this, void 0, void 0, function* () {\n            const data = ((typeof (message) === \"string\") ? toUtf8Bytes(message) : message);\n            const address = yield this.getAddress();\n            try {\n                return yield this.provider.send(\"personal_sign\", [hexlify(data), address.toLowerCase()]);\n            }\n            catch (error) {\n                if (typeof (error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    json_rpc_provider_logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                        action: \"signMessage\",\n                        from: address,\n                        messageData: message\n                    });\n                }\n                throw error;\n            }\n        });\n    }\n    _legacySignMessage(message) {\n        return json_rpc_provider_awaiter(this, void 0, void 0, function* () {\n            const data = ((typeof (message) === \"string\") ? toUtf8Bytes(message) : message);\n            const address = yield this.getAddress();\n            try {\n                // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n                return yield this.provider.send(\"eth_sign\", [address.toLowerCase(), hexlify(data)]);\n            }\n            catch (error) {\n                if (typeof (error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    json_rpc_provider_logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                        action: \"_legacySignMessage\",\n                        from: address,\n                        messageData: message\n                    });\n                }\n                throw error;\n            }\n        });\n    }\n    _signTypedData(domain, types, value) {\n        return json_rpc_provider_awaiter(this, void 0, void 0, function* () {\n            // Populate any ENS names (in-place)\n            const populated = yield TypedDataEncoder.resolveNames(domain, types, value, (name) => {\n                return this.provider.resolveName(name);\n            });\n            const address = yield this.getAddress();\n            try {\n                return yield this.provider.send(\"eth_signTypedData_v4\", [\n                    address.toLowerCase(),\n                    JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n                ]);\n            }\n            catch (error) {\n                if (typeof (error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    json_rpc_provider_logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                        action: \"_signTypedData\",\n                        from: address,\n                        messageData: { domain: populated.domain, types, value: populated.value }\n                    });\n                }\n                throw error;\n            }\n        });\n    }\n    unlock(password) {\n        return json_rpc_provider_awaiter(this, void 0, void 0, function* () {\n            const provider = this.provider;\n            const address = yield this.getAddress();\n            return provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]);\n        });\n    }\n}\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction) {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return {\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\nconst json_rpc_provider_allowedTransactionKeys = {\n    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n};\nclass JsonRpcProvider extends BaseProvider {\n    constructor(url, network) {\n        let networkOrReady = network;\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n        super(networkOrReady);\n        // Default URL\n        if (!url) {\n            url = getStatic(this.constructor, \"defaultUrl\")();\n        }\n        if (typeof (url) === \"string\") {\n            defineReadOnly(this, \"connection\", Object.freeze({\n                url: url\n            }));\n        }\n        else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n        this._nextId = 42;\n    }\n    get _cache() {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = {};\n        }\n        return this._eventLoopCache;\n    }\n    static defaultUrl() {\n        return \"http:/\\/localhost:8545\";\n    }\n    detectNetwork() {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n    _uncachedDetectNetwork() {\n        return json_rpc_provider_awaiter(this, void 0, void 0, function* () {\n            yield timer(0);\n            let chainId = null;\n            try {\n                chainId = yield this.send(\"eth_chainId\", []);\n            }\n            catch (error) {\n                try {\n                    chainId = yield this.send(\"net_version\", []);\n                }\n                catch (error) { }\n            }\n            if (chainId != null) {\n                const getNetwork = getStatic(this.constructor, \"getNetwork\");\n                try {\n                    return getNetwork(BigNumber.from(chainId).toNumber());\n                }\n                catch (error) {\n                    return json_rpc_provider_logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                        chainId: chainId,\n                        event: \"invalidNetwork\",\n                        serverError: error\n                    });\n                }\n            }\n            return json_rpc_provider_logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                event: \"noNetwork\"\n            });\n        });\n    }\n    getSigner(addressOrIndex) {\n        return new JsonRpcSigner(json_rpc_provider_constructorGuard, this, addressOrIndex);\n    }\n    getUncheckedSigner(addressOrIndex) {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n    listAccounts() {\n        return this.send(\"eth_accounts\", []).then((accounts) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n    send(method, params) {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([\"eth_chainId\", \"eth_blockNumber\"].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n            return result;\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n            throw error;\n        });\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n        return result;\n    }\n    prepareRequest(method, params) {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [\"eth_blockNumber\", []];\n            case \"getGasPrice\":\n                return [\"eth_gasPrice\", []];\n            case \"getBalance\":\n                return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n            case \"getTransactionCount\":\n                return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n            case \"getCode\":\n                return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n            case \"getStorageAt\":\n                return [\"eth_getStorageAt\", [getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag]];\n            case \"sendTransaction\":\n                return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n                }\n                else if (params.blockHash) {\n                    return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n                }\n                return null;\n            case \"getTransaction\":\n                return [\"eth_getTransactionByHash\", [params.transactionHash]];\n            case \"getTransactionReceipt\":\n                return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n            case \"call\": {\n                const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n                return [\"eth_call\", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];\n            }\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n                return [\"eth_estimateGas\", [hexlifyTransaction(params.transaction, { from: true })]];\n            }\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [\"eth_getLogs\", [params.filter]];\n            default:\n                break;\n        }\n        return null;\n    }\n    perform(method, params) {\n        return json_rpc_provider_awaiter(this, void 0, void 0, function* () {\n            // Legacy networks do not like the type field being passed along (which\n            // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n            if (method === \"call\" || method === \"estimateGas\") {\n                const tx = params.transaction;\n                if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                    // If there are no EIP-1559 properties, it might be non-EIP-1559\n                    if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                        const feeData = yield this.getFeeData();\n                        if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                            // Network doesn't know about EIP-1559 (and hence type)\n                            params = shallowCopy(params);\n                            params.transaction = shallowCopy(tx);\n                            delete params.transaction.type;\n                        }\n                    }\n                }\n            }\n            const args = this.prepareRequest(method, params);\n            if (args == null) {\n                json_rpc_provider_logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n            }\n            try {\n                return yield this.send(args[0], args[1]);\n            }\n            catch (error) {\n                return checkError(method, error, params);\n            }\n        });\n    }\n    _startEvent(event) {\n        if (event.tag === \"pending\") {\n            this._startPending();\n        }\n        super._startEvent(event);\n    }\n    _startPending() {\n        if (this._pendingFilter != null) {\n            return;\n        }\n        const self = this;\n        const pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n        pendingFilter.then(function (filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n                    if (self._pendingFilter != pendingFilter) {\n                        return null;\n                    }\n                    let seq = Promise.resolve();\n                    hashes.forEach(function (hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function () {\n                            return self.getTransaction(hash).then(function (tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n                    return seq.then(function () {\n                        return timer(1000);\n                    });\n                }).then(function () {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [filterId]);\n                        return;\n                    }\n                    setTimeout(function () { poll(); }, 0);\n                    return null;\n                }).catch((error) => { });\n            }\n            poll();\n            return filterId;\n        }).catch((error) => { });\n    }\n    _stopEvent(event) {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction, allowExtra) {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(json_rpc_provider_allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) {\n                    allowed[key] = true;\n                }\n            }\n        }\n        checkProperties(transaction, allowed);\n        const result = {};\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function (key) {\n            if (transaction[key] == null) {\n                return;\n            }\n            const value = hexValue(BigNumber.from(transaction[key]));\n            if (key === \"gasLimit\") {\n                key = \"gas\";\n            }\n            result[key] = value;\n        });\n        [\"from\", \"to\", \"data\"].forEach(function (key) {\n            if (transaction[key] == null) {\n                return;\n            }\n            result[key] = hexlify(transaction[key]);\n        });\n        if (transaction.accessList) {\n            result[\"accessList\"] = accessListify(transaction.accessList);\n        }\n        return result;\n    }\n}\n//# sourceMappingURL=json-rpc-provider.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/providers/lib.esm/web3-provider.js\n\n\n\n\nconst web3_provider_logger = new Logger(lib_esm_version_version);\n\nlet _nextId = 1;\nfunction buildWeb3LegacyFetcher(provider, sendFunc) {\n    const fetcher = \"Web3LegacyFetcher\";\n    return function (method, params) {\n        const request = {\n            method: method,\n            params: params,\n            id: (_nextId++),\n            jsonrpc: \"2.0\"\n        };\n        return new Promise((resolve, reject) => {\n            this.emit(\"debug\", {\n                action: \"request\",\n                fetcher,\n                request: deepCopy(request),\n                provider: this\n            });\n            sendFunc(request, (error, response) => {\n                if (error) {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        fetcher,\n                        error,\n                        request,\n                        provider: this\n                    });\n                    return reject(error);\n                }\n                this.emit(\"debug\", {\n                    action: \"response\",\n                    fetcher,\n                    request,\n                    response,\n                    provider: this\n                });\n                if (response.error) {\n                    const error = new Error(response.error.message);\n                    error.code = response.error.code;\n                    error.data = response.error.data;\n                    return reject(error);\n                }\n                resolve(response.result);\n            });\n        });\n    };\n}\nfunction buildEip1193Fetcher(provider) {\n    return function (method, params) {\n        if (params == null) {\n            params = [];\n        }\n        const request = { method, params };\n        this.emit(\"debug\", {\n            action: \"request\",\n            fetcher: \"Eip1193Fetcher\",\n            request: deepCopy(request),\n            provider: this\n        });\n        return provider.request(request).then((response) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                response,\n                provider: this\n            });\n            return response;\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                error,\n                provider: this\n            });\n            throw error;\n        });\n    };\n}\nclass Web3Provider extends JsonRpcProvider {\n    constructor(provider, network) {\n        if (provider == null) {\n            web3_provider_logger.throwArgumentError(\"missing provider\", \"provider\", provider);\n        }\n        let path = null;\n        let jsonRpcFetchFunc = null;\n        let subprovider = null;\n        if (typeof (provider) === \"function\") {\n            path = \"unknown:\";\n            jsonRpcFetchFunc = provider;\n        }\n        else {\n            path = provider.host || provider.path || \"\";\n            if (!path && provider.isMetaMask) {\n                path = \"metamask\";\n            }\n            subprovider = provider;\n            if (provider.request) {\n                if (path === \"\") {\n                    path = \"eip-1193:\";\n                }\n                jsonRpcFetchFunc = buildEip1193Fetcher(provider);\n            }\n            else if (provider.sendAsync) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));\n            }\n            else if (provider.send) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));\n            }\n            else {\n                web3_provider_logger.throwArgumentError(\"unsupported provider\", \"provider\", provider);\n            }\n            if (!path) {\n                path = \"unknown:\";\n            }\n        }\n        super(path, network);\n        defineReadOnly(this, \"jsonRpcFetchFunc\", jsonRpcFetchFunc);\n        defineReadOnly(this, \"provider\", subprovider);\n    }\n    send(method, params) {\n        return this.jsonRpcFetchFunc(method, params);\n    }\n}\n//# sourceMappingURL=web3-provider.js.map\n// EXTERNAL MODULE: ./node_modules/events/events.js\nvar events = __webpack_require__(\"./node_modules/events/events.js\");\nvar events_default = /*#__PURE__*/__webpack_require__.n(events);\n;// CONCATENATED MODULE: ./src/wallet/events.ts\n// Events being emitted by an eip-1193 provider\r\n// See https://eips.ethereum.org/EIPS/eip-1193#events\r\nconst EthereumEvents = Object.freeze({\r\n    CONNECT: 'connect',\r\n    DISCONNECT: 'disconnect',\r\n    CHAIN_CHANGED: 'chainChanged',\r\n    ACCOUNTS_CHANGED: 'accountsChanged',\r\n});\r\n// Events emitted by the connectors,\r\n// The InternalWeb3Provider of Moralis will listen to these\r\nconst ConnectorEvents = Object.freeze({\r\n    CONNECT: 'connect',\r\n    DISCONNECT: 'disconnect',\r\n    CHAIN_CHANGED: 'chainChanged',\r\n    ACCOUNT_CHANGED: 'accountChanged',\r\n});\r\n\n;// CONCATENATED MODULE: ./src/wallet/AbstractWeb3Connector.ts\nvar AbstractWeb3Connector_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n/**\r\n * Abstract connector to connect EIP-1193 providers to Moralis\r\n *\r\n * It should implement at least:\r\n * - activate()\r\n * - Emit ConnectorEvent.CHAIN_CHANGED when the chain has changed (if possible)\r\n * - Emit ConnectorEvent.ACCOUNT_CHANGED when the account has changed (if possible)\r\n * - type: a name to identify\r\n * - network: the network type that is used (eg. 'evm')\r\n */\r\nclass AbstractWeb3Connector extends (events_default()) {\r\n    constructor() {\r\n        super();\r\n        this.type = 'abstract';\r\n        this.network = 'evm';\r\n        this.account = null;\r\n        this.chainId = null;\r\n        this.handleAccountsChanged = this.handleAccountsChanged.bind(this);\r\n        this.handleChainChanged = this.handleChainChanged.bind(this);\r\n        this.handleConnect = this.handleConnect.bind(this);\r\n        this.handleDisconnect = this.handleDisconnect.bind(this);\r\n    }\r\n    subscribeToEvents(provider) {\r\n        if (provider && provider.on) {\r\n            provider.on(EthereumEvents.CHAIN_CHANGED, this.handleChainChanged);\r\n            provider.on(EthereumEvents.ACCOUNTS_CHANGED, this.handleAccountsChanged);\r\n            provider.on(EthereumEvents.CONNECT, this.handleConnect);\r\n            provider.on(EthereumEvents.DISCONNECT, this.handleDisconnect);\r\n        }\r\n    }\r\n    unsubscribeToEvents(provider) {\r\n        if (provider && provider.removeListener) {\r\n            provider.removeListener(EthereumEvents.CHAIN_CHANGED, this.handleChainChanged);\r\n            provider.removeListener(EthereumEvents.ACCOUNTS_CHANGED, this.handleAccountsChanged);\r\n            provider.removeListener(EthereumEvents.CONNECT, this.handleConnect);\r\n            provider.removeListener(EthereumEvents.DISCONNECT, this.handleDisconnect);\r\n        }\r\n    }\r\n    /**\r\n     * Activates the provider.\r\n     * Should returns an object with:\r\n     * - provider: A valid EIP-1193 provider\r\n     * - chainId(optional): the chainId that has been connected to (in hex format)\r\n     * - account(optional): the address that is connected to the provider\r\n     */\r\n    activate() {\r\n        return AbstractWeb3Connector_awaiter(this, void 0, void 0, function* () {\r\n            throw new Error('Not implemented: activate()');\r\n        });\r\n    }\r\n    /**\r\n     * Updates account and emit event, on EIP-1193 accountsChanged events\r\n     */\r\n    handleAccountsChanged(accounts) {\r\n        const account = accounts && accounts[0] ? accounts[0].toLowerCase() : null;\r\n        this.account = account;\r\n        this.emit(ConnectorEvents.ACCOUNT_CHANGED, account);\r\n    }\r\n    /**\r\n     * Updates chainId and emit event, on EIP-1193 accountsChanged events\r\n     */\r\n    handleChainChanged(chainId) {\r\n        const newChainId = chainId;\r\n        this.chainId = newChainId;\r\n        this.emit(ConnectorEvents.CHAIN_CHANGED, newChainId);\r\n    }\r\n    handleConnect(connectInfo) {\r\n        this.emit(ConnectorEvents.CONNECT, connectInfo);\r\n    }\r\n    handleDisconnect(error) {\r\n        this.emit(ConnectorEvents.DISCONNECT, error);\r\n    }\r\n    /**\r\n     * Cleans all active listners, connections and stale references\r\n     */\r\n    deactivate() {\r\n        return AbstractWeb3Connector_awaiter(this, void 0, void 0, function* () {\r\n            this.unsubscribeToEvents(this.provider);\r\n            this.account = null;\r\n            this.chainId = null;\r\n        });\r\n    }\r\n}\r\n/* harmony default export */ const wallet_AbstractWeb3Connector = (AbstractWeb3Connector);\r\n\n;// CONCATENATED MODULE: ./node_modules/@magic-sdk/types/dist/es/index.mjs\nvar a=(n=>(n.MissingApiKey=\"MISSING_API_KEY\",n.ModalNotReady=\"MODAL_NOT_READY\",n.MalformedResponse=\"MALFORMED_RESPONSE\",n.InvalidArgument=\"INVALID_ARGUMENT\",n.ExtensionNotInitialized=\"EXTENSION_NOT_INITIALIZED\",n.IncompatibleExtensions=\"INCOMPATIBLE_EXTENSIONS\",n))(a||{}),m=(_=>(_.SyncWeb3Method=\"SYNC_WEB3_METHOD\",_.DuplicateIframe=\"DUPLICATE_IFRAME\",_.ReactNativeEndpointConfiguration=\"REACT_NATIVE_ENDPOINT_CONFIGURATION\",_.DeprecationNotice=\"DEPRECATION_NOTICE\",_))(m||{}),p=(e=>(e[e.ParseError=-32700]=\"ParseError\",e[e.InvalidRequest=-32600]=\"InvalidRequest\",e[e.MethodNotFound=-32601]=\"MethodNotFound\",e[e.InvalidParams=-32602]=\"InvalidParams\",e[e.InternalError=-32603]=\"InternalError\",e[e.MagicLinkFailedVerification=-1e4]=\"MagicLinkFailedVerification\",e[e.MagicLinkExpired=-10001]=\"MagicLinkExpired\",e[e.MagicLinkRateLimited=-10002]=\"MagicLinkRateLimited\",e[e.MagicLinkInvalidRedirectURL=-10006]=\"MagicLinkInvalidRedirectURL\",e[e.UserAlreadyLoggedIn=-10003]=\"UserAlreadyLoggedIn\",e[e.UpdateEmailFailed=-10004]=\"UpdateEmailFailed\",e[e.UserRequestEditEmail=-10005]=\"UserRequestEditEmail\",e[e.InactiveRecipient=-10010]=\"InactiveRecipient\",e[e.AccessDeniedToUser=-10011]=\"AccessDeniedToUser\",e))(p||{});var u=(t=>(t.LoginWithSms=\"magic_auth_login_with_sms\",t.LoginWithEmailOTP=\"magic_auth_login_with_email_otp\",t.LoginWithMagicLink=\"magic_auth_login_with_magic_link\",t.LoginWithCredential=\"magic_auth_login_with_credential\",t.GetIdToken=\"magic_auth_get_id_token\",t.GenerateIdToken=\"magic_auth_generate_id_token\",t.GetMetadata=\"magic_auth_get_metadata\",t.IsLoggedIn=\"magic_auth_is_logged_in\",t.Logout=\"magic_auth_logout\",t.UpdateEmail=\"magic_auth_update_email\",t.UserSettings=\"magic_auth_settings\",t.UserSettingsTestMode=\"magic_auth_settings_testing_mode\",t.LoginWithSmsTestMode=\"magic_auth_login_with_sms_testing_mode\",t.LoginWithEmailOTPTestMode=\"magic_auth_login_with_email_otp_testing_mode\",t.LoginWithMagicLinkTestMode=\"magic_login_with_magic_link_testing_mode\",t.LoginWithCredentialTestMode=\"magic_auth_login_with_credential_testing_mode\",t.GetIdTokenTestMode=\"magic_auth_get_id_token_testing_mode\",t.GenerateIdTokenTestMode=\"magic_auth_generate_id_token_testing_mode\",t.GetMetadataTestMode=\"magic_auth_get_metadata_testing_mode\",t.IsLoggedInTestMode=\"magic_auth_is_logged_in_testing_mode\",t.LogoutTestMode=\"magic_auth_logout_testing_mode\",t.UpdateEmailTestMode=\"magic_auth_update_email_testing_mode\",t.IntermediaryEvent=\"magic_intermediary_event\",t))(u||{});var g=(i=>(i.MAGIC_HANDLE_RESPONSE=\"MAGIC_HANDLE_RESPONSE\",i.MAGIC_OVERLAY_READY=\"MAGIC_OVERLAY_READY\",i.MAGIC_SHOW_OVERLAY=\"MAGIC_SHOW_OVERLAY\",i.MAGIC_HIDE_OVERLAY=\"MAGIC_HIDE_OVERLAY\",i.MAGIC_HANDLE_EVENT=\"MAGIC_HANDLE_EVENT\",i))(g||{}),o=(s=>(s.MAGIC_HANDLE_REQUEST=\"MAGIC_HANDLE_REQUEST\",s))(o||{});var l=(s=>(s.Harmony=\"HARMONY\",s))(l||{});\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/@magic-sdk/provider/dist/es/index.mjs\nvar yt=Object.create;var U=Object.defineProperty,Rt=Object.defineProperties,Tt=Object.getOwnPropertyDescriptor,vt=Object.getOwnPropertyDescriptors,xt=Object.getOwnPropertyNames,$e=Object.getOwnPropertySymbols,It=Object.getPrototypeOf,Me=Object.prototype.hasOwnProperty,Pt=Object.prototype.propertyIsEnumerable;var Ne=(t,e,n)=>e in t?U(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,z=(t,e)=>{for(var n in e||(e={}))Me.call(e,n)&&Ne(t,n,e[n]);if($e)for(var n of $e(e))Pt.call(e,n)&&Ne(t,n,e[n]);return t},we=(t,e)=>Rt(t,vt(e)),bt=t=>U(t,\"__esModule\",{value:!0});var $t=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),Mt=(t,e)=>{for(var n in e)U(t,n,{get:e[n],enumerable:!0})},Nt=(t,e,n,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of xt(e))!Me.call(t,s)&&(n||s!==\"default\")&&U(t,s,{get:()=>e[s],enumerable:!(r=Tt(e,s))||r.enumerable});return t},wt=(t,e)=>Nt(bt(U(t!=null?yt(It(t)):{},\"default\",!e&&t&&t.__esModule?{get:()=>t.default,enumerable:!0}:{value:t,enumerable:!0})),t);var I=(t,e,n)=>new Promise((r,s)=>{var o=c=>{try{i(n.next(c))}catch(p){s(p)}},a=c=>{try{i(n.throw(c))}catch(p){s(p)}},i=c=>c.done?r(c.value):Promise.resolve(c.value).then(o,a);i((n=n.apply(t,e)).next())});var nt=$t((gr,fe)=>{\"use strict\";var bn=Object.prototype.hasOwnProperty,T=\"~\";function B(){}Object.create&&(B.prototype=Object.create(null),new B().__proto__||(T=!1));function $n(t,e,n){this.fn=t,this.context=e,this.once=n||!1}function tt(t,e,n,r,s){if(typeof n!=\"function\")throw new TypeError(\"The listener must be a function\");var o=new $n(n,r||t,s),a=T?T+e:e;return t._events[a]?t._events[a].fn?t._events[a]=[t._events[a],o]:t._events[a].push(o):(t._events[a]=o,t._eventsCount++),t}function oe(t,e){--t._eventsCount===0?t._events=new B:delete t._events[e]}function y(){this._events=new B,this._eventsCount=0}y.prototype.eventNames=function(){var e=[],n,r;if(this._eventsCount===0)return e;for(r in n=this._events)bn.call(n,r)&&e.push(T?r.slice(1):r);return Object.getOwnPropertySymbols?e.concat(Object.getOwnPropertySymbols(n)):e};y.prototype.listeners=function(e){var n=T?T+e:e,r=this._events[n];if(!r)return[];if(r.fn)return[r.fn];for(var s=0,o=r.length,a=new Array(o);s<o;s++)a[s]=r[s].fn;return a};y.prototype.listenerCount=function(e){var n=T?T+e:e,r=this._events[n];return r?r.fn?1:r.length:0};y.prototype.emit=function(e,n,r,s,o,a){var i=T?T+e:e;if(!this._events[i])return!1;var c=this._events[i],p=arguments.length,l,u;if(c.fn){switch(c.once&&this.removeListener(e,c.fn,void 0,!0),p){case 1:return c.fn.call(c.context),!0;case 2:return c.fn.call(c.context,n),!0;case 3:return c.fn.call(c.context,n,r),!0;case 4:return c.fn.call(c.context,n,r,s),!0;case 5:return c.fn.call(c.context,n,r,s,o),!0;case 6:return c.fn.call(c.context,n,r,s,o,a),!0}for(u=1,l=new Array(p-1);u<p;u++)l[u-1]=arguments[u];c.fn.apply(c.context,l)}else{var v=c.length,M;for(u=0;u<v;u++)switch(c[u].once&&this.removeListener(e,c[u].fn,void 0,!0),p){case 1:c[u].fn.call(c[u].context);break;case 2:c[u].fn.call(c[u].context,n);break;case 3:c[u].fn.call(c[u].context,n,r);break;case 4:c[u].fn.call(c[u].context,n,r,s);break;default:if(!l)for(M=1,l=new Array(p-1);M<p;M++)l[M-1]=arguments[M];c[u].fn.apply(c[u].context,l)}}return!0};y.prototype.on=function(e,n,r){return tt(this,e,n,r,!1)};y.prototype.once=function(e,n,r){return tt(this,e,n,r,!0)};y.prototype.removeListener=function(e,n,r,s){var o=T?T+e:e;if(!this._events[o])return this;if(!n)return oe(this,o),this;var a=this._events[o];if(a.fn)a.fn===n&&(!s||a.once)&&(!r||a.context===r)&&oe(this,o);else{for(var i=0,c=[],p=a.length;i<p;i++)(a[i].fn!==n||s&&!a[i].once||r&&a[i].context!==r)&&c.push(a[i]);c.length?this._events[o]=c.length===1?c[0]:c:oe(this,o)}return this};y.prototype.removeAllListeners=function(e){var n;return e?(n=T?T+e:e,this._events[n]&&oe(this,n)):(this._events=new B,this._eventsCount=0),this};y.prototype.off=y.prototype.removeListener;y.prototype.addListener=y.prototype.on;y.prefixed=T;y.EventEmitter=y;typeof fe!=\"undefined\"&&(fe.exports=y)});function At(t){let e={exports:{}};return t(e,e.exports),e.exports}var Lt=Number.MAX_SAFE_INTEGER||9007199254740991;var me={SEMVER_SPEC_VERSION:\"2.0.0\",MAX_LENGTH:256,MAX_SAFE_INTEGER:Lt,MAX_SAFE_COMPONENT_LENGTH:16},St=typeof process==\"object\"&&process.env&&process.env.NODE_DEBUG&&/\\bsemver\\b/i.test(process.env.NODE_DEBUG)?(...t)=>console.error(\"SEMVER\",...t):()=>{},d=St,K=At(function(t,e){let{MAX_SAFE_COMPONENT_LENGTH:n}=me,r=(e=t.exports={}).re=[],s=e.src=[],o=e.t={},a=0,i=(c,p,l)=>{let u=a++;d(u,p),o[c]=u,s[u]=p,r[u]=new RegExp(p,l?\"g\":void 0)};i(\"NUMERICIDENTIFIER\",\"0|[1-9]\\\\d*\"),i(\"NUMERICIDENTIFIERLOOSE\",\"[0-9]+\"),i(\"NONNUMERICIDENTIFIER\",\"\\\\d*[a-zA-Z-][a-zA-Z0-9-]*\"),i(\"MAINVERSION\",`(${s[o.NUMERICIDENTIFIER]})\\\\.(${s[o.NUMERICIDENTIFIER]})\\\\.(${s[o.NUMERICIDENTIFIER]})`),i(\"MAINVERSIONLOOSE\",`(${s[o.NUMERICIDENTIFIERLOOSE]})\\\\.(${s[o.NUMERICIDENTIFIERLOOSE]})\\\\.(${s[o.NUMERICIDENTIFIERLOOSE]})`),i(\"PRERELEASEIDENTIFIER\",`(?:${s[o.NUMERICIDENTIFIER]}|${s[o.NONNUMERICIDENTIFIER]})`),i(\"PRERELEASEIDENTIFIERLOOSE\",`(?:${s[o.NUMERICIDENTIFIERLOOSE]}|${s[o.NONNUMERICIDENTIFIER]})`),i(\"PRERELEASE\",`(?:-(${s[o.PRERELEASEIDENTIFIER]}(?:\\\\.${s[o.PRERELEASEIDENTIFIER]})*))`),i(\"PRERELEASELOOSE\",`(?:-?(${s[o.PRERELEASEIDENTIFIERLOOSE]}(?:\\\\.${s[o.PRERELEASEIDENTIFIERLOOSE]})*))`),i(\"BUILDIDENTIFIER\",\"[0-9A-Za-z-]+\"),i(\"BUILD\",`(?:\\\\+(${s[o.BUILDIDENTIFIER]}(?:\\\\.${s[o.BUILDIDENTIFIER]})*))`),i(\"FULLPLAIN\",`v?${s[o.MAINVERSION]}${s[o.PRERELEASE]}?${s[o.BUILD]}?`),i(\"FULL\",`^${s[o.FULLPLAIN]}$`),i(\"LOOSEPLAIN\",`[v=\\\\s]*${s[o.MAINVERSIONLOOSE]}${s[o.PRERELEASELOOSE]}?${s[o.BUILD]}?`),i(\"LOOSE\",`^${s[o.LOOSEPLAIN]}$`),i(\"GTLT\",\"((?:<|>)?=?)\"),i(\"XRANGEIDENTIFIERLOOSE\",`${s[o.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`),i(\"XRANGEIDENTIFIER\",`${s[o.NUMERICIDENTIFIER]}|x|X|\\\\*`),i(\"XRANGEPLAIN\",`[v=\\\\s]*(${s[o.XRANGEIDENTIFIER]})(?:\\\\.(${s[o.XRANGEIDENTIFIER]})(?:\\\\.(${s[o.XRANGEIDENTIFIER]})(?:${s[o.PRERELEASE]})?${s[o.BUILD]}?)?)?`),i(\"XRANGEPLAINLOOSE\",`[v=\\\\s]*(${s[o.XRANGEIDENTIFIERLOOSE]})(?:\\\\.(${s[o.XRANGEIDENTIFIERLOOSE]})(?:\\\\.(${s[o.XRANGEIDENTIFIERLOOSE]})(?:${s[o.PRERELEASELOOSE]})?${s[o.BUILD]}?)?)?`),i(\"XRANGE\",`^${s[o.GTLT]}\\\\s*${s[o.XRANGEPLAIN]}$`),i(\"XRANGELOOSE\",`^${s[o.GTLT]}\\\\s*${s[o.XRANGEPLAINLOOSE]}$`),i(\"COERCE\",`(^|[^\\\\d])(\\\\d{1,${n}})(?:\\\\.(\\\\d{1,${n}}))?(?:\\\\.(\\\\d{1,${n}}))?(?:$|[^\\\\d])`),i(\"COERCERTL\",s[o.COERCE],!0),i(\"LONETILDE\",\"(?:~>?)\"),i(\"TILDETRIM\",`(\\\\s*)${s[o.LONETILDE]}\\\\s+`,!0),e.tildeTrimReplace=\"$1~\",i(\"TILDE\",`^${s[o.LONETILDE]}${s[o.XRANGEPLAIN]}$`),i(\"TILDELOOSE\",`^${s[o.LONETILDE]}${s[o.XRANGEPLAINLOOSE]}$`),i(\"LONECARET\",\"(?:\\\\^)\"),i(\"CARETTRIM\",`(\\\\s*)${s[o.LONECARET]}\\\\s+`,!0),e.caretTrimReplace=\"$1^\",i(\"CARET\",`^${s[o.LONECARET]}${s[o.XRANGEPLAIN]}$`),i(\"CARETLOOSE\",`^${s[o.LONECARET]}${s[o.XRANGEPLAINLOOSE]}$`),i(\"COMPARATORLOOSE\",`^${s[o.GTLT]}\\\\s*(${s[o.LOOSEPLAIN]})$|^$`),i(\"COMPARATOR\",`^${s[o.GTLT]}\\\\s*(${s[o.FULLPLAIN]})$|^$`),i(\"COMPARATORTRIM\",`(\\\\s*)${s[o.GTLT]}\\\\s*(${s[o.LOOSEPLAIN]}|${s[o.XRANGEPLAIN]})`,!0),e.comparatorTrimReplace=\"$1$2$3\",i(\"HYPHENRANGE\",`^\\\\s*(${s[o.XRANGEPLAIN]})\\\\s+-\\\\s+(${s[o.XRANGEPLAIN]})\\\\s*$`),i(\"HYPHENRANGELOOSE\",`^\\\\s*(${s[o.XRANGEPLAINLOOSE]})\\\\s+-\\\\s+(${s[o.XRANGEPLAINLOOSE]})\\\\s*$`),i(\"STAR\",\"(<|>)?=?\\\\s*\\\\*\"),i(\"GTE0\",\"^\\\\s*>=\\\\s*0.0.0\\\\s*$\"),i(\"GTE0PRE\",\"^\\\\s*>=\\\\s*0.0.0-0\\\\s*$\")}),Ae=/^[0-9]+$/,Le=(t,e)=>{let n=Ae.test(t),r=Ae.test(e);return n&&r&&(t=+t,e=+e),t===e?0:n&&!r?-1:r&&!n?1:t<e?-1:1},Ot=(t,e)=>Le(e,t),Ct={compareIdentifiers:Le,rcompareIdentifiers:Ot},{MAX_LENGTH:Se,MAX_SAFE_INTEGER:Y}=me,{re:Oe,t:Ce}=K,{compareIdentifiers:F}=Ct,h=class{constructor(e,n){if(n&&typeof n==\"object\"||(n={loose:!!n,includePrerelease:!1}),e instanceof h){if(e.loose===!!n.loose&&e.includePrerelease===!!n.includePrerelease)return e;e=e.version}else if(typeof e!=\"string\")throw new TypeError(`Invalid Version: ${e}`);if(e.length>Se)throw new TypeError(`version is longer than ${Se} characters`);d(\"SemVer\",e,n),this.options=n,this.loose=!!n.loose,this.includePrerelease=!!n.includePrerelease;let r=e.trim().match(n.loose?Oe[Ce.LOOSE]:Oe[Ce.FULL]);if(!r)throw new TypeError(`Invalid Version: ${e}`);if(this.raw=e,this.major=+r[1],this.minor=+r[2],this.patch=+r[3],this.major>Y||this.major<0)throw new TypeError(\"Invalid major version\");if(this.minor>Y||this.minor<0)throw new TypeError(\"Invalid minor version\");if(this.patch>Y||this.patch<0)throw new TypeError(\"Invalid patch version\");r[4]?this.prerelease=r[4].split(\".\").map(s=>{if(/^[0-9]+$/.test(s)){let o=+s;if(o>=0&&o<Y)return o}return s}):this.prerelease=[],this.build=r[5]?r[5].split(\".\"):[],this.format()}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+=`-${this.prerelease.join(\".\")}`),this.version}toString(){return this.version}compare(e){if(d(\"SemVer.compare\",this.version,this.options,e),!(e instanceof h)){if(typeof e==\"string\"&&e===this.version)return 0;e=new h(e,this.options)}return e.version===this.version?0:this.compareMain(e)||this.comparePre(e)}compareMain(e){return e instanceof h||(e=new h(e,this.options)),F(this.major,e.major)||F(this.minor,e.minor)||F(this.patch,e.patch)}comparePre(e){if(e instanceof h||(e=new h(e,this.options)),this.prerelease.length&&!e.prerelease.length)return-1;if(!this.prerelease.length&&e.prerelease.length)return 1;if(!this.prerelease.length&&!e.prerelease.length)return 0;let n=0;do{let r=this.prerelease[n],s=e.prerelease[n];if(d(\"prerelease compare\",n,r,s),r===void 0&&s===void 0)return 0;if(s===void 0)return 1;if(r===void 0)return-1;if(r!==s)return F(r,s)}while(++n)}compareBuild(e){e instanceof h||(e=new h(e,this.options));let n=0;do{let r=this.build[n],s=e.build[n];if(d(\"prerelease compare\",n,r,s),r===void 0&&s===void 0)return 0;if(s===void 0)return 1;if(r===void 0)return-1;if(r!==s)return F(r,s)}while(++n)}inc(e,n){switch(e){case\"premajor\":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc(\"pre\",n);break;case\"preminor\":this.prerelease.length=0,this.patch=0,this.minor++,this.inc(\"pre\",n);break;case\"prepatch\":this.prerelease.length=0,this.inc(\"patch\",n),this.inc(\"pre\",n);break;case\"prerelease\":this.prerelease.length===0&&this.inc(\"patch\",n),this.inc(\"pre\",n);break;case\"major\":this.minor===0&&this.patch===0&&this.prerelease.length!==0||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case\"minor\":this.patch===0&&this.prerelease.length!==0||this.minor++,this.patch=0,this.prerelease=[];break;case\"patch\":this.prerelease.length===0&&this.patch++,this.prerelease=[];break;case\"pre\":if(this.prerelease.length===0)this.prerelease=[0];else{let r=this.prerelease.length;for(;--r>=0;)typeof this.prerelease[r]==\"number\"&&(this.prerelease[r]++,r=-2);r===-1&&this.prerelease.push(0)}n&&(this.prerelease[0]===n?isNaN(this.prerelease[1])&&(this.prerelease=[n,0]):this.prerelease=[n,0]);break;default:throw new Error(`invalid increment argument: ${e}`)}return this.format(),this.raw=this.version,this}},_t=(t,e,n)=>new h(t,n).compare(new h(e,n)),k=_t,Dt=(t,e,n)=>k(t,e,n)===0,kt=Dt,Jt=(t,e,n)=>k(t,e,n)!==0,qt=Jt,Gt=(t,e,n)=>k(t,e,n)>0,Ut=Gt,Kt=(t,e,n)=>k(t,e,n)>=0,Ft=Kt,jt=(t,e,n)=>k(t,e,n)<0,Wt=jt,Xt=(t,e,n)=>k(t,e,n)<=0,Bt=Xt,Ht=(t,e,n,r)=>{switch(e){case\"===\":return typeof t==\"object\"&&(t=t.version),typeof n==\"object\"&&(n=n.version),t===n;case\"!==\":return typeof t==\"object\"&&(t=t.version),typeof n==\"object\"&&(n=n.version),t!==n;case\"\":case\"=\":case\"==\":return kt(t,n,r);case\"!=\":return qt(t,n,r);case\">\":return Ut(t,n,r);case\">=\":return Ft(t,n,r);case\"<\":return Wt(t,n,r);case\"<=\":return Bt(t,n,r);default:throw new TypeError(`Invalid operator: ${e}`)}},Ee=Ht,j=Symbol(\"SemVer ANY\"),O=class{static get ANY(){return j}constructor(e,n){if(n&&typeof n==\"object\"||(n={loose:!!n,includePrerelease:!1}),e instanceof O){if(e.loose===!!n.loose)return e;e=e.value}d(\"comparator\",e,n),this.options=n,this.loose=!!n.loose,this.parse(e),this.semver===j?this.value=\"\":this.value=this.operator+this.semver.version,d(\"comp\",this)}parse(e){let n=this.options.loose?_e[De.COMPARATORLOOSE]:_e[De.COMPARATOR],r=e.match(n);if(!r)throw new TypeError(`Invalid comparator: ${e}`);this.operator=r[1]!==void 0?r[1]:\"\",this.operator===\"=\"&&(this.operator=\"\"),r[2]?this.semver=new h(r[2],this.options.loose):this.semver=j}toString(){return this.value}test(e){if(d(\"Comparator.test\",e,this.options.loose),this.semver===j||e===j)return!0;if(typeof e==\"string\")try{e=new h(e,this.options)}catch(n){return!1}return Ee(e,this.operator,this.semver,this.options)}intersects(e,n){if(!(e instanceof O))throw new TypeError(\"a Comparator is required\");if(n&&typeof n==\"object\"||(n={loose:!!n,includePrerelease:!1}),this.operator===\"\")return this.value===\"\"||new N(e.value,n).test(this.value);if(e.operator===\"\")return e.value===\"\"||new N(this.value,n).test(e.semver);let r=!(this.operator!==\">=\"&&this.operator!==\">\"||e.operator!==\">=\"&&e.operator!==\">\"),s=!(this.operator!==\"<=\"&&this.operator!==\"<\"||e.operator!==\"<=\"&&e.operator!==\"<\"),o=this.semver.version===e.semver.version,a=!(this.operator!==\">=\"&&this.operator!==\"<=\"||e.operator!==\">=\"&&e.operator!==\"<=\"),i=Ee(this.semver,\"<\",e.semver,n)&&(this.operator===\">=\"||this.operator===\">\")&&(e.operator===\"<=\"||e.operator===\"<\"),c=Ee(this.semver,\">\",e.semver,n)&&(this.operator===\"<=\"||this.operator===\"<\")&&(e.operator===\">=\"||e.operator===\">\");return r||s||o&&a||i||c}},{re:_e,t:De}=K,N=class{constructor(e,n){if(n&&typeof n==\"object\"||(n={loose:!!n,includePrerelease:!1}),e instanceof N)return e.loose===!!n.loose&&e.includePrerelease===!!n.includePrerelease?e:new N(e.raw,n);if(e instanceof O)return this.raw=e.value,this.set=[[e]],this.format(),this;if(this.options=n,this.loose=!!n.loose,this.includePrerelease=!!n.includePrerelease,this.raw=e,this.set=e.split(/\\s*\\|\\|\\s*/).map(r=>this.parseRange(r.trim())).filter(r=>r.length),!this.set.length)throw new TypeError(`Invalid SemVer Range: ${e}`);this.format()}format(){return this.range=this.set.map(e=>e.join(\" \").trim()).join(\"||\").trim(),this.range}toString(){return this.range}parseRange(e){let{loose:n}=this.options;e=e.trim();let r=n?es_g[f.HYPHENRANGELOOSE]:es_g[f.HYPHENRANGE];e=e.replace(r,cn(this.options.includePrerelease)),d(\"hyphen replace\",e),e=e.replace(es_g[f.COMPARATORTRIM],Vt),d(\"comparator trim\",e,es_g[f.COMPARATORTRIM]),e=(e=(e=e.replace(es_g[f.TILDETRIM],zt)).replace(es_g[f.CARETTRIM],Yt)).split(/\\s+/).join(\" \");let s=n?es_g[f.COMPARATORLOOSE]:es_g[f.COMPARATOR];return e.split(\" \").map(o=>Zt(o,this.options)).join(\" \").split(/\\s+/).map(o=>an(o,this.options)).filter(this.options.loose?o=>!!o.match(s):()=>!0).map(o=>new O(o,this.options))}intersects(e,n){if(!(e instanceof N))throw new TypeError(\"a Range is required\");return this.set.some(r=>ke(r,n)&&e.set.some(s=>ke(s,n)&&r.every(o=>s.every(a=>o.intersects(a,n)))))}test(e){if(!e)return!1;if(typeof e==\"string\")try{e=new h(e,this.options)}catch(n){return!1}for(let n=0;n<this.set.length;n++)if(ln(this.set[n],e,this.options))return!0;return!1}},{re:es_g,t:f,comparatorTrimReplace:Vt,tildeTrimReplace:zt,caretTrimReplace:Yt}=K,ke=(t,e)=>{let n=!0,r=t.slice(),s=r.pop();for(;n&&r.length;)n=r.every(o=>s.intersects(o,e)),s=r.pop();return n},Zt=(t,e)=>(d(\"comp\",t,e),t=tn(t,e),d(\"caret\",t),t=Qt(t,e),d(\"tildes\",t),t=rn(t,e),d(\"xrange\",t),t=on(t,e),d(\"stars\",t),t),R=t=>!t||t.toLowerCase()===\"x\"||t===\"*\",Qt=(t,e)=>t.trim().split(/\\s+/).map(n=>en(n,e)).join(\" \"),en=(t,e)=>{let n=e.loose?es_g[f.TILDELOOSE]:es_g[f.TILDE];return t.replace(n,(r,s,o,a,i)=>{let c;return d(\"tilde\",t,r,s,o,a,i),R(s)?c=\"\":R(o)?c=`>=${s}.0.0 <${+s+1}.0.0-0`:R(a)?c=`>=${s}.${o}.0 <${s}.${+o+1}.0-0`:i?(d(\"replaceTilde pr\",i),c=`>=${s}.${o}.${a}-${i} <${s}.${+o+1}.0-0`):c=`>=${s}.${o}.${a} <${s}.${+o+1}.0-0`,d(\"tilde return\",c),c})},tn=(t,e)=>t.trim().split(/\\s+/).map(n=>nn(n,e)).join(\" \"),nn=(t,e)=>{d(\"caret\",t,e);let n=e.loose?es_g[f.CARETLOOSE]:es_g[f.CARET],r=e.includePrerelease?\"-0\":\"\";return t.replace(n,(s,o,a,i,c)=>{let p;return d(\"caret\",t,s,o,a,i,c),R(o)?p=\"\":R(a)?p=`>=${o}.0.0${r} <${+o+1}.0.0-0`:R(i)?p=o===\"0\"?`>=${o}.${a}.0${r} <${o}.${+a+1}.0-0`:`>=${o}.${a}.0${r} <${+o+1}.0.0-0`:c?(d(\"replaceCaret pr\",c),p=o===\"0\"?a===\"0\"?`>=${o}.${a}.${i}-${c} <${o}.${a}.${+i+1}-0`:`>=${o}.${a}.${i}-${c} <${o}.${+a+1}.0-0`:`>=${o}.${a}.${i}-${c} <${+o+1}.0.0-0`):(d(\"no pr\"),p=o===\"0\"?a===\"0\"?`>=${o}.${a}.${i}${r} <${o}.${a}.${+i+1}-0`:`>=${o}.${a}.${i}${r} <${o}.${+a+1}.0-0`:`>=${o}.${a}.${i} <${+o+1}.0.0-0`),d(\"caret return\",p),p})},rn=(t,e)=>(d(\"replaceXRanges\",t,e),t.split(/\\s+/).map(n=>sn(n,e)).join(\" \")),sn=(t,e)=>{t=t.trim();let n=e.loose?es_g[f.XRANGELOOSE]:es_g[f.XRANGE];return t.replace(n,(r,s,o,a,i,c)=>{d(\"xRange\",t,r,s,o,a,i,c);let p=R(o),l=p||R(a),u=l||R(i),v=u;return s===\"=\"&&v&&(s=\"\"),c=e.includePrerelease?\"-0\":\"\",p?r=s===\">\"||s===\"<\"?\"<0.0.0-0\":\"*\":s&&v?(l&&(a=0),i=0,s===\">\"?(s=\">=\",l?(o=+o+1,a=0,i=0):(a=+a+1,i=0)):s===\"<=\"&&(s=\"<\",l?o=+o+1:a=+a+1),s===\"<\"&&(c=\"-0\"),r=`${s+o}.${a}.${i}${c}`):l?r=`>=${o}.0.0${c} <${+o+1}.0.0-0`:u&&(r=`>=${o}.${a}.0${c} <${o}.${+a+1}.0-0`),d(\"xRange return\",r),r})},on=(t,e)=>(d(\"replaceStars\",t,e),t.trim().replace(es_g[f.STAR],\"\")),an=(t,e)=>(d(\"replaceGTE0\",t,e),t.trim().replace(es_g[e.includePrerelease?f.GTE0PRE:f.GTE0],\"\")),cn=t=>(e,n,r,s,o,a,i,c,p,l,u,v,M)=>`${n=R(r)?\"\":R(s)?`>=${r}.0.0${t?\"-0\":\"\"}`:R(o)?`>=${r}.${s}.0${t?\"-0\":\"\"}`:a?`>=${n}`:`>=${n}${t?\"-0\":\"\"}`} ${c=R(p)?\"\":R(l)?`<${+p+1}.0.0-0`:R(u)?`<${p}.${+l+1}.0-0`:v?`<=${p}.${l}.${u}-${v}`:t?`<${p}.${l}.${+u+1}-0`:`<=${c}`}`.trim(),ln=(t,e,n)=>{for(let r=0;r<t.length;r++)if(!t[r].test(e))return!1;if(e.prerelease.length&&!n.includePrerelease){for(let r=0;r<t.length;r++)if(d(t[r].semver),t[r].semver!==O.ANY&&t[r].semver.prerelease.length>0){let s=t[r].semver;if(s.major===e.major&&s.minor===e.minor&&s.patch===e.patch)return!0}return!1}return!0},Je=(t,e,n)=>{try{e=new N(e,n)}catch(r){return!1}return e.test(t)};var{MAX_LENGTH:pn}=me,{re:qe,t:Ge}=K,un=(t,e)=>{if(e&&typeof e==\"object\"||(e={loose:!!e,includePrerelease:!1}),t instanceof h)return t;if(typeof t!=\"string\"||t.length>pn||!(e.loose?qe[Ge.LOOSE]:qe[Ge.FULL]).test(t))return null;try{return new h(t,e)}catch(n){return null}},dn=un,{re:Z,t:Q}=K,Ue=(t,e)=>{if(t instanceof h)return t;if(typeof t==\"number\"&&(t=String(t)),typeof t!=\"string\")return null;let n=null;if((e=e||{}).rtl){let r;for(;(r=Z[Q.COERCERTL].exec(t))&&(!n||n.index+n[0].length!==t.length);)n&&r.index+r[0].length===n.index+n[0].length||(n=r),Z[Q.COERCERTL].lastIndex=r.index+r[1].length+r[2].length;Z[Q.COERCERTL].lastIndex=-1}else n=t.match(Z[Q.COERCE]);return n===null?null:dn(`${n[2]}.${n[3]||\"0\"}.${n[4]||\"0\"}`,e)};function mn(t){return String.fromCharCode(parseInt(t.slice(1),16))}function En(t){return`%${`00${t.charCodeAt(0).toString(16)}`.slice(-2)}`}function hn(t){return btoa(encodeURIComponent(t).replace(/%[0-9A-F]{2}/g,mn))}function fn(t){return decodeURIComponent(Array.from(atob(t),En).join(\"\"))}function ee(t){return hn(JSON.stringify(t))}function Ke(t){return JSON.parse(fn(t))}function b(t){return typeof t==\"undefined\"}function Rn(t){return t===null}function te(t){return Rn(t)||b(t)}function tr(t){return te(t)?!1:!b(t.jsonrpc)&&!b(t.id)&&!b(t.method)&&!b(t.params)}function Fe(t){return te(t)?!1:!b(t.jsonrpc)&&!b(t.id)&&(!b(t.result)||!b(t.error))}function nr(t){return te(t)?!1:typeof t==\"string\"&&Object.values(u).includes(t)}function je(t){return te(t)?!1:typeof t==\"number\"&&Object.values(p).includes(t)}function ne(t){if(!t)return!0;for(let e in t)if(Object.hasOwnProperty.call(t,e))return!1;return!0}var es_m={};function Tn(t,e){return Object.assign(es_m,e),t}var We={\"magic-sdk\":\"magic-sdk\",\"@magic-sdk/react-native-bare\":\"magic-sdk-rn-bare\",\"@magic-sdk/react-native-expo\":\"magic-sdk-rn-expo\"};var $=class extends Error{constructor(e,n){super(`Magic SDK Error: [${e}] ${n}`);this.code=e;this.rawMessage=n;this.__proto__=Error;Object.setPrototypeOf(this,$.prototype)}},w=class extends Error{constructor(e){super();this.__proto__=Error;let n=Number(e==null?void 0:e.code);this.rawMessage=(e==null?void 0:e.message)||\"Internal error\",this.code=je(n)?n:p.InternalError,this.message=`Magic RPC Error: [${this.code}] ${this.rawMessage}`,Object.setPrototypeOf(this,w.prototype)}},W=class{constructor(e,n){this.code=e;this.rawMessage=n;this.message=`Magic SDK Warning: [${e}] ${n}`}log(){console.warn(this.message)}},X=class extends Error{constructor(e,n,r,s){super(`Magic Extension Error (${e.name}): [${n}] ${r}`);this.code=n;this.rawMessage=r;this.data=s;this.__proto__=Error;Object.setPrototypeOf(this,X.prototype)}},se=class{constructor(e,n,r){this.code=n;this.rawMessage=r;this.message=`Magic Extension Warning (${e.name}): [${n}] ${r}`}log(){console.warn(this.message)}};function Xe(){return new $(a.MissingApiKey,\"Please provide an API key that you acquired from the Magic developer dashboard.\")}function lr(){return new $(a.ModalNotReady,\"Modal is not ready.\")}function Be(){return new $(a.MalformedResponse,\"Response from the Magic iframe is malformed.\")}function He(t){return new $(a.ExtensionNotInitialized,`Extensions must be initialized with a Magic SDK instance before \\`Extension.${t}\\` can be accessed. Do not invoke \\`Extension.${t}\\` inside an extension constructor.`)}function Ve(t){let e=`Some extensions are incompatible with \\`${es_m.sdkName}@${es_m.version}\\`:`;return t.filter(n=>typeof n.compat!=\"undefined\"&&n.compat!==null).forEach(n=>{let r=n.compat[es_m.sdkName];typeof r==\"string\"?e+=`\n  - Extension \\`${n.name}\\` supports version(s) \\`${r}\\``:r||(e+=`\n  - Extension \\`${n.name}\\` does not support ${es_m.platform} environments.`)}),new $(a.IncompatibleExtensions,e)}function ze(t){let e=n=>{let r=n+1,s=r%10,o=r%100;return s===1&&o!==11?`${r}st`:s===2&&o!==12?`${r}nd`:s===3&&o!==13?`${r}rd`:`${r}th`};return new $(a.InvalidArgument,`Invalid ${e(t.argument)} argument given to \\`${t.procedure}\\`.\n  Expected: \\`${t.expected}\\`\n  Received: \\`${t.received}\\``)}function pr(){return new W(m.DuplicateIframe,\"Duplicate iframes found.\")}function Ye(){return new W(m.SyncWeb3Method,\"Non-async web3 methods are deprecated in web3 > 1.0 and are not supported by the Magic web3 provider. Please use an async method instead.\")}function Ze(){return new W(m.ReactNativeEndpointConfiguration,`CUSTOM DOMAINS ARE NOT SUPPORTED WHEN USING MAGIC SDK WITH REACT NATIVE! The \\`endpoint\\` parameter SHOULD NOT be provided. The Magic \\`<iframe>\\` is automatically wrapped by a WebView pointed at \\`${es_m.defaultEndpoint}\\`. Changing this default behavior will lead to unexpected results and potentially security-threatening bugs.`)}function ur(t){let{method:e,removalVersions:n,useInstead:r}=t,s=n[es_m.sdkName],o=r?` Use \\`${r}\\` instead.`:\"\",a=`\\`${e}\\` will be removed from \\`${es_m.sdkName}\\` in version \\`${s}\\`.${o}`;return new W(m.DeprecationNotice,a)}function*xn(){let t=0;for(;;)t<Number.MAX_SAFE_INTEGER?yield++t:t=0}var In=xn();function he(){return In.next().value}var Qe=Symbol(\"Payload pre-processed by Magic SDK\");function et(t){return Object.defineProperty(t,Qe,{value:!0,enumerable:!1}),t}function Pn(t){return!!t[Qe]}function C(t){var e,n,r;return Pn(t)||(t.jsonrpc=(e=t.jsonrpc)!=null?e:\"2.0\",t.id=he(),t.method=(n=t.method)!=null?n:\"noop\",t.params=(r=t.params)!=null?r:[],et(t)),t}function E(t,e=[]){return et({params:e,method:t,jsonrpc:\"2.0\",id:he()})}var _=class{constructor(e){e instanceof _?(this._jsonrpc=e.payload.jsonrpc,this._id=e.payload.id,this._result=e.payload.result,this._error=e.payload.error):Fe(e)?(this._jsonrpc=e.jsonrpc,this._id=e.id,this._result=e.result,this._error=e.error):(this._jsonrpc=e.jsonrpc,this._id=e.id,this._result=void 0,this._error=void 0)}applyError(e){return this._error=e,this}applyResult(e){return this._result=e,this}get hasError(){return typeof this._error!=\"undefined\"&&this._error!==null}get hasResult(){return typeof this._result!=\"undefined\"}get payload(){return{jsonrpc:this._jsonrpc,id:this._id,result:this._result,error:this._error}}};var rt=wt(nt()),st=class extends rt.default{};function ie(){let t=new st;return{emitter:t,createChainingEmitterMethod:(r,s)=>(...o)=>(t[r].apply(t,o),s),createBoundEmitterMethod:r=>(...s)=>t[r].apply(t,s)}}var ot=Symbol(\"isPromiEvent\");function it(t){return!!t[ot]}function ae(t){let e=ge(t),{createBoundEmitterMethod:n,createChainingEmitterMethod:r}=ie(),s=Symbol(\"Promise.then\"),o=Symbol(\"Promise.catch\"),a=Symbol(\"Promise.finally\"),i=(l,u)=>(...v)=>{let M=u[l].apply(u,v);return c(M)},c=l=>Object.assign(l,{[ot]:!0,[s]:l[s]||l.then,[o]:l[o]||l.catch,[a]:l[a]||l.finally,then:i(s,l),catch:i(o,l),finally:i(a,l),on:r(\"on\",l),once:r(\"once\",l),addListener:r(\"addListener\",l),off:r(\"off\",l),removeListener:r(\"removeListener\",l),removeAllListeners:r(\"removeAllListeners\",l),emit:n(\"emit\"),eventNames:n(\"eventNames\"),listeners:n(\"listeners\"),listenerCount:n(\"listenerCount\")}),p=c(e.then(l=>(p.emit(\"done\",l),p.emit(\"settled\"),l),l=>{throw p.emit(\"error\",l),p.emit(\"settled\"),l}));return p}function ge(t){return new Promise((e,n)=>{let r=t(e,n);Promise.resolve(r).catch(n)})}var P=class{constructor(e){this.sdk=e}get overlay(){return this.sdk.overlay}request(e){let n=this.overlay.post(o.MAGIC_HANDLE_REQUEST,C(e)),r=ae((o,a)=>{n.then(i=>{if(s(),i.hasError)a(new w(i.payload.error));else if(i.hasResult)o(i.payload.result);else throw Be()}).catch(i=>{s(),a(i)})}),s=this.overlay.on(g.MAGIC_HANDLE_EVENT,o=>{var i;let{response:a}=o.data;if(a.id===e.id&&((i=a.result)==null?void 0:i.event)){let{event:c,params:p=[]}=a.result;r.emit(c,...p)}});return r}createIntermediaryEvent(e,n){return s=>{let o=E(u.IntermediaryEvent,[{payloadId:n,eventType:e,args:s}]);this.request(o)}}};var ye=class extends P{loginWithMagicLink(e){let{email:n,showUI:r=!0,redirectURI:s}=e,o=E(this.sdk.testMode?u.LoginWithMagicLinkTestMode:u.LoginWithMagicLink,[{email:n,showUI:r,redirectURI:s}]);return this.request(o)}loginWithSMS(e){let{phoneNumber:n}=e,r=E(this.sdk.testMode?u.LoginWithSmsTestMode:u.LoginWithSms,[{phoneNumber:n,showUI:!0}]);return this.request(r)}loginWithEmailOTP(e){let{email:n}=e,r=E(this.sdk.testMode?u.LoginWithEmailOTPTestMode:u.LoginWithEmailOTP,[{email:n,showUI:!0}]);return this.request(r)}loginWithCredential(e){let n=e!=null?e:\"\";if(!e&&es_m.platform===\"web\"){n=window.location.search;let s=window.location.origin+window.location.pathname;window.history.replaceState(null,\"\",s)}let r=E(this.sdk.testMode?u.LoginWithCredentialTestMode:u.LoginWithCredential,[n]);return this.request(r)}};var H={};Mt(H,{clear:()=>An,getItem:()=>D,iterate:()=>Cn,key:()=>Sn,keys:()=>On,length:()=>Ln,removeItem:()=>le,setItem:()=>q});var ce;function L(t){return(...e)=>I(this,null,function*(){return ce||(ce=yield es_m.configureStorage()),yield ce.ready(),ce[t](...e)})}var D=L(\"getItem\"),q=L(\"setItem\"),le=L(\"removeItem\"),An=L(\"clear\"),Ln=L(\"length\"),Sn=L(\"key\"),On=L(\"keys\"),Cn=L(\"iterate\");function at(){let t=window.crypto.getRandomValues(new Uint8Array(16));t[6]=t[6]&15|64,t[8]=t[8]&191|128;let e=\"\";return e+=t[0].toString(16),e+=t[1].toString(16),e+=t[2].toString(16),e+=t[3].toString(16),e+=\"-\",e+=t[4].toString(16),e+=t[5].toString(16),e+=\"-\",e+=t[6].toString(16),e+=t[7].toString(16),e+=\"-\",e+=t[8].toString(16),e+=t[9].toString(16),e+=\"-\",e+=t[10].toString(16),e+=t[11].toString(16),e+=t[12].toString(16),e+=t[13].toString(16),e+=t[14].toString(16),e+=t[15].toString(16),e}var Re=\"STORE_KEY_PRIVATE_KEY\",pe=\"STORE_KEY_PUBLIC_JWK\",Te=\"ECDSA\",ct=\"P-256\",_n={name:Te,namedCurve:ct},Dn={name:Te,namedCurve:ct};function lt(){le(pe),le(Re)}function pt(){return I(this,null,function*(){let t=yield kn();if(!t){console.info(\"unable to create public key or webcrypto is unsupported\");return}let{subtle:e}=window.crypto,n=yield D(Re);if(!n||!e){console.info(\"unable to find private key or webcrypto unsupported\");return}let r={iat:Math.floor(new Date().getTime()/1e3),jti:at()},s={typ:\"dpop+jwt\",alg:\"ES256\",jwk:t},o={protected:ut(JSON.stringify(s)),claims:ut(JSON.stringify(r))},a=Gn(`${o.protected}.${o.claims}`),i={name:Te,hash:{name:\"SHA-256\"}},c=Kn(new Uint8Array(yield e.sign(i,n,a)));return`${o.protected}.${o.claims}.${c}`})}function kn(){return I(this,null,function*(){if(!qn()){console.info(\"webcrypto is not supported\");return}return(yield D(pe))||(yield Jn()),D(pe)})}function Jn(){return I(this,null,function*(){let t=null,{subtle:e}=window.crypto,n=yield e.generateKey(_n,!0,[\"sign\"]),r=yield e.exportKey(\"jwk\",n.privateKey);t=yield e.exportKey(\"jwk\",n.publicKey);let s=yield e.importKey(\"jwk\",r,Dn,!1,[\"sign\"]);yield q(Re,s),yield q(pe,t)})}function qn(){let t=typeof window!=\"undefined\"&&!!window.crypto,e=t&&!!window.crypto.subtle;return t&&e}function ut(t){return dt(Un(t))}function Gn(t){return new TextEncoder().encode(t)}function dt(t){return btoa(t).replace(/\\+/g,\"-\").replace(/\\//g,\"_\").replace(/=+/g,\"\")}function Un(t){return encodeURIComponent(t).replace(/%([0-9A-F]{2})/g,(n,r)=>String.fromCharCode(parseInt(r,16)))}function Kn(t){let e=\"\";return t.forEach(n=>{e+=String.fromCharCode(n)}),dt(e)}var ve=class extends P{getIdToken(e){let n=E(this.sdk.testMode?u.GetIdTokenTestMode:u.GetIdToken,[e]);return this.request(n)}generateIdToken(e){let n=E(this.sdk.testMode?u.GenerateIdTokenTestMode:u.GenerateIdToken,[e]);return this.request(n)}getMetadata(){let e=E(this.sdk.testMode?u.GetMetadataTestMode:u.GetMetadata);return this.request(e)}updateEmail(e){let{email:n,showUI:r=!0}=e,s=E(this.sdk.testMode?u.UpdateEmailTestMode:u.UpdateEmail,[{email:n,showUI:r}]);return this.request(s)}isLoggedIn(){let e=E(this.sdk.testMode?u.IsLoggedInTestMode:u.IsLoggedIn);return this.request(e)}logout(){lt();let e=E(this.sdk.testMode?u.LogoutTestMode:u.Logout);return this.request(e)}showSettings(){let e=E(this.sdk.testMode?u.UserSettingsTestMode:u.UserSettings);return this.request(e)}};var{createBoundEmitterMethod:ue,createChainingEmitterMethod:G}=ie(),xe=class extends P{constructor(){super(...arguments);this.isMagic=!0;this.on=G(\"on\",this);this.once=G(\"once\",this);this.addListener=G(\"addListener\",this);this.off=G(\"off\",this);this.removeListener=G(\"removeListener\",this);this.removeAllListeners=G(\"removeAllListeners\",this);this.emit=ue(\"emit\");this.eventNames=ue(\"eventNames\");this.listeners=ue(\"listeners\");this.listenerCount=ue(\"listenerCount\")}sendAsync(e,n){if(!n)throw ze({procedure:\"Magic.rpcProvider.sendAsync\",argument:1,expected:\"function\",received:n===null?\"null\":typeof n});if(Array.isArray(e))this.overlay.post(o.MAGIC_HANDLE_REQUEST,e.map(r=>{let s=C(r);return this.prefixPayloadMethodForTestMode(s),s})).then(r=>{n(null,r.map(s=>we(z({},s.payload),{error:s.hasError?new w(s.payload.error):null})))});else{let r=C(e);this.prefixPayloadMethodForTestMode(r),this.overlay.post(o.MAGIC_HANDLE_REQUEST,r).then(s=>{n(s.hasError?new w(s.payload.error):null,s.payload)})}}send(e,n){if(typeof e==\"string\"){let s=E(e,Array.isArray(n)?n:[]);return this.request(s)}if(Array.isArray(e)||!!n){this.sendAsync(e,n);return}let r=Ye();return r.log(),new _(e).applyError({code:-32603,message:r.rawMessage}).payload}enable(){let e=E(\"eth_accounts\");return this.request(e)}request(e){return this.prefixPayloadMethodForTestMode(e),super.request(e)}prefixPayloadMethodForTestMode(e){let n=\"testMode/eth/\";this.sdk.testMode&&(e.method=`${n}${e.method}`)}};function Ie(t,e){return e?new URL(t,e):new URL(t)}var Et=[\"request\",\"overlay\",\"sdk\"];function Fn(t){let e=Object.getPrototypeOf(t),n=[e];for(;e!==P.prototype;)e=Object.getPrototypeOf(e),n.push(e);return n}var Pe=class extends P{constructor(){super(void 0);this.__sdk_access_field_descriptors__=new Map;this.__is_initialized__=!1;this.utils={createPromiEvent:ae,isPromiEvent:it,encodeJSON:ee,decodeJSON:Ke,createJsonRpcRequestPayload:E,standardizeJsonRpcRequestPayload:C,storage:H};let e=[this,...Fn(this)];Et.forEach(n=>{let r=e.map(i=>Object.getOwnPropertyDescriptor(i,n)),s=r.findIndex(i=>!!i),o=s>0,a=r[s];a&&(this.__sdk_access_field_descriptors__.set(n,{descriptor:a,isPrototypeField:o}),Object.defineProperty(this,n,{configurable:!0,get:()=>{throw He(n)}}))})}init(e){this.__is_initialized__||(Et.forEach(n=>{if(this.__sdk_access_field_descriptors__.has(n)){let{descriptor:r,isPrototypeField:s}=this.__sdk_access_field_descriptors__.get(n);s?delete this[n]:Object.defineProperty(this,n,r)}}),this.sdk=e,this.__is_initialized__=!0)}createDeprecationWarning(e){let{method:n,removalVersion:r,useInstead:s}=e,o=s?` Use \\`${s}\\` instead.`:\"\",a=`\\`${n}\\` will be removed from this Extension in version \\`${r}\\`.${o}`;return new se(this,\"DEPRECATION_NOTICE\",a)}createWarning(e,n){return new se(this,e,n)}createError(e,n,r){return new X(this,e,n,r)}},ht=class extends Pe{},S=class extends Pe{};S.Internal=ht,S.Anonymous=\"anonymous extension\";function ft(t){return t.compat&&t.compat[es_m.sdkName]!=null?typeof t.compat[es_m.sdkName]==\"string\"?Je(Ue(es_m.version),t.compat[es_m.sdkName]):!!t.compat[es_m.sdkName]:!0}function jn(t){var s;let e=(s=t==null?void 0:t.extensions)!=null?s:[],n={},r=[];if(Array.isArray(e)?e.forEach(o=>{ft(o)?(o.init(this),(o.name||o.name!==S.Anonymous)&&(this[o.name]=o),o instanceof S.Internal&&(ne(o.config)||(n[o.name]=o.config))):r.push(o)}):Object.keys(e).forEach(o=>{if(ft(e[o])){e[o].init(this);let a=e[o];this[o]=a,a instanceof S.Internal&&(ne(a.config)||(n[e[o].name]=a.config))}else r.push(e[o])}),r.length)throw Ve(r);return n}var V=class{constructor(e,n){this.apiKey=e;var a;if(!e)throw Xe();es_m.platform===\"react-native\"&&(n==null?void 0:n.endpoint)&&Ze().log();let{defaultEndpoint:r,version:s}=es_m;this.testMode=!!(n==null?void 0:n.testMode),this.endpoint=Ie((a=n==null?void 0:n.endpoint)!=null?a:r).origin,this.auth=new ye(this),this.user=new ve(this),this.rpcProvider=new xe(this);let o=jn.call(this,n);this.parameters=ee(z({API_KEY:this.apiKey,DOMAIN_ORIGIN:window.location?window.location.origin:\"\",ETH_NETWORK:n==null?void 0:n.network,host:Ie(this.endpoint).host,sdk:We[es_m.sdkName],version:s,ext:ne(o)?void 0:o,locale:(n==null?void 0:n.locale)||\"en_US\"},es_m.bundleId?{bundleId:es_m.bundleId}:{}))}get overlay(){if(!V.__overlays__.has(this.parameters)){let e=new es_m.ViewController(this.endpoint,this.parameters);e.init(),V.__overlays__.set(this.parameters,e)}return V.__overlays__.get(this.parameters)}preload(){return I(this,null,function*(){yield this.overlay.ready})}},be=V;be.__overlays__=new Map;function Wn(t,e){return e&&Array.isArray(t)?t.find(n=>n.id===e):t}function Xn(t,e){var s;let n=(s=e.data.response)==null?void 0:s.id,r=Wn(t,n);if(n&&r){let o=new _(r).applyResult(e.data.response.result).applyError(e.data.response.error);return{id:n,response:o}}return{}}function Bn(t,e){return I(this,null,function*(){let n=yield D(\"rt\"),r;if(es_m.platform===\"web\")try{r=yield pt()}catch(s){console.error(\"webcrypto error\",s)}return r?n?{msgType:t,payload:e,jwt:r,rt:n}:{msgType:t,payload:e,jwt:r}:{msgType:t,payload:e}})}function Hn(t){return I(this,null,function*(){!t.data.rt||(yield q(\"rt\",t.data.rt))})}var gt=class{constructor(e,n){this.endpoint=e;this.parameters=n;this.messageHandlers=new Set;this.ready=this.waitForReady(),this.listen()}post(e,n){return I(this,null,function*(){return ge(r=>I(this,null,function*(){yield this.ready;let s=[],o=Array.isArray(n)?n.map(p=>p.id):[],a=yield Bn(`${e}-${this.parameters}`,n);yield this._post(a);let i=p=>l=>{let{id:u,response:v}=Xn(n,l);Hn(l),u&&v&&Array.isArray(n)&&o.includes(u)?(s.push(v),s.length===n.length&&(p(),r(s))):u&&v&&!Array.isArray(n)&&u===n.id&&(p(),r(v))},c=this.on(g.MAGIC_HANDLE_RESPONSE,i(()=>c()))}))})}on(e,n){let r=n.bind(window),s=o=>{o.data.msgType===`${e}-${this.parameters}`&&r(o)};return this.messageHandlers.add(s),()=>this.messageHandlers.delete(s)}waitForReady(){return new Promise(e=>{this.on(g.MAGIC_OVERLAY_READY,()=>e())})}listen(){this.on(g.MAGIC_HIDE_OVERLAY,()=>{this.hideOverlay()}),this.on(g.MAGIC_SHOW_OVERLAY,()=>{this.showOverlay()})}};\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/@magic-sdk/commons/dist/es/index.mjs\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/magic-sdk/dist/es/index.mjs\nvar Zr=Object.create;var es_De=Object.defineProperty;var qr=Object.getOwnPropertyDescriptor;var kr=Object.getOwnPropertyNames;var es_et=Object.getPrototypeOf,es_rt=Object.prototype.hasOwnProperty;var tt=p=>es_De(p,\"__esModule\",{value:!0});var es_ve=(p=>typeof require!=\"undefined\"?require:typeof Proxy!=\"undefined\"?new Proxy(p,{get:(g,O)=>(typeof require!=\"undefined\"?require:g)[O]}):p)(function(p){if(typeof require!=\"undefined\")return require.apply(this,arguments);throw new Error('Dynamic require of \"'+p+'\" is not supported')});var es_$e=(p,g)=>()=>(g||p((g={exports:{}}).exports,g),g.exports);var es_nt=(p,g,O,L)=>{if(g&&typeof g==\"object\"||typeof g==\"function\")for(let M of kr(g))!es_rt.call(p,M)&&(O||M!==\"default\")&&es_De(p,M,{get:()=>g[M],enumerable:!(L=qr(g,M))||L.enumerable});return p},es_Ze=(p,g)=>es_nt(tt(es_De(p!=null?Zr(es_et(p)):{},\"default\",!g&&p&&p.__esModule?{get:()=>p.default,enumerable:!0}:{value:p,enumerable:!0})),p);var es_se=(p,g,O)=>new Promise((L,M)=>{var Q=S=>{try{Y(O.next(S))}catch(P){M(P)}},C=S=>{try{Y(O.throw(S))}catch(P){M(P)}},Y=S=>S.done?L(S.value):Promise.resolve(S.value).then(Q,C);Y((O=O.apply(p,g)).next())});var es_ke=es_$e((qe,Ne)=>{(function(p){if(typeof qe==\"object\"&&typeof Ne!=\"undefined\")Ne.exports=p();else if(typeof define==\"function\"&&define.amd)define([],p);else{var g;typeof window!=\"undefined\"?g=window:typeof global!=\"undefined\"?g=global:typeof self!=\"undefined\"?g=self:g=this,g.localforage=p()}})(function(){var p,g,O;return function L(M,Q,C){function Y(K,Z){if(!Q[K]){if(!M[K]){var m=typeof es_ve==\"function\"&&es_ve;if(!Z&&m)return m(K,!0);if(S)return S(K,!0);var w=new Error(\"Cannot find module '\"+K+\"'\");throw w.code=\"MODULE_NOT_FOUND\",w}var N=Q[K]={exports:{}};M[K][0].call(N.exports,function(z){var q=M[K][1][z];return Y(q||z)},N,N.exports,L,M,Q,C)}return Q[K].exports}for(var S=typeof es_ve==\"function\"&&es_ve,P=0;P<C.length;P++)Y(C[P]);return Y}({1:[function(L,M,Q){(function(C){\"use strict\";var Y=C.MutationObserver||C.WebKitMutationObserver,S;if(Y){var P=0,K=new Y(z),Z=C.document.createTextNode(\"\");K.observe(Z,{characterData:!0}),S=function(){Z.data=P=++P%2}}else if(!C.setImmediate&&typeof C.MessageChannel!=\"undefined\"){var m=new C.MessageChannel;m.port1.onmessage=z,S=function(){m.port2.postMessage(0)}}else\"document\"in C&&\"onreadystatechange\"in C.document.createElement(\"script\")?S=function(){var F=C.document.createElement(\"script\");F.onreadystatechange=function(){z(),F.onreadystatechange=null,F.parentNode.removeChild(F),F=null},C.document.documentElement.appendChild(F)}:S=function(){setTimeout(z,0)};var w,N=[];function z(){w=!0;for(var F,k,U=N.length;U;){for(k=N,N=[],F=-1;++F<U;)k[F]();U=N.length}w=!1}M.exports=q;function q(F){N.push(F)===1&&!w&&S()}}).call(this,typeof global!=\"undefined\"?global:typeof self!=\"undefined\"?self:typeof window!=\"undefined\"?window:{})},{}],2:[function(L,M,Q){\"use strict\";var C=L(1);function Y(){}var S={},P=[\"REJECTED\"],K=[\"FULFILLED\"],Z=[\"PENDING\"];M.exports=m;function m(h){if(typeof h!=\"function\")throw new TypeError(\"resolver must be a function\");this.state=Z,this.queue=[],this.outcome=void 0,h!==Y&&q(this,h)}m.prototype.catch=function(h){return this.then(null,h)},m.prototype.then=function(h,R){if(typeof h!=\"function\"&&this.state===K||typeof R!=\"function\"&&this.state===P)return this;var I=new this.constructor(Y);if(this.state!==Z){var B=this.state===K?h:R;N(I,B,this.outcome)}else this.queue.push(new w(I,h,R));return I};function w(h,R,I){this.promise=h,typeof R==\"function\"&&(this.onFulfilled=R,this.callFulfilled=this.otherCallFulfilled),typeof I==\"function\"&&(this.onRejected=I,this.callRejected=this.otherCallRejected)}w.prototype.callFulfilled=function(h){S.resolve(this.promise,h)},w.prototype.otherCallFulfilled=function(h){N(this.promise,this.onFulfilled,h)},w.prototype.callRejected=function(h){S.reject(this.promise,h)},w.prototype.otherCallRejected=function(h){N(this.promise,this.onRejected,h)};function N(h,R,I){C(function(){var B;try{B=R(I)}catch(H){return S.reject(h,H)}B===h?S.reject(h,new TypeError(\"Cannot resolve promise with itself\")):S.resolve(h,B)})}S.resolve=function(h,R){var I=F(z,R);if(I.status===\"error\")return S.reject(h,I.value);var B=I.value;if(B)q(h,B);else{h.state=K,h.outcome=R;for(var H=-1,j=h.queue.length;++H<j;)h.queue[H].callFulfilled(R)}return h},S.reject=function(h,R){h.state=P,h.outcome=R;for(var I=-1,B=h.queue.length;++I<B;)h.queue[I].callRejected(R);return h};function z(h){var R=h&&h.then;if(h&&(typeof h==\"object\"||typeof h==\"function\")&&typeof R==\"function\")return function(){R.apply(h,arguments)}}function q(h,R){var I=!1;function B($){I||(I=!0,S.reject(h,$))}function H($){I||(I=!0,S.resolve(h,$))}function j(){R(H,B)}var J=F(j);J.status===\"error\"&&B(J.value)}function F(h,R){var I={};try{I.value=h(R),I.status=\"success\"}catch(B){I.status=\"error\",I.value=B}return I}m.resolve=k;function k(h){return h instanceof this?h:S.resolve(new this(Y),h)}m.reject=U;function U(h){var R=new this(Y);return S.reject(R,h)}m.all=ae;function ae(h){var R=this;if(Object.prototype.toString.call(h)!==\"[object Array]\")return this.reject(new TypeError(\"must be an array\"));var I=h.length,B=!1;if(!I)return this.resolve([]);for(var H=new Array(I),j=0,J=-1,$=new this(Y);++J<I;)ee(h[J],J);return $;function ee(oe,a){R.resolve(oe).then(s,function(v){B||(B=!0,S.reject($,v))});function s(v){H[a]=v,++j===I&&!B&&(B=!0,S.resolve($,H))}}}m.race=re;function re(h){var R=this;if(Object.prototype.toString.call(h)!==\"[object Array]\")return this.reject(new TypeError(\"must be an array\"));var I=h.length,B=!1;if(!I)return this.resolve([]);for(var H=-1,j=new this(Y);++H<I;)J(h[H]);return j;function J($){R.resolve($).then(function(ee){B||(B=!0,S.resolve(j,ee))},function(ee){B||(B=!0,S.reject(j,ee))})}}},{\"1\":1}],3:[function(L,M,Q){(function(C){\"use strict\";typeof C.Promise!=\"function\"&&(C.Promise=L(2))}).call(this,typeof global!=\"undefined\"?global:typeof self!=\"undefined\"?self:typeof window!=\"undefined\"?window:{})},{\"2\":2}],4:[function(L,M,Q){\"use strict\";var C=typeof Symbol==\"function\"&&typeof Symbol.iterator==\"symbol\"?function(e){return typeof e}:function(e){return e&&typeof Symbol==\"function\"&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e};function Y(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}function S(){try{if(typeof indexedDB!=\"undefined\")return indexedDB;if(typeof webkitIndexedDB!=\"undefined\")return webkitIndexedDB;if(typeof mozIndexedDB!=\"undefined\")return mozIndexedDB;if(typeof OIndexedDB!=\"undefined\")return OIndexedDB;if(typeof msIndexedDB!=\"undefined\")return msIndexedDB}catch{return}}var P=S();function K(){try{if(!P||!P.open)return!1;var e=typeof openDatabase!=\"undefined\"&&/(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent)&&!/Chrome/.test(navigator.userAgent)&&!/BlackBerry/.test(navigator.platform),t=typeof fetch==\"function\"&&fetch.toString().indexOf(\"[native code\")!==-1;return(!e||t)&&typeof indexedDB!=\"undefined\"&&typeof IDBKeyRange!=\"undefined\"}catch{return!1}}function Z(e,t){e=e||[],t=t||{};try{return new Blob(e,t)}catch(n){if(n.name!==\"TypeError\")throw n;for(var r=typeof BlobBuilder!=\"undefined\"?BlobBuilder:typeof MSBlobBuilder!=\"undefined\"?MSBlobBuilder:typeof MozBlobBuilder!=\"undefined\"?MozBlobBuilder:WebKitBlobBuilder,o=new r,i=0;i<e.length;i+=1)o.append(e[i]);return o.getBlob(t.type)}}typeof Promise==\"undefined\"&&L(3);var m=Promise;function w(e,t){t&&e.then(function(r){t(null,r)},function(r){t(r)})}function N(e,t,r){typeof t==\"function\"&&e.then(t),typeof r==\"function\"&&e.catch(r)}function z(e){return typeof e!=\"string\"&&(console.warn(e+\" used as a key, but it is not a string.\"),e=String(e)),e}function q(){if(arguments.length&&typeof arguments[arguments.length-1]==\"function\")return arguments[arguments.length-1]}var F=\"local-forage-detect-blob-support\",k=void 0,U={},ae=Object.prototype.toString,re=\"readonly\",h=\"readwrite\";function R(e){for(var t=e.length,r=new ArrayBuffer(t),o=new Uint8Array(r),i=0;i<t;i++)o[i]=e.charCodeAt(i);return r}function I(e){return new m(function(t){var r=e.transaction(F,h),o=Z([\"\"]);r.objectStore(F).put(o,\"key\"),r.onabort=function(i){i.preventDefault(),i.stopPropagation(),t(!1)},r.oncomplete=function(){var i=navigator.userAgent.match(/Chrome\\/(\\d+)/),n=navigator.userAgent.match(/Edge\\//);t(n||!i||parseInt(i[1],10)>=43)}}).catch(function(){return!1})}function B(e){return typeof k==\"boolean\"?m.resolve(k):I(e).then(function(t){return k=t,k})}function H(e){var t=U[e.name],r={};r.promise=new m(function(o,i){r.resolve=o,r.reject=i}),t.deferredOperations.push(r),t.dbReady?t.dbReady=t.dbReady.then(function(){return r.promise}):t.dbReady=r.promise}function j(e){var t=U[e.name],r=t.deferredOperations.pop();if(r)return r.resolve(),r.promise}function J(e,t){var r=U[e.name],o=r.deferredOperations.pop();if(o)return o.reject(t),o.promise}function $(e,t){return new m(function(r,o){if(U[e.name]=U[e.name]||G(),e.db)if(t)H(e),e.db.close();else return r(e.db);var i=[e.name];t&&i.push(e.version);var n=P.open.apply(P,i);t&&(n.onupgradeneeded=function(f){var u=n.result;try{u.createObjectStore(e.storeName),f.oldVersion<=1&&u.createObjectStore(F)}catch(c){if(c.name===\"ConstraintError\")console.warn('The database \"'+e.name+'\" has been upgraded from version '+f.oldVersion+\" to version \"+f.newVersion+', but the storage \"'+e.storeName+'\" already exists.');else throw c}}),n.onerror=function(f){f.preventDefault(),o(n.error)},n.onsuccess=function(){r(n.result),j(e)}})}function ee(e){return $(e,!1)}function oe(e){return $(e,!0)}function a(e,t){if(!e.db)return!0;var r=!e.db.objectStoreNames.contains(e.storeName),o=e.version<e.db.version,i=e.version>e.db.version;if(o&&(e.version!==t&&console.warn('The database \"'+e.name+`\" can't be downgraded from version `+e.db.version+\" to version \"+e.version+\".\"),e.version=e.db.version),i||r){if(r){var n=e.db.version+1;n>e.version&&(e.version=n)}return!0}return!1}function s(e){return new m(function(t,r){var o=new FileReader;o.onerror=r,o.onloadend=function(i){var n=btoa(i.target.result||\"\");t({__local_forage_encoded_blob:!0,data:n,type:e.type})},o.readAsBinaryString(e)})}function v(e){var t=R(atob(e.data));return Z([t],{type:e.type})}function b(e){return e&&e.__local_forage_encoded_blob}function _(e){var t=this,r=t._initReady().then(function(){var o=U[t._dbInfo.name];if(o&&o.dbReady)return o.dbReady});return N(r,e,e),r}function E(e){H(e);for(var t=U[e.name],r=t.forages,o=0;o<r.length;o++){var i=r[o];i._dbInfo.db&&(i._dbInfo.db.close(),i._dbInfo.db=null)}return e.db=null,ee(e).then(function(n){return e.db=n,a(e)?oe(e):n}).then(function(n){e.db=t.db=n;for(var f=0;f<r.length;f++)r[f]._dbInfo.db=n}).catch(function(n){throw J(e,n),n})}function D(e,t,r,o){o===void 0&&(o=1);try{var i=e.db.transaction(e.storeName,t);r(null,i)}catch(n){if(o>0&&(!e.db||n.name===\"InvalidStateError\"||n.name===\"NotFoundError\"))return m.resolve().then(function(){if(!e.db||n.name===\"NotFoundError\"&&!e.db.objectStoreNames.contains(e.storeName)&&e.version<=e.db.version)return e.db&&(e.version=e.db.version+1),oe(e)}).then(function(){return E(e).then(function(){D(e,t,r,o-1)})}).catch(r);r(n)}}function G(){return{forages:[],db:null,dbReady:null,deferredOperations:[]}}function fe(e){var t=this,r={db:null};if(e)for(var o in e)r[o]=e[o];var i=U[r.name];i||(i=G(),U[r.name]=i),i.forages.push(t),t._initReady||(t._initReady=t.ready,t.ready=_);var n=[];function f(){return m.resolve()}for(var u=0;u<i.forages.length;u++){var c=i.forages[u];c!==t&&n.push(c._initReady().catch(f))}var l=i.forages.slice(0);return m.all(n).then(function(){return r.db=i.db,ee(r)}).then(function(d){return r.db=d,a(r,t._defaultConfig.version)?oe(r):d}).then(function(d){r.db=i.db=d,t._dbInfo=r;for(var y=0;y<l.length;y++){var A=l[y];A!==t&&(A._dbInfo.db=r.db,A._dbInfo.version=r.version)}})}function ie(e,t){var r=this;e=z(e);var o=new m(function(i,n){r.ready().then(function(){D(r._dbInfo,re,function(f,u){if(f)return n(f);try{var c=u.objectStore(r._dbInfo.storeName),l=c.get(e);l.onsuccess=function(){var d=l.result;d===void 0&&(d=null),b(d)&&(d=v(d)),i(d)},l.onerror=function(){n(l.error)}}catch(d){n(d)}})}).catch(n)});return w(o,t),o}function ce(e,t){var r=this,o=new m(function(i,n){r.ready().then(function(){D(r._dbInfo,re,function(f,u){if(f)return n(f);try{var c=u.objectStore(r._dbInfo.storeName),l=c.openCursor(),d=1;l.onsuccess=function(){var y=l.result;if(y){var A=y.value;b(A)&&(A=v(A));var T=e(A,y.key,d++);T!==void 0?i(T):y.continue()}else i()},l.onerror=function(){n(l.error)}}catch(y){n(y)}})}).catch(n)});return w(o,t),o}function nr(e,t,r){var o=this;e=z(e);var i=new m(function(n,f){var u;o.ready().then(function(){return u=o._dbInfo,ae.call(t)===\"[object Blob]\"?B(u.db).then(function(c){return c?t:s(t)}):t}).then(function(c){D(o._dbInfo,h,function(l,d){if(l)return f(l);try{var y=d.objectStore(o._dbInfo.storeName);c===null&&(c=void 0);var A=y.put(c,e);d.oncomplete=function(){c===void 0&&(c=null),n(c)},d.onabort=d.onerror=function(){var T=A.error?A.error:A.transaction.error;f(T)}}catch(T){f(T)}})}).catch(f)});return w(i,r),i}function or(e,t){var r=this;e=z(e);var o=new m(function(i,n){r.ready().then(function(){D(r._dbInfo,h,function(f,u){if(f)return n(f);try{var c=u.objectStore(r._dbInfo.storeName),l=c.delete(e);u.oncomplete=function(){i()},u.onerror=function(){n(l.error)},u.onabort=function(){var d=l.error?l.error:l.transaction.error;n(d)}}catch(d){n(d)}})}).catch(n)});return w(o,t),o}function ir(e){var t=this,r=new m(function(o,i){t.ready().then(function(){D(t._dbInfo,h,function(n,f){if(n)return i(n);try{var u=f.objectStore(t._dbInfo.storeName),c=u.clear();f.oncomplete=function(){o()},f.onabort=f.onerror=function(){var l=c.error?c.error:c.transaction.error;i(l)}}catch(l){i(l)}})}).catch(i)});return w(r,e),r}function ar(e){var t=this,r=new m(function(o,i){t.ready().then(function(){D(t._dbInfo,re,function(n,f){if(n)return i(n);try{var u=f.objectStore(t._dbInfo.storeName),c=u.count();c.onsuccess=function(){o(c.result)},c.onerror=function(){i(c.error)}}catch(l){i(l)}})}).catch(i)});return w(r,e),r}function fr(e,t){var r=this,o=new m(function(i,n){if(e<0){i(null);return}r.ready().then(function(){D(r._dbInfo,re,function(f,u){if(f)return n(f);try{var c=u.objectStore(r._dbInfo.storeName),l=!1,d=c.openKeyCursor();d.onsuccess=function(){var y=d.result;if(!y){i(null);return}e===0||l?i(y.key):(l=!0,y.advance(e))},d.onerror=function(){n(d.error)}}catch(y){n(y)}})}).catch(n)});return w(o,t),o}function ur(e){var t=this,r=new m(function(o,i){t.ready().then(function(){D(t._dbInfo,re,function(n,f){if(n)return i(n);try{var u=f.objectStore(t._dbInfo.storeName),c=u.openKeyCursor(),l=[];c.onsuccess=function(){var d=c.result;if(!d){o(l);return}l.push(d.key),d.continue()},c.onerror=function(){i(c.error)}}catch(d){i(d)}})}).catch(i)});return w(r,e),r}function sr(e,t){t=q.apply(this,arguments);var r=this.config();e=typeof e!=\"function\"&&e||{},e.name||(e.name=e.name||r.name,e.storeName=e.storeName||r.storeName);var o=this,i;if(!e.name)i=m.reject(\"Invalid arguments\");else{var n=e.name===r.name&&o._dbInfo.db,f=n?m.resolve(o._dbInfo.db):ee(e).then(function(u){var c=U[e.name],l=c.forages;c.db=u;for(var d=0;d<l.length;d++)l[d]._dbInfo.db=u;return u});e.storeName?i=f.then(function(u){if(!!u.objectStoreNames.contains(e.storeName)){var c=u.version+1;H(e);var l=U[e.name],d=l.forages;u.close();for(var y=0;y<d.length;y++){var A=d[y];A._dbInfo.db=null,A._dbInfo.version=c}var T=new m(function(x,V){var W=P.open(e.name,c);W.onerror=function(X){var de=W.result;de.close(),V(X)},W.onupgradeneeded=function(){var X=W.result;X.deleteObjectStore(e.storeName)},W.onsuccess=function(){var X=W.result;X.close(),x(X)}});return T.then(function(x){l.db=x;for(var V=0;V<d.length;V++){var W=d[V];W._dbInfo.db=x,j(W._dbInfo)}}).catch(function(x){throw(J(e,x)||m.resolve()).catch(function(){}),x})}}):i=f.then(function(u){H(e);var c=U[e.name],l=c.forages;u.close();for(var d=0;d<l.length;d++){var y=l[d];y._dbInfo.db=null}var A=new m(function(T,x){var V=P.deleteDatabase(e.name);V.onerror=V.onblocked=function(W){var X=V.result;X&&X.close(),x(W)},V.onsuccess=function(){var W=V.result;W&&W.close(),T(W)}});return A.then(function(T){c.db=T;for(var x=0;x<l.length;x++){var V=l[x];j(V._dbInfo)}}).catch(function(T){throw(J(e,T)||m.resolve()).catch(function(){}),T})})}return w(i,t),i}var cr={_driver:\"asyncStorage\",_initStorage:fe,_support:K(),iterate:ce,getItem:ie,setItem:nr,removeItem:or,clear:ir,length:ar,key:fr,keys:ur,dropInstance:sr};function lr(){return typeof openDatabase==\"function\"}var te=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",dr=\"~~local_forage_type~\",xe=/^~~local_forage_type~([^~]+)~/,he=\"__lfsc__:\",ge=he.length,be=\"arbf\",_e=\"blob\",Oe=\"si08\",Ce=\"ui08\",Le=\"uic8\",Pe=\"si16\",Me=\"si32\",Fe=\"ur16\",Ue=\"ui32\",Ye=\"fl32\",ze=\"fl64\",We=ge+be.length,Ke=Object.prototype.toString;function He(e){var t=e.length*.75,r=e.length,o,i=0,n,f,u,c;e[e.length-1]===\"=\"&&(t--,e[e.length-2]===\"=\"&&t--);var l=new ArrayBuffer(t),d=new Uint8Array(l);for(o=0;o<r;o+=4)n=te.indexOf(e[o]),f=te.indexOf(e[o+1]),u=te.indexOf(e[o+2]),c=te.indexOf(e[o+3]),d[i++]=n<<2|f>>4,d[i++]=(f&15)<<4|u>>2,d[i++]=(u&3)<<6|c&63;return l}function we(e){var t=new Uint8Array(e),r=\"\",o;for(o=0;o<t.length;o+=3)r+=te[t[o]>>2],r+=te[(t[o]&3)<<4|t[o+1]>>4],r+=te[(t[o+1]&15)<<2|t[o+2]>>6],r+=te[t[o+2]&63];return t.length%3===2?r=r.substring(0,r.length-1)+\"=\":t.length%3===1&&(r=r.substring(0,r.length-2)+\"==\"),r}function vr(e,t){var r=\"\";if(e&&(r=Ke.call(e)),e&&(r===\"[object ArrayBuffer]\"||e.buffer&&Ke.call(e.buffer)===\"[object ArrayBuffer]\")){var o,i=he;e instanceof ArrayBuffer?(o=e,i+=be):(o=e.buffer,r===\"[object Int8Array]\"?i+=Oe:r===\"[object Uint8Array]\"?i+=Ce:r===\"[object Uint8ClampedArray]\"?i+=Le:r===\"[object Int16Array]\"?i+=Pe:r===\"[object Uint16Array]\"?i+=Fe:r===\"[object Int32Array]\"?i+=Me:r===\"[object Uint32Array]\"?i+=Ue:r===\"[object Float32Array]\"?i+=Ye:r===\"[object Float64Array]\"?i+=ze:t(new Error(\"Failed to get type for BinaryArray\"))),t(i+we(o))}else if(r===\"[object Blob]\"){var n=new FileReader;n.onload=function(){var f=dr+e.type+\"~\"+we(this.result);t(he+_e+f)},n.readAsArrayBuffer(e)}else try{t(JSON.stringify(e))}catch(f){console.error(\"Couldn't convert value into a JSON string: \",e),t(null,f)}}function hr(e){if(e.substring(0,ge)!==he)return JSON.parse(e);var t=e.substring(We),r=e.substring(ge,We),o;if(r===_e&&xe.test(t)){var i=t.match(xe);o=i[1],t=t.substring(i[0].length)}var n=He(t);switch(r){case be:return n;case _e:return Z([n],{type:o});case Oe:return new Int8Array(n);case Ce:return new Uint8Array(n);case Le:return new Uint8ClampedArray(n);case Pe:return new Int16Array(n);case Fe:return new Uint16Array(n);case Me:return new Int32Array(n);case Ue:return new Uint32Array(n);case Ye:return new Float32Array(n);case ze:return new Float64Array(n);default:throw new Error(\"Unkown type: \"+r)}}var Ee={serialize:vr,deserialize:hr,stringToBuffer:He,bufferToString:we};function Ve(e,t,r,o){e.executeSql(\"CREATE TABLE IF NOT EXISTS \"+t.storeName+\" (id INTEGER PRIMARY KEY, key unique, value)\",[],r,o)}function mr(e){var t=this,r={db:null};if(e)for(var o in e)r[o]=typeof e[o]!=\"string\"?e[o].toString():e[o];var i=new m(function(n,f){try{r.db=openDatabase(r.name,String(r.version),r.description,r.size)}catch(u){return f(u)}r.db.transaction(function(u){Ve(u,r,function(){t._dbInfo=r,n()},function(c,l){f(l)})},f)});return r.serializer=Ee,i}function ne(e,t,r,o,i,n){e.executeSql(r,o,i,function(f,u){u.code===u.SYNTAX_ERR?f.executeSql(\"SELECT name FROM sqlite_master WHERE type='table' AND name = ?\",[t.storeName],function(c,l){l.rows.length?n(c,u):Ve(c,t,function(){c.executeSql(r,o,i,n)},n)},n):n(f,u)},n)}function yr(e,t){var r=this;e=z(e);var o=new m(function(i,n){r.ready().then(function(){var f=r._dbInfo;f.db.transaction(function(u){ne(u,f,\"SELECT * FROM \"+f.storeName+\" WHERE key = ? LIMIT 1\",[e],function(c,l){var d=l.rows.length?l.rows.item(0).value:null;d&&(d=f.serializer.deserialize(d)),i(d)},function(c,l){n(l)})})}).catch(n)});return w(o,t),o}function pr(e,t){var r=this,o=new m(function(i,n){r.ready().then(function(){var f=r._dbInfo;f.db.transaction(function(u){ne(u,f,\"SELECT * FROM \"+f.storeName,[],function(c,l){for(var d=l.rows,y=d.length,A=0;A<y;A++){var T=d.item(A),x=T.value;if(x&&(x=f.serializer.deserialize(x)),x=e(x,T.key,A+1),x!==void 0){i(x);return}}i()},function(c,l){n(l)})})}).catch(n)});return w(o,t),o}function Ge(e,t,r,o){var i=this;e=z(e);var n=new m(function(f,u){i.ready().then(function(){t===void 0&&(t=null);var c=t,l=i._dbInfo;l.serializer.serialize(t,function(d,y){y?u(y):l.db.transaction(function(A){ne(A,l,\"INSERT OR REPLACE INTO \"+l.storeName+\" (key, value) VALUES (?, ?)\",[e,d],function(){f(c)},function(T,x){u(x)})},function(A){if(A.code===A.QUOTA_ERR){if(o>0){f(Ge.apply(i,[e,c,r,o-1]));return}u(A)}})})}).catch(u)});return w(n,r),n}function gr(e,t,r){return Ge.apply(this,[e,t,r,1])}function br(e,t){var r=this;e=z(e);var o=new m(function(i,n){r.ready().then(function(){var f=r._dbInfo;f.db.transaction(function(u){ne(u,f,\"DELETE FROM \"+f.storeName+\" WHERE key = ?\",[e],function(){i()},function(c,l){n(l)})})}).catch(n)});return w(o,t),o}function _r(e){var t=this,r=new m(function(o,i){t.ready().then(function(){var n=t._dbInfo;n.db.transaction(function(f){ne(f,n,\"DELETE FROM \"+n.storeName,[],function(){o()},function(u,c){i(c)})})}).catch(i)});return w(r,e),r}function wr(e){var t=this,r=new m(function(o,i){t.ready().then(function(){var n=t._dbInfo;n.db.transaction(function(f){ne(f,n,\"SELECT COUNT(key) as c FROM \"+n.storeName,[],function(u,c){var l=c.rows.item(0).c;o(l)},function(u,c){i(c)})})}).catch(i)});return w(r,e),r}function Er(e,t){var r=this,o=new m(function(i,n){r.ready().then(function(){var f=r._dbInfo;f.db.transaction(function(u){ne(u,f,\"SELECT key FROM \"+f.storeName+\" WHERE id = ? LIMIT 1\",[e+1],function(c,l){var d=l.rows.length?l.rows.item(0).key:null;i(d)},function(c,l){n(l)})})}).catch(n)});return w(o,t),o}function Ir(e){var t=this,r=new m(function(o,i){t.ready().then(function(){var n=t._dbInfo;n.db.transaction(function(f){ne(f,n,\"SELECT key FROM \"+n.storeName,[],function(u,c){for(var l=[],d=0;d<c.rows.length;d++)l.push(c.rows.item(d).key);o(l)},function(u,c){i(c)})})}).catch(i)});return w(r,e),r}function Sr(e){return new m(function(t,r){e.transaction(function(o){o.executeSql(\"SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'\",[],function(i,n){for(var f=[],u=0;u<n.rows.length;u++)f.push(n.rows.item(u).name);t({db:e,storeNames:f})},function(i,n){r(n)})},function(o){r(o)})})}function Ar(e,t){t=q.apply(this,arguments);var r=this.config();e=typeof e!=\"function\"&&e||{},e.name||(e.name=e.name||r.name,e.storeName=e.storeName||r.storeName);var o=this,i;return e.name?i=new m(function(n){var f;e.name===r.name?f=o._dbInfo.db:f=openDatabase(e.name,\"\",\"\",0),e.storeName?n({db:f,storeNames:[e.storeName]}):n(Sr(f))}).then(function(n){return new m(function(f,u){n.db.transaction(function(c){function l(T){return new m(function(x,V){c.executeSql(\"DROP TABLE IF EXISTS \"+T,[],function(){x()},function(W,X){V(X)})})}for(var d=[],y=0,A=n.storeNames.length;y<A;y++)d.push(l(n.storeNames[y]));m.all(d).then(function(){f()}).catch(function(T){u(T)})},function(c){u(c)})})}):i=m.reject(\"Invalid arguments\"),w(i,t),i}var Rr={_driver:\"webSQLStorage\",_initStorage:mr,_support:lr(),iterate:pr,getItem:yr,setItem:gr,removeItem:br,clear:_r,length:wr,key:Er,keys:Ir,dropInstance:Ar};function Dr(){try{return typeof localStorage!=\"undefined\"&&\"setItem\"in localStorage&&!!localStorage.setItem}catch{return!1}}function je(e,t){var r=e.name+\"/\";return e.storeName!==t.storeName&&(r+=e.storeName+\"/\"),r}function Nr(){var e=\"_localforage_support_test\";try{return localStorage.setItem(e,!0),localStorage.removeItem(e),!1}catch{return!0}}function Tr(){return!Nr()||localStorage.length>0}function Br(e){var t=this,r={};if(e)for(var o in e)r[o]=e[o];return r.keyPrefix=je(e,t._defaultConfig),Tr()?(t._dbInfo=r,r.serializer=Ee,m.resolve()):m.reject()}function xr(e){var t=this,r=t.ready().then(function(){for(var o=t._dbInfo.keyPrefix,i=localStorage.length-1;i>=0;i--){var n=localStorage.key(i);n.indexOf(o)===0&&localStorage.removeItem(n)}});return w(r,e),r}function Or(e,t){var r=this;e=z(e);var o=r.ready().then(function(){var i=r._dbInfo,n=localStorage.getItem(i.keyPrefix+e);return n&&(n=i.serializer.deserialize(n)),n});return w(o,t),o}function Cr(e,t){var r=this,o=r.ready().then(function(){for(var i=r._dbInfo,n=i.keyPrefix,f=n.length,u=localStorage.length,c=1,l=0;l<u;l++){var d=localStorage.key(l);if(d.indexOf(n)===0){var y=localStorage.getItem(d);if(y&&(y=i.serializer.deserialize(y)),y=e(y,d.substring(f),c++),y!==void 0)return y}}});return w(o,t),o}function Lr(e,t){var r=this,o=r.ready().then(function(){var i=r._dbInfo,n;try{n=localStorage.key(e)}catch{n=null}return n&&(n=n.substring(i.keyPrefix.length)),n});return w(o,t),o}function Pr(e){var t=this,r=t.ready().then(function(){for(var o=t._dbInfo,i=localStorage.length,n=[],f=0;f<i;f++){var u=localStorage.key(f);u.indexOf(o.keyPrefix)===0&&n.push(u.substring(o.keyPrefix.length))}return n});return w(r,e),r}function Mr(e){var t=this,r=t.keys().then(function(o){return o.length});return w(r,e),r}function Fr(e,t){var r=this;e=z(e);var o=r.ready().then(function(){var i=r._dbInfo;localStorage.removeItem(i.keyPrefix+e)});return w(o,t),o}function Ur(e,t,r){var o=this;e=z(e);var i=o.ready().then(function(){t===void 0&&(t=null);var n=t;return new m(function(f,u){var c=o._dbInfo;c.serializer.serialize(t,function(l,d){if(d)u(d);else try{localStorage.setItem(c.keyPrefix+e,l),f(n)}catch(y){(y.name===\"QuotaExceededError\"||y.name===\"NS_ERROR_DOM_QUOTA_REACHED\")&&u(y),u(y)}})})});return w(i,r),i}function Yr(e,t){if(t=q.apply(this,arguments),e=typeof e!=\"function\"&&e||{},!e.name){var r=this.config();e.name=e.name||r.name,e.storeName=e.storeName||r.storeName}var o=this,i;return e.name?i=new m(function(n){e.storeName?n(je(e,o._defaultConfig)):n(e.name+\"/\")}).then(function(n){for(var f=localStorage.length-1;f>=0;f--){var u=localStorage.key(f);u.indexOf(n)===0&&localStorage.removeItem(u)}}):i=m.reject(\"Invalid arguments\"),w(i,t),i}var zr={_driver:\"localStorageWrapper\",_initStorage:Br,_support:Dr(),iterate:Cr,getItem:Or,setItem:Ur,removeItem:Fr,clear:xr,length:Mr,key:Lr,keys:Pr,dropInstance:Yr},Wr=function(t,r){return t===r||typeof t==\"number\"&&typeof r==\"number\"&&isNaN(t)&&isNaN(r)},Kr=function(t,r){for(var o=t.length,i=0;i<o;){if(Wr(t[i],r))return!0;i++}return!1},Xe=Array.isArray||function(e){return Object.prototype.toString.call(e)===\"[object Array]\"},le={},Qe={},ue={INDEXEDDB:cr,WEBSQL:Rr,LOCALSTORAGE:zr},Hr=[ue.INDEXEDDB._driver,ue.WEBSQL._driver,ue.LOCALSTORAGE._driver],me=[\"dropInstance\"],Ie=[\"clear\",\"getItem\",\"iterate\",\"key\",\"keys\",\"length\",\"removeItem\",\"setItem\"].concat(me),Vr={description:\"\",driver:Hr.slice(),name:\"localforage\",size:4980736,storeName:\"keyvaluepairs\",version:1};function Gr(e,t){e[t]=function(){var r=arguments;return e.ready().then(function(){return e[t].apply(e,r)})}}function Se(){for(var e=1;e<arguments.length;e++){var t=arguments[e];if(t)for(var r in t)t.hasOwnProperty(r)&&(Xe(t[r])?arguments[0][r]=t[r].slice():arguments[0][r]=t[r])}return arguments[0]}var jr=function(){function e(t){Y(this,e);for(var r in ue)if(ue.hasOwnProperty(r)){var o=ue[r],i=o._driver;this[r]=i,le[i]||this.defineDriver(o)}this._defaultConfig=Se({},Vr),this._config=Se({},this._defaultConfig,t),this._driverSet=null,this._initDriver=null,this._ready=!1,this._dbInfo=null,this._wrapLibraryMethodsWithReady(),this.setDriver(this._config.driver).catch(function(){})}return e.prototype.config=function(r){if((typeof r==\"undefined\"?\"undefined\":C(r))===\"object\"){if(this._ready)return new Error(\"Can't call config() after localforage has been used.\");for(var o in r){if(o===\"storeName\"&&(r[o]=r[o].replace(/\\W/g,\"_\")),o===\"version\"&&typeof r[o]!=\"number\")return new Error(\"Database version must be a number.\");this._config[o]=r[o]}return\"driver\"in r&&r.driver?this.setDriver(this._config.driver):!0}else return typeof r==\"string\"?this._config[r]:this._config},e.prototype.defineDriver=function(r,o,i){var n=new m(function(f,u){try{var c=r._driver,l=new Error(\"Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver\");if(!r._driver){u(l);return}for(var d=Ie.concat(\"_initStorage\"),y=0,A=d.length;y<A;y++){var T=d[y],x=!Kr(me,T);if((x||r[T])&&typeof r[T]!=\"function\"){u(l);return}}var V=function(){for(var de=function(Jr){return function(){var $r=new Error(\"Method \"+Jr+\" is not implemented by the current driver\"),Je=m.reject($r);return w(Je,arguments[arguments.length-1]),Je}},Ae=0,Qr=me.length;Ae<Qr;Ae++){var Re=me[Ae];r[Re]||(r[Re]=de(Re))}};V();var W=function(de){le[c]&&console.info(\"Redefining LocalForage driver: \"+c),le[c]=r,Qe[c]=de,f()};\"_support\"in r?r._support&&typeof r._support==\"function\"?r._support().then(W,u):W(!!r._support):W(!0)}catch(X){u(X)}});return N(n,o,i),n},e.prototype.driver=function(){return this._driver||null},e.prototype.getDriver=function(r,o,i){var n=le[r]?m.resolve(le[r]):m.reject(new Error(\"Driver not found.\"));return N(n,o,i),n},e.prototype.getSerializer=function(r){var o=m.resolve(Ee);return N(o,r),o},e.prototype.ready=function(r){var o=this,i=o._driverSet.then(function(){return o._ready===null&&(o._ready=o._initDriver()),o._ready});return N(i,r,r),i},e.prototype.setDriver=function(r,o,i){var n=this;Xe(r)||(r=[r]);var f=this._getSupportedDrivers(r);function u(){n._config.driver=n.driver()}function c(y){return n._extend(y),u(),n._ready=n._initStorage(n._config),n._ready}function l(y){return function(){var A=0;function T(){for(;A<y.length;){var x=y[A];return A++,n._dbInfo=null,n._ready=null,n.getDriver(x).then(c).catch(T)}u();var V=new Error(\"No available storage method found.\");return n._driverSet=m.reject(V),n._driverSet}return T()}}var d=this._driverSet!==null?this._driverSet.catch(function(){return m.resolve()}):m.resolve();return this._driverSet=d.then(function(){var y=f[0];return n._dbInfo=null,n._ready=null,n.getDriver(y).then(function(A){n._driver=A._driver,u(),n._wrapLibraryMethodsWithReady(),n._initDriver=l(f)})}).catch(function(){u();var y=new Error(\"No available storage method found.\");return n._driverSet=m.reject(y),n._driverSet}),N(this._driverSet,o,i),this._driverSet},e.prototype.supports=function(r){return!!Qe[r]},e.prototype._extend=function(r){Se(this,r)},e.prototype._getSupportedDrivers=function(r){for(var o=[],i=0,n=r.length;i<n;i++){var f=r[i];this.supports(f)&&o.push(f)}return o},e.prototype._wrapLibraryMethodsWithReady=function(){for(var r=0,o=Ie.length;r<o;r++)Gr(this,Ie[r])},e.prototype.createInstance=function(r){return new e(r)},e}(),Xr=new jr;M.exports=Xr},{\"3\":3}]},{},[4])(4)})});var rr=es_$e((ye,er)=>{(function(p,g){typeof ye==\"object\"&&typeof er!=\"undefined\"?g(ye):typeof define==\"function\"&&define.amd?define(\"localforage-driver-memory\",[\"exports\"],g):g(p.LocalforageDriverMemory={})})(typeof self!=\"undefined\"?self:ye,function(p){\"use strict\";var g=\"localforage-driver-memory\";function O(a){var s=typeof Symbol==\"function\"&&a[Symbol.iterator],v=0;return s?s.call(a):{next:function(){return a&&v>=a.length&&(a=void 0),{value:a&&a[v++],done:!a}}}}function L(a,s){a=a||[],s=s||{};try{return new Blob(a,s)}catch(E){if(E.name!==\"TypeError\")throw E;for(var v=typeof BlobBuilder!=\"undefined\"?BlobBuilder:typeof MSBlobBuilder!=\"undefined\"?MSBlobBuilder:typeof MozBlobBuilder!=\"undefined\"?MozBlobBuilder:WebKitBlobBuilder,b=new v,_=0;_<a.length;_+=1)b.append(a[_]);return b.getBlob(s.type)}}var M=/^~~local_forage_type~([^~]+)~/,Q=\"__lfsc__:\".length,C=Q+\"arbf\".length,Y=Object.prototype.toString;function S(a){var s=a.length*.75,v=a.length;a[a.length-1]===\"=\"&&(s--,a[a.length-2]===\"=\"&&s--);for(var b=new ArrayBuffer(s),_=new Uint8Array(b),E=0,D=0;E<v;E+=4){var G=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".indexOf(a[E]),fe=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".indexOf(a[E+1]),ie=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".indexOf(a[E+2]),ce=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".indexOf(a[E+3]);_[D++]=G<<2|fe>>4,_[D++]=(fe&15)<<4|ie>>2,_[D++]=(ie&3)<<6|ce&63}return b}function P(a){for(var s=new Uint8Array(a),v=\"\",b=0;b<s.length;b+=3)v+=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"[s[b]>>2],v+=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"[(s[b]&3)<<4|s[b+1]>>4],v+=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"[(s[b+1]&15)<<2|s[b+2]>>6],v+=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"[s[b+2]&63];return s.length%3===2?v=v.substring(0,v.length-1)+\"=\":s.length%3===1&&(v=v.substring(0,v.length-2)+\"==\"),v}function K(a,s){var v=\"\";if(a&&(v=Y.call(a)),a&&(v===\"[object ArrayBuffer]\"||a.buffer&&Y.call(a.buffer)===\"[object ArrayBuffer]\")){var b=void 0,_=\"__lfsc__:\";a instanceof ArrayBuffer?(b=a,_+=\"arbf\"):(b=a.buffer,v===\"[object Int8Array]\"?_+=\"si08\":v===\"[object Uint8Array]\"?_+=\"ui08\":v===\"[object Uint8ClampedArray]\"?_+=\"uic8\":v===\"[object Int16Array]\"?_+=\"si16\":v===\"[object Uint16Array]\"?_+=\"ur16\":v===\"[object Int32Array]\"?_+=\"si32\":v===\"[object Uint32Array]\"?_+=\"ui32\":v===\"[object Float32Array]\"?_+=\"fl32\":v===\"[object Float64Array]\"?_+=\"fl64\":s(new Error(\"Failed to get type for BinaryArray\"))),s(_+P(b))}else if(v===\"[object Blob]\"){var E=new FileReader;E.onload=function(){var D=\"~~local_forage_type~\"+a.type+\"~\"+P(this.result);s(\"__lfsc__:blob\"+D)},E.readAsArrayBuffer(a)}else try{s(JSON.stringify(a))}catch(D){console.error(\"Couldn't convert value into a JSON string: \",a),s(null,D)}}function Z(a){if(a.substring(0,Q)!==\"__lfsc__:\")return JSON.parse(a);var s=a.substring(C),v=a.substring(Q,C),b;if(v===\"blob\"&&M.test(s)){var _=s.match(M);b=_[1],s=s.substring(_[0].length)}var E=S(s);switch(v){case\"arbf\":return E;case\"blob\":return L([E],{type:b});case\"si08\":return new Int8Array(E);case\"ui08\":return new Uint8Array(E);case\"uic8\":return new Uint8ClampedArray(E);case\"si16\":return new Int16Array(E);case\"ur16\":return new Uint16Array(E);case\"si32\":return new Int32Array(E);case\"ui32\":return new Uint32Array(E);case\"fl32\":return new Float32Array(E);case\"fl64\":return new Float64Array(E);default:throw new Error(\"Unkown type: \"+v)}}function m(a){var s,v;if(a===null||typeof a!=\"object\"||\"isActiveClone\"in a)return a;var b=a instanceof Date?new Date(a):a.constructor();try{for(var _=O(Object.keys(a)),E=_.next();!E.done;E=_.next()){var D=E.value;Object.prototype.hasOwnProperty.call(a,D)&&(a.isActiveClone=null,b[D]=m(a[D]),delete a.isActiveClone)}}catch(G){s={error:G}}finally{try{E&&!E.done&&(v=_.return)&&v.call(_)}finally{if(s)throw s.error}}return b}function w(a,s){return(a.name||s.name)+\"/\"+(a.storeName||s.storeName)+\"/\"}function N(a,s){s&&a.then(function(v){s(null,v)},function(v){s(v)})}function z(){for(var a=[],s=0;s<arguments.length;s++)a[s]=arguments[s];if(arguments.length&&typeof arguments[arguments.length-1]==\"function\")return arguments[arguments.length-1]}function q(a,s){var v=this;if(s=z.apply(this,arguments),a=typeof a!=\"function\"&&a||{},!a.name){var b=this.config();a.name=a.name||b.name,a.storeName=a.storeName||b.storeName}var _;return a.name?_=new Promise(function(E){a.storeName?E(w(a,v._defaultConfig)):E(a.name+\"/\")}):_=Promise.reject(\"Invalid arguments\"),{promise:_,callback:s}}function F(a){return typeof a!=\"string\"&&(console.warn(a+\" used as a key, but it is not a string.\"),a=String(a)),a}var k={bufferToString:P,deserialize:Z,serialize:K,stringToBuffer:S},U={},ae=function(){function a(s){this.kp=s,this.data={}}return a.resolve=function(s){return U[s]||(U[s]=new a(s)),U[s]},a.prototype.clear=function(){this.data={}},a.prototype.drop=function(){this.clear(),delete U[this.kp]},a.prototype.get=function(s){return this.data[s]},a.prototype.key=function(s){return this.keys()[s]},a.prototype.keys=function(){return Object.keys(this.data)},a.prototype.rm=function(s){delete this.data[s]},a.prototype.set=function(s,v){this.data[s]=v},a}();function re(a){var s=a?m(a):{},v=w(s,this._defaultConfig),b=ae.resolve(v);return this._dbInfo=s,this._dbInfo.serializer=k,this._dbInfo.keyPrefix=v,this._dbInfo.mStore=b,Promise.resolve()}function h(a){var s=this,v=this.ready().then(function(){s._dbInfo.mStore.clear()});return N(v,a),v}function R(a,s){var v=q.apply(this,arguments),b=v.promise,_=v.callback,E=b.then(function(D){ae.resolve(D).drop()});return N(E,_),b}function I(a,s){var v=this;a=F(a);var b=this.ready().then(function(){var _=v._dbInfo.mStore.get(a);return _==null?null:v._dbInfo.serializer.deserialize(_)});return N(b,s),b}function B(a,s){var v=this,b=this.ready().then(function(){for(var _=v._dbInfo.mStore,E=_.keys(),D=0;D<E.length;D++){var G=_.get(E[D]);if(G&&(G=v._dbInfo.serializer.deserialize(G)),G=a(G,E[D],D+1),G!==void 0)return G}});return N(b,s),b}function H(a,s){var v=this,b=this.ready().then(function(){var _;try{_=v._dbInfo.mStore.key(a),_===void 0&&(_=null)}catch{_=null}return _});return N(b,s),b}function j(a){var s=this,v=this.ready().then(function(){return s._dbInfo.mStore.keys()});return N(v,a),v}function J(a){var s=this.keys().then(function(v){return v.length});return N(s,a),s}function $(a,s){var v=this;a=F(a);var b=this.ready().then(function(){v._dbInfo.mStore.rm(a)});return N(b,s),b}function ee(a,s,v){var b=this;a=F(a);var _=this.ready().then(function(){s===void 0&&(s=null);var E=s;return new Promise(function(D,G){b._dbInfo.serializer.serialize(s,function(fe,ie){if(ie)G(ie);else try{b._dbInfo.mStore.set(a,fe),D(E)}catch(ce){G(ce)}})})});return N(_,v),_}var oe=!0;p._support=oe,p._driver=g,p._initStorage=re,p.clear=h,p.dropInstance=R,p.getItem=I,p.iterate=B,p.key=H,p.keys=j,p.length=J,p.removeItem=$,p.setItem=ee,Object.defineProperty(p,\"__esModule\",{value:!0})})});var es_pe=es_Ze(es_ke()),es_Be=es_Ze(rr());var es_ft={display:\"none\",position:\"fixed\",top:\"0\",right:\"0\",width:\"100%\",height:\"100%\",borderRadius:\"0\",border:\"none\",zIndex:\"2147483647\"};function es_ut(p){for(let[g,O]of Object.entries(es_ft))p.style[g]=O}function es_st(p){let g=[].slice.call(document.querySelectorAll(\".magic-iframe\"));return Boolean(g.find(O=>O.src.includes(p)))}var es_Te=class extends gt{constructor(){super(...arguments);this.activeElement=null}init(){this.test=\"hello\",this.iframe=new Promise(g=>{let O=()=>{if(es_st(encodeURIComponent(this.parameters)))pr().log();else{let L=document.createElement(\"iframe\");L.classList.add(\"magic-iframe\"),L.dataset.magicIframeLabel=Ie(this.endpoint).host,L.title=\"Secure Modal\",L.src=Ie(`/send?params=${encodeURIComponent(this.parameters)}`,this.endpoint).href,es_ut(L),document.body.appendChild(L),g(L)}};[\"loaded\",\"interactive\",\"complete\"].includes(document.readyState)?O():window.addEventListener(\"load\",O,!1)}),window.addEventListener(\"message\",g=>{var O;if(g.origin===this.endpoint&&g.data&&g.data.msgType&&this.messageHandlers.size){g.data.response=(O=g.data.response)!=null?O:{};for(let L of this.messageHandlers.values())L(g)}})}showOverlay(){return es_se(this,null,function*(){let g=yield this.iframe;g.style.display=\"block\",this.activeElement=document.activeElement,g.focus()})}hideOverlay(){return es_se(this,null,function*(){var O;let g=yield this.iframe;g.style.display=\"none\",((O=this.activeElement)==null?void 0:O.focus)&&this.activeElement.focus(),this.activeElement=null})}_post(g){return es_se(this,null,function*(){let O=yield this.iframe;if(O&&O.contentWindow)O.contentWindow.postMessage(g,this.endpoint);else throw lr()})}};var es_t=Tn(be,{platform:\"web\",sdkName:\"magic-sdk\",version:\"11.0.0\",defaultEndpoint:\"https://auth.magic.link/\",ViewController:es_Te,configureStorage:()=>es_se(void 0,null,function*(){let p=es_pe.default.createInstance({name:\"MagicAuthLocalStorageDB\",storeName:\"MagicAuthLocalStorage\"});return yield p.defineDriver(es_Be),yield p.setDriver([es_pe.default.INDEXEDDB,es_pe.default.LOCALSTORAGE,es_Be._driver]),p})});\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/@magic-ext/connect/dist/es/index.mjs\nvar s=(t=>(t.GetWalletInfo=\"mc_get_wallet_info\",t.ShowWallet=\"mc_wallet\",t.RequestUserInfo=\"mc_request_user_info\",t.Disconnect=\"mc_disconnect\",t))(s||{});var es_l=class extends S.Internal{constructor(){super(...arguments);this.name=\"connect\";this.config={mc:!0}}getWalletInfo(){let e=this.utils.createJsonRpcRequestPayload(\"mc_get_wallet_info\");return this.request(e)}showWallet(){let e=this.utils.createJsonRpcRequestPayload(\"mc_wallet\");return this.request(e)}requestUserInfo(e){let n=this.utils.createJsonRpcRequestPayload(\"mc_request_user_info\",e?[e]:[]);return this.request(n)}disconnect(){let e=this.utils.createJsonRpcRequestPayload(\"mc_disconnect\");return this.request(e)}};\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./src/wallet/MagicWeb3Connector.ts\nvar MagicWeb3Connector_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n/* global window */\r\n\r\n\r\n\r\n\r\n\r\nclass MagicWeb3Connector extends wallet_AbstractWeb3Connector {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = 'MagicLink';\r\n        this.ether = null;\r\n        this.deactivate = () => MagicWeb3Connector_awaiter(this, void 0, void 0, function* () {\r\n            this.unsubscribeToEvents(this.provider);\r\n            if (this.magic) {\r\n                yield this.magic.connect.disconnect().catch((e) => {\r\n                    console.error('error to disconnect:', e);\r\n                });\r\n            }\r\n            this.account = null;\r\n            this.chainId = null;\r\n            this.provider = null;\r\n        });\r\n    }\r\n    activate() {\r\n        return MagicWeb3Connector_awaiter(this, void 0, void 0, function* () {\r\n            let networkInfo = App.Network;\r\n            let network = { rpcUrl: networkInfo.RpcUrl, chainId: networkInfo.ChainId };\r\n            this.magic = new es_t('pk_live_EA9DDC458FE21B24', {\r\n                extensions: [new es_l()],\r\n                network: network\r\n            });\r\n            this.ether = new Web3Provider(this.magic.rpcProvider);\r\n            let accounts = yield this.ether.listAccounts();\r\n            // Assign Constants\r\n            this.account = accounts[0];\r\n            this.provider = this.ether.provider;\r\n            this.chainId = networkInfo.ChainId;\r\n            this.subscribeToEvents(this.provider);\r\n            return {\r\n                provider: this.provider,\r\n                account: this.account,\r\n                chainId: this.chainId,\r\n                ether: this.ether,\r\n                magic: this.magic,\r\n                signer: this.ether.getSigner()\r\n            };\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/enums/WalletType.ts\nvar WalletType;\r\n(function (WalletType) {\r\n    WalletType[\"Metamask\"] = \"metamask\";\r\n    WalletType[\"WalletConnect\"] = \"walletConnect\";\r\n    WalletType[\"CoinbaseWallet\"] = \"coinbase\";\r\n    WalletType[\"Web3Auth\"] = \"web3Auth\";\r\n    WalletType[\"MagicLink\"] = \"MagicLink\";\r\n    WalletType[\"Unknown\"] = \"unknown\";\r\n})(WalletType || (WalletType = {}));\r\n\n;// CONCATENATED MODULE: ./src/wallet/ProviderInfo.ts\n\r\nclass ProviderInfo {\r\n    constructor(web3Provider) {\r\n        this.ProviderName = 'unknown';\r\n        this.WalletName = '';\r\n        this.WalletUrl = '';\r\n        this.WalletType = WalletType.Unknown;\r\n        this.UserAddress = '';\r\n        this.InternalWallet = false;\r\n        if (!web3Provider || !web3Provider.provider)\r\n            return;\r\n        this.web3Provider = web3Provider;\r\n        if (this.web3Provider.connection && this.web3Provider.connection.url == 'metamask') {\r\n            this.loadMetamask(web3Provider);\r\n        }\r\n        else if (this.web3Provider.provider.wc) {\r\n            this.loadWalletConnect(web3Provider);\r\n        }\r\n        else if (this.web3Provider.provider.isMagic) {\r\n            this.loadMagicConnect(web3Provider);\r\n        }\r\n        else {\r\n            this.loadCustom(web3Provider);\r\n        }\r\n        ProviderInfo.Instance = this;\r\n    }\r\n    loadMetamask(walletConnectionInfo) {\r\n        this.ProviderName = 'metamask';\r\n        this.WalletName = \"Metamask\";\r\n        this.WalletUrl = 'https://metamask.io/';\r\n        this.WalletType = WalletType.Metamask;\r\n        this.UserAddress = walletConnectionInfo.provider.selectedAddress;\r\n    }\r\n    loadWalletConnect(walletConnectionInfo) {\r\n        var _a;\r\n        let wc = walletConnectionInfo.provider.wc;\r\n        this.ProviderName = \"walletConnect\";\r\n        this.WalletName = wc._peerMeta.name;\r\n        this.WalletUrl = (_a = wc._peerMeta.url) !== null && _a !== void 0 ? _a : '';\r\n        this.WalletType = WalletType.WalletConnect;\r\n    }\r\n    loadCustom(provider) {\r\n        this.ProviderName = 'web3auth';\r\n        this.WalletName = 'Torus';\r\n        this.WalletUrl = 'https://app.tor.us/';\r\n        this.WalletType = WalletType.Web3Auth;\r\n    }\r\n    loadMagicConnect(walletConnectionInfo) {\r\n        this.ProviderName = 'MagicLink';\r\n        this.WalletName = 'MagicLink';\r\n        this.WalletType = WalletType.MagicLink;\r\n        this.InternalWallet = true;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/dto/User.ts\n\r\n\r\nclass User {\r\n    constructor(provider, address, chainId, ether) {\r\n        this._token = '';\r\n        this.isLoggedIn = false;\r\n        this.provider = provider;\r\n        this.address = address;\r\n        this.chainId = chainId;\r\n        this.ether = ether;\r\n        this.providerInfo = new ProviderInfo(provider);\r\n        this.email = '';\r\n        let cookieHelper = new CookieHelper();\r\n        this._token = cookieHelper.getCookieValue('token');\r\n    }\r\n    get token() {\r\n        return this._token;\r\n    }\r\n    set token(value) {\r\n        this._token = value;\r\n    }\r\n    setValidate(validate) {\r\n        let base64 = btoa(JSON.stringify(validate));\r\n        let cookieHelper = new CookieHelper();\r\n        cookieHelper.setCookie('validate', base64);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/bignumber.js/bignumber.mjs\n/*\r\n *      bignumber.js v9.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\nvar\r\n  isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n  mathceil = Math.ceil,\r\n  mathfloor = Math.floor,\r\n\r\n  bignumberError = '[BigNumber Error] ',\r\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n  BASE = 1e14,\r\n  LOG_BASE = 14,\r\n  bignumber_MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n  SQRT_BASE = 1e7,\r\n\r\n  // EDITABLE\r\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n  MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n/*\r\n * Create and return a BigNumber constructor.\r\n */\r\nfunction clone(configObject) {\r\n  var div, convertBase, parseNumeric,\r\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n    ONE = new BigNumber(1),\r\n\r\n\r\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n    // The default values below must be integers within the inclusive ranges stated.\r\n    // The values can also be changed at run-time using BigNumber.set.\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n    // The rounding mode used when rounding to the above decimal places, and when using\r\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n    // UP         0 Away from zero.\r\n    // DOWN       1 Towards zero.\r\n    // CEIL       2 Towards +Infinity.\r\n    // FLOOR      3 Towards -Infinity.\r\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n    MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    CRYPTO = false,                          // true or false\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN      1 The remainder has the same sign as the dividend.\r\n    //             This modulo mode is commonly known as 'truncated division' and is\r\n    //             equivalent to (a % n) in JavaScript.\r\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n    //             The remainder is always positive.\r\n    //\r\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n    // modes are commonly used for the modulus operation.\r\n    // Although the other rounding modes can also be used, they may not give useful results.\r\n    MODULO_MODE = 1,                         // 0 to 9\r\n\r\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n    POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n    // The format specification used by the BigNumber.prototype.toFormat method.\r\n    FORMAT = {\r\n      prefix: '',\r\n      groupSize: 3,\r\n      secondaryGroupSize: 0,\r\n      groupSeparator: ',',\r\n      decimalSeparator: '.',\r\n      fractionGroupSize: 0,\r\n      fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n      suffix: ''\r\n    },\r\n\r\n    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n    // '-', '.', whitespace, or repeated character.\r\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n    alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n  //------------------------------------------------------------------------------------------\r\n\r\n\r\n  // CONSTRUCTOR\r\n\r\n\r\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * v {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n   */\r\n  function BigNumber(v, b) {\r\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n      x = this;\r\n\r\n    // Enable constructor call without `new`.\r\n    if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n    if (b == null) {\r\n\r\n      if (v && v._isBigNumber === true) {\r\n        x.s = v.s;\r\n\r\n        if (!v.c || v.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n        } else if (v.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.c = v.c.slice();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n        // Use `1 / n` to handle minus zero also.\r\n        x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n        // Fast path for integers, where n < 2147483648 (2**31).\r\n        if (v === ~~v) {\r\n          for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n          if (e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else {\r\n            x.e = e;\r\n            x.c = [v];\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        str = String(v);\r\n      } else {\r\n\r\n        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n      // Exponential form?\r\n      if ((i = str.search(/e/i)) > 0) {\r\n\r\n        // Determine exponent.\r\n        if (e < 0) e = i;\r\n        e += +str.slice(i + 1);\r\n        str = str.substring(0, i);\r\n      } else if (e < 0) {\r\n\r\n        // Integer.\r\n        e = str.length;\r\n      }\r\n\r\n    } else {\r\n\r\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n      intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n      // Allow exponential notation to be used with base 10 argument, while\r\n      // also rounding to DECIMAL_PLACES as with other bases.\r\n      if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n        x = new BigNumber(v);\r\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n      }\r\n\r\n      str = String(v);\r\n\r\n      if (isNum = typeof v == 'number') {\r\n\r\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n          throw Error\r\n           (tooManyDigits + v);\r\n        }\r\n      } else {\r\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      alphabet = ALPHABET.slice(0, b);\r\n      e = i = 0;\r\n\r\n      // Check that str is a valid base b number.\r\n      // Don't use RegExp, so alphabet can contain special characters.\r\n      for (len = str.length; i < len; i++) {\r\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n          if (c == '.') {\r\n\r\n            // If '.' is not the first character and it has not be found before.\r\n            if (i > e) {\r\n              e = len;\r\n              continue;\r\n            }\r\n          } else if (!caseChanged) {\r\n\r\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n              caseChanged = true;\r\n              i = -1;\r\n              e = 0;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          return parseNumeric(x, String(v), isNum, b);\r\n        }\r\n      }\r\n\r\n      // Prevent later check for length on converted number.\r\n      isNum = false;\r\n      str = convertBase(str, b, 10, x.s);\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n      else e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n    if (str = str.slice(i, ++len)) {\r\n      len -= i;\r\n\r\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n      if (isNum && BigNumber.DEBUG &&\r\n        len > 15 && (v > bignumber_MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n          throw Error\r\n           (tooManyDigits + (x.s * v));\r\n      }\r\n\r\n       // Overflow?\r\n      if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        x.c = x.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      } else {\r\n        x.e = e;\r\n        x.c = [];\r\n\r\n        // Transform base\r\n\r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first element of the coefficient array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n        if (i < len) {\r\n          if (i) x.c.push(+str.slice(0, i));\r\n\r\n          for (len -= LOG_BASE; i < len;) {\r\n            x.c.push(+str.slice(i, i += LOG_BASE));\r\n          }\r\n\r\n          i = LOG_BASE - (str = str.slice(i)).length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n\r\n        for (; i--; str += '0');\r\n        x.c.push(+str);\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    }\r\n  }\r\n\r\n\r\n  // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n  BigNumber.clone = clone;\r\n\r\n  BigNumber.ROUND_UP = 0;\r\n  BigNumber.ROUND_DOWN = 1;\r\n  BigNumber.ROUND_CEIL = 2;\r\n  BigNumber.ROUND_FLOOR = 3;\r\n  BigNumber.ROUND_HALF_UP = 4;\r\n  BigNumber.ROUND_HALF_DOWN = 5;\r\n  BigNumber.ROUND_HALF_EVEN = 6;\r\n  BigNumber.ROUND_HALF_CEIL = 7;\r\n  BigNumber.ROUND_HALF_FLOOR = 8;\r\n  BigNumber.EUCLID = 9;\r\n\r\n\r\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                       not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *     prefix                 {string}\r\n   *     groupSize              {number}\r\n   *     secondaryGroupSize     {number}\r\n   *     groupSeparator         {string}\r\n   *     decimalSeparator       {string}\r\n   *     fractionGroupSize      {number}\r\n   *     fractionGroupSeparator {string}\r\n   *     suffix                 {string}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\r\n  BigNumber.config = BigNumber.set = function (obj) {\r\n    var p, v;\r\n\r\n    if (obj != null) {\r\n\r\n      if (typeof obj == 'object') {\r\n\r\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          DECIMAL_PLACES = v;\r\n        }\r\n\r\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 8, p);\r\n          ROUNDING_MODE = v;\r\n        }\r\n\r\n        // EXPONENTIAL_AT {number|number[]}\r\n        // Integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, 0, p);\r\n            intCheck(v[1], 0, MAX, p);\r\n            TO_EXP_NEG = v[0];\r\n            TO_EXP_POS = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n          }\r\n        }\r\n\r\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n        if (obj.hasOwnProperty(p = 'RANGE')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, -1, p);\r\n            intCheck(v[1], 1, MAX, p);\r\n            MIN_EXP = v[0];\r\n            MAX_EXP = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            if (v) {\r\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' cannot be zero: ' + v);\r\n            }\r\n          }\r\n        }\r\n\r\n        // CRYPTO {boolean} true or false.\r\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n        // '[BigNumber Error] crypto unavailable'\r\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n          v = obj[p];\r\n          if (v === !!v) {\r\n            if (v) {\r\n              if (typeof crypto != 'undefined' && crypto &&\r\n               (crypto.getRandomValues || crypto.randomBytes)) {\r\n                CRYPTO = v;\r\n              } else {\r\n                CRYPTO = !v;\r\n                throw Error\r\n                 (bignumberError + 'crypto unavailable');\r\n              }\r\n            } else {\r\n              CRYPTO = v;\r\n            }\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' not true or false: ' + v);\r\n          }\r\n        }\r\n\r\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 9, p);\r\n          MODULO_MODE = v;\r\n        }\r\n\r\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          POW_PRECISION = v;\r\n        }\r\n\r\n        // FORMAT {object}\r\n        // '[BigNumber Error] FORMAT not an object: {v}'\r\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n          v = obj[p];\r\n          if (typeof v == 'object') FORMAT = v;\r\n          else throw Error\r\n           (bignumberError + p + ' not an object: ' + v);\r\n        }\r\n\r\n        // ALPHABET {string}\r\n        // '[BigNumber Error] ALPHABET invalid: {v}'\r\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n          v = obj[p];\r\n\r\n          // Disallow if less than two characters,\r\n          // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n          if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n            alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n            ALPHABET = v;\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' invalid: ' + v);\r\n          }\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Object expected: {v}'\r\n        throw Error\r\n         (bignumberError + 'Object expected: ' + obj);\r\n      }\r\n    }\r\n\r\n    return {\r\n      DECIMAL_PLACES: DECIMAL_PLACES,\r\n      ROUNDING_MODE: ROUNDING_MODE,\r\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n      RANGE: [MIN_EXP, MAX_EXP],\r\n      CRYPTO: CRYPTO,\r\n      MODULO_MODE: MODULO_MODE,\r\n      POW_PRECISION: POW_PRECISION,\r\n      FORMAT: FORMAT,\r\n      ALPHABET: ALPHABET\r\n    };\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n   *\r\n   * v {any}\r\n   *\r\n   * '[BigNumber Error] Invalid BigNumber: {v}'\r\n   */\r\n  BigNumber.isBigNumber = function (v) {\r\n    if (!v || v._isBigNumber !== true) return false;\r\n    if (!BigNumber.DEBUG) return true;\r\n\r\n    var i, n,\r\n      c = v.c,\r\n      e = v.e,\r\n      s = v.s;\r\n\r\n    out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n        // If the first element is zero, the BigNumber value must be zero.\r\n        if (c[0] === 0) {\r\n          if (e === 0 && c.length === 1) return true;\r\n          break out;\r\n        }\r\n\r\n        // Calculate number of digits that c[0] should have, based on the exponent.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (i < 1) i += LOG_BASE;\r\n\r\n        // Calculate number of digits of c[0].\r\n        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n        if (String(c[0]).length == i) {\r\n\r\n          for (i = 0; i < c.length; i++) {\r\n            n = c[i];\r\n            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n          }\r\n\r\n          // Last element cannot be zero, unless it is the only element.\r\n          if (n !== 0) return true;\r\n        }\r\n      }\r\n\r\n    // Infinity/NaN\r\n    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n      return true;\r\n    }\r\n\r\n    throw Error\r\n      (bignumberError + 'Invalid BigNumber: ' + v);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.maximum = BigNumber.max = function () {\r\n    return maxOrMin(arguments, P.lt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.minimum = BigNumber.min = function () {\r\n    return maxOrMin(arguments, P.gt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\r\n  BigNumber.random = (function () {\r\n    var pow2_53 = 0x20000000000000;\r\n\r\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n    // Check if Math.random() produces more than 32 bits of randomness.\r\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n     ? function () { return mathfloor(Math.random() * pow2_53); }\r\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n       (Math.random() * 0x800000 | 0); };\r\n\r\n    return function (dp) {\r\n      var a, b, e, k, v,\r\n        i = 0,\r\n        c = [],\r\n        rand = new BigNumber(ONE);\r\n\r\n      if (dp == null) dp = DECIMAL_PLACES;\r\n      else intCheck(dp, 0, MAX);\r\n\r\n      k = mathceil(dp / LOG_BASE);\r\n\r\n      if (CRYPTO) {\r\n\r\n        // Browsers supporting crypto.getRandomValues.\r\n        if (crypto.getRandomValues) {\r\n\r\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n          for (; i < k;) {\r\n\r\n            // 53 bits:\r\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n            //                                     11111 11111111 11111111\r\n            // 0x20000 is 2^21.\r\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n            // Rejection sampling:\r\n            // 0 <= v < 9007199254740992\r\n            // Probability that v >= 9e15, is\r\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n            if (v >= 9e15) {\r\n              b = crypto.getRandomValues(new Uint32Array(2));\r\n              a[i] = b[0];\r\n              a[i + 1] = b[1];\r\n            } else {\r\n\r\n              // 0 <= v <= 8999999999999999\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 2;\r\n            }\r\n          }\r\n          i = k / 2;\r\n\r\n        // Node.js supporting crypto.randomBytes.\r\n        } else if (crypto.randomBytes) {\r\n\r\n          // buffer\r\n          a = crypto.randomBytes(k *= 7);\r\n\r\n          for (; i < k;) {\r\n\r\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n            // 0 <= v < 9007199254740992\r\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n            if (v >= 9e15) {\r\n              crypto.randomBytes(7).copy(a, i);\r\n            } else {\r\n\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 7;\r\n            }\r\n          }\r\n          i = k / 7;\r\n        } else {\r\n          CRYPTO = false;\r\n          throw Error\r\n           (bignumberError + 'crypto unavailable');\r\n        }\r\n      }\r\n\r\n      // Use Math.random.\r\n      if (!CRYPTO) {\r\n\r\n        for (; i < k;) {\r\n          v = random53bitInt();\r\n          if (v < 9e15) c[i++] = v % 1e14;\r\n        }\r\n      }\r\n\r\n      k = c[--i];\r\n      dp %= LOG_BASE;\r\n\r\n      // Convert trailing digits to zeros according to dp.\r\n      if (k && dp) {\r\n        v = POWS_TEN[LOG_BASE - dp];\r\n        c[i] = mathfloor(k / v) * v;\r\n      }\r\n\r\n      // Remove trailing elements which are zero.\r\n      for (; c[i] === 0; c.pop(), i--);\r\n\r\n      // Zero?\r\n      if (i < 0) {\r\n        c = [e = 0];\r\n      } else {\r\n\r\n        // Remove leading elements which are zero and adjust exponent accordingly.\r\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n        // Count the digits of the first element of c to determine leading zeros, and...\r\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n        // adjust the exponent accordingly.\r\n        if (i < LOG_BASE) e -= LOG_BASE - i;\r\n      }\r\n\r\n      rand.e = e;\r\n      rand.c = c;\r\n      return rand;\r\n    };\r\n  })();\r\n\r\n\r\n   /*\r\n   * Return a BigNumber whose value is the sum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.sum = function () {\r\n    var i = 1,\r\n      args = arguments,\r\n      sum = new BigNumber(args[0]);\r\n    for (; i < args.length;) sum = sum.plus(args[i++]);\r\n    return sum;\r\n  };\r\n\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n\r\n  // Called by BigNumber and BigNumber.prototype.toString.\r\n  convertBase = (function () {\r\n    var decimal = '0123456789';\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        len = str.length;\r\n\r\n      for (; i < len;) {\r\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n        arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n        for (j = 0; j < arr.length; j++) {\r\n\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] == null) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arr.reverse();\r\n    }\r\n\r\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n    // If the caller is toString, we are converting from base 10 to baseOut.\r\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n      var alphabet, d, e, k, r, x, xc, y,\r\n        i = str.indexOf('.'),\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE;\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        k = POW_PRECISION;\r\n\r\n        // Unlimited precision.\r\n        POW_PRECISION = 0;\r\n        str = str.replace('.', '');\r\n        y = new BigNumber(baseIn);\r\n        x = y.pow(str.length - i);\r\n        POW_PRECISION = k;\r\n\r\n        // Convert str as if an integer, then restore the fraction part by dividing the\r\n        // result by its base raised to a power.\r\n\r\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n         10, baseOut, decimal);\r\n        y.e = y.c.length;\r\n      }\r\n\r\n      // Convert the number as integer.\r\n\r\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n       ? (alphabet = ALPHABET, decimal)\r\n       : (alphabet = decimal, ALPHABET));\r\n\r\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n      e = k = xc.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xc[--k] == 0; xc.pop());\r\n\r\n      // Zero?\r\n      if (!xc[0]) return alphabet.charAt(0);\r\n\r\n      // Does str represent an integer? If so, no need for the division.\r\n      if (i < 0) {\r\n        --e;\r\n      } else {\r\n        x.c = xc;\r\n        x.e = e;\r\n\r\n        // The sign is needed for correct rounding.\r\n        x.s = sign;\r\n        x = div(x, y, dp, rm, baseOut);\r\n        xc = x.c;\r\n        r = x.r;\r\n        e = x.e;\r\n      }\r\n\r\n      // xc now represents str converted to baseOut.\r\n\r\n      // THe index of the rounding digit.\r\n      d = e + dp + 1;\r\n\r\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n      i = xc[d];\r\n\r\n      // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n      k = baseOut / 2;\r\n      r = r || d < 0 || xc[d + 1] != null;\r\n\r\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n      // If the index of the rounding digit is not greater than zero, or xc represents\r\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n      // such as 0.00001.\r\n      if (d < 1 || !xc[0]) {\r\n\r\n        // 1^-dp or 0\r\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n      } else {\r\n\r\n        // Truncate xc to the required number of decimal places.\r\n        xc.length = d;\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (--baseOut; ++xc[--d] > baseOut;) {\r\n            xc[d] = 0;\r\n\r\n            if (!d) {\r\n              ++e;\r\n              xc = [1].concat(xc);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (k = xc.length; !xc[--k];);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n        // Add leading zeros, decimal point and trailing zeros as required.\r\n        str = toFixedPoint(str, e, alphabet.charAt(0));\r\n      }\r\n\r\n      // The caller will add the sign.\r\n      return str;\r\n    };\r\n  })();\r\n\r\n\r\n  // Perform division in the specified base. Called by div and convertBase.\r\n  div = (function () {\r\n\r\n    // Assume non-zero x and k.\r\n    function multiply(x, k, base) {\r\n      var m, temp, xlo, xhi,\r\n        carry = 0,\r\n        i = x.length,\r\n        klo = k % SQRT_BASE,\r\n        khi = k / SQRT_BASE | 0;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        xlo = x[i] % SQRT_BASE;\r\n        xhi = x[i] / SQRT_BASE | 0;\r\n        m = khi * xlo + xhi * klo;\r\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n        x[i] = temp % base;\r\n      }\r\n\r\n      if (carry) x = [carry].concat(x);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, cmp;\r\n\r\n      if (aL != bL) {\r\n        cmp = aL > bL ? 1 : -1;\r\n      } else {\r\n\r\n        for (i = cmp = 0; i < aL; i++) {\r\n\r\n          if (a[i] != b[i]) {\r\n            cmp = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return cmp;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n    }\r\n\r\n    // x: dividend, y: divisor.\r\n    return function (x, y, dp, rm, base) {\r\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n        yL, yz,\r\n        s = x.s == y.s ? 1 : -1,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n        return new BigNumber(\r\n\r\n         // Return NaN if either NaN, or both Infinity or 0.\r\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n       );\r\n      }\r\n\r\n      q = new BigNumber(s);\r\n      qc = q.c = [];\r\n      e = x.e - y.e;\r\n      s = dp + e + 1;\r\n\r\n      if (!base) {\r\n        base = BASE;\r\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n        s = s / LOG_BASE | 0;\r\n      }\r\n\r\n      // Result exponent may be one less then the current value of e.\r\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n      if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n      if (s < 0) {\r\n        qc.push(1);\r\n        more = true;\r\n      } else {\r\n        xL = xc.length;\r\n        yL = yc.length;\r\n        i = 0;\r\n        s += 2;\r\n\r\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n        n = mathfloor(base / (yc[0] + 1));\r\n\r\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n        if (n > 1) {\r\n          yc = multiply(yc, n, base);\r\n          xc = multiply(xc, n, base);\r\n          yL = yc.length;\r\n          xL = xc.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xc.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL; rem[remL++] = 0);\r\n        yz = yc.slice();\r\n        yz = [0].concat(yz);\r\n        yc0 = yc[0];\r\n        if (yc[1] >= base / 2) yc0++;\r\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n        do {\r\n          n = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yc, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, n.\r\n\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // n is how many times the divisor goes into the current remainder.\r\n            n = mathfloor(rem0 / yc0);\r\n\r\n            //  Algorithm:\r\n            //  product = divisor multiplied by trial digit (n).\r\n            //  Compare product and remainder.\r\n            //  If product is greater than remainder:\r\n            //    Subtract divisor from product, decrement trial digit.\r\n            //  Subtract product from remainder.\r\n            //  If product was less than remainder at the last compare:\r\n            //    Compare new remainder and divisor.\r\n            //    If remainder is greater than divisor:\r\n            //      Subtract divisor from remainder, increment trial digit.\r\n\r\n            if (n > 1) {\r\n\r\n              // n may be > base only when base is 3.\r\n              if (n >= base) n = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiply(yc, n, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              // If product > remainder then trial digit n too high.\r\n              // n is 1 too high about 5% of the time, and is not known to have\r\n              // ever been more than 1 too high.\r\n              while (compare(prod, rem, prodL, remL) == 1) {\r\n                n--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                prodL = prod.length;\r\n                cmp = 1;\r\n              }\r\n            } else {\r\n\r\n              // n is 0 or 1, cmp is -1.\r\n              // If n is 0, there is no need to compare yc and rem again below,\r\n              // so change cmp to 1 to avoid it.\r\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n              if (n == 0) {\r\n\r\n                // divisor < remainder, so n must be at least 1.\r\n                cmp = n = 1;\r\n              }\r\n\r\n              // product = divisor\r\n              prod = yc.slice();\r\n              prodL = prod.length;\r\n            }\r\n\r\n            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n            remL = rem.length;\r\n\r\n             // If product was < remainder.\r\n            if (cmp == -1) {\r\n\r\n              // Compare divisor and new remainder.\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              // Trial digit n too low.\r\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n              while (compare(yc, rem, yL, remL) < 1) {\r\n                n++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                remL = rem.length;\r\n              }\r\n            }\r\n          } else if (cmp === 0) {\r\n            n++;\r\n            rem = [0];\r\n          } // else cmp === 1 and n will be 0\r\n\r\n          // Add the next digit, n, to the result array.\r\n          qc[i++] = n;\r\n\r\n          // Update the remainder.\r\n          if (rem[0]) {\r\n            rem[remL++] = xc[xi] || 0;\r\n          } else {\r\n            rem = [xc[xi]];\r\n            remL = 1;\r\n          }\r\n        } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n        more = rem[0] != null;\r\n\r\n        // Leading zero?\r\n        if (!qc[0]) qc.splice(0, 1);\r\n      }\r\n\r\n      if (base == BASE) {\r\n\r\n        // To calculate q.e, first get the number of digits of qc[0].\r\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n      // Caller is convertBase.\r\n      } else {\r\n        q.e = e;\r\n        q.r = +more;\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\r\n  function format(n, i, rm, id) {\r\n    var c0, e, ne, len, str;\r\n\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n\r\n    if (!n.c) return n.toString();\r\n\r\n    c0 = n.c[0];\r\n    ne = n.e;\r\n\r\n    if (i == null) {\r\n      str = coeffToString(n.c);\r\n      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n       ? toExponential(str, ne)\r\n       : toFixedPoint(str, ne, '0');\r\n    } else {\r\n      n = round(new BigNumber(n), i, rm);\r\n\r\n      // n.e may have changed if the value was rounded up.\r\n      e = n.e;\r\n\r\n      str = coeffToString(n.c);\r\n      len = str.length;\r\n\r\n      // toPrecision returns exponential notation if the number of significant digits\r\n      // specified is less than the number of digits necessary to represent the integer\r\n      // part of the value in fixed-point notation.\r\n\r\n      // Exponential notation.\r\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n        // Append zeros?\r\n        for (; len < i; str += '0', len++);\r\n        str = toExponential(str, e);\r\n\r\n      // Fixed-point notation.\r\n      } else {\r\n        i -= ne;\r\n        str = toFixedPoint(str, e, '0');\r\n\r\n        // Append zeros?\r\n        if (e + 1 > len) {\r\n          if (--i > 0) for (str += '.'; i--; str += '0');\r\n        } else {\r\n          i += e - len;\r\n          if (i > 0) {\r\n            if (e + 1 == len) str += '.';\r\n            for (; i--; str += '0');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n.s < 0 && c0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Handle BigNumber.max and BigNumber.min.\r\n  function maxOrMin(args, method) {\r\n    var n,\r\n      i = 1,\r\n      m = new BigNumber(args[0]);\r\n\r\n    for (; i < args.length; i++) {\r\n      n = new BigNumber(args[i]);\r\n\r\n      // If any number is NaN, return NaN.\r\n      if (!n.s) {\r\n        m = n;\r\n        break;\r\n      } else if (method.call(m, n)) {\r\n        m = n;\r\n      }\r\n    }\r\n\r\n    return m;\r\n  }\r\n\r\n\r\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\r\n  function normalise(n, c, e) {\r\n    var i = 1,\r\n      j = c.length;\r\n\r\n     // Remove trailing zeros.\r\n    for (; !c[--j]; c.pop());\r\n\r\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n    for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n    // Overflow?\r\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n      // Infinity.\r\n      n.c = n.e = null;\r\n\r\n    // Underflow?\r\n    } else if (e < MIN_EXP) {\r\n\r\n      // Zero.\r\n      n.c = [n.e = 0];\r\n    } else {\r\n      n.e = e;\r\n      n.c = c;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  // Handle values that fail the validity test in BigNumber.\r\n  parseNumeric = (function () {\r\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n      dotAfter = /^([^.]+)\\.$/,\r\n      dotBefore = /^\\.([^.]+)$/,\r\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n    return function (x, str, isNum, b) {\r\n      var base,\r\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n      // No exception on ±Infinity or NaN.\r\n      if (isInfinityOrNaN.test(s)) {\r\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n      } else {\r\n        if (!isNum) {\r\n\r\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n          s = s.replace(basePrefix, function (m, p1, p2) {\r\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n            return !b || b == base ? p1 : m;\r\n          });\r\n\r\n          if (b) {\r\n            base = b;\r\n\r\n            // E.g. '1.' to '1', '.1' to '0.1'\r\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n          }\r\n\r\n          if (str != s) return new BigNumber(s, base);\r\n        }\r\n\r\n        // '[BigNumber Error] Not a number: {n}'\r\n        // '[BigNumber Error] Not a base {b} number: {n}'\r\n        if (BigNumber.DEBUG) {\r\n          throw Error\r\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n        }\r\n\r\n        // NaN\r\n        x.s = null;\r\n      }\r\n\r\n      x.c = x.e = null;\r\n    }\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\r\n  function round(x, sd, rm, r) {\r\n    var d, i, j, k, n, ni, rd,\r\n      xc = x.c,\r\n      pows10 = POWS_TEN;\r\n\r\n    // if x is not Infinity or NaN...\r\n    if (xc) {\r\n\r\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n      // ni is the index of n within x.c.\r\n      // d is the number of digits of n.\r\n      // i is the index of rd within n including leading zeros.\r\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n      out: {\r\n\r\n        // Get the number of digits of the first element of xc.\r\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n        i = sd - d;\r\n\r\n        // If the rounding digit is in the first element of xc...\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          n = xc[ni = 0];\r\n\r\n          // Get the rounding digit at index j of n.\r\n          rd = n / pows10[d - j - 1] % 10 | 0;\r\n        } else {\r\n          ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n          if (ni >= xc.length) {\r\n\r\n            if (r) {\r\n\r\n              // Needed by sqrt.\r\n              for (; xc.length <= ni; xc.push(0));\r\n              n = rd = 0;\r\n              d = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            n = k = xc[ni];\r\n\r\n            // Get the number of digits of n.\r\n            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n            // Get the index of rd within n.\r\n            i %= LOG_BASE;\r\n\r\n            // Get the index of rd within n, adjusted for leading zeros.\r\n            // The number of leading zeros of n is given by LOG_BASE - d.\r\n            j = i - LOG_BASE + d;\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n          }\r\n        }\r\n\r\n        r = r || sd < 0 ||\r\n\r\n        // Are there any non-zero digits after the rounding digit?\r\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n        r = rm < 4\r\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n           rm == (x.s < 0 ? 8 : 7));\r\n\r\n        if (sd < 1 || !xc[0]) {\r\n          xc.length = 0;\r\n\r\n          if (r) {\r\n\r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n            x.e = -sd || 0;\r\n          } else {\r\n\r\n            // Zero.\r\n            xc[0] = x.e = 0;\r\n          }\r\n\r\n          return x;\r\n        }\r\n\r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xc.length = ni;\r\n          k = 1;\r\n          ni--;\r\n        } else {\r\n          xc.length = ni + 1;\r\n          k = pows10[LOG_BASE - i];\r\n\r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of n.\r\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n        }\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          for (; ;) {\r\n\r\n            // If the digit to be rounded up is in the first element of xc...\r\n            if (ni == 0) {\r\n\r\n              // i will be the length of xc[0] before k is added.\r\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n              j = xc[0] += k;\r\n              for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xc[0] == BASE) xc[0] = 1;\r\n              }\r\n\r\n              break;\r\n            } else {\r\n              xc[ni] += k;\r\n              if (xc[ni] != BASE) break;\r\n              xc[ni--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; xc[--i] === 0; xc.pop());\r\n      }\r\n\r\n      // Overflow? Infinity.\r\n      if (x.e > MAX_EXP) {\r\n        x.c = x.e = null;\r\n\r\n      // Underflow? Zero.\r\n      } else if (x.e < MIN_EXP) {\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function valueOf(n) {\r\n    var str,\r\n      e = n.e;\r\n\r\n    if (e === null) return n.toString();\r\n\r\n    str = coeffToString(n.c);\r\n\r\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n      ? toExponential(str, e)\r\n      : toFixedPoint(str, e, '0');\r\n\r\n    return n.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new BigNumber(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\r\n  P.comparedTo = function (y, b) {\r\n    return compare(this, new BigNumber(y, b));\r\n  };\r\n\r\n\r\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.decimalPlaces = P.dp = function (dp, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), dp + x.e + 1, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last number.\r\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n    if (n < 0) n = 0;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.dividedBy = P.div = function (y, b) {\r\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n    return div(this, new BigNumber(y, b), 0, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\r\n  P.exponentiatedBy = P.pow = function (n, m) {\r\n    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n      x = this;\r\n\r\n    n = new BigNumber(n);\r\n\r\n    // Allow NaN and ±Infinity, but not other non-integers.\r\n    if (n.c && !n.isInteger()) {\r\n      throw Error\r\n        (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n    }\r\n\r\n    if (m != null) m = new BigNumber(m);\r\n\r\n    // Exponent of MAX_SAFE_INTEGER is 15.\r\n    nIsBig = n.e > 14;\r\n\r\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n      // The sign of the result of pow when x is negative depends on the evenness of n.\r\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n      return m ? y.mod(m) : y;\r\n    }\r\n\r\n    nIsNeg = n.s < 0;\r\n\r\n    if (m) {\r\n\r\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n      if (isModExp) x = x.mod(m);\r\n\r\n    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n      // [1, 240000000]\r\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n      // [80000000000000]  [99999750000000]\r\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n      // If x is negative and n is odd, k = -0, else k = 0.\r\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n      // If x >= 1, k = ±Infinity.\r\n      if (x.e > -1) k = 1 / k;\r\n\r\n      // If n is negative return ±0, else return ±Infinity.\r\n      return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n    } else if (POW_PRECISION) {\r\n\r\n      // Truncating each coefficient array to a length of k after each multiplication\r\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n      // i.e. there will be a minimum of 28 guard digits retained.\r\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n    }\r\n\r\n    if (nIsBig) {\r\n      half = new BigNumber(0.5);\r\n      if (nIsNeg) n.s = 1;\r\n      nIsOdd = isOdd(n);\r\n    } else {\r\n      i = Math.abs(+valueOf(n));\r\n      nIsOdd = i % 2;\r\n    }\r\n\r\n    y = new BigNumber(ONE);\r\n\r\n    // Performs 54 loop iterations for n of 9007199254740991.\r\n    for (; ;) {\r\n\r\n      if (nIsOdd) {\r\n        y = y.times(x);\r\n        if (!y.c) break;\r\n\r\n        if (k) {\r\n          if (y.c.length > k) y.c.length = k;\r\n        } else if (isModExp) {\r\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (i) {\r\n        i = mathfloor(i / 2);\r\n        if (i === 0) break;\r\n        nIsOdd = i % 2;\r\n      } else {\r\n        n = n.times(half);\r\n        round(n, n.e + 1, 1);\r\n\r\n        if (n.e > 14) {\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          i = +valueOf(n);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        }\r\n      }\r\n\r\n      x = x.times(x);\r\n\r\n      if (k) {\r\n        if (x.c && x.c.length > k) x.c.length = k;\r\n      } else if (isModExp) {\r\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n      }\r\n    }\r\n\r\n    if (isModExp) return y;\r\n    if (nIsNeg) y = ONE.div(y);\r\n\r\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\r\n  P.integerValue = function (rm) {\r\n    var n = new BigNumber(this);\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n    return round(n, n.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isEqualTo = P.eq = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.c;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isGreaterThan = P.gt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\r\n  P.isInteger = function () {\r\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isLessThan = P.lt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\r\n  P.isNegative = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\r\n  P.isPositive = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.c && this.c[0] == 0;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.minus = function (y, b) {\r\n    var i, j, t, xLTy,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Either Infinity?\r\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n      // Either zero?\r\n      if (!xc[0] || !yc[0]) {\r\n\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n         ROUNDING_MODE == 3 ? -0 : 0);\r\n      }\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Determine which is the bigger number.\r\n    if (a = xe - ye) {\r\n\r\n      if (xLTy = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      for (b = a; b--; t.push(0));\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n\r\n        if (xc[b] != yc[b]) {\r\n          xLTy = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n    b = (j = yc.length) - (i = xc.length);\r\n\r\n    // Append zeros to xc if shorter.\r\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n    if (b > 0) for (; b--; xc[i++] = 0);\r\n    b = BASE - 1;\r\n\r\n    // Subtract yc from xc.\r\n    for (; j > a;) {\r\n\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i]; xc[i] = b);\r\n        --xc[i];\r\n        xc[j] += BASE;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n    // Zero?\r\n    if (!xc[0]) {\r\n\r\n      // Following IEEE 754 (2008) 6.3,\r\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n    // for finite x and y.\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\r\n  P.modulo = P.mod = function (y, b) {\r\n    var q, s,\r\n      x = this;\r\n\r\n    y = new BigNumber(y, b);\r\n\r\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n    if (!x.c || !y.s || y.c && !y.c[0]) {\r\n      return new BigNumber(NaN);\r\n\r\n    // Return x if y is Infinity or x is zero.\r\n    } else if (!y.c || x.c && !x.c[0]) {\r\n      return new BigNumber(x);\r\n    }\r\n\r\n    if (MODULO_MODE == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // r = x - qy    where  0 <= r < abs(y)\r\n      s = y.s;\r\n      y.s = 1;\r\n      q = div(x, y, 0, 3);\r\n      y.s = s;\r\n      q.s *= s;\r\n    } else {\r\n      q = div(x, y, 0, MODULO_MODE);\r\n    }\r\n\r\n    y = x.minus(q.times(y));\r\n\r\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\r\n  P.multipliedBy = P.times = function (y, b) {\r\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n      base, sqrtBase,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new BigNumber(y, b)).c;\r\n\r\n    // Either NaN, ±Infinity or ±0?\r\n    if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n        y.c = y.e = y.s = null;\r\n      } else {\r\n        y.s *= x.s;\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        if (!xc || !yc) {\r\n          y.c = y.e = null;\r\n\r\n        // Return ±0 if either is ±0.\r\n        } else {\r\n          y.c = [0];\r\n          y.e = 0;\r\n        }\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n    y.s *= x.s;\r\n    xcL = xc.length;\r\n    ycL = yc.length;\r\n\r\n    // Ensure xc points to longer array and xcL to its length.\r\n    if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n    // Initialise the result array with zeros.\r\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n    base = BASE;\r\n    sqrtBase = SQRT_BASE;\r\n\r\n    for (i = ycL; --i >= 0;) {\r\n      c = 0;\r\n      ylo = yc[i] % sqrtBase;\r\n      yhi = yc[i] / sqrtBase | 0;\r\n\r\n      for (k = xcL, j = i + k; j > i;) {\r\n        xlo = xc[--k] % sqrtBase;\r\n        xhi = xc[k] / sqrtBase | 0;\r\n        m = yhi * xlo + xhi * ylo;\r\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n        zc[j--] = xlo % base;\r\n      }\r\n\r\n      zc[j] = c;\r\n    }\r\n\r\n    if (c) {\r\n      ++e;\r\n    } else {\r\n      zc.splice(0, 1);\r\n    }\r\n\r\n    return normalise(y, zc, e);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\r\n  P.negated = function () {\r\n    var x = new BigNumber(this);\r\n    x.s = -x.s || null;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.plus = function (y, b) {\r\n    var t,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n     if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Return ±Infinity if either ±Infinity.\r\n      if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n      // Either zero?\r\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--; t.push(0));\r\n      t.reverse();\r\n    }\r\n\r\n    a = xc.length;\r\n    b = yc.length;\r\n\r\n    // Point xc to the longer array, and b to the shorter length.\r\n    if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n    for (a = 0; b;) {\r\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n    }\r\n\r\n    if (a) {\r\n      xc = [a].concat(xc);\r\n      ++ye;\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    // ye = MAX_EXP + 1 possible\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.precision = P.sd = function (sd, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (sd != null && sd !== !!sd) {\r\n      intCheck(sd, 1, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), sd, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    v = c.length - 1;\r\n    n = v * LOG_BASE + 1;\r\n\r\n    if (v = c[v]) {\r\n\r\n      // Subtract the number of trailing zeros of the last element.\r\n      for (; v % 10 == 0; v /= 10, n--);\r\n\r\n      // Add the number of digits of the first element.\r\n      for (v = c[0]; v >= 10; v /= 10, n++);\r\n    }\r\n\r\n    if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\r\n  P.shiftedBy = function (k) {\r\n    intCheck(k, -bignumber_MAX_SAFE_INTEGER, bignumber_MAX_SAFE_INTEGER);\r\n    return this.times('1e' + k);\r\n  };\r\n\r\n\r\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, r, rep, t,\r\n      x = this,\r\n      c = x.c,\r\n      s = x.s,\r\n      e = x.e,\r\n      dp = DECIMAL_PLACES + 4,\r\n      half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !c || !c[0]) {\r\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+valueOf(x));\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = coeffToString(c);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(+n);\r\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new BigNumber(n);\r\n    } else {\r\n      r = new BigNumber(s + '');\r\n    }\r\n\r\n    // Check for zero.\r\n    // r could be zero if MIN_EXP is changed after the this value was created.\r\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n    // coeffToString to throw.\r\n    if (r.c[0]) {\r\n      e = r.e;\r\n      s = e + dp;\r\n      if (s < 3) s = 0;\r\n\r\n      // Newton-Raphson iteration.\r\n      for (; ;) {\r\n        t = r;\r\n        r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n          // The exponent of r may here be one less than the final result exponent,\r\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n          // are indexed correctly.\r\n          if (r.e < e) --s;\r\n          n = n.slice(s - 3, s + 1);\r\n\r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n          // iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n\r\n            // On the first iteration only, check to see if rounding up gives the\r\n            // exact result as the nines may infinitely repeat.\r\n            if (!rep) {\r\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n\r\n            dp += 4;\r\n            s += 4;\r\n            rep = 1;\r\n          } else {\r\n\r\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n            // result. If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n              // Truncate to the first rounding digit.\r\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp++;\r\n    }\r\n    return format(this, dp, rm, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp = dp + this.e + 1;\r\n    }\r\n    return format(this, dp, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the format or FORMAT object (see BigNumber.set).\r\n   *\r\n   * The formatting object may contain some or all of the properties shown below.\r\n   *\r\n   * FORMAT = {\r\n   *   prefix: '',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   groupSeparator: ',',\r\n   *   decimalSeparator: '.',\r\n   *   fractionGroupSize: 0,\r\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n   *   suffix: ''\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   * [format] {object} Formatting options. See FORMAT pbject above.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   * '[BigNumber Error] Argument not an object: {format}'\r\n   */\r\n  P.toFormat = function (dp, rm, format) {\r\n    var str,\r\n      x = this;\r\n\r\n    if (format == null) {\r\n      if (dp != null && rm && typeof rm == 'object') {\r\n        format = rm;\r\n        rm = null;\r\n      } else if (dp && typeof dp == 'object') {\r\n        format = dp;\r\n        dp = rm = null;\r\n      } else {\r\n        format = FORMAT;\r\n      }\r\n    } else if (typeof format != 'object') {\r\n      throw Error\r\n        (bignumberError + 'Argument not an object: ' + format);\r\n    }\r\n\r\n    str = x.toFixed(dp, rm);\r\n\r\n    if (x.c) {\r\n      var i,\r\n        arr = str.split('.'),\r\n        g1 = +format.groupSize,\r\n        g2 = +format.secondaryGroupSize,\r\n        groupSeparator = format.groupSeparator || '',\r\n        intPart = arr[0],\r\n        fractionPart = arr[1],\r\n        isNeg = x.s < 0,\r\n        intDigits = isNeg ? intPart.slice(1) : intPart,\r\n        len = intDigits.length;\r\n\r\n      if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n      if (g1 > 0 && len > 0) {\r\n        i = len % g1 || g1;\r\n        intPart = intDigits.substr(0, i);\r\n        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n        if (isNeg) intPart = '-' + intPart;\r\n      }\r\n\r\n      str = fractionPart\r\n       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n         '$&' + (format.fractionGroupSeparator || ''))\r\n        : fractionPart)\r\n       : intPart;\r\n    }\r\n\r\n    return (format.prefix || '') + str + (format.suffix || '');\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to the specified\r\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n   * the lowest value necessary to represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\r\n  P.toFraction = function (md) {\r\n    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n      x = this,\r\n      xc = x.c;\r\n\r\n    if (md != null) {\r\n      n = new BigNumber(md);\r\n\r\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n        throw Error\r\n          (bignumberError + 'Argument ' +\r\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n      }\r\n    }\r\n\r\n    if (!xc) return new BigNumber(x);\r\n\r\n    d = new BigNumber(ONE);\r\n    n1 = d0 = new BigNumber(ONE);\r\n    d1 = n0 = new BigNumber(ONE);\r\n    s = coeffToString(xc);\r\n\r\n    // Determine initial denominator.\r\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n    e = d.e = s.length - x.e - 1;\r\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n    exp = MAX_EXP;\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber(s);\r\n\r\n    // n0 = d1 = 0\r\n    n0.c[0] = 0;\r\n\r\n    for (; ;)  {\r\n      q = div(n, d, 0, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.comparedTo(md) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      n1 = n0.plus(q.times(d2 = n1));\r\n      n0 = d2;\r\n      d = n.minus(q.times(d2 = d));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = div(md.minus(d0), d1, 0, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n    e = e * 2;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n    MAX_EXP = exp;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\r\n  P.toNumber = function () {\r\n    return +valueOf(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    if (sd != null) intCheck(sd, 1, MAX);\r\n    return format(this, sd, rm, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\r\n  P.toString = function (b) {\r\n    var str,\r\n      n = this,\r\n      s = n.s,\r\n      e = n.e;\r\n\r\n    // Infinity or NaN?\r\n    if (e === null) {\r\n      if (s) {\r\n        str = 'Infinity';\r\n        if (s < 0) str = '-' + str;\r\n      } else {\r\n        str = 'NaN';\r\n      }\r\n    } else {\r\n      if (b == null) {\r\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n         ? toExponential(coeffToString(n.c), e)\r\n         : toFixedPoint(coeffToString(n.c), e, '0');\r\n      } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n        str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n      } else {\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n      }\r\n\r\n      if (s < 0 && n.c[0]) str = '-' + str;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return valueOf(this);\r\n  };\r\n\r\n\r\n  P._isBigNumber = true;\r\n\r\n  P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n  // Node.js v10.12.0+\r\n  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n\r\n  if (configObject != null) BigNumber.set(configObject);\r\n\r\n  return BigNumber;\r\n}\r\n\r\n\r\n// PRIVATE HELPER FUNCTIONS\r\n\r\n// These functions don't need access to variables,\r\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\nfunction bitFloor(n) {\r\n  var i = n | 0;\r\n  return n > 0 || n === i ? i : i - 1;\r\n}\r\n\r\n\r\n// Return a coefficient array as a string of base 10 digits.\r\nfunction coeffToString(a) {\r\n  var s, z,\r\n    i = 1,\r\n    j = a.length,\r\n    r = a[0] + '';\r\n\r\n  for (; i < j;) {\r\n    s = a[i++] + '';\r\n    z = LOG_BASE - s.length;\r\n    for (; z--; s = '0' + s);\r\n    r += s;\r\n  }\r\n\r\n  // Determine trailing zeros.\r\n  for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n  return r.slice(0, j + 1 || 1);\r\n}\r\n\r\n\r\n// Compare the value of BigNumbers x and y.\r\nfunction compare(x, y) {\r\n  var a, b,\r\n    xc = x.c,\r\n    yc = y.c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either NaN?\r\n  if (!i || !j) return null;\r\n\r\n  a = xc && !xc[0];\r\n  b = yc && !yc[0];\r\n\r\n  // Either zero?\r\n  if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  a = i < 0;\r\n  b = k == l;\r\n\r\n  // Either Infinity?\r\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n  // Compare exponents.\r\n  if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n}\r\n\r\n\r\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\r\nfunction intCheck(n, min, max, name) {\r\n  if (n < min || n > max || n !== mathfloor(n)) {\r\n    throw Error\r\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n       : ' not a primitive number: ') + String(n));\r\n  }\r\n}\r\n\r\n\r\n// Assumes finite n.\r\nfunction isOdd(n) {\r\n  var k = n.c.length - 1;\r\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n}\r\n\r\n\r\nfunction toExponential(str, e) {\r\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n   (e < 0 ? 'e' : 'e+') + e;\r\n}\r\n\r\n\r\nfunction toFixedPoint(str, e, z) {\r\n  var len, zs;\r\n\r\n  // Negative exponent?\r\n  if (e < 0) {\r\n\r\n    // Prepend zeros.\r\n    for (zs = z + '.'; ++e; zs += z);\r\n    str = zs + str;\r\n\r\n  // Positive exponent\r\n  } else {\r\n    len = str.length;\r\n\r\n    // Append zeros.\r\n    if (++e > len) {\r\n      for (zs = z, e -= len; --e; zs += z);\r\n      str += zs;\r\n    } else if (e < len) {\r\n      str = str.slice(0, e) + '.' + str.slice(e);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// EXPORT\r\n\r\n\r\nvar bignumber_BigNumber = clone();\r\n\r\n/* harmony default export */ const bignumber = (bignumber_BigNumber);\r\n\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js\n\n\n\n\nconst fixednumber_logger = new Logger(bignumber_lib_esm_version_version);\n\nconst fixednumber_constructorGuard = {};\nconst fixednumber_Zero = BigNumber.from(0);\nconst fixednumber_NegativeOne = BigNumber.from(-1);\nfunction fixednumber_throwFault(message, fault, operation, value) {\n    const params = { fault: fault, operation: operation };\n    if (value !== undefined) {\n        params.value = value;\n    }\n    return fixednumber_logger.throwError(message, Logger.errors.NUMERIC_FAULT, params);\n}\n// Constant to pull zeros from for multipliers\nlet zeros = \"0\";\nwhile (zeros.length < 256) {\n    zeros += zeros;\n}\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getMultiplier(decimals) {\n    if (typeof (decimals) !== \"number\") {\n        try {\n            decimals = BigNumber.from(decimals).toNumber();\n        }\n        catch (e) { }\n    }\n    if (typeof (decimals) === \"number\" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {\n        return (\"1\" + zeros.substring(0, decimals));\n    }\n    return fixednumber_logger.throwArgumentError(\"invalid decimal size\", \"decimals\", decimals);\n}\nfunction formatFixed(value, decimals) {\n    if (decimals == null) {\n        decimals = 0;\n    }\n    const multiplier = getMultiplier(decimals);\n    // Make sure wei is a big number (convert as necessary)\n    value = BigNumber.from(value);\n    const negative = value.lt(fixednumber_Zero);\n    if (negative) {\n        value = value.mul(fixednumber_NegativeOne);\n    }\n    let fraction = value.mod(multiplier).toString();\n    while (fraction.length < multiplier.length - 1) {\n        fraction = \"0\" + fraction;\n    }\n    // Strip training 0\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n    const whole = value.div(multiplier).toString();\n    if (multiplier.length === 1) {\n        value = whole;\n    }\n    else {\n        value = whole + \".\" + fraction;\n    }\n    if (negative) {\n        value = \"-\" + value;\n    }\n    return value;\n}\nfunction parseFixed(value, decimals) {\n    if (decimals == null) {\n        decimals = 0;\n    }\n    const multiplier = getMultiplier(decimals);\n    if (typeof (value) !== \"string\" || !value.match(/^-?[0-9.]+$/)) {\n        fixednumber_logger.throwArgumentError(\"invalid decimal value\", \"value\", value);\n    }\n    // Is it negative?\n    const negative = (value.substring(0, 1) === \"-\");\n    if (negative) {\n        value = value.substring(1);\n    }\n    if (value === \".\") {\n        fixednumber_logger.throwArgumentError(\"missing value\", \"value\", value);\n    }\n    // Split it into a whole and fractional part\n    const comps = value.split(\".\");\n    if (comps.length > 2) {\n        fixednumber_logger.throwArgumentError(\"too many decimal points\", \"value\", value);\n    }\n    let whole = comps[0], fraction = comps[1];\n    if (!whole) {\n        whole = \"0\";\n    }\n    if (!fraction) {\n        fraction = \"0\";\n    }\n    // Trim trailing zeros\n    while (fraction[fraction.length - 1] === \"0\") {\n        fraction = fraction.substring(0, fraction.length - 1);\n    }\n    // Check the fraction doesn't exceed our decimals size\n    if (fraction.length > multiplier.length - 1) {\n        fixednumber_throwFault(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\");\n    }\n    // If decimals is 0, we have an empty string for fraction\n    if (fraction === \"\") {\n        fraction = \"0\";\n    }\n    // Fully pad the string with zeros to get to wei\n    while (fraction.length < multiplier.length - 1) {\n        fraction += \"0\";\n    }\n    const wholeValue = BigNumber.from(whole);\n    const fractionValue = BigNumber.from(fraction);\n    let wei = (wholeValue.mul(multiplier)).add(fractionValue);\n    if (negative) {\n        wei = wei.mul(fixednumber_NegativeOne);\n    }\n    return wei;\n}\nclass FixedFormat {\n    constructor(constructorGuard, signed, width, decimals) {\n        if (constructorGuard !== fixednumber_constructorGuard) {\n            fixednumber_logger.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n        this.signed = signed;\n        this.width = width;\n        this.decimals = decimals;\n        this.name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n        this._multiplier = getMultiplier(decimals);\n        Object.freeze(this);\n    }\n    static from(value) {\n        if (value instanceof FixedFormat) {\n            return value;\n        }\n        if (typeof (value) === \"number\") {\n            value = `fixed128x${value}`;\n        }\n        let signed = true;\n        let width = 128;\n        let decimals = 18;\n        if (typeof (value) === \"string\") {\n            if (value === \"fixed\") {\n                // defaults...\n            }\n            else if (value === \"ufixed\") {\n                signed = false;\n            }\n            else {\n                const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n                if (!match) {\n                    fixednumber_logger.throwArgumentError(\"invalid fixed format\", \"format\", value);\n                }\n                signed = (match[1] !== \"u\");\n                width = parseInt(match[2]);\n                decimals = parseInt(match[3]);\n            }\n        }\n        else if (value) {\n            const check = (key, type, defaultValue) => {\n                if (value[key] == null) {\n                    return defaultValue;\n                }\n                if (typeof (value[key]) !== type) {\n                    fixednumber_logger.throwArgumentError(\"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, value[key]);\n                }\n                return value[key];\n            };\n            signed = check(\"signed\", \"boolean\", signed);\n            width = check(\"width\", \"number\", width);\n            decimals = check(\"decimals\", \"number\", decimals);\n        }\n        if (width % 8) {\n            fixednumber_logger.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", width);\n        }\n        if (decimals > 80) {\n            fixednumber_logger.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", decimals);\n        }\n        return new FixedFormat(fixednumber_constructorGuard, signed, width, decimals);\n    }\n}\nclass FixedNumber {\n    constructor(constructorGuard, hex, value, format) {\n        if (constructorGuard !== fixednumber_constructorGuard) {\n            fixednumber_logger.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n        this.format = format;\n        this._hex = hex;\n        this._value = value;\n        this._isFixedNumber = true;\n        Object.freeze(this);\n    }\n    _checkFormat(other) {\n        if (this.format.name !== other.format.name) {\n            fixednumber_logger.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n        }\n    }\n    addUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);\n    }\n    subUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);\n    }\n    mulUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);\n    }\n    divUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);\n    }\n    floor() {\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) {\n            comps.push(\"0\");\n        }\n        let result = FixedNumber.from(comps[0], this.format);\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (this.isNegative() && hasFraction) {\n            result = result.subUnsafe(ONE.toFormat(result.format));\n        }\n        return result;\n    }\n    ceiling() {\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) {\n            comps.push(\"0\");\n        }\n        let result = FixedNumber.from(comps[0], this.format);\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (!this.isNegative() && hasFraction) {\n            result = result.addUnsafe(ONE.toFormat(result.format));\n        }\n        return result;\n    }\n    // @TODO: Support other rounding algorithms\n    round(decimals) {\n        if (decimals == null) {\n            decimals = 0;\n        }\n        // If we are already in range, we're done\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) {\n            comps.push(\"0\");\n        }\n        if (decimals < 0 || decimals > 80 || (decimals % 1)) {\n            fixednumber_logger.throwArgumentError(\"invalid decimal count\", \"decimals\", decimals);\n        }\n        if (comps[1].length <= decimals) {\n            return this;\n        }\n        const factor = FixedNumber.from(\"1\" + zeros.substring(0, decimals), this.format);\n        const bump = BUMP.toFormat(this.format);\n        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);\n    }\n    isZero() {\n        return (this._value === \"0.0\" || this._value === \"0\");\n    }\n    isNegative() {\n        return (this._value[0] === \"-\");\n    }\n    toString() { return this._value; }\n    toHexString(width) {\n        if (width == null) {\n            return this._hex;\n        }\n        if (width % 8) {\n            fixednumber_logger.throwArgumentError(\"invalid byte width\", \"width\", width);\n        }\n        const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();\n        return hexZeroPad(hex, width / 8);\n    }\n    toUnsafeFloat() { return parseFloat(this.toString()); }\n    toFormat(format) {\n        return FixedNumber.fromString(this._value, format);\n    }\n    static fromValue(value, decimals, format) {\n        // If decimals looks more like a format, and there is no format, shift the parameters\n        if (format == null && decimals != null && !isBigNumberish(decimals)) {\n            format = decimals;\n            decimals = null;\n        }\n        if (decimals == null) {\n            decimals = 0;\n        }\n        if (format == null) {\n            format = \"fixed\";\n        }\n        return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));\n    }\n    static fromString(value, format) {\n        if (format == null) {\n            format = \"fixed\";\n        }\n        const fixedFormat = FixedFormat.from(format);\n        const numeric = parseFixed(value, fixedFormat.decimals);\n        if (!fixedFormat.signed && numeric.lt(fixednumber_Zero)) {\n            fixednumber_throwFault(\"unsigned value cannot be negative\", \"overflow\", \"value\", value);\n        }\n        let hex = null;\n        if (fixedFormat.signed) {\n            hex = numeric.toTwos(fixedFormat.width).toHexString();\n        }\n        else {\n            hex = numeric.toHexString();\n            hex = hexZeroPad(hex, fixedFormat.width / 8);\n        }\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n        return new FixedNumber(fixednumber_constructorGuard, hex, decimal, fixedFormat);\n    }\n    static fromBytes(value, format) {\n        if (format == null) {\n            format = \"fixed\";\n        }\n        const fixedFormat = FixedFormat.from(format);\n        if (arrayify(value).length > fixedFormat.width / 8) {\n            throw new Error(\"overflow\");\n        }\n        let numeric = BigNumber.from(value);\n        if (fixedFormat.signed) {\n            numeric = numeric.fromTwos(fixedFormat.width);\n        }\n        const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n        return new FixedNumber(fixednumber_constructorGuard, hex, decimal, fixedFormat);\n    }\n    static from(value, format) {\n        if (typeof (value) === \"string\") {\n            return FixedNumber.fromString(value, format);\n        }\n        if (isBytes(value)) {\n            return FixedNumber.fromBytes(value, format);\n        }\n        try {\n            return FixedNumber.fromValue(value, 0, format);\n        }\n        catch (error) {\n            // Allow NUMERIC_FAULT to bubble up\n            if (error.code !== Logger.errors.INVALID_ARGUMENT) {\n                throw error;\n            }\n        }\n        return fixednumber_logger.throwArgumentError(\"invalid FixedNumber value\", \"value\", value);\n    }\n    static isFixedNumber(value) {\n        return !!(value && value._isFixedNumber);\n    }\n}\nconst ONE = FixedNumber.from(1);\nconst BUMP = FixedNumber.from(\"0.5\");\n//# sourceMappingURL=fixednumber.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/units/lib.esm/_version.js\nconst units_lib_esm_version_version = \"units/5.7.0\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/units/lib.esm/index.js\n\n\n\n\nconst units_lib_esm_logger = new Logger(units_lib_esm_version_version);\nconst names = [\n    \"wei\",\n    \"kwei\",\n    \"mwei\",\n    \"gwei\",\n    \"szabo\",\n    \"finney\",\n    \"ether\",\n];\n// Some environments have issues with RegEx that contain back-tracking, so we cannot\n// use them.\nfunction commify(value) {\n    const comps = String(value).split(\".\");\n    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === \".\" || value === \"-.\") {\n        units_lib_esm_logger.throwArgumentError(\"invalid value\", \"value\", value);\n    }\n    // Make sure we have at least one whole digit (0 if none)\n    let whole = comps[0];\n    let negative = \"\";\n    if (whole.substring(0, 1) === \"-\") {\n        negative = \"-\";\n        whole = whole.substring(1);\n    }\n    // Make sure we have at least 1 whole digit with no leading zeros\n    while (whole.substring(0, 1) === \"0\") {\n        whole = whole.substring(1);\n    }\n    if (whole === \"\") {\n        whole = \"0\";\n    }\n    let suffix = \"\";\n    if (comps.length === 2) {\n        suffix = \".\" + (comps[1] || \"0\");\n    }\n    while (suffix.length > 2 && suffix[suffix.length - 1] === \"0\") {\n        suffix = suffix.substring(0, suffix.length - 1);\n    }\n    const formatted = [];\n    while (whole.length) {\n        if (whole.length <= 3) {\n            formatted.unshift(whole);\n            break;\n        }\n        else {\n            const index = whole.length - 3;\n            formatted.unshift(whole.substring(index));\n            whole = whole.substring(0, index);\n        }\n    }\n    return negative + formatted.join(\",\") + suffix;\n}\nfunction formatUnits(value, unitName) {\n    if (typeof (unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) {\n            unitName = 3 * index;\n        }\n    }\n    return formatFixed(value, (unitName != null) ? unitName : 18);\n}\nfunction parseUnits(value, unitName) {\n    if (typeof (value) !== \"string\") {\n        units_lib_esm_logger.throwArgumentError(\"value must be a string\", \"value\", value);\n    }\n    if (typeof (unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) {\n            unitName = 3 * index;\n        }\n    }\n    return parseFixed(value, (unitName != null) ? unitName : 18);\n}\nfunction formatEther(wei) {\n    return formatUnits(wei, 18);\n}\nfunction parseEther(ether) {\n    return parseUnits(ether, 18);\n}\n//# sourceMappingURL=index.js.map\n;// CONCATENATED MODULE: ./src/util/Helper.ts\n\r\n\r\nconst showContainer = function (id) {\r\n    let containers = document.querySelectorAll('.container');\r\n    for (let i = 0; i < containers.length; i++) {\r\n        let element = containers[i];\r\n        if (element.id == id) {\r\n            element.classList.remove('d-none');\r\n            element.style.display = 'block';\r\n        }\r\n        else {\r\n            element.style.display = 'none';\r\n        }\r\n    }\r\n};\r\nconst roundNumber = function (number) {\r\n    return Math.round(number * 100) / 100;\r\n};\r\nconst roundNumberDecimal = function (number, decimal) {\r\n    let hundred = parseInt('1' + '0'.repeat(decimal));\r\n    return Math.round(number * hundred) / hundred;\r\n};\r\nconst formatWeiAsCurrency = function (number) {\r\n    return '$' + formatEther(number.toString());\r\n};\r\nconst formatWei = function (number) {\r\n    return formatEther(number.toString());\r\n};\r\nconst roundBigNumber = function (number) {\r\n    return new bignumber(Math.round(number.toNumber() * 100) / 100);\r\n};\r\nconst roundBigNumberDecimal = function (number, decimal) {\r\n    let hundred = parseInt('1' + '0'.repeat(decimal));\r\n    return new bignumber(Math.round(number.toNumber() * hundred) / hundred);\r\n};\r\nconst Helper_AddressZero = \"0x0000000000000000000000000000000000000000\";\r\nconst isJSON = function (str) {\r\n    try {\r\n        return JSON.parse(str);\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n};\r\nconst ethereumInstalled = function () {\r\n    try {\r\n        // @ts-ignore\r\n        return (typeof window.ethereum !== 'undefined');\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n};\r\nconst shortEth = function (ethAddress) {\r\n    if (!ethAddress)\r\n        return '';\r\n    return ethAddress.substring(0, 6) + \"...\" + ethAddress.substring(ethAddress.length - 4);\r\n};\r\nconst upperFirstLetter = function (text) {\r\n    return text[0].toUpperCase() + text.substring(1);\r\n};\r\nconst showBar = function (text) {\r\n    let header = document.querySelector('header');\r\n    if (!header)\r\n        return;\r\n    let warningHtml = '<div class=\"errorBar\">' + text + '</div>';\r\n    header.insertAdjacentHTML('beforebegin', warningHtml);\r\n};\r\n\n;// CONCATENATED MODULE: ./src/services/backend/AuthenticateService.ts\nvar AuthenticateService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass AuthenticateService extends BaseService {\r\n    constructor() {\r\n        super();\r\n    }\r\n    static enableWeb3() {\r\n        return AuthenticateService_awaiter(this, void 0, void 0, function* () {\r\n            if (App.User.connector)\r\n                return App.User.connector;\r\n            let magicWeb3Connector = new MagicWeb3Connector();\r\n            let connector = yield magicWeb3Connector.activate();\r\n            App.User.connector = connector;\r\n            App.User.magic = connector.magic;\r\n            App.User.provider = connector.provider;\r\n            App.User.ether = connector.ether;\r\n            App.User.signer = connector.signer;\r\n            return connector;\r\n        });\r\n    }\r\n    logOut() {\r\n        return AuthenticateService_awaiter(this, void 0, void 0, function* () {\r\n            let cookieHelper = new CookieHelper(document);\r\n            cookieHelper.deleteCookie('validate');\r\n            if (!App.User.ether) {\r\n                let connection = yield AuthenticateService.enableWeb3();\r\n                App.User.magic = connection.magic;\r\n            }\r\n            App.User.magic.connect.disconnect();\r\n            App.User = new User(null, '', App.Network.ChainId, '');\r\n        });\r\n    }\r\n    login() {\r\n        return AuthenticateService_awaiter(this, void 0, void 0, function* () {\r\n            let connector = yield AuthenticateService.enableWeb3();\r\n            App.User = new User(connector.provider, connector.account, connector.chainId, connector.ether);\r\n            App.User.magic = connector.magic;\r\n            App.User.signer = connector.signer;\r\n            App.User.isLoggedIn = true;\r\n        });\r\n    }\r\n    isAuthenticated() {\r\n        return AuthenticateService_awaiter(this, void 0, void 0, function* () {\r\n            let cookieHelper = new CookieHelper();\r\n            let validate = cookieHelper.getCookieValue('validate');\r\n            if (!validate)\r\n                return false;\r\n            try {\r\n                let obj = JSON.parse(atob(validate));\r\n                App.User.token = obj.token;\r\n                let result = yield this.post('/me/jwt');\r\n                if (!result.jwt) {\r\n                    yield this.logOut();\r\n                    return false;\r\n                }\r\n                yield AuthenticateService.enableWeb3();\r\n                App.User.address = obj.address;\r\n                App.User.alpacaId = obj.alpacaId;\r\n                App.User.chainId = obj.chainId;\r\n                App.User.isLoggedIn = true;\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                cookieHelper.deleteCookie('validate');\r\n                console.info(e);\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n    authenticateUser(enableWeb3Callback, authenticatedCallback) {\r\n        return AuthenticateService_awaiter(this, void 0, void 0, function* () {\r\n            let connector = yield AuthenticateService.enableWeb3();\r\n            if (enableWeb3Callback && connector.provider) {\r\n                enableWeb3Callback(connector.provider);\r\n            }\r\n            if (connector.chainId != App.Network.ChainId) {\r\n                let userNetwork = NetworkInfo.getNetworkInfoByChainId(connector.chainId);\r\n                if (userNetwork) {\r\n                    NetworkInfo.setNetworkByChainId(connector.chainId);\r\n                }\r\n                else {\r\n                    let modal = new SwitchNetworkModal();\r\n                    modal.show();\r\n                    return;\r\n                }\r\n            }\r\n            let response = yield this.post('/me/nonce', { address: connector.account });\r\n            let obj = {\r\n                signingMessage: \"You are logging into Liminal.market.\\n\\nNonce:\" + response.nonce,\r\n                connector: MagicWeb3Connector\r\n            };\r\n            console.log('isWebview', WalletHelper.isWebview());\r\n            // @ts-ignore\r\n            console.log('win.Ethereum', window.ethereum);\r\n            //        console.log('Ethereum', ethereum);\r\n            console.log('connector.ether', connector.ether);\r\n            console.log('network', App.Network);\r\n            // @ts-ignore\r\n            if (window.ethereum) {\r\n                // @ts-ignore\r\n                console.log('Ethereum', window.ethereum.networkVersion, window.ethereum.chainId, App.Network.ChainIdHex);\r\n                if (WalletHelper.isWebview()) {\r\n                }\r\n            }\r\n            console.log('calling signMessage');\r\n            const signedMessage = yield connector.ether.getSigner()\r\n                .signMessage(obj.signingMessage)\r\n                .catch((e) => {\r\n                console.log(e);\r\n                if (e.message && e.message.toLowerCase().indexOf('wrong network') != -1) {\r\n                    showBar('Your wallet is on wrong network. I expect you to be on ' + App.Network.Name + '(chainId:' + App.Network.ChainId + ') network');\r\n                }\r\n                else {\r\n                    showBar('Error signing in:' + e.message);\r\n                }\r\n            });\r\n            if (!signedMessage)\r\n                return;\r\n            let loginResponse = yield this.post('me/validate', { address: connector.account, signedMessage });\r\n            if (!loginResponse.address) {\r\n                yield this.logOut();\r\n                return;\r\n            }\r\n            App.User.setValidate(loginResponse);\r\n            App.User.token = loginResponse.token;\r\n            App.User.alpacaId = loginResponse.alpacaId;\r\n            App.User.address = loginResponse.address;\r\n            App.User.isLoggedIn = true;\r\n            if (authenticatedCallback) {\r\n                authenticatedCallback();\r\n            }\r\n            else {\r\n                location.reload();\r\n            }\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/_version.js\nconst abi_lib_esm_version_version = \"abi/5.7.0\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js\n\n\n\n\n\n\nconst abstract_coder_logger = new Logger(abi_lib_esm_version_version);\nfunction checkResultErrors(result) {\n    // Find the first error (if any)\n    const errors = [];\n    const checkErrors = function (path, object) {\n        if (!Array.isArray(object)) {\n            return;\n        }\n        for (let key in object) {\n            const childPath = path.slice();\n            childPath.push(key);\n            try {\n                checkErrors(childPath, object[key]);\n            }\n            catch (error) {\n                errors.push({ path: childPath, error: error });\n            }\n        }\n    };\n    checkErrors([], result);\n    return errors;\n}\nclass Coder {\n    constructor(name, type, localName, dynamic) {\n        // @TODO: defineReadOnly these\n        this.name = name;\n        this.type = type;\n        this.localName = localName;\n        this.dynamic = dynamic;\n    }\n    _throwError(message, value) {\n        abstract_coder_logger.throwArgumentError(message, this.localName, value);\n    }\n}\nclass Writer {\n    constructor(wordSize) {\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        this._data = [];\n        this._dataLength = 0;\n        this._padding = new Uint8Array(wordSize);\n    }\n    get data() {\n        return hexConcat(this._data);\n    }\n    get length() { return this._dataLength; }\n    _writeData(data) {\n        this._data.push(data);\n        this._dataLength += data.length;\n        return data.length;\n    }\n    appendWriter(writer) {\n        return this._writeData(concat(writer._data));\n    }\n    // Arrayish items; padded on the right to wordSize\n    writeBytes(value) {\n        let bytes = arrayify(value);\n        const paddingOffset = bytes.length % this.wordSize;\n        if (paddingOffset) {\n            bytes = concat([bytes, this._padding.slice(paddingOffset)]);\n        }\n        return this._writeData(bytes);\n    }\n    _getValue(value) {\n        let bytes = arrayify(BigNumber.from(value));\n        if (bytes.length > this.wordSize) {\n            abstract_coder_logger.throwError(\"value out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                length: this.wordSize,\n                offset: bytes.length\n            });\n        }\n        if (bytes.length % this.wordSize) {\n            bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);\n        }\n        return bytes;\n    }\n    // BigNumberish items; padded on the left to wordSize\n    writeValue(value) {\n        return this._writeData(this._getValue(value));\n    }\n    writeUpdatableValue() {\n        const offset = this._data.length;\n        this._data.push(this._padding);\n        this._dataLength += this.wordSize;\n        return (value) => {\n            this._data[offset] = this._getValue(value);\n        };\n    }\n}\nclass Reader {\n    constructor(data, wordSize, coerceFunc, allowLoose) {\n        defineReadOnly(this, \"_data\", arrayify(data));\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        defineReadOnly(this, \"_coerceFunc\", coerceFunc);\n        defineReadOnly(this, \"allowLoose\", allowLoose);\n        this._offset = 0;\n    }\n    get data() { return hexlify(this._data); }\n    get consumed() { return this._offset; }\n    // The default Coerce function\n    static coerce(name, value) {\n        let match = name.match(\"^u?int([0-9]+)$\");\n        if (match && parseInt(match[1]) <= 48) {\n            value = value.toNumber();\n        }\n        return value;\n    }\n    coerce(name, value) {\n        if (this._coerceFunc) {\n            return this._coerceFunc(name, value);\n        }\n        return Reader.coerce(name, value);\n    }\n    _peekBytes(offset, length, loose) {\n        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n        if (this._offset + alignedLength > this._data.length) {\n            if (this.allowLoose && loose && this._offset + length <= this._data.length) {\n                alignedLength = length;\n            }\n            else {\n                abstract_coder_logger.throwError(\"data out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                    length: this._data.length,\n                    offset: this._offset + alignedLength\n                });\n            }\n        }\n        return this._data.slice(this._offset, this._offset + alignedLength);\n    }\n    subReader(offset) {\n        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);\n    }\n    readBytes(length, loose) {\n        let bytes = this._peekBytes(0, length, !!loose);\n        this._offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n    readValue() {\n        return BigNumber.from(this.readBytes(this.wordSize));\n    }\n}\n//# sourceMappingURL=abstract-coder.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/address.js\n\n\n\n\nclass AddressCoder extends Coder {\n    constructor(localName) {\n        super(\"address\", \"address\", localName, false);\n    }\n    defaultValue() {\n        return \"0x0000000000000000000000000000000000000000\";\n    }\n    encode(writer, value) {\n        try {\n            value = getAddress(value);\n        }\n        catch (error) {\n            this._throwError(error.message, value);\n        }\n        return writer.writeValue(value);\n    }\n    decode(reader) {\n        return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));\n    }\n}\n//# sourceMappingURL=address.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js\n\n\n// Clones the functionality of an existing Coder, but without a localName\nclass AnonymousCoder extends Coder {\n    constructor(coder) {\n        super(coder.name, coder.type, undefined, coder.dynamic);\n        this.coder = coder;\n    }\n    defaultValue() {\n        return this.coder.defaultValue();\n    }\n    encode(writer, value) {\n        return this.coder.encode(writer, value);\n    }\n    decode(reader) {\n        return this.coder.decode(reader);\n    }\n}\n//# sourceMappingURL=anonymous.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/array.js\n\n\n\nconst array_logger = new Logger(abi_lib_esm_version_version);\n\n\nfunction pack(writer, coders, values) {\n    let arrayValues = null;\n    if (Array.isArray(values)) {\n        arrayValues = values;\n    }\n    else if (values && typeof (values) === \"object\") {\n        let unique = {};\n        arrayValues = coders.map((coder) => {\n            const name = coder.localName;\n            if (!name) {\n                array_logger.throwError(\"cannot encode object for signature with missing names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            if (unique[name]) {\n                array_logger.throwError(\"cannot encode object for signature with duplicate names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            unique[name] = true;\n            return values[name];\n        });\n    }\n    else {\n        array_logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n    }\n    if (coders.length !== arrayValues.length) {\n        array_logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n    }\n    let staticWriter = new Writer(writer.wordSize);\n    let dynamicWriter = new Writer(writer.wordSize);\n    let updateFuncs = [];\n    coders.forEach((coder, index) => {\n        let value = arrayValues[index];\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset) => {\n                updateFunc(baseOffset + dynamicOffset);\n            });\n        }\n        else {\n            coder.encode(staticWriter, value);\n        }\n    });\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func) => { func(staticWriter.length); });\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\nfunction unpack(reader, coders) {\n    let values = [];\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n    coders.forEach((coder) => {\n        let value = null;\n        if (coder.dynamic) {\n            let offset = reader.readValue();\n            let offsetReader = baseReader.subReader(offset.toNumber());\n            try {\n                value = coder.decode(offsetReader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        else {\n            try {\n                value = coder.decode(reader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        if (value != undefined) {\n            values.push(value);\n        }\n    });\n    // We only output named properties for uniquely named coders\n    const uniqueNames = coders.reduce((accum, coder) => {\n        const name = coder.localName;\n        if (name) {\n            if (!accum[name]) {\n                accum[name] = 0;\n            }\n            accum[name]++;\n        }\n        return accum;\n    }, {});\n    // Add any named parameters (i.e. tuples)\n    coders.forEach((coder, index) => {\n        let name = coder.localName;\n        if (!name || uniqueNames[name] !== 1) {\n            return;\n        }\n        if (name === \"length\") {\n            name = \"_length\";\n        }\n        if (values[name] != null) {\n            return;\n        }\n        const value = values[index];\n        if (value instanceof Error) {\n            Object.defineProperty(values, name, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        }\n        else {\n            values[name] = value;\n        }\n    });\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if (value instanceof Error) {\n            Object.defineProperty(values, i, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        }\n    }\n    return Object.freeze(values);\n}\nclass ArrayCoder extends Coder {\n    constructor(coder, length, localName) {\n        const type = (coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\");\n        const dynamic = (length === -1 || coder.dynamic);\n        super(\"array\", type, localName, dynamic);\n        this.coder = coder;\n        this.length = length;\n    }\n    defaultValue() {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        const defaultChild = this.coder.defaultValue();\n        const result = [];\n        for (let i = 0; i < this.length; i++) {\n            result.push(defaultChild);\n        }\n        return result;\n    }\n    encode(writer, value) {\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n        let count = this.length;\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n        array_logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName ? (\" \" + this.localName) : \"\"));\n        let coders = [];\n        for (let i = 0; i < value.length; i++) {\n            coders.push(this.coder);\n        }\n        return pack(writer, coders, value);\n    }\n    decode(reader) {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readValue().toNumber();\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            if (count * 32 > reader._data.length) {\n                array_logger.throwError(\"insufficient data length\", Logger.errors.BUFFER_OVERRUN, {\n                    length: reader._data.length,\n                    count: count\n                });\n            }\n        }\n        let coders = [];\n        for (let i = 0; i < count; i++) {\n            coders.push(new AnonymousCoder(this.coder));\n        }\n        return reader.coerce(this.name, unpack(reader, coders));\n    }\n}\n//# sourceMappingURL=array.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/boolean.js\n\n\nclass BooleanCoder extends Coder {\n    constructor(localName) {\n        super(\"bool\", \"bool\", localName, false);\n    }\n    defaultValue() {\n        return false;\n    }\n    encode(writer, value) {\n        return writer.writeValue(value ? 1 : 0);\n    }\n    decode(reader) {\n        return reader.coerce(this.type, !reader.readValue().isZero());\n    }\n}\n//# sourceMappingURL=boolean.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/bytes.js\n\n\n\nclass DynamicBytesCoder extends Coder {\n    constructor(type, localName) {\n        super(type, type, localName, true);\n    }\n    defaultValue() {\n        return \"0x\";\n    }\n    encode(writer, value) {\n        value = arrayify(value);\n        let length = writer.writeValue(value.length);\n        length += writer.writeBytes(value);\n        return length;\n    }\n    decode(reader) {\n        return reader.readBytes(reader.readValue().toNumber(), true);\n    }\n}\nclass BytesCoder extends DynamicBytesCoder {\n    constructor(localName) {\n        super(\"bytes\", localName);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, hexlify(super.decode(reader)));\n    }\n}\n//# sourceMappingURL=bytes.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js\n\n\n\n// @TODO: Merge this with bytes\nclass FixedBytesCoder extends Coder {\n    constructor(size, localName) {\n        let name = \"bytes\" + String(size);\n        super(name, name, localName, false);\n        this.size = size;\n    }\n    defaultValue() {\n        return (\"0x0000000000000000000000000000000000000000000000000000000000000000\").substring(0, 2 + this.size * 2);\n    }\n    encode(writer, value) {\n        let data = arrayify(value);\n        if (data.length !== this.size) {\n            this._throwError(\"incorrect data length\", value);\n        }\n        return writer.writeBytes(data);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));\n    }\n}\n//# sourceMappingURL=fixed-bytes.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/null.js\n\n\nclass NullCoder extends Coder {\n    constructor(localName) {\n        super(\"null\", \"\", localName, false);\n    }\n    defaultValue() {\n        return null;\n    }\n    encode(writer, value) {\n        if (value != null) {\n            this._throwError(\"not null\", value);\n        }\n        return writer.writeBytes([]);\n    }\n    decode(reader) {\n        reader.readBytes(0);\n        return reader.coerce(this.name, null);\n    }\n}\n//# sourceMappingURL=null.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/number.js\n\n\n\n\nclass NumberCoder extends Coder {\n    constructor(size, signed, localName) {\n        const name = ((signed ? \"int\" : \"uint\") + (size * 8));\n        super(name, name, localName, false);\n        this.size = size;\n        this.signed = signed;\n    }\n    defaultValue() {\n        return 0;\n    }\n    encode(writer, value) {\n        let v = BigNumber.from(value);\n        // Check bounds are safe for encoding\n        let maxUintValue = bignumbers_MaxUint256.mask(writer.wordSize * 8);\n        if (this.signed) {\n            let bounds = maxUintValue.mask(this.size * 8 - 1);\n            if (v.gt(bounds) || v.lt(bounds.add(bignumbers_One).mul(bignumbers_NegativeOne))) {\n                this._throwError(\"value out-of-bounds\", value);\n            }\n        }\n        else if (v.lt(bignumbers_Zero) || v.gt(maxUintValue.mask(this.size * 8))) {\n            this._throwError(\"value out-of-bounds\", value);\n        }\n        v = v.toTwos(this.size * 8).mask(this.size * 8);\n        if (this.signed) {\n            v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);\n        }\n        return writer.writeValue(v);\n    }\n    decode(reader) {\n        let value = reader.readValue().mask(this.size * 8);\n        if (this.signed) {\n            value = value.fromTwos(this.size * 8);\n        }\n        return reader.coerce(this.name, value);\n    }\n}\n//# sourceMappingURL=number.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/string.js\n\n\n\nclass StringCoder extends DynamicBytesCoder {\n    constructor(localName) {\n        super(\"string\", localName);\n    }\n    defaultValue() {\n        return \"\";\n    }\n    encode(writer, value) {\n        return super.encode(writer, toUtf8Bytes(value));\n    }\n    decode(reader) {\n        return toUtf8String(super.decode(reader));\n    }\n}\n//# sourceMappingURL=string.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/tuple.js\n\n\n\nclass TupleCoder extends Coder {\n    constructor(coders, localName) {\n        let dynamic = false;\n        const types = [];\n        coders.forEach((coder) => {\n            if (coder.dynamic) {\n                dynamic = true;\n            }\n            types.push(coder.type);\n        });\n        const type = (\"tuple(\" + types.join(\",\") + \")\");\n        super(\"tuple\", type, localName, dynamic);\n        this.coders = coders;\n    }\n    defaultValue() {\n        const values = [];\n        this.coders.forEach((coder) => {\n            values.push(coder.defaultValue());\n        });\n        // We only output named properties for uniquely named coders\n        const uniqueNames = this.coders.reduce((accum, coder) => {\n            const name = coder.localName;\n            if (name) {\n                if (!accum[name]) {\n                    accum[name] = 0;\n                }\n                accum[name]++;\n            }\n            return accum;\n        }, {});\n        // Add named values\n        this.coders.forEach((coder, index) => {\n            let name = coder.localName;\n            if (!name || uniqueNames[name] !== 1) {\n                return;\n            }\n            if (name === \"length\") {\n                name = \"_length\";\n            }\n            if (values[name] != null) {\n                return;\n            }\n            values[name] = values[index];\n        });\n        return Object.freeze(values);\n    }\n    encode(writer, value) {\n        return pack(writer, this.coders, value);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, unpack(reader, this.coders));\n    }\n}\n//# sourceMappingURL=tuple.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/fragments.js\n\n\n\n\n\nconst fragments_logger = new Logger(abi_lib_esm_version_version);\n;\nconst fragments_constructorGuard = {};\nlet ModifiersBytes = { calldata: true, memory: true, storage: true };\nlet ModifiersNest = { calldata: true, memory: true };\nfunction checkModifier(type, name) {\n    if (type === \"bytes\" || type === \"string\") {\n        if (ModifiersBytes[name]) {\n            return true;\n        }\n    }\n    else if (type === \"address\") {\n        if (name === \"payable\") {\n            return true;\n        }\n    }\n    else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n        if (ModifiersNest[name]) {\n            return true;\n        }\n    }\n    if (ModifiersBytes[name] || name === \"payable\") {\n        fragments_logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n    }\n    return false;\n}\n// @TODO: Make sure that children of an indexed tuple are marked with a null indexed\nfunction parseParamType(param, allowIndexed) {\n    let originalParam = param;\n    function throwError(i) {\n        fragments_logger.throwArgumentError(`unexpected character at position ${i}`, \"param\", param);\n    }\n    param = param.replace(/\\s/g, \" \");\n    function newNode(parent) {\n        let node = { type: \"\", name: \"\", parent: parent, state: { allowType: true } };\n        if (allowIndexed) {\n            node.indexed = false;\n        }\n        return node;\n    }\n    let parent = { type: \"\", name: \"\", state: { allowType: true } };\n    let node = parent;\n    for (let i = 0; i < param.length; i++) {\n        let c = param[i];\n        switch (c) {\n            case \"(\":\n                if (node.state.allowType && node.type === \"\") {\n                    node.type = \"tuple\";\n                }\n                else if (!node.state.allowParams) {\n                    throwError(i);\n                }\n                node.state.allowType = false;\n                node.type = verifyType(node.type);\n                node.components = [newNode(node)];\n                node = node.components[0];\n                break;\n            case \")\":\n                delete node.state;\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) {\n                        throwError(i);\n                    }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n                if (checkModifier(node.type, node.name)) {\n                    node.name = \"\";\n                }\n                node.type = verifyType(node.type);\n                let child = node;\n                node = node.parent;\n                if (!node) {\n                    throwError(i);\n                }\n                delete child.parent;\n                node.state.allowParams = false;\n                node.state.allowName = true;\n                node.state.allowArray = true;\n                break;\n            case \",\":\n                delete node.state;\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) {\n                        throwError(i);\n                    }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n                if (checkModifier(node.type, node.name)) {\n                    node.name = \"\";\n                }\n                node.type = verifyType(node.type);\n                let sibling = newNode(node.parent);\n                //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n                node.parent.components.push(sibling);\n                delete node.parent;\n                node = sibling;\n                break;\n            // Hit a space...\n            case \" \":\n                // If reading type, the type is done and may read a param or name\n                if (node.state.allowType) {\n                    if (node.type !== \"\") {\n                        node.type = verifyType(node.type);\n                        delete node.state.allowType;\n                        node.state.allowName = true;\n                        node.state.allowParams = true;\n                    }\n                }\n                // If reading name, the name is done\n                if (node.state.allowName) {\n                    if (node.name !== \"\") {\n                        if (node.name === \"indexed\") {\n                            if (!allowIndexed) {\n                                throwError(i);\n                            }\n                            if (node.indexed) {\n                                throwError(i);\n                            }\n                            node.indexed = true;\n                            node.name = \"\";\n                        }\n                        else if (checkModifier(node.type, node.name)) {\n                            node.name = \"\";\n                        }\n                        else {\n                            node.state.allowName = false;\n                        }\n                    }\n                }\n                break;\n            case \"[\":\n                if (!node.state.allowArray) {\n                    throwError(i);\n                }\n                node.type += c;\n                node.state.allowArray = false;\n                node.state.allowName = false;\n                node.state.readArray = true;\n                break;\n            case \"]\":\n                if (!node.state.readArray) {\n                    throwError(i);\n                }\n                node.type += c;\n                node.state.readArray = false;\n                node.state.allowArray = true;\n                node.state.allowName = true;\n                break;\n            default:\n                if (node.state.allowType) {\n                    node.type += c;\n                    node.state.allowParams = true;\n                    node.state.allowArray = true;\n                }\n                else if (node.state.allowName) {\n                    node.name += c;\n                    delete node.state.allowArray;\n                }\n                else if (node.state.readArray) {\n                    node.type += c;\n                }\n                else {\n                    throwError(i);\n                }\n        }\n    }\n    if (node.parent) {\n        fragments_logger.throwArgumentError(\"unexpected eof\", \"param\", param);\n    }\n    delete parent.state;\n    if (node.name === \"indexed\") {\n        if (!allowIndexed) {\n            throwError(originalParam.length - 7);\n        }\n        if (node.indexed) {\n            throwError(originalParam.length - 7);\n        }\n        node.indexed = true;\n        node.name = \"\";\n    }\n    else if (checkModifier(node.type, node.name)) {\n        node.name = \"\";\n    }\n    parent.type = verifyType(parent.type);\n    return parent;\n}\nfunction populate(object, params) {\n    for (let key in params) {\n        defineReadOnly(object, key, params[key]);\n    }\n}\nconst FormatTypes = Object.freeze({\n    // Bare formatting, as is needed for computing a sighash of an event or function\n    sighash: \"sighash\",\n    // Human-Readable with Minimal spacing and without names (compact human-readable)\n    minimal: \"minimal\",\n    // Human-Readable with nice spacing, including all names\n    full: \"full\",\n    // JSON-format a la Solidity\n    json: \"json\"\n});\nconst paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nclass ParamType {\n    constructor(constructorGuard, params) {\n        if (constructorGuard !== fragments_constructorGuard) {\n            fragments_logger.throwError(\"use fromString\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new ParamType()\"\n            });\n        }\n        populate(this, params);\n        let match = this.type.match(paramTypeArray);\n        if (match) {\n            populate(this, {\n                arrayLength: parseInt(match[2] || \"-1\"),\n                arrayChildren: ParamType.fromObject({\n                    type: match[1],\n                    components: this.components\n                }),\n                baseType: \"array\"\n            });\n        }\n        else {\n            populate(this, {\n                arrayLength: null,\n                arrayChildren: null,\n                baseType: ((this.components != null) ? \"tuple\" : this.type)\n            });\n        }\n        this._isParamType = true;\n        Object.freeze(this);\n    }\n    // Format the parameter fragment\n    //   - sighash: \"(uint256,address)\"\n    //   - minimal: \"tuple(uint256,address) indexed\"\n    //   - full:    \"tuple(uint256 foo, address bar) indexed baz\"\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            fragments_logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            let result = {\n                type: ((this.baseType === \"tuple\") ? \"tuple\" : this.type),\n                name: (this.name || undefined)\n            };\n            if (typeof (this.indexed) === \"boolean\") {\n                result.indexed = this.indexed;\n            }\n            if (this.components) {\n                result.components = this.components.map((comp) => JSON.parse(comp.format(format)));\n            }\n            return JSON.stringify(result);\n        }\n        let result = \"\";\n        // Array\n        if (this.baseType === \"array\") {\n            result += this.arrayChildren.format(format);\n            result += \"[\" + (this.arrayLength < 0 ? \"\" : String(this.arrayLength)) + \"]\";\n        }\n        else {\n            if (this.baseType === \"tuple\") {\n                if (format !== FormatTypes.sighash) {\n                    result += this.type;\n                }\n                result += \"(\" + this.components.map((comp) => comp.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \")\";\n            }\n            else {\n                result += this.type;\n            }\n        }\n        if (format !== FormatTypes.sighash) {\n            if (this.indexed === true) {\n                result += \" indexed\";\n            }\n            if (format === FormatTypes.full && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n        return result;\n    }\n    static from(value, allowIndexed) {\n        if (typeof (value) === \"string\") {\n            return ParamType.fromString(value, allowIndexed);\n        }\n        return ParamType.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ParamType.isParamType(value)) {\n            return value;\n        }\n        return new ParamType(fragments_constructorGuard, {\n            name: (value.name || null),\n            type: verifyType(value.type),\n            indexed: ((value.indexed == null) ? null : !!value.indexed),\n            components: (value.components ? value.components.map(ParamType.fromObject) : null)\n        });\n    }\n    static fromString(value, allowIndexed) {\n        function ParamTypify(node) {\n            return ParamType.fromObject({\n                name: node.name,\n                type: node.type,\n                indexed: node.indexed,\n                components: node.components\n            });\n        }\n        return ParamTypify(parseParamType(value, !!allowIndexed));\n    }\n    static isParamType(value) {\n        return !!(value != null && value._isParamType);\n    }\n}\n;\nfunction parseParams(value, allowIndex) {\n    return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));\n}\nclass Fragment {\n    constructor(constructorGuard, params) {\n        if (constructorGuard !== fragments_constructorGuard) {\n            fragments_logger.throwError(\"use a static from method\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new Fragment()\"\n            });\n        }\n        populate(this, params);\n        this._isFragment = true;\n        Object.freeze(this);\n    }\n    static from(value) {\n        if (Fragment.isFragment(value)) {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            return Fragment.fromString(value);\n        }\n        return Fragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (Fragment.isFragment(value)) {\n            return value;\n        }\n        switch (value.type) {\n            case \"function\":\n                return FunctionFragment.fromObject(value);\n            case \"event\":\n                return EventFragment.fromObject(value);\n            case \"constructor\":\n                return ConstructorFragment.fromObject(value);\n            case \"error\":\n                return ErrorFragment.fromObject(value);\n            case \"fallback\":\n            case \"receive\":\n                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n                return null;\n        }\n        return fragments_logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n    }\n    static fromString(value) {\n        // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n        value = value.replace(/\\s/g, \" \");\n        value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n        value = value.trim();\n        if (value.split(\" \")[0] === \"event\") {\n            return EventFragment.fromString(value.substring(5).trim());\n        }\n        else if (value.split(\" \")[0] === \"function\") {\n            return FunctionFragment.fromString(value.substring(8).trim());\n        }\n        else if (value.split(\"(\")[0].trim() === \"constructor\") {\n            return ConstructorFragment.fromString(value.trim());\n        }\n        else if (value.split(\" \")[0] === \"error\") {\n            return ErrorFragment.fromString(value.substring(5).trim());\n        }\n        return fragments_logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n    }\n    static isFragment(value) {\n        return !!(value && value._isFragment);\n    }\n}\nclass EventFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            fragments_logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"event \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (format !== FormatTypes.sighash) {\n            if (this.anonymous) {\n                result += \"anonymous \";\n            }\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return EventFragment.fromString(value);\n        }\n        return EventFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (EventFragment.isEventFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"event\") {\n            fragments_logger.throwArgumentError(\"invalid event object\", \"value\", value);\n        }\n        const params = {\n            name: verifyIdentifier(value.name),\n            anonymous: value.anonymous,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            type: \"event\"\n        };\n        return new EventFragment(fragments_constructorGuard, params);\n    }\n    static fromString(value) {\n        let match = value.match(regexParen);\n        if (!match) {\n            fragments_logger.throwArgumentError(\"invalid event string\", \"value\", value);\n        }\n        let anonymous = false;\n        match[3].split(\" \").forEach((modifier) => {\n            switch (modifier.trim()) {\n                case \"anonymous\":\n                    anonymous = true;\n                    break;\n                case \"\":\n                    break;\n                default:\n                    fragments_logger.warn(\"unknown modifier: \" + modifier);\n            }\n        });\n        return EventFragment.fromObject({\n            name: match[1].trim(),\n            anonymous: anonymous,\n            inputs: parseParams(match[2], true),\n            type: \"event\"\n        });\n    }\n    static isEventFragment(value) {\n        return (value && value._isFragment && value.type === \"event\");\n    }\n}\nfunction parseGas(value, params) {\n    params.gas = null;\n    let comps = value.split(\"@\");\n    if (comps.length !== 1) {\n        if (comps.length > 2) {\n            fragments_logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n        }\n        if (!comps[1].match(/^[0-9]+$/)) {\n            fragments_logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n        }\n        params.gas = BigNumber.from(comps[1]);\n        return comps[0];\n    }\n    return value;\n}\nfunction parseModifiers(value, params) {\n    params.constant = false;\n    params.payable = false;\n    params.stateMutability = \"nonpayable\";\n    value.split(\" \").forEach((modifier) => {\n        switch (modifier.trim()) {\n            case \"constant\":\n                params.constant = true;\n                break;\n            case \"payable\":\n                params.payable = true;\n                params.stateMutability = \"payable\";\n                break;\n            case \"nonpayable\":\n                params.payable = false;\n                params.stateMutability = \"nonpayable\";\n                break;\n            case \"pure\":\n                params.constant = true;\n                params.stateMutability = \"pure\";\n                break;\n            case \"view\":\n                params.constant = true;\n                params.stateMutability = \"view\";\n                break;\n            case \"external\":\n            case \"public\":\n            case \"\":\n                break;\n            default:\n                console.log(\"unknown modifier: \" + modifier);\n        }\n    });\n}\nfunction verifyState(value) {\n    let result = {\n        constant: false,\n        payable: true,\n        stateMutability: \"payable\"\n    };\n    if (value.stateMutability != null) {\n        result.stateMutability = value.stateMutability;\n        // Set (and check things are consistent) the constant property\n        result.constant = (result.stateMutability === \"view\" || result.stateMutability === \"pure\");\n        if (value.constant != null) {\n            if ((!!value.constant) !== result.constant) {\n                fragments_logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n        // Set (and check things are consistent) the payable property\n        result.payable = (result.stateMutability === \"payable\");\n        if (value.payable != null) {\n            if ((!!value.payable) !== result.payable) {\n                fragments_logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n    }\n    else if (value.payable != null) {\n        result.payable = !!value.payable;\n        // If payable we can assume non-constant; otherwise we can't assume\n        if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n            fragments_logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n        }\n        result.constant = !!value.constant;\n        if (result.constant) {\n            result.stateMutability = \"view\";\n        }\n        else {\n            result.stateMutability = (result.payable ? \"payable\" : \"nonpayable\");\n        }\n        if (result.payable && result.constant) {\n            fragments_logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n        }\n    }\n    else if (value.constant != null) {\n        result.constant = !!value.constant;\n        result.payable = !result.constant;\n        result.stateMutability = (result.constant ? \"view\" : \"payable\");\n    }\n    else if (value.type !== \"constructor\") {\n        fragments_logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n    }\n    return result;\n}\nclass ConstructorFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            fragments_logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber() : undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n        if (format === FormatTypes.sighash) {\n            fragments_logger.throwError(\"cannot format a constructor for sighash\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"format(sighash)\"\n            });\n        }\n        let result = \"constructor(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n            result += this.stateMutability + \" \";\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return ConstructorFragment.fromString(value);\n        }\n        return ConstructorFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ConstructorFragment.isConstructorFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"constructor\") {\n            fragments_logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n        }\n        let state = verifyState(value);\n        if (state.constant) {\n            fragments_logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n        }\n        const params = {\n            name: null,\n            type: value.type,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas) : null)\n        };\n        return new ConstructorFragment(fragments_constructorGuard, params);\n    }\n    static fromString(value) {\n        let params = { type: \"constructor\" };\n        value = parseGas(value, params);\n        let parens = value.match(regexParen);\n        if (!parens || parens[1].trim() !== \"constructor\") {\n            fragments_logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n        }\n        params.inputs = parseParams(parens[2].trim(), false);\n        parseModifiers(parens[3].trim(), params);\n        return ConstructorFragment.fromObject(params);\n    }\n    static isConstructorFragment(value) {\n        return (value && value._isFragment && value.type === \"constructor\");\n    }\n}\nclass FunctionFragment extends ConstructorFragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            fragments_logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber() : undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n                outputs: this.outputs.map((output) => JSON.parse(output.format(format))),\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"function \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        if (format !== FormatTypes.sighash) {\n            if (this.stateMutability) {\n                if (this.stateMutability !== \"nonpayable\") {\n                    result += (this.stateMutability + \" \");\n                }\n            }\n            else if (this.constant) {\n                result += \"view \";\n            }\n            if (this.outputs && this.outputs.length) {\n                result += \"returns (\" + this.outputs.map((output) => output.format(format)).join(\", \") + \") \";\n            }\n            if (this.gas != null) {\n                result += \"@\" + this.gas.toString() + \" \";\n            }\n        }\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return FunctionFragment.fromString(value);\n        }\n        return FunctionFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (FunctionFragment.isFunctionFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"function\") {\n            fragments_logger.throwArgumentError(\"invalid function object\", \"value\", value);\n        }\n        let state = verifyState(value);\n        const params = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            constant: state.constant,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            outputs: (value.outputs ? value.outputs.map(ParamType.fromObject) : []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas) : null)\n        };\n        return new FunctionFragment(fragments_constructorGuard, params);\n    }\n    static fromString(value) {\n        let params = { type: \"function\" };\n        value = parseGas(value, params);\n        let comps = value.split(\" returns \");\n        if (comps.length > 2) {\n            fragments_logger.throwArgumentError(\"invalid function string\", \"value\", value);\n        }\n        let parens = comps[0].match(regexParen);\n        if (!parens) {\n            fragments_logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n        }\n        params.name = parens[1].trim();\n        if (params.name) {\n            verifyIdentifier(params.name);\n        }\n        params.inputs = parseParams(parens[2], false);\n        parseModifiers(parens[3].trim(), params);\n        // We have outputs\n        if (comps.length > 1) {\n            let returns = comps[1].match(regexParen);\n            if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n                fragments_logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n            }\n            params.outputs = parseParams(returns[2], false);\n        }\n        else {\n            params.outputs = [];\n        }\n        return FunctionFragment.fromObject(params);\n    }\n    static isFunctionFragment(value) {\n        return (value && value._isFragment && value.type === \"function\");\n    }\n}\n//export class StructFragment extends Fragment {\n//}\nfunction checkForbidden(fragment) {\n    const sig = fragment.format();\n    if (sig === \"Error(string)\" || sig === \"Panic(uint256)\") {\n        fragments_logger.throwArgumentError(`cannot specify user defined ${sig} error`, \"fragment\", fragment);\n    }\n    return fragment;\n}\nclass ErrorFragment extends Fragment {\n    format(format) {\n        if (!format) {\n            format = FormatTypes.sighash;\n        }\n        if (!FormatTypes[format]) {\n            fragments_logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"error\",\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n            });\n        }\n        let result = \"\";\n        if (format !== FormatTypes.sighash) {\n            result += \"error \";\n        }\n        result += this.name + \"(\" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? \", \" : \",\") + \") \";\n        return result.trim();\n    }\n    static from(value) {\n        if (typeof (value) === \"string\") {\n            return ErrorFragment.fromString(value);\n        }\n        return ErrorFragment.fromObject(value);\n    }\n    static fromObject(value) {\n        if (ErrorFragment.isErrorFragment(value)) {\n            return value;\n        }\n        if (value.type !== \"error\") {\n            fragments_logger.throwArgumentError(\"invalid error object\", \"value\", value);\n        }\n        const params = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : [])\n        };\n        return checkForbidden(new ErrorFragment(fragments_constructorGuard, params));\n    }\n    static fromString(value) {\n        let params = { type: \"error\" };\n        let parens = value.match(regexParen);\n        if (!parens) {\n            fragments_logger.throwArgumentError(\"invalid error signature\", \"value\", value);\n        }\n        params.name = parens[1].trim();\n        if (params.name) {\n            verifyIdentifier(params.name);\n        }\n        params.inputs = parseParams(parens[2], false);\n        return checkForbidden(ErrorFragment.fromObject(params));\n    }\n    static isErrorFragment(value) {\n        return (value && value._isFragment && value.type === \"error\");\n    }\n}\nfunction verifyType(type) {\n    // These need to be transformed to their full description\n    if (type.match(/^uint($|[^1-9])/)) {\n        type = \"uint256\" + type.substring(4);\n    }\n    else if (type.match(/^int($|[^1-9])/)) {\n        type = \"int256\" + type.substring(3);\n    }\n    // @TODO: more verification\n    return type;\n}\n// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234\nconst regexIdentifier = new RegExp(\"^[a-zA-Z$_][a-zA-Z0-9$_]*$\");\nfunction verifyIdentifier(value) {\n    if (!value || !value.match(regexIdentifier)) {\n        fragments_logger.throwArgumentError(`invalid identifier \"${value}\"`, \"value\", value);\n    }\n    return value;\n}\nconst regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\nfunction splitNesting(value) {\n    value = value.trim();\n    let result = [];\n    let accum = \"\";\n    let depth = 0;\n    for (let offset = 0; offset < value.length; offset++) {\n        let c = value[offset];\n        if (c === \",\" && depth === 0) {\n            result.push(accum);\n            accum = \"\";\n        }\n        else {\n            accum += c;\n            if (c === \"(\") {\n                depth++;\n            }\n            else if (c === \")\") {\n                depth--;\n                if (depth === -1) {\n                    fragments_logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n                }\n            }\n        }\n    }\n    if (accum) {\n        result.push(accum);\n    }\n    return result;\n}\n//# sourceMappingURL=fragments.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/abi-coder.js\n\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\n\n\n\n\nconst abi_coder_logger = new Logger(abi_lib_esm_version_version);\n\n\n\n\n\n\n\n\n\n\n\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nclass AbiCoder {\n    constructor(coerceFunc) {\n        defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n    }\n    _getCoder(param) {\n        switch (param.baseType) {\n            case \"address\":\n                return new AddressCoder(param.name);\n            case \"bool\":\n                return new BooleanCoder(param.name);\n            case \"string\":\n                return new StringCoder(param.name);\n            case \"bytes\":\n                return new BytesCoder(param.name);\n            case \"array\":\n                return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n            case \"tuple\":\n                return new TupleCoder((param.components || []).map((component) => {\n                    return this._getCoder(component);\n                }), param.name);\n            case \"\":\n                return new NullCoder(param.name);\n        }\n        // u?int[0-9]*\n        let match = param.type.match(paramTypeNumber);\n        if (match) {\n            let size = parseInt(match[2] || \"256\");\n            if (size === 0 || size > 256 || (size % 8) !== 0) {\n                abi_coder_logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n            }\n            return new NumberCoder(size / 8, (match[1] === \"int\"), param.name);\n        }\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            let size = parseInt(match[1]);\n            if (size === 0 || size > 32) {\n                abi_coder_logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n            }\n            return new FixedBytesCoder(size, param.name);\n        }\n        return abi_coder_logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n    }\n    _getWordSize() { return 32; }\n    _getReader(data, allowLoose) {\n        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n    }\n    _getWriter() {\n        return new Writer(this._getWordSize());\n    }\n    getDefaultValue(types) {\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.defaultValue();\n    }\n    encode(types, values) {\n        if (types.length !== values.length) {\n            abi_coder_logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n                count: { types: types.length, values: values.length },\n                value: { types: types, values: values }\n            });\n        }\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = (new TupleCoder(coders, \"_\"));\n        const writer = this._getWriter();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n    decode(types, data, loose) {\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.decode(this._getReader(arrayify(data), loose));\n    }\n}\nconst defaultAbiCoder = new AbiCoder();\n//# sourceMappingURL=abi-coder.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/interface.js\n\n\n\n\n\n\n\n\n\n\n\n\nconst interface_logger = new Logger(abi_lib_esm_version_version);\n\nclass LogDescription extends Description {\n}\nclass TransactionDescription extends Description {\n}\nclass ErrorDescription extends Description {\n}\nclass Indexed extends Description {\n    static isIndexed(value) {\n        return !!(value && value._isIndexed);\n    }\n}\nconst BuiltinErrors = {\n    \"0x08c379a0\": { signature: \"Error(string)\", name: \"Error\", inputs: [\"string\"], reason: true },\n    \"0x4e487b71\": { signature: \"Panic(uint256)\", name: \"Panic\", inputs: [\"uint256\"] }\n};\nfunction wrapAccessError(property, error) {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n    wrap.error = error;\n    return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nclass Interface {\n    constructor(fragments) {\n        let abi = [];\n        if (typeof (fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        }\n        else {\n            abi = fragments;\n        }\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n        defineReadOnly(this, \"_abiCoder\", getStatic(new.target, \"getAbiCoder\")());\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"errors\", {});\n        defineReadOnly(this, \"events\", {});\n        defineReadOnly(this, \"structs\", {});\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        interface_logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                case \"error\":\n                    bucket = this.errors;\n                    break;\n                default:\n                    return;\n            }\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                interface_logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n            bucket[signature] = fragment;\n        });\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n    format(format) {\n        if (!format) {\n            format = FormatTypes.full;\n        }\n        if (format === FormatTypes.sighash) {\n            interface_logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n            return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n        return abi;\n    }\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder() {\n        return defaultAbiCoder;\n    }\n    static getAddress(address) {\n        return getAddress(address);\n    }\n    static getSighash(fragment) {\n        return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n    static getEventTopic(eventFragment) {\n        return id(eventFragment.format());\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            interface_logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                interface_logger.throwArgumentError(\"no matching function\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                interface_logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n            return this.functions[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            interface_logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic) {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            interface_logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                interface_logger.throwArgumentError(\"no matching event\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                interface_logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n            return this.events[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            interface_logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getError(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            const getSighash = getStatic(this.constructor, \"getSighash\");\n            for (const name in this.errors) {\n                const error = this.errors[name];\n                if (nameOrSignatureOrSighash === getSighash(error)) {\n                    return this.errors[name];\n                }\n            }\n            interface_logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.errors).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                interface_logger.throwArgumentError(\"no matching error\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                interface_logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n            }\n            return this.errors[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            interface_logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(fragment) {\n        if (typeof (fragment) === \"string\") {\n            try {\n                fragment = this.getFunction(fragment);\n            }\n            catch (error) {\n                try {\n                    fragment = this.getError(fragment);\n                }\n                catch (_) {\n                    throw error;\n                }\n            }\n        }\n        return getStatic(this.constructor, \"getSighash\")(fragment);\n    }\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n    _decodeParams(params, data) {\n        return this._abiCoder.decode(params, data);\n    }\n    _encodeParams(params, values) {\n        return this._abiCoder.encode(params, values);\n    }\n    encodeDeploy(values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    }\n    decodeErrorResult(fragment, data) {\n        if (typeof (fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n            interface_logger.throwArgumentError(`data signature does not match error ${fragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n    encodeErrorResult(fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n        return hexlify(concat([\n            this.getSighash(fragment),\n            this._encodeParams(fragment.inputs, values || [])\n        ]));\n    }\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            interface_logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [])\n        ]));\n    }\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        let bytes = arrayify(data);\n        let reason = null;\n        let message = \"\";\n        let errorArgs = null;\n        let errorName = null;\n        let errorSignature = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                }\n                catch (error) { }\n                break;\n            case 4: {\n                const selector = hexlify(bytes.slice(0, 4));\n                const builtin = BuiltinErrors[selector];\n                if (builtin) {\n                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n                    errorName = builtin.name;\n                    errorSignature = builtin.signature;\n                    if (builtin.reason) {\n                        reason = errorArgs[0];\n                    }\n                    if (errorName === \"Error\") {\n                        message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;\n                    }\n                    else if (errorName === \"Panic\") {\n                        message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;\n                    }\n                }\n                else {\n                    try {\n                        const error = this.getError(selector);\n                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                        errorName = error.name;\n                        errorSignature = error.format();\n                    }\n                    catch (error) { }\n                }\n                break;\n            }\n        }\n        return interface_logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            data: hexlify(data), errorArgs, errorName, errorSignature, reason\n        });\n    }\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    }\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (values.length > eventFragment.inputs.length) {\n            interface_logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            });\n        }\n        let topics = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        const encodeTopic = (param, value) => {\n            if (param.type === \"string\") {\n                return id(value);\n            }\n            else if (param.type === \"bytes\") {\n                return keccak256(hexlify(value));\n            }\n            if (param.type === \"bool\" && typeof (value) === \"boolean\") {\n                value = (value ? \"0x01\" : \"0x00\");\n            }\n            if (param.type.match(/^u?int/)) {\n                value = BigNumber.from(value).toHexString();\n            }\n            // Check addresses are valid\n            if (param.type === \"address\") {\n                this._abiCoder.encode([\"address\"], [value]);\n            }\n            return hexZeroPad(hexlify(value), 32);\n        };\n        values.forEach((value, index) => {\n            let param = eventFragment.inputs[index];\n            if (!param.indexed) {\n                if (value != null) {\n                    interface_logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n            if (value == null) {\n                topics.push(null);\n            }\n            else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                interface_logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            }\n            else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            }\n            else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n        return topics;\n    }\n    encodeEventLog(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        const topics = [];\n        const dataTypes = [];\n        const dataValues = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        if (values.length !== eventFragment.inputs.length) {\n            interface_logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value));\n                }\n                else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value));\n                }\n                else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                }\n                else {\n                    topics.push(this._abiCoder.encode([param.type], [value]));\n                }\n            }\n            else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n        return {\n            data: this._abiCoder.encode(dataTypes, dataValues),\n            topics: topics\n        };\n    }\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment, data, topics) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                interface_logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n        let indexed = [];\n        let nonIndexed = [];\n        let dynamic = [];\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                }\n                else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            }\n            else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)) : null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n        let result = [];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n                }\n                else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n                }\n                else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    }\n                    catch (error) {\n                        result[index] = error;\n                    }\n                }\n            }\n            else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                }\n                catch (error) {\n                    result[index] = error;\n                }\n            }\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        enumerable: true,\n                        get: () => { throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value); }\n                    });\n                }\n                else {\n                    result[param.name] = value;\n                }\n            }\n        });\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    enumerable: true,\n                    get: () => { throw wrapAccessError(`index ${i}`, value); }\n                });\n            }\n        }\n        return Object.freeze(result);\n    }\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx) {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log) {\n        let fragment = this.getEvent(log.topics[0]);\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n        return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n    parseError(data) {\n        const hexData = hexlify(data);\n        let fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new ErrorDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n            errorFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n        });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n    static isInterface(value) {\n        return !!(value && value._isInterface);\n    }\n}\n//# sourceMappingURL=interface.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/contracts/lib.esm/_version.js\nconst contracts_lib_esm_version_version = \"contracts/5.7.0\";\n//# sourceMappingURL=_version.js.map\n;// CONCATENATED MODULE: ./node_modules/@ethersproject/contracts/lib.esm/index.js\n\nvar contracts_lib_esm_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\n\n\n\nconst contracts_lib_esm_logger = new Logger(contracts_lib_esm_version_version);\n;\n;\n///////////////////////////////\nconst contracts_lib_esm_allowedTransactionKeys = {\n    chainId: true, data: true, from: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true,\n    customData: true,\n    ccipReadEnabled: true\n};\nfunction resolveName(resolver, nameOrPromise) {\n    return contracts_lib_esm_awaiter(this, void 0, void 0, function* () {\n        const name = yield nameOrPromise;\n        if (typeof (name) !== \"string\") {\n            contracts_lib_esm_logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n        }\n        // If it is already an address, just use it (after adding checksum)\n        try {\n            return getAddress(name);\n        }\n        catch (error) { }\n        if (!resolver) {\n            contracts_lib_esm_logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"resolveName\"\n            });\n        }\n        const address = yield resolver.resolveName(name);\n        if (address == null) {\n            contracts_lib_esm_logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n        }\n        return address;\n    });\n}\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nfunction resolveAddresses(resolver, value, paramType) {\n    return contracts_lib_esm_awaiter(this, void 0, void 0, function* () {\n        if (Array.isArray(paramType)) {\n            return yield Promise.all(paramType.map((paramType, index) => {\n                return resolveAddresses(resolver, ((Array.isArray(value)) ? value[index] : value[paramType.name]), paramType);\n            }));\n        }\n        if (paramType.type === \"address\") {\n            return yield resolveName(resolver, value);\n        }\n        if (paramType.type === \"tuple\") {\n            return yield resolveAddresses(resolver, value, paramType.components);\n        }\n        if (paramType.baseType === \"array\") {\n            if (!Array.isArray(value)) {\n                return Promise.reject(contracts_lib_esm_logger.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"value\",\n                    value\n                }));\n            }\n            return yield Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));\n        }\n        return value;\n    });\n}\nfunction populateTransaction(contract, fragment, args) {\n    return contracts_lib_esm_awaiter(this, void 0, void 0, function* () {\n        // If an extra argument is given, it is overrides\n        let overrides = {};\n        if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n            overrides = shallowCopy(args.pop());\n        }\n        // Make sure the parameter count matches\n        contracts_lib_esm_logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n        // Populate \"from\" override (allow promises)\n        if (contract.signer) {\n            if (overrides.from) {\n                // Contracts with a Signer are from the Signer's frame-of-reference;\n                // but we allow overriding \"from\" if it matches the signer\n                overrides.from = resolveProperties({\n                    override: resolveName(contract.signer, overrides.from),\n                    signer: contract.signer.getAddress()\n                }).then((check) => contracts_lib_esm_awaiter(this, void 0, void 0, function* () {\n                    if (getAddress(check.signer) !== check.override) {\n                        contracts_lib_esm_logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            operation: \"overrides.from\"\n                        });\n                    }\n                    return check.override;\n                }));\n            }\n            else {\n                overrides.from = contract.signer.getAddress();\n            }\n        }\n        else if (overrides.from) {\n            overrides.from = resolveName(contract.provider, overrides.from);\n            //} else {\n            // Contracts without a signer can override \"from\", and if\n            // unspecified the zero address is used\n            //overrides.from = AddressZero;\n        }\n        // Wait for all dependencies to be resolved (prefer the signer over the provider)\n        const resolved = yield resolveProperties({\n            args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n            address: contract.resolvedAddress,\n            overrides: (resolveProperties(overrides) || {})\n        });\n        // The ABI coded transaction\n        const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n        const tx = {\n            data: data,\n            to: resolved.address\n        };\n        // Resolved Overrides\n        const ro = resolved.overrides;\n        // Populate simple overrides\n        if (ro.nonce != null) {\n            tx.nonce = BigNumber.from(ro.nonce).toNumber();\n        }\n        if (ro.gasLimit != null) {\n            tx.gasLimit = BigNumber.from(ro.gasLimit);\n        }\n        if (ro.gasPrice != null) {\n            tx.gasPrice = BigNumber.from(ro.gasPrice);\n        }\n        if (ro.maxFeePerGas != null) {\n            tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);\n        }\n        if (ro.maxPriorityFeePerGas != null) {\n            tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);\n        }\n        if (ro.from != null) {\n            tx.from = ro.from;\n        }\n        if (ro.type != null) {\n            tx.type = ro.type;\n        }\n        if (ro.accessList != null) {\n            tx.accessList = accessListify(ro.accessList);\n        }\n        // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n        if (tx.gasLimit == null && fragment.gas != null) {\n            // Compute the intrinsic gas cost for this transaction\n            // @TODO: This is based on the yellow paper as of Petersburg; this is something\n            // we may wish to parameterize in v6 as part of the Network object. Since this\n            // is always a non-nil to address, we can ignore G_create, but may wish to add\n            // similar logic to the ContractFactory.\n            let intrinsic = 21000;\n            const bytes = arrayify(data);\n            for (let i = 0; i < bytes.length; i++) {\n                intrinsic += 4;\n                if (bytes[i]) {\n                    intrinsic += 64;\n                }\n            }\n            tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n        }\n        // Populate \"value\" override\n        if (ro.value) {\n            const roValue = BigNumber.from(ro.value);\n            if (!roValue.isZero() && !fragment.payable) {\n                contracts_lib_esm_logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: overrides.value\n                });\n            }\n            tx.value = roValue;\n        }\n        if (ro.customData) {\n            tx.customData = shallowCopy(ro.customData);\n        }\n        if (ro.ccipReadEnabled) {\n            tx.ccipReadEnabled = !!ro.ccipReadEnabled;\n        }\n        // Remove the overrides\n        delete overrides.nonce;\n        delete overrides.gasLimit;\n        delete overrides.gasPrice;\n        delete overrides.from;\n        delete overrides.value;\n        delete overrides.type;\n        delete overrides.accessList;\n        delete overrides.maxFeePerGas;\n        delete overrides.maxPriorityFeePerGas;\n        delete overrides.customData;\n        delete overrides.ccipReadEnabled;\n        // Make sure there are no stray overrides, which may indicate a\n        // typo or using an unsupported key.\n        const leftovers = Object.keys(overrides).filter((key) => (overrides[key] != null));\n        if (leftovers.length) {\n            contracts_lib_esm_logger.throwError(`cannot override ${leftovers.map((l) => JSON.stringify(l)).join(\",\")}`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides\",\n                overrides: leftovers\n            });\n        }\n        return tx;\n    });\n}\nfunction buildPopulate(contract, fragment) {\n    return function (...args) {\n        return populateTransaction(contract, fragment, args);\n    };\n}\nfunction buildEstimate(contract, fragment) {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return function (...args) {\n        return contracts_lib_esm_awaiter(this, void 0, void 0, function* () {\n            if (!signerOrProvider) {\n                contracts_lib_esm_logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"estimateGas\"\n                });\n            }\n            const tx = yield populateTransaction(contract, fragment, args);\n            return yield signerOrProvider.estimateGas(tx);\n        });\n    };\n}\nfunction addContractWait(contract, tx) {\n    const wait = tx.wait.bind(tx);\n    tx.wait = (confirmations) => {\n        return wait(confirmations).then((receipt) => {\n            receipt.events = receipt.logs.map((log) => {\n                let event = deepCopy(log);\n                let parsed = null;\n                try {\n                    parsed = contract.interface.parseLog(log);\n                }\n                catch (e) { }\n                // Successfully parsed the event log; include it\n                if (parsed) {\n                    event.args = parsed.args;\n                    event.decode = (data, topics) => {\n                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n                    };\n                    event.event = parsed.name;\n                    event.eventSignature = parsed.signature;\n                }\n                // Useful operations\n                event.removeListener = () => { return contract.provider; };\n                event.getBlock = () => {\n                    return contract.provider.getBlock(receipt.blockHash);\n                };\n                event.getTransaction = () => {\n                    return contract.provider.getTransaction(receipt.transactionHash);\n                };\n                event.getTransactionReceipt = () => {\n                    return Promise.resolve(receipt);\n                };\n                return event;\n            });\n            return receipt;\n        });\n    };\n}\nfunction buildCall(contract, fragment, collapseSimple) {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return function (...args) {\n        return contracts_lib_esm_awaiter(this, void 0, void 0, function* () {\n            // Extract the \"blockTag\" override if present\n            let blockTag = undefined;\n            if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n                const overrides = shallowCopy(args.pop());\n                if (overrides.blockTag != null) {\n                    blockTag = yield overrides.blockTag;\n                }\n                delete overrides.blockTag;\n                args.push(overrides);\n            }\n            // If the contract was just deployed, wait until it is mined\n            if (contract.deployTransaction != null) {\n                yield contract._deployed(blockTag);\n            }\n            // Call a node and get the result\n            const tx = yield populateTransaction(contract, fragment, args);\n            const result = yield signerOrProvider.call(tx, blockTag);\n            try {\n                let value = contract.interface.decodeFunctionResult(fragment, result);\n                if (collapseSimple && fragment.outputs.length === 1) {\n                    value = value[0];\n                }\n                return value;\n            }\n            catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    error.address = contract.address;\n                    error.args = args;\n                    error.transaction = tx;\n                }\n                throw error;\n            }\n        });\n    };\n}\nfunction buildSend(contract, fragment) {\n    return function (...args) {\n        return contracts_lib_esm_awaiter(this, void 0, void 0, function* () {\n            if (!contract.signer) {\n                contracts_lib_esm_logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"sendTransaction\"\n                });\n            }\n            // If the contract was just deployed, wait until it is mined\n            if (contract.deployTransaction != null) {\n                yield contract._deployed();\n            }\n            const txRequest = yield populateTransaction(contract, fragment, args);\n            const tx = yield contract.signer.sendTransaction(txRequest);\n            // Tweak the tx.wait so the receipt has extra properties\n            addContractWait(contract, tx);\n            return tx;\n        });\n    };\n}\nfunction buildDefault(contract, fragment, collapseSimple) {\n    if (fragment.constant) {\n        return buildCall(contract, fragment, collapseSimple);\n    }\n    return buildSend(contract, fragment);\n}\nfunction lib_esm_getEventTag(filter) {\n    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n        return \"*\";\n    }\n    return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            return topic.join(\"|\");\n        }\n        return topic;\n    }).join(\":\") : \"\");\n}\nclass RunningEvent {\n    constructor(tag, filter) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"filter\", filter);\n        this._listeners = [];\n    }\n    addListener(listener, once) {\n        this._listeners.push({ listener: listener, once: once });\n    }\n    removeListener(listener) {\n        let done = false;\n        this._listeners = this._listeners.filter((item) => {\n            if (done || item.listener !== listener) {\n                return true;\n            }\n            done = true;\n            return false;\n        });\n    }\n    removeAllListeners() {\n        this._listeners = [];\n    }\n    listeners() {\n        return this._listeners.map((i) => i.listener);\n    }\n    listenerCount() {\n        return this._listeners.length;\n    }\n    run(args) {\n        const listenerCount = this.listenerCount();\n        this._listeners = this._listeners.filter((item) => {\n            const argsCopy = args.slice();\n            // Call the callback in the next event loop\n            setTimeout(() => {\n                item.listener.apply(this, argsCopy);\n            }, 0);\n            // Reschedule it if it not \"once\"\n            return !(item.once);\n        });\n        return listenerCount;\n    }\n    prepareEvent(event) {\n    }\n    // Returns the array that will be applied to an emit\n    getEmit(event) {\n        return [event];\n    }\n}\nclass ErrorRunningEvent extends RunningEvent {\n    constructor() {\n        super(\"error\", null);\n    }\n}\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n    constructor(address, contractInterface, fragment, topics) {\n        const filter = {\n            address: address\n        };\n        let topic = contractInterface.getEventTopic(fragment);\n        if (topics) {\n            if (topic !== topics[0]) {\n                contracts_lib_esm_logger.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n            }\n            filter.topics = topics.slice();\n        }\n        else {\n            filter.topics = [topic];\n        }\n        super(lib_esm_getEventTag(filter), filter);\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n        defineReadOnly(this, \"fragment\", fragment);\n    }\n    prepareEvent(event) {\n        super.prepareEvent(event);\n        event.event = this.fragment.name;\n        event.eventSignature = this.fragment.format();\n        event.decode = (data, topics) => {\n            return this.interface.decodeEventLog(this.fragment, data, topics);\n        };\n        try {\n            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n        }\n        catch (error) {\n            event.args = null;\n            event.decodeError = error;\n        }\n    }\n    getEmit(event) {\n        const errors = checkResultErrors(event.args);\n        if (errors.length) {\n            throw errors[0].error;\n        }\n        const args = (event.args || []).slice();\n        args.push(event);\n        return args;\n    }\n}\n// A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n    constructor(address, contractInterface) {\n        super(\"*\", { address: address });\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n    }\n    prepareEvent(event) {\n        super.prepareEvent(event);\n        try {\n            const parsed = this.interface.parseLog(event);\n            event.event = parsed.name;\n            event.eventSignature = parsed.signature;\n            event.decode = (data, topics) => {\n                return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n            };\n            event.args = parsed.args;\n        }\n        catch (error) {\n            // No matching event\n        }\n    }\n}\nclass BaseContract {\n    constructor(addressOrName, contractInterface, signerOrProvider) {\n        // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n        //address = getAddress(address);\n        defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n        if (signerOrProvider == null) {\n            defineReadOnly(this, \"provider\", null);\n            defineReadOnly(this, \"signer\", null);\n        }\n        else if (Signer.isSigner(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n            defineReadOnly(this, \"signer\", signerOrProvider);\n        }\n        else if (Provider.isProvider(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider);\n            defineReadOnly(this, \"signer\", null);\n        }\n        else {\n            contracts_lib_esm_logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n        }\n        defineReadOnly(this, \"callStatic\", {});\n        defineReadOnly(this, \"estimateGas\", {});\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"populateTransaction\", {});\n        defineReadOnly(this, \"filters\", {});\n        {\n            const uniqueFilters = {};\n            Object.keys(this.interface.events).forEach((eventSignature) => {\n                const event = this.interface.events[eventSignature];\n                defineReadOnly(this.filters, eventSignature, (...args) => {\n                    return {\n                        address: this.address,\n                        topics: this.interface.encodeFilterTopics(event, args)\n                    };\n                });\n                if (!uniqueFilters[event.name]) {\n                    uniqueFilters[event.name] = [];\n                }\n                uniqueFilters[event.name].push(eventSignature);\n            });\n            Object.keys(uniqueFilters).forEach((name) => {\n                const filters = uniqueFilters[name];\n                if (filters.length === 1) {\n                    defineReadOnly(this.filters, name, this.filters[filters[0]]);\n                }\n                else {\n                    contracts_lib_esm_logger.warn(`Duplicate definition of ${name} (${filters.join(\", \")})`);\n                }\n            });\n        }\n        defineReadOnly(this, \"_runningEvents\", {});\n        defineReadOnly(this, \"_wrappedEmits\", {});\n        if (addressOrName == null) {\n            contracts_lib_esm_logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n        }\n        defineReadOnly(this, \"address\", addressOrName);\n        if (this.provider) {\n            defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n        }\n        else {\n            try {\n                defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n            }\n            catch (error) {\n                // Without a provider, we cannot use ENS names\n                contracts_lib_esm_logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"new Contract\"\n                });\n            }\n        }\n        // Swallow bad ENS names to prevent Unhandled Exceptions\n        this.resolvedAddress.catch((e) => { });\n        const uniqueNames = {};\n        const uniqueSignatures = {};\n        Object.keys(this.interface.functions).forEach((signature) => {\n            const fragment = this.interface.functions[signature];\n            // Check that the signature is unique; if not the ABI generation has\n            // not been cleaned or may be incorrectly generated\n            if (uniqueSignatures[signature]) {\n                contracts_lib_esm_logger.warn(`Duplicate ABI entry for ${JSON.stringify(signature)}`);\n                return;\n            }\n            uniqueSignatures[signature] = true;\n            // Track unique names; we only expose bare named functions if they\n            // are ambiguous\n            {\n                const name = fragment.name;\n                if (!uniqueNames[`%${name}`]) {\n                    uniqueNames[`%${name}`] = [];\n                }\n                uniqueNames[`%${name}`].push(signature);\n            }\n            if (this[signature] == null) {\n                defineReadOnly(this, signature, buildDefault(this, fragment, true));\n            }\n            // We do not collapse simple calls on this bucket, which allows\n            // frameworks to safely use this without introspection as well as\n            // allows decoding error recovery.\n            if (this.functions[signature] == null) {\n                defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n            }\n            if (this.callStatic[signature] == null) {\n                defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n            }\n            if (this.populateTransaction[signature] == null) {\n                defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n            }\n            if (this.estimateGas[signature] == null) {\n                defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n            }\n        });\n        Object.keys(uniqueNames).forEach((name) => {\n            // Ambiguous names to not get attached as bare names\n            const signatures = uniqueNames[name];\n            if (signatures.length > 1) {\n                return;\n            }\n            // Strip off the leading \"%\" used for prototype protection\n            name = name.substring(1);\n            const signature = signatures[0];\n            // If overwriting a member property that is null, swallow the error\n            try {\n                if (this[name] == null) {\n                    defineReadOnly(this, name, this[signature]);\n                }\n            }\n            catch (e) { }\n            if (this.functions[name] == null) {\n                defineReadOnly(this.functions, name, this.functions[signature]);\n            }\n            if (this.callStatic[name] == null) {\n                defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n            }\n            if (this.populateTransaction[name] == null) {\n                defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n            }\n            if (this.estimateGas[name] == null) {\n                defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n            }\n        });\n    }\n    static getContractAddress(transaction) {\n        return getContractAddress(transaction);\n    }\n    static getInterface(contractInterface) {\n        if (Interface.isInterface(contractInterface)) {\n            return contractInterface;\n        }\n        return new Interface(contractInterface);\n    }\n    // @TODO: Allow timeout?\n    deployed() {\n        return this._deployed();\n    }\n    _deployed(blockTag) {\n        if (!this._deployedPromise) {\n            // If we were just deployed, we know the transaction we should occur in\n            if (this.deployTransaction) {\n                this._deployedPromise = this.deployTransaction.wait().then(() => {\n                    return this;\n                });\n            }\n            else {\n                // @TODO: Once we allow a timeout to be passed in, we will wait\n                // up to that many blocks for getCode\n                // Otherwise, poll for our code to be deployed\n                this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {\n                    if (code === \"0x\") {\n                        contracts_lib_esm_logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            contractAddress: this.address,\n                            operation: \"getDeployed\"\n                        });\n                    }\n                    return this;\n                });\n            }\n        }\n        return this._deployedPromise;\n    }\n    // @TODO:\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n    // @TODO:\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n    fallback(overrides) {\n        if (!this.signer) {\n            contracts_lib_esm_logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"sendTransaction(fallback)\" });\n        }\n        const tx = shallowCopy(overrides || {});\n        [\"from\", \"to\"].forEach(function (key) {\n            if (tx[key] == null) {\n                return;\n            }\n            contracts_lib_esm_logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });\n        });\n        tx.to = this.resolvedAddress;\n        return this.deployed().then(() => {\n            return this.signer.sendTransaction(tx);\n        });\n    }\n    // Reconnect to a different signer or provider\n    connect(signerOrProvider) {\n        if (typeof (signerOrProvider) === \"string\") {\n            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n        }\n        const contract = new (this.constructor)(this.address, this.interface, signerOrProvider);\n        if (this.deployTransaction) {\n            defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n        }\n        return contract;\n    }\n    // Re-attach to a different on-chain instance of this contract\n    attach(addressOrName) {\n        return new (this.constructor)(addressOrName, this.interface, this.signer || this.provider);\n    }\n    static isIndexed(value) {\n        return Indexed.isIndexed(value);\n    }\n    _normalizeRunningEvent(runningEvent) {\n        // Already have an instance of this event running; we can re-use it\n        if (this._runningEvents[runningEvent.tag]) {\n            return this._runningEvents[runningEvent.tag];\n        }\n        return runningEvent;\n    }\n    _getRunningEvent(eventName) {\n        if (typeof (eventName) === \"string\") {\n            // Listen for \"error\" events (if your contract has an error event, include\n            // the full signature to bypass this special event keyword)\n            if (eventName === \"error\") {\n                return this._normalizeRunningEvent(new ErrorRunningEvent());\n            }\n            // Listen for any event that is registered\n            if (eventName === \"event\") {\n                return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n            }\n            // Listen for any event\n            if (eventName === \"*\") {\n                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n            }\n            // Get the event Fragment (throws if ambiguous/unknown event)\n            const fragment = this.interface.getEvent(eventName);\n            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n        }\n        // We have topics to filter by...\n        if (eventName.topics && eventName.topics.length > 0) {\n            // Is it a known topichash? (throws if no matching topichash)\n            try {\n                const topic = eventName.topics[0];\n                if (typeof (topic) !== \"string\") {\n                    throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n                }\n                const fragment = this.interface.getEvent(topic);\n                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n            }\n            catch (error) { }\n            // Filter by the unknown topichash\n            const filter = {\n                address: this.address,\n                topics: eventName.topics\n            };\n            return this._normalizeRunningEvent(new RunningEvent(lib_esm_getEventTag(filter), filter));\n        }\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n    }\n    _checkRunningEvents(runningEvent) {\n        if (runningEvent.listenerCount() === 0) {\n            delete this._runningEvents[runningEvent.tag];\n            // If we have a poller for this, remove it\n            const emit = this._wrappedEmits[runningEvent.tag];\n            if (emit && runningEvent.filter) {\n                this.provider.off(runningEvent.filter, emit);\n                delete this._wrappedEmits[runningEvent.tag];\n            }\n        }\n    }\n    // Subclasses can override this to gracefully recover\n    // from parse errors if they wish\n    _wrapEvent(runningEvent, log, listener) {\n        const event = deepCopy(log);\n        event.removeListener = () => {\n            if (!listener) {\n                return;\n            }\n            runningEvent.removeListener(listener);\n            this._checkRunningEvents(runningEvent);\n        };\n        event.getBlock = () => { return this.provider.getBlock(log.blockHash); };\n        event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); };\n        event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); };\n        // This may throw if the topics and data mismatch the signature\n        runningEvent.prepareEvent(event);\n        return event;\n    }\n    _addEventListener(runningEvent, listener, once) {\n        if (!this.provider) {\n            contracts_lib_esm_logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"once\" });\n        }\n        runningEvent.addListener(listener, once);\n        // Track this running event and its listeners (may already be there; but no hard in updating)\n        this._runningEvents[runningEvent.tag] = runningEvent;\n        // If we are not polling the provider, start polling\n        if (!this._wrappedEmits[runningEvent.tag]) {\n            const wrappedEmit = (log) => {\n                let event = this._wrapEvent(runningEvent, log, listener);\n                // Try to emit the result for the parameterized event...\n                if (event.decodeError == null) {\n                    try {\n                        const args = runningEvent.getEmit(event);\n                        this.emit(runningEvent.filter, ...args);\n                    }\n                    catch (error) {\n                        event.decodeError = error.error;\n                    }\n                }\n                // Always emit \"event\" for fragment-base events\n                if (runningEvent.filter != null) {\n                    this.emit(\"event\", event);\n                }\n                // Emit \"error\" if there was an error\n                if (event.decodeError != null) {\n                    this.emit(\"error\", event.decodeError, event);\n                }\n            };\n            this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n            // Special events, like \"error\" do not have a filter\n            if (runningEvent.filter != null) {\n                this.provider.on(runningEvent.filter, wrappedEmit);\n            }\n        }\n    }\n    queryFilter(event, fromBlockOrBlockhash, toBlock) {\n        const runningEvent = this._getRunningEvent(event);\n        const filter = shallowCopy(runningEvent.filter);\n        if (typeof (fromBlockOrBlockhash) === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n            if (toBlock != null) {\n                contracts_lib_esm_logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n            }\n            filter.blockHash = fromBlockOrBlockhash;\n        }\n        else {\n            filter.fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash : 0);\n            filter.toBlock = ((toBlock != null) ? toBlock : \"latest\");\n        }\n        return this.provider.getLogs(filter).then((logs) => {\n            return logs.map((log) => this._wrapEvent(runningEvent, log, null));\n        });\n    }\n    on(event, listener) {\n        this._addEventListener(this._getRunningEvent(event), listener, false);\n        return this;\n    }\n    once(event, listener) {\n        this._addEventListener(this._getRunningEvent(event), listener, true);\n        return this;\n    }\n    emit(eventName, ...args) {\n        if (!this.provider) {\n            return false;\n        }\n        const runningEvent = this._getRunningEvent(eventName);\n        const result = (runningEvent.run(args) > 0);\n        // May have drained all the \"once\" events; check for living events\n        this._checkRunningEvents(runningEvent);\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!this.provider) {\n            return 0;\n        }\n        if (eventName == null) {\n            return Object.keys(this._runningEvents).reduce((accum, key) => {\n                return accum + this._runningEvents[key].listenerCount();\n            }, 0);\n        }\n        return this._getRunningEvent(eventName).listenerCount();\n    }\n    listeners(eventName) {\n        if (!this.provider) {\n            return [];\n        }\n        if (eventName == null) {\n            const result = [];\n            for (let tag in this._runningEvents) {\n                this._runningEvents[tag].listeners().forEach((listener) => {\n                    result.push(listener);\n                });\n            }\n            return result;\n        }\n        return this._getRunningEvent(eventName).listeners();\n    }\n    removeAllListeners(eventName) {\n        if (!this.provider) {\n            return this;\n        }\n        if (eventName == null) {\n            for (const tag in this._runningEvents) {\n                const runningEvent = this._runningEvents[tag];\n                runningEvent.removeAllListeners();\n                this._checkRunningEvents(runningEvent);\n            }\n            return this;\n        }\n        // Delete any listeners\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n    off(eventName, listener) {\n        if (!this.provider) {\n            return this;\n        }\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeListener(listener);\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n    removeListener(eventName, listener) {\n        return this.off(eventName, listener);\n    }\n}\nclass Contract extends BaseContract {\n}\nclass ContractFactory {\n    constructor(contractInterface, bytecode, signer) {\n        let bytecodeHex = null;\n        if (typeof (bytecode) === \"string\") {\n            bytecodeHex = bytecode;\n        }\n        else if (isBytes(bytecode)) {\n            bytecodeHex = hexlify(bytecode);\n        }\n        else if (bytecode && typeof (bytecode.object) === \"string\") {\n            // Allow the bytecode object from the Solidity compiler\n            bytecodeHex = bytecode.object;\n        }\n        else {\n            // Crash in the next verification step\n            bytecodeHex = \"!\";\n        }\n        // Make sure it is 0x prefixed\n        if (bytecodeHex.substring(0, 2) !== \"0x\") {\n            bytecodeHex = \"0x\" + bytecodeHex;\n        }\n        // Make sure the final result is valid bytecode\n        if (!isHexString(bytecodeHex) || (bytecodeHex.length % 2)) {\n            contracts_lib_esm_logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n        }\n        // If we have a signer, make sure it is valid\n        if (signer && !Signer.isSigner(signer)) {\n            contracts_lib_esm_logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n        }\n        defineReadOnly(this, \"bytecode\", bytecodeHex);\n        defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n        defineReadOnly(this, \"signer\", signer || null);\n    }\n    // @TODO: Future; rename to populateTransaction?\n    getDeployTransaction(...args) {\n        let tx = {};\n        // If we have 1 additional argument, we allow transaction overrides\n        if (args.length === this.interface.deploy.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n            tx = shallowCopy(args.pop());\n            for (const key in tx) {\n                if (!contracts_lib_esm_allowedTransactionKeys[key]) {\n                    throw new Error(\"unknown transaction override \" + key);\n                }\n            }\n        }\n        // Do not allow these to be overridden in a deployment transaction\n        [\"data\", \"from\", \"to\"].forEach((key) => {\n            if (tx[key] == null) {\n                return;\n            }\n            contracts_lib_esm_logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });\n        });\n        if (tx.value) {\n            const value = BigNumber.from(tx.value);\n            if (!value.isZero() && !this.interface.deploy.payable) {\n                contracts_lib_esm_logger.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: tx.value\n                });\n            }\n        }\n        // Make sure the call matches the constructor signature\n        contracts_lib_esm_logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n        // Set the data to the bytecode + the encoded constructor arguments\n        tx.data = hexlify(concat([\n            this.bytecode,\n            this.interface.encodeDeploy(args)\n        ]));\n        return tx;\n    }\n    deploy(...args) {\n        return contracts_lib_esm_awaiter(this, void 0, void 0, function* () {\n            let overrides = {};\n            // If 1 extra parameter was passed in, it contains overrides\n            if (args.length === this.interface.deploy.inputs.length + 1) {\n                overrides = args.pop();\n            }\n            // Make sure the call matches the constructor signature\n            contracts_lib_esm_logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n            // Resolve ENS names and promises in the arguments\n            const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n            params.push(overrides);\n            // Get the deployment transaction (with optional overrides)\n            const unsignedTx = this.getDeployTransaction(...params);\n            // Send the deployment transaction\n            const tx = yield this.signer.sendTransaction(unsignedTx);\n            const address = getStatic(this.constructor, \"getContractAddress\")(tx);\n            const contract = getStatic(this.constructor, \"getContract\")(address, this.interface, this.signer);\n            // Add the modified wait that wraps events\n            addContractWait(contract, tx);\n            defineReadOnly(contract, \"deployTransaction\", tx);\n            return contract;\n        });\n    }\n    attach(address) {\n        return (this.constructor).getContract(address, this.interface, this.signer);\n    }\n    connect(signer) {\n        return new (this.constructor)(this.interface, this.bytecode, signer);\n    }\n    static fromSolidity(compilerOutput, signer) {\n        if (compilerOutput == null) {\n            contracts_lib_esm_logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, { argument: \"compilerOutput\" });\n        }\n        if (typeof (compilerOutput) === \"string\") {\n            compilerOutput = JSON.parse(compilerOutput);\n        }\n        const abi = compilerOutput.abi;\n        let bytecode = null;\n        if (compilerOutput.bytecode) {\n            bytecode = compilerOutput.bytecode;\n        }\n        else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n            bytecode = compilerOutput.evm.bytecode;\n        }\n        return new this(abi, bytecode, signer);\n    }\n    static getInterface(contractInterface) {\n        return Contract.getInterface(contractInterface);\n    }\n    static getContractAddress(tx) {\n        return getContractAddress(tx);\n    }\n    static getContract(address, contractInterface, signer) {\n        return new Contract(address, contractInterface, signer);\n    }\n}\n//# sourceMappingURL=index.js.map\n;// CONCATENATED MODULE: ./src/contracts/localhost-contract-addresses.ts\nclass localhostContractAddresses {\r\n    constructor() {\r\n        this.KYC_ADDRESS = \"0xA700528a2B9Bd3126c96378b76f2c99f5F0e0F76\";\r\n        this.AUSD_ADDRESS = \"0x7ad1630b2E9F0e5401f220A33B473C7E5551dd3e\";\r\n        this.LIMINAL_MARKET_ADDRESS = \"0x19d5ABE7854b01960D4911e6536b26F8A38C3a18\";\r\n        this.MARKET_CALENDAR_ADDRESS = \"0x12bA221061255c11EA4895C363633bD43F28F9c3\";\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/contracts/mumbai-contract-addresses.ts\nclass mumbaiContractAddresses {\r\n    constructor() {\r\n        this.KYC_ADDRESS = \"0x9e2B28D9F841300bE3B64e505dEcA36c35250609\";\r\n        this.AUSD_ADDRESS = \"0x38F2B1E9F11937dD276D64521535b15280A7F137\";\r\n        this.LIMINAL_MARKET_ADDRESS = \"0x6e9C29e416dc9F7A6A03ffebaB3f02Ef62a1baE4\";\r\n        this.MARKET_CALENDAR_ADDRESS = \"0xc6B29dfd4FD756EF94b3A3FF7a531F4467BDDA75\";\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/contracts/fuji-contract-addresses.ts\nclass fujiContractAddresses {\r\n    constructor() {\r\n        this.KYC_ADDRESS = \"0x0594D04FDB5C98Fb7F777a799139424Ae2414AaD\";\r\n        this.AUSD_ADDRESS = \"0xbAc482aE0b0d652854df377be566445984A021ED\";\r\n        this.LIMINAL_MARKET_ADDRESS = \"0x098A512B017408008a23ECe22843788799CDebFd\";\r\n        this.MARKET_CALENDAR_ADDRESS = \"0x77E6A62Be8398B18d2dA81CDB6Eb097bD8132ccB\";\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/contracts/polygon-contract-addresses.ts\nclass polygonContractAddresses {\r\n    constructor() {\r\n        this.KYC_ADDRESS = \"0xc7dA98E282cc30BD4fe0a7dE38372F876DB577E4\";\r\n        this.AUSD_ADDRESS = \"0x9B780e71C2a8492E805e17616EB878f2e3874E21\";\r\n        this.LIMINAL_MARKET_ADDRESS = \"0x8B4fc0bcaED76a6569525d8Fe51E57cAd32FDd94\";\r\n        this.MARKET_CALENDAR_ADDRESS = \"0x77b54CbF3e1370af13da41196B4d99cd02eBcC44\";\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/contracts/ContractInfo.ts\n\r\n\r\n\r\n\r\n\r\nclass ContractInfo {\r\n    static getContractInfo(networkName) {\r\n        let contractInfos = {\r\n            localhostContractAddresses: localhostContractAddresses, mumbaiContractAddresses: mumbaiContractAddresses, fujiContractAddresses: fujiContractAddresses,\r\n            polygonContractAddresses: polygonContractAddresses\r\n        };\r\n        if (!networkName) {\r\n            networkName = App.Network.Name;\r\n        }\r\n        const contractInfoType = contractInfos[networkName + 'ContractAddresses'];\r\n        return new contractInfoType();\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/services/blockchain/EventService.ts\n\r\n\r\n\r\nclass EventService {\r\n    constructor() {\r\n        this.lmAbi = [\r\n            {\r\n                \"anonymous\": false,\r\n                \"inputs\": [\r\n                    {\r\n                        \"indexed\": false,\r\n                        \"internalType\": \"address\",\r\n                        \"name\": \"walletAddress\",\r\n                        \"type\": \"address\"\r\n                    },\r\n                    {\r\n                        \"indexed\": false,\r\n                        \"internalType\": \"uint256\",\r\n                        \"name\": \"amount\",\r\n                        \"type\": \"uint256\"\r\n                    },\r\n                    {\r\n                        \"indexed\": false,\r\n                        \"internalType\": \"string\",\r\n                        \"name\": \"accountId\",\r\n                        \"type\": \"string\"\r\n                    },\r\n                    {\r\n                        \"indexed\": false,\r\n                        \"internalType\": \"string\",\r\n                        \"name\": \"symbol\",\r\n                        \"type\": \"string\"\r\n                    },\r\n                    {\r\n                        \"indexed\": false,\r\n                        \"internalType\": \"address\",\r\n                        \"name\": \"tokenAddress\",\r\n                        \"type\": \"address\"\r\n                    },\r\n                    {\r\n                        \"indexed\": false,\r\n                        \"internalType\": \"address\",\r\n                        \"name\": \"spender\",\r\n                        \"type\": \"address\"\r\n                    }\r\n                ],\r\n                \"name\": \"BuyWithAUsd\",\r\n                \"type\": \"event\"\r\n            },\r\n            {\r\n                \"anonymous\": false,\r\n                \"inputs\": [\r\n                    {\r\n                        \"indexed\": false,\r\n                        \"internalType\": \"string\",\r\n                        \"name\": \"accountId\",\r\n                        \"type\": \"string\"\r\n                    },\r\n                    {\r\n                        \"indexed\": false,\r\n                        \"internalType\": \"address\",\r\n                        \"name\": \"walletAddress\",\r\n                        \"type\": \"address\"\r\n                    },\r\n                    {\r\n                        \"indexed\": false,\r\n                        \"internalType\": \"address\",\r\n                        \"name\": \"aUsdAddress\",\r\n                        \"type\": \"address\"\r\n                    },\r\n                    {\r\n                        \"indexed\": false,\r\n                        \"internalType\": \"string\",\r\n                        \"name\": \"symbol\",\r\n                        \"type\": \"string\"\r\n                    },\r\n                    {\r\n                        \"indexed\": false,\r\n                        \"internalType\": \"uint256\",\r\n                        \"name\": \"amount\",\r\n                        \"type\": \"uint256\"\r\n                    },\r\n                    {\r\n                        \"indexed\": false,\r\n                        \"internalType\": \"address\",\r\n                        \"name\": \"spender\",\r\n                        \"type\": \"address\"\r\n                    }\r\n                ],\r\n                \"name\": \"SellSecurityToken\",\r\n                \"type\": \"event\"\r\n            }\r\n        ];\r\n        this.contracts = ContractInfo.getContractInfo(App.Network.Name);\r\n    }\r\n    subscribeToBuy(hash) {\r\n        this.listen(hash, 'BuyWithAUsd');\r\n    }\r\n    subscribeToSell(hash) {\r\n        this.listen(hash, 'SellSecurityToken');\r\n    }\r\n    listen(hash, eventName) {\r\n        this.store(hash);\r\n        const lmContract = new Contract(this.contracts.LIMINAL_MARKET_ADDRESS, this.lmAbi, App.User.signer);\r\n        let listeners = lmContract.listeners(eventName);\r\n        if (listeners.length > 0) {\r\n            return;\r\n        }\r\n        lmContract.on(eventName, (walletAddress, amount, accountId, symbol, tokenAddress, spender) => {\r\n            console.log(eventName + ' event');\r\n            lmContract.off(eventName, App.User.provider);\r\n            this.remove(hash);\r\n        });\r\n    }\r\n    store(hash) {\r\n        if (!window.localStorage)\r\n            return;\r\n        let hashes = [];\r\n        let obj = window.localStorage.getItem('hashes');\r\n        if (obj) {\r\n            hashes = JSON.parse(obj);\r\n        }\r\n        hashes.push(hash);\r\n        window.localStorage.setItem('hashes', JSON.stringify(hashes));\r\n    }\r\n    remove(hash) {\r\n        if (!window.localStorage)\r\n            return;\r\n        let json = window.localStorage.getItem('hashes');\r\n        if (!json)\r\n            return;\r\n        let hashes = JSON.parse(json);\r\n        let idx = hashes.indexOf(hash);\r\n        hashes.splice(idx, 1);\r\n        if (hashes.length == 0) {\r\n            window.localStorage.removeItem('hashes');\r\n        }\r\n        else {\r\n            window.localStorage.setItem('hashes', JSON.stringify(hashes));\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/services/blockchain/BlockchainService.ts\nvar BlockchainService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass BlockchainService extends BaseService {\r\n    constructor() {\r\n        super();\r\n        this.balanceOfAbi = [{\r\n                \"inputs\": [\r\n                    {\r\n                        \"internalType\": \"address\",\r\n                        \"name\": \"account\",\r\n                        \"type\": \"address\"\r\n                    }\r\n                ],\r\n                \"name\": \"balanceOf\",\r\n                \"outputs\": [\r\n                    {\r\n                        \"internalType\": \"uint256\",\r\n                        \"name\": \"\",\r\n                        \"type\": \"uint256\"\r\n                    }\r\n                ],\r\n                \"stateMutability\": \"view\",\r\n                \"type\": \"function\"\r\n            }];\r\n        this.transferAbi = [\"function transfer(address to, uint amount)\"];\r\n        this.network = App.Network;\r\n        this.contracts = ContractInfo.getContractInfo(this.network.Name);\r\n    }\r\n    getBalanceOf(tokenAddress, ethAddress) {\r\n        return BlockchainService_awaiter(this, void 0, void 0, function* () {\r\n            yield this.loadEther();\r\n            if (!App.User.ether) {\r\n                return new bignumber(0);\r\n            }\r\n            const contract = new Contract(tokenAddress, this.balanceOfAbi, App.User.ether);\r\n            return yield contract.balanceOf(ethAddress);\r\n        });\r\n    }\r\n    transferInner(tokenAddress, to, qty) {\r\n        return BlockchainService_awaiter(this, void 0, void 0, function* () {\r\n            yield this.loadEther();\r\n            let qtyWei = parseUnits(qty.toString(), 'ether');\r\n            console.log('transferInner', qtyWei.toString(), tokenAddress, to);\r\n            const contract = new Contract(tokenAddress, this.transferAbi, App.User.signer);\r\n            let result = yield contract.transfer(to, qtyWei);\r\n            let eventService = new EventService();\r\n            if (tokenAddress == this.contracts.AUSD_ADDRESS) {\r\n                eventService.subscribeToBuy(result.hash);\r\n            }\r\n            else {\r\n                eventService.subscribeToSell(result.hash);\r\n            }\r\n            console.log('transfer result', result);\r\n            return result;\r\n        });\r\n    }\r\n    loadEther() {\r\n        return BlockchainService_awaiter(this, void 0, void 0, function* () {\r\n            if (App.User.ether)\r\n                return;\r\n            yield AuthenticateService.enableWeb3();\r\n        });\r\n    }\r\n    getNativeBalance() {\r\n        return BlockchainService_awaiter(this, void 0, void 0, function* () {\r\n            const balanceInWei = yield App.User.ether.getBalance(App.User.address);\r\n            const balanceInEther = formatEther(balanceInWei);\r\n            return balanceInEther;\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/services/blockchain/LiminalMarketService.ts\nvar LiminalMarketService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\nclass LiminalMarketService extends BlockchainService {\r\n    constructor() {\r\n        super();\r\n        this.getSecurityTokenAbi = [{\r\n                \"inputs\": [\r\n                    {\r\n                        \"internalType\": \"string\",\r\n                        \"name\": \"symbol\",\r\n                        \"type\": \"string\"\r\n                    }\r\n                ],\r\n                \"name\": \"getSecurityToken\",\r\n                \"outputs\": [\r\n                    {\r\n                        \"internalType\": \"address\",\r\n                        \"name\": \"\",\r\n                        \"type\": \"address\"\r\n                    }\r\n                ],\r\n                \"stateMutability\": \"view\",\r\n                \"type\": \"function\"\r\n            }];\r\n        this.createTokenAbi = [{\r\n                \"inputs\": [\r\n                    {\r\n                        \"internalType\": \"string\",\r\n                        \"name\": \"symbol\",\r\n                        \"type\": \"string\"\r\n                    }\r\n                ],\r\n                \"name\": \"createToken\",\r\n                \"outputs\": [\r\n                    {\r\n                        \"internalType\": \"contract SecurityToken\",\r\n                        \"name\": \"\",\r\n                        \"type\": \"address\"\r\n                    }\r\n                ],\r\n                \"stateMutability\": \"nonpayable\",\r\n                \"type\": \"function\"\r\n            }];\r\n    }\r\n    getSymbolContractAddress(symbol) {\r\n        return LiminalMarketService_awaiter(this, void 0, void 0, function* () {\r\n            yield this.loadEther();\r\n            const contract = new Contract(this.contracts.LIMINAL_MARKET_ADDRESS, this.getSecurityTokenAbi, App.User.ether);\r\n            return yield contract.getSecurityToken(symbol);\r\n        });\r\n    }\r\n    createToken(symbol, creatingToken) {\r\n        return LiminalMarketService_awaiter(this, void 0, void 0, function* () {\r\n            const contract = new Contract(this.contracts.LIMINAL_MARKET_ADDRESS, this.createTokenAbi, App.User.signer);\r\n            let result = yield contract.createToken(symbol);\r\n            creatingToken();\r\n            console.log('createToken result:', result);\r\n            yield result.wait();\r\n            return yield this.getSymbolContractAddress(symbol);\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/elements/SecuritiesList.html\n// Module\nvar SecuritiesList_code = \"<figure>\\r\\n    <table id=\\\"liminal_market_securities_table\\\" role=\\\"grid\\\">\\r\\n    <thead>\\r\\n    <tr>\\r\\n        <th colspan=\\\"2\\\"><input autocomplete=\\\"off\\\" type=\\\"search\\\" id=\\\"search_for_symbol\\\" placeholder=\\\"Search for name or symbol in {{securitiesCount}} stocks\\\"></th>\\r\\n    </tr>\\r\\n    </thead>\\r\\n    <tbody id=\\\"{{tbodyId}}\\\">\\r\\n    {{>securities}}\\r\\n    </tbody>\\r\\n</table>\\r\\n<span id=\\\"liminal_market_load_more\\\"></span>\\r\\n</figure>\";\n// Exports\n/* harmony default export */ const elements_SecuritiesList = (SecuritiesList_code);\n;// CONCATENATED MODULE: ./src/html/elements/Securities.html\n// Module\nvar Securities_code = \"{{#each securities}}\\r\\n<tr data-symbol=\\\"{{{Symbol}}}\\\" data-logo=\\\"{{LogoPath}}{{Logo}}\\\" data-name=\\\"{{Name}}\\\">\\r\\n    <td class=\\\"symbol_logo\\\"><img src=\\\"{{LogoPath}}{{Logo}}\\\"/></td>\\r\\n    <td class=\\\"security_information\\\">\\r\\n        <strong>{{Name}}</strong><br/>\\r\\n        <nav class=\\\"security_extra\\\">\\r\\n            <ul>\\r\\n                <li>\\r\\n                    <a href=\\\"https://strike.market/stocks/{{Symbol}}\\\" target=\\\"_blank\\\">{{Symbol}}</a>\\r\\n                </li>\\r\\n            </ul>\\r\\n            <ul>\\r\\n                <li>\\r\\n                    <a href=\\\"\\\" class=\\\"getAddress\\\" data-symbol=\\\"{{Symbol}}\\\">Get address</a>\\r\\n                </li>\\r\\n            </ul>\\r\\n            <ul>\\r\\n                <li>\\r\\n                    <a href=\\\"\\\" class=\\\"addToWallet\\\" data-symbol=\\\"{{Symbol}}\\\">Add to wallet</a>\\r\\n                </li>\\r\\n            </ul>\\r\\n        </nav>\\r\\n    </td>\\r\\n</tr>\\r\\n{{/each}}\";\n// Exports\n/* harmony default export */ const Securities = (Securities_code);\n;// CONCATENATED MODULE: ./src/util/CopyHelper.ts\nvar CopyHelper_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nclass CopyHelper {\r\n    fallbackCopyTextToClipboard(text) {\r\n        let textArea = document.createElement(\"textarea\");\r\n        textArea.value = text;\r\n        // Avoid scrolling to bottom\r\n        textArea.style.top = \"0\";\r\n        textArea.style.left = \"0\";\r\n        textArea.style.position = \"fixed\";\r\n        document.body.appendChild(textArea);\r\n        textArea.focus();\r\n        textArea.select();\r\n        try {\r\n            let successful = document.execCommand('copy');\r\n            return successful;\r\n        }\r\n        catch (err) {\r\n            console.error(err);\r\n            return false;\r\n        }\r\n        finally {\r\n            document.body.removeChild(textArea);\r\n        }\r\n    }\r\n    copyTextToClipboard(text) {\r\n        return CopyHelper_awaiter(this, void 0, void 0, function* () {\r\n            if (!navigator.clipboard) {\r\n                return this.fallbackCopyTextToClipboard(text);\r\n            }\r\n            let result = yield navigator.clipboard.writeText(text).then(ble => {\r\n                console.log('ble', ble);\r\n                return true;\r\n            }).\r\n                catch(function (err) {\r\n                console.info(err);\r\n                return false;\r\n            });\r\n            console.log(result);\r\n            return result;\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/elements/AddressInfo.html\n// Module\nvar AddressInfo_code = \"<article id=\\\"symbolInfoToCopy\\\">\\r\\n    This is the address for the symbol {{symbol}}.\\r\\n    <br/>\\r\\n    <input value=\\\"{{address}}\\\"/>\\r\\n</article>\\r\\n\";\n// Exports\n/* harmony default export */ const AddressInfo = (AddressInfo_code);\n;// CONCATENATED MODULE: ./src/html/elements/ContractAddressNotFound.html\n// Module\nvar ContractAddressNotFound_code = \"<tr id=\\\"symbolInfoToCopy\\\">\\r\\n    <td colspan=\\\"4\\\">\\r\\n        <article>\\r\\n        This symbol has never been bought and does not exist. Buy this symbol and address will become available.\\r\\n        </article>\\r\\n    </td>\\r\\n</tr>\";\n// Exports\n/* harmony default export */ const ContractAddressNotFound = (ContractAddressNotFound_code);\n;// CONCATENATED MODULE: ./src/html/elements/AddToWallet.html\n// Module\nvar AddToWallet_code = \"<article>\\r\\n    Some wallets detect automatically the coins that are registered to your address.\\r\\n    Those that don't do automatic detection, you need to add them manually.\\r\\n    <br/><br/>\\r\\n    This is the address for the symbol {{symbol}},\\r\\n    you need to copy it and import the token in your wallet\\r\\n    <br/><br/>\\r\\n    Contract address:<br/>\\r\\n    <input value=\\\"{{address}}\\\"/>\\r\\n    Symbol:<br/>\\r\\n    <input value=\\\"{{symbol}}\\\"/>\\r\\n    Decimal:<br/>\\r\\n    <input value=\\\"18\\\"/>\\r\\n</article>\\r\\n\";\n// Exports\n/* harmony default export */ const AddToWallet = (AddToWallet_code);\n;// CONCATENATED MODULE: ./src/ui/elements/InfoBarType.ts\nvar InfoBarType;\r\n(function (InfoBarType) {\r\n    InfoBarType[\"Info\"] = \"infoBar\";\r\n    InfoBarType[\"Warning\"] = \"warningBar\";\r\n    InfoBarType[\"Error\"] = \"errorBar\";\r\n})(InfoBarType || (InfoBarType = {}));\r\n\n;// CONCATENATED MODULE: ./src/ui/elements/InfoBar.ts\n\r\nclass InfoBar {\r\n    static show(message, type, timeoutInSeconds = 4) {\r\n        let infoBar = document.getElementById('infoBar');\r\n        if (!infoBar) {\r\n            infoBar = document.createElement('div');\r\n            infoBar.classList.add('notificationBar');\r\n            infoBar.id = 'infoBar';\r\n            document.body.insertAdjacentElement('afterbegin', infoBar);\r\n        }\r\n        infoBar.innerHTML = message;\r\n        infoBar.classList.remove('hidden');\r\n        infoBar.classList.remove(InfoBarType.Info);\r\n        infoBar.classList.remove(InfoBarType.Warning);\r\n        infoBar.classList.remove(InfoBarType.Error);\r\n        infoBar.classList.add(type);\r\n        if (timeoutInSeconds > 0) {\r\n            setTimeout(() => {\r\n                infoBar === null || infoBar === void 0 ? void 0 : infoBar.classList.add('hidden');\r\n            }, timeoutInSeconds * 1000);\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/WalletMissing.html\n// Module\nvar WalletMissing_code = \"\\r\\nYou need to set up a wallet in your browser before you can use liminal.market.\\r\\n<br/><br/>\\r\\nTo make it simple, we would like to suggest two options. In your browser or your phone.\\r\\n<ul>\\r\\n    <li>For the browser we recommend <a href=\\\"https://metamask.io/download/\\\"\\r\\n                                                                         target=\\\"_blank\\\">Metamask</a>.\\r\\n    </li>\\r\\n    <li>\\r\\n        For your phone, we like <a href=\\\"https://www.tokenpocket.pro/en/download/app\\\" target=\\\"_blank\\\">Token Poket</a>\\r\\n    </li>\\r\\n</ul>\\r\\n<br/>\\r\\nBut, you have <a href=\\\"https://ethereum.org/en/wallets/\\\" target=\\\"_blank\\\">many options</a> if you want to learn more.\";\n// Exports\n/* harmony default export */ const WalletMissing = (WalletMissing_code);\n;// CONCATENATED MODULE: ./src/errors/PredefinedErrorHandlers.ts\nvar PredefinedErrorHandlers_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass PredefinedErrorHandlers {\r\n    constructor() {\r\n        this.errorMessageMapping = new Map();\r\n        this.SentLoginRequest = \"We have sent request to you wallet to login. Open your wallet to login\";\r\n        this.errorMessageMapping.set('chain not supported', () => {\r\n            let div = 'Network is not supported. <a href=\"\" id=\"switchNetworkLink\">Click me to switch to supported network</a>';\r\n            InfoBar.show(div, InfoBarType.Warning, 120);\r\n            let switchNetworkLink = document.getElementById('switchNetworkLink');\r\n            switchNetworkLink === null || switchNetworkLink === void 0 ? void 0 : switchNetworkLink.addEventListener('click', (evt) => {\r\n                evt.preventDefault();\r\n                let modal = new SwitchNetworkModal();\r\n                modal.show();\r\n            });\r\n        });\r\n        this.errorMessageMapping.set('already processing eth_requestaccounts', this.SentLoginRequest);\r\n        this.errorMessageMapping.set('request of type \\'wallet_requestPermissions\\' already pending', this.SentLoginRequest);\r\n        this.errorMessageMapping.set('already has been called, but is not finished yet', this.SentLoginRequest);\r\n        this.errorMessageMapping.set('request is already in progress', this.SentLoginRequest);\r\n        this.errorMessageMapping.set('web3 instance', () => {\r\n            let elements = document.querySelectorAll(\".liminal_market_connect_wallet\");\r\n            if (elements.length > 0) {\r\n                elements[0].dispatchEvent(new MouseEvent('click'));\r\n                return;\r\n            }\r\n        });\r\n        this.errorMessageMapping.set('user rejected the request', () => PredefinedErrorHandlers_awaiter(this, void 0, void 0, function* () {\r\n            let authenticationService = new AuthenticateService();\r\n            yield authenticationService.logOut();\r\n            window.location.reload();\r\n        }));\r\n        this.errorMessageMapping.set('Non ethereum enabled browser', () => {\r\n            let modal = new Modal();\r\n            let template = Handlebars.compile(WalletMissing);\r\n            modal.showModal('New to blockchain?', template(null), false, () => {\r\n                //window.location.reload();\r\n            });\r\n        });\r\n    }\r\n    handle(message) {\r\n        let handled = false;\r\n        this.errorMessageMapping.forEach((value, key) => {\r\n            if (!handled && message.toLowerCase().indexOf(key.toLowerCase()) != -1) {\r\n                if (typeof value == 'string') {\r\n                    InfoBar.show(value.toString(), InfoBarType.Warning, 10);\r\n                }\r\n                else {\r\n                    value();\r\n                }\r\n                handled = true;\r\n                return handled;\r\n            }\r\n        });\r\n        return handled;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/errors/ErrorInfo.ts\n\r\n\r\n\r\nclass ErrorInfo {\r\n    constructor(errorInfo) {\r\n        this.errorInfo = errorInfo;\r\n    }\r\n    getErrorInfo() {\r\n        return this.errorInfo;\r\n    }\r\n    static report(error) {\r\n        LoadingHelper.removeLoading();\r\n        if (!error)\r\n            return;\r\n        let errorHandler = new PredefinedErrorHandlers();\r\n        if (errorHandler.handle(error.message)) {\r\n            return;\r\n        }\r\n        if (error.callback) {\r\n            error.callback();\r\n            return;\r\n        }\r\n        if (error) {\r\n            console.error(error.toString());\r\n        }\r\n        //InfoBar.show(error.message, InfoBarType.Error);\r\n    }\r\n    static log(obj) {\r\n        ErrorInfo.report(new GeneralError(obj));\r\n    }\r\n    static info(obj) {\r\n        ErrorInfo.report(new GeneralError(obj));\r\n    }\r\n    static error(obj) {\r\n        console.log(obj);\r\n        ErrorInfo.report(new GeneralError(obj));\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/elements/SecuritiesList.ts\nvar SecuritiesList_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass SecuritiesList {\r\n    constructor() {\r\n        this.tbodyId = 'liminal_market_securities_list';\r\n        this.onSelectSymbol = undefined;\r\n        this.page = 0;\r\n        this.loadmore = true;\r\n    }\r\n    render() {\r\n        return SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n            let securitiesService = yield SecuritiesService.getInstance();\r\n            let securitiesCount = securitiesService.securitiesArray.length;\r\n            let securities = yield securitiesService.getPaginatingSecurities(this.page++);\r\n            Handlebars.registerPartial(\"securities\", Securities);\r\n            let template = Handlebars.compile(elements_SecuritiesList);\r\n            let obj = {\r\n                tbodyId: this.tbodyId,\r\n                securities: securities,\r\n                securitiesCount: securitiesCount\r\n            };\r\n            return template(obj);\r\n        });\r\n    }\r\n    bindEvents(onSelectSymbol) {\r\n        return SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n            this.bindOnClickEvent(onSelectSymbol);\r\n            yield this.bindSearchEvent();\r\n            this.bindLoadMore();\r\n        });\r\n    }\r\n    bindOnClickEvent(onSelectSymbol) {\r\n        let table = document.getElementById('liminal_market_securities_table');\r\n        if (!table) {\r\n            ErrorInfo.report(new GeneralError(\"Page could not load correctly, try reloading\"));\r\n            return;\r\n        }\r\n        this.onSelectSymbol = onSelectSymbol;\r\n        table.onclick = (evt) => SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n            yield this.handleClick(evt);\r\n        });\r\n    }\r\n    handleClick(evt) {\r\n        return SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n            let element = evt.target;\r\n            if (element.tagName.toLocaleLowerCase() === 'a') {\r\n                yield this.addToWalletOrGetAddress(evt, element);\r\n                return;\r\n            }\r\n            let parentTr = element.parentElement;\r\n            if (!parentTr)\r\n                return;\r\n            if (parentTr.tagName.toLocaleLowerCase() !== 'tr') {\r\n                parentTr = parentTr.parentElement;\r\n            }\r\n            let symbol = parentTr.dataset.symbol;\r\n            if (!symbol)\r\n                return;\r\n            let name = parentTr.dataset.name;\r\n            let logo = parentTr.dataset.logo;\r\n            if (this.onSelectSymbol) {\r\n                this.onSelectSymbol(symbol, name, logo);\r\n            }\r\n        });\r\n    }\r\n    bindSearchEvent() {\r\n        return SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n            let searchForSymbol = document.getElementById('search_for_symbol');\r\n            if (!searchForSymbol)\r\n                return;\r\n            let securitiesService = yield SecuritiesService.getInstance();\r\n            let timeout = null;\r\n            searchForSymbol.addEventListener('keyup', (evt) => SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n                if (timeout != null)\r\n                    clearTimeout(timeout);\r\n                timeout = setTimeout(() => SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n                    let search = evt.target.value;\r\n                    if (!search || search.length < 2) {\r\n                        this.loadmore = true;\r\n                        yield this.showTopSecurities(securitiesService);\r\n                        return;\r\n                    }\r\n                    this.loadmore = false;\r\n                    let securities = yield securitiesService.find(search);\r\n                    this.loadSecuritiesToDom(securities);\r\n                }), 500);\r\n            }));\r\n        });\r\n    }\r\n    showTopSecurities(securitiesService) {\r\n        return SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n            let securities = yield securitiesService.getTopSecurities();\r\n            this.loadSecuritiesToDom(securities);\r\n        });\r\n    }\r\n    loadSecuritiesToDom(securities) {\r\n        let tbody = document.getElementById(this.tbodyId);\r\n        if (!tbody)\r\n            return;\r\n        let template = Handlebars.compile(Securities);\r\n        let obj = {\r\n            securities: securities\r\n        };\r\n        let content = template(obj);\r\n        tbody.innerHTML = content;\r\n    }\r\n    bindLoadMore() {\r\n        const el = document.querySelector('#liminal_market_load_more');\r\n        const observer = new window.IntersectionObserver(([entry]) => SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n            if (entry.isIntersecting) {\r\n                yield this.loadMore();\r\n            }\r\n        }), {\r\n            root: null,\r\n            threshold: 0.1, // set offset 0.1 means trigger if atleast 10% of element in viewport\r\n        });\r\n        observer.observe(el);\r\n    }\r\n    loadMore() {\r\n        return SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n            if (!this.loadmore)\r\n                return;\r\n            let tbody = document.getElementById(this.tbodyId);\r\n            if (!tbody)\r\n                return;\r\n            let securitiesService = yield SecuritiesService.getInstance();\r\n            let securities = yield securitiesService.getPaginatingSecurities(this.page++);\r\n            let template = Handlebars.compile(Securities);\r\n            let obj = {\r\n                securities: securities\r\n            };\r\n            let content = template(obj);\r\n            tbody.insertAdjacentHTML('beforeend', content);\r\n        });\r\n    }\r\n    addToWalletOrGetAddress(event, element) {\r\n        return SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n            let className = element.className;\r\n            if (className != 'getAddress' && className != 'addToWallet') {\r\n                return;\r\n            }\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            let symbol = element.dataset.symbol;\r\n            if (!symbol)\r\n                return;\r\n            LoadingHelper.setLoading(element);\r\n            let liminalMarketService = new LiminalMarketService();\r\n            let address = yield liminalMarketService.getSymbolContractAddress(symbol);\r\n            if (className == 'getAddress') {\r\n                yield this.showGetAddress(element, symbol, address);\r\n            }\r\n            else {\r\n                yield this.showAddToWallet(element, symbol, address);\r\n            }\r\n            LoadingHelper.removeLoading();\r\n        });\r\n    }\r\n    showGetAddress(element, symbol, address) {\r\n        return SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n            if (address !== Helper_AddressZero) {\r\n                let copyHelper = new CopyHelper();\r\n                let success = yield copyHelper.copyTextToClipboard(address);\r\n                if (success) {\r\n                    element.innerText = 'Copied';\r\n                    return;\r\n                }\r\n            }\r\n            this.renderContractInfoToString(element, address, symbol, AddressInfo);\r\n        });\r\n    }\r\n    showAddToWallet(element, symbol, address) {\r\n        return SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n            if (address !== Helper_AddressZero) {\r\n                let walletHelper = new WalletHelper();\r\n                let added = yield walletHelper.addTokenToWallet(address, symbol, () => {\r\n                    LoadingHelper.removeLoading();\r\n                    this.renderContractInfoToString(element, address, symbol, AddToWallet);\r\n                });\r\n                if (added) {\r\n                    return '';\r\n                }\r\n            }\r\n            this.renderContractInfoToString(element, address, symbol, AddToWallet);\r\n        });\r\n    }\r\n    renderContractInfoToString(element, address, symbol, template) {\r\n        let symbolInfoToCopy = document.getElementById('symbolInfoToCopy');\r\n        if (symbolInfoToCopy)\r\n            symbolInfoToCopy.remove();\r\n        let content = '';\r\n        if (address === Helper_AddressZero) {\r\n            let template = Handlebars.compile(ContractAddressNotFound);\r\n            content = template(null);\r\n        }\r\n        else {\r\n            let template = Handlebars.compile(AddressInfo);\r\n            let obj = {\r\n                symbol: symbol,\r\n                address: address\r\n            };\r\n            content = template(obj);\r\n        }\r\n        element.parentElement.parentElement.parentElement.insertAdjacentHTML('afterend', content);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/services/broker/MarketService.ts\nvar MarketService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\nclass MarketService extends BaseService {\r\n    constructor() {\r\n        super();\r\n    }\r\n    isMarketOpen() {\r\n        return MarketService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.get('isOpen');\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/services/backend/UserService.ts\nvar UserService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass UserService extends BaseService {\r\n    constructor() {\r\n        super();\r\n    }\r\n    isMarketOpenOrUserOffHours() {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            let marketService = new MarketService();\r\n            let response = yield marketService.isMarketOpen();\r\n            return response.marketIsOpen;\r\n        });\r\n    }\r\n    getUser() {\r\n        let cookieHelper = new CookieHelper(document);\r\n        let signedMessage = cookieHelper.getCookieValue('signedMessage');\r\n        if (!signedMessage) {\r\n            App.User = new User(null, '', App.Network.ChainId, null);\r\n            return App.User;\r\n        }\r\n        const signingAddress = recoverAddress('', signedMessage);\r\n        App.User = new User(null, signingAddress, App.Network.ChainId, null);\r\n        return App.User;\r\n    }\r\n    load(address) {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            let response = yield fetch('/user', { body: address });\r\n            let json = yield response.json();\r\n        });\r\n    }\r\n    getAlpacaId() {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            let user = yield this.getUser();\r\n            if (user.alpacaId)\r\n                return user.alpacaId;\r\n            let result = yield fetch('');\r\n            user.alpacaId = result.alpacaId;\r\n            return user.alpacaId;\r\n        });\r\n    }\r\n    getAccount() {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.get('account');\r\n        });\r\n    }\r\n    getEthAddress() {\r\n        return App.User.address;\r\n    }\r\n    kycActionRequired() {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            let kycResults = yield this.get('kycActionRequired');\r\n            return kycResults;\r\n        });\r\n    }\r\n    updateName(given_name, middle_name, family_name) {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.post('updateName', {\r\n                given_name: given_name,\r\n                middle_name: middle_name,\r\n                family_name: family_name\r\n            });\r\n        });\r\n    }\r\n    updateContact(data) {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.post('updateContact', data);\r\n        });\r\n    }\r\n    updateTrustedContact(data) {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.post('updateTrustedContact', data);\r\n        });\r\n    }\r\n    createAchRelationship(account_owner_name, bank_account_type, bank_account_number, bank_routing_number) {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.post('createAchRelationship', {\r\n                account_owner_name, bank_account_type, bank_account_number, bank_routing_number\r\n            });\r\n        });\r\n    }\r\n    getBankRelationship() {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.get('getBankRelationship');\r\n        });\r\n    }\r\n    getLatestTransfers(direction) {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.get('getTransfers', { direction: direction });\r\n        });\r\n    }\r\n    createTransfer(amount, direction) {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.post('createTransfer', { amount: amount, direction: direction });\r\n        });\r\n    }\r\n    deleteTransfer(id) {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.post('deleteTransfer', { id: id });\r\n        });\r\n    }\r\n    registerWireTransferRelationship(params) {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.post('createWireRelationship', params);\r\n        });\r\n    }\r\n}\r\nUserService.signedMessage = 'signedMessage';\r\n\n;// CONCATENATED MODULE: ./src/html/elements/UserInfo.html\n// Module\nvar UserInfo_code = \"<div id=\\\"userMenuPanel\\\">\\r\\n    <a href=\\\"#\\\" id=\\\"userInfoAction\\\" aria-expanded=\\\"false\\\">\\r\\n        <img src=\\\"https://effigy.im/a/{{ethAddress}}.png\\\" width=\\\"24\\\">\\r\\n        <span id=\\\"user_info_ethAddress\\\">{{shortEthAddress}}</span>\\r\\n    </a>\\r\\n\\r\\n    <div id=\\\"userInfoDropdown\\\" class=\\\"d-none\\\">\\r\\n        <div class=\\\"grid account_info\\\">\\r\\n            <h6>Account</h6>\\r\\n            <a id=\\\"disconnectFromNetwork\\\" href=\\\"#\\\">Disconnect</a>\\r\\n\\r\\n        </div>\\r\\n        <div class=\\\"edit_account\\\">\\r\\n            <a id=\\\"editName\\\" href=\\\"#\\\">Edit name</a><br/>\\r\\n            <a id=\\\"editContact\\\" href=\\\"#\\\">Edit contact info</a><br/>\\r\\n            <a id=\\\"editTrustedContact\\\" href=\\\"#\\\">Edit trusted contact</a>\\r\\n        </div>\\r\\n        <hr/>\\r\\n        <div class=\\\"grid\\\">\\r\\n            <div>\\r\\n                <img src=\\\"https://effigy.im/a/{{ethAddress}}.png\\\">\\r\\n            </div>\\r\\n            <div>\\r\\n                <strong class=\\\"d-block\\\"><a href=\\\"{{blockchainExplorer}}{{ethAddress}}\\\" target=\\\"_blank\\\">{{shortEthAddress}}</a></strong>\\r\\n                <br/>\\r\\n                {{#if isMagic}}\\r\\n                <a href=\\\"#\\\" id=\\\"wallet\\\">Open my wallet</a>\\r\\n                {{/if}}\\r\\n                <a href=\\\"https://info.liminal.market/#/chain/{{chainId}}/{{ethAddress}}\\\" target=\\\"_blank\\\">View\\r\\n                    positions</a>\\r\\n            </div>\\r\\n        </div>\\r\\n        <hr/>\\r\\n        <div class=\\\"hidden\\\" id=\\\"userInfoAUsdBalance\\\">\\r\\n            <div class=\\\"grid\\\">\\r\\n                <div><img src=\\\"https://app.liminal.market/img/ausd.png\\\"></div>\\r\\n                <div>\\r\\n                    <strong class=\\\"d-block\\\">aUSD <span id=\\\"user_info_ausd_balance\\\"></span></strong>\\r\\n                    <a href=\\\"\\\" class=\\\"add_aUSD_to_wallet\\\">Add aUSD to wallet</a>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div id=\\\"fund_account_options\\\">\\r\\n                <h6>Fund your account</h6>\\r\\n                <div class=\\\"grid\\\">\\r\\n                    <a href=\\\"#\\\" class=\\\"fund_account\\\">Fund my account</a>\\r\\n                    <a href=\\\"#\\\" id=\\\"withdraw_from_account\\\">Withdraw from account</a>\\r\\n                </div>\\r\\n            </div>\\r\\n            <hr/>\\r\\n        </div>\\r\\n        <div class=\\\"grid\\\">\\r\\n            <strong class=\\\"d-block\\\">Network</strong>\\r\\n            <small>{{networkName}}<br/>\\r\\n                <a href=\\\"#\\\" id=\\\"switch_network\\\">Change network</a>\\r\\n            </small>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n</div>\";\n// Exports\n/* harmony default export */ const elements_UserInfo = (UserInfo_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycEditName.html\n// Module\nvar KycEditName_code = \"<fieldset id=\\\"kycEditName\\\">\\r\\n    <div class=\\\"warningBar\\\">\\r\\n        <strong>Warning</strong><br/>\\r\\n        You can only change the name once. Be careful of what you change.\\r\\n        <br/><br/>\\r\\n        After you change this information a new KYC process will be started, and you will NOT be able to do any\\r\\n        trades\\r\\n        until it has been approved.\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"given_name\\\">Legal First name</label>\\r\\n        <input required id=\\\"given_name\\\" name=\\\"given_name\\\"\\r\\n               placeholder=\\\"Ron\\\"\\r\\n               value=\\\"{{given_name}}\\\" autocomplete=\\\"given-name\\\">\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"middle_name\\\">Legal Middle name</label>\\r\\n        <input id=\\\"middle_name\\\" name=\\\"middle_name\\\"\\r\\n               placeholder=\\\"\\\"\\r\\n               value=\\\"{{middle_name}}\\\" autocomplete=\\\"additional-name\\\">\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"family_name\\\">Legal Last name</label>\\r\\n        <input required id=\\\"family_name\\\" name=\\\"family_name\\\"\\r\\n               placeholder=\\\"Swanson\\\"\\r\\n               value=\\\"{{family_name}}\\\" autocomplete=\\\"family-name\\\">\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"buttons\\\">\\r\\n        <button id=\\\"kycEditNameConfirm\\\">Confirm</button>\\r\\n    </div>\\r\\n</fieldset>\\r\\n\\r\\n<fieldset class=\\\"hidden\\\" id=\\\"confirmNameFieldset\\\">\\r\\n    <div class=\\\"confirm_name\\\">\\r\\n        <label for=\\\"confirm_name\\\" id=\\\"label_confirm_name\\\">Please type</label>\\r\\n        <input name=\\\"confirm_name\\\" id=\\\"confirm_name\\\"/>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"input_error\\\" id=\\\"kycEditNameError\\\"></div>\\r\\n\\r\\n    <div class=\\\"buttons grid\\\">\\r\\n        <button id=\\\"kycEditNameBack\\\">Back</button>\\r\\n        <button type=\\\"submit\\\" id=\\\"kycEditNameSave\\\">Confirm</button>\\r\\n    </div>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const KycEditName = (KycEditName_code);\n;// CONCATENATED MODULE: ./src/util/StringHelper.ts\nclass StringHelper {\r\n    static isNullOrEmpty(str) {\r\n        return !str || str.toString().trim().length == 0;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycEditNameForm.ts\nvar KycEditNameForm_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\nclass KycEditNameForm {\r\n    constructor() {\r\n        this.modal = new Modal();\r\n    }\r\n    show() {\r\n        return KycEditNameForm_awaiter(this, void 0, void 0, function* () {\r\n            let kycEditNameError = document.getElementById('kycEditNameError');\r\n            if (kycEditNameError)\r\n                kycEditNameError.style.display = 'none';\r\n            let userService = new UserService();\r\n            let account = yield userService.getAccount();\r\n            let given_name = account.identity.given_name;\r\n            let middle_name = account.identity.middle_name;\r\n            let family_name = account.identity.family_name;\r\n            let template = Handlebars.compile(KycEditName);\r\n            let content = template({ given_name: given_name, middle_name: middle_name, family_name: family_name });\r\n            this.modal.showModal('Edit name', content);\r\n            this.bindEvents();\r\n        });\r\n    }\r\n    bindEvents() {\r\n        let kycEditNameConfirm = document.getElementById('kycEditNameConfirm');\r\n        kycEditNameConfirm === null || kycEditNameConfirm === void 0 ? void 0 : kycEditNameConfirm.addEventListener('click', (evt) => KycEditNameForm_awaiter(this, void 0, void 0, function* () {\r\n            var _a, _b;\r\n            let given_name = document.getElementById('given_name');\r\n            let middle_name = document.getElementById('middle_name');\r\n            let family_name = document.getElementById('family_name');\r\n            if (StringHelper.isNullOrEmpty(given_name.value)) {\r\n                this.showError('Given name cannot be empty');\r\n                return;\r\n            }\r\n            if (StringHelper.isNullOrEmpty(family_name.value)) {\r\n                this.showError('Family name cannot be empty');\r\n                return;\r\n            }\r\n            let full_name = this.getFullName();\r\n            let label_confirm_name = document.getElementById('label_confirm_name');\r\n            if (!label_confirm_name) {\r\n                //TODO: report error in form\r\n                return;\r\n            }\r\n            label_confirm_name.innerHTML = 'Please type in the full name \"' + full_name + '\" in the box below to confirm. You WILL NOT be able to change it again.';\r\n            (_a = document.getElementById('confirmNameFieldset')) === null || _a === void 0 ? void 0 : _a.classList.remove('hidden');\r\n            (_b = document.getElementById('kycEditName')) === null || _b === void 0 ? void 0 : _b.classList.add('hidden');\r\n        }));\r\n        let kycEditNameBack = document.getElementById('kycEditNameBack');\r\n        kycEditNameBack === null || kycEditNameBack === void 0 ? void 0 : kycEditNameBack.addEventListener('click', (evt) => {\r\n            var _a, _b;\r\n            (_a = document.getElementById('confirmNameFieldset')) === null || _a === void 0 ? void 0 : _a.classList.add('hidden');\r\n            (_b = document.getElementById('kycEditName')) === null || _b === void 0 ? void 0 : _b.classList.remove('hidden');\r\n        });\r\n        let confirm_name = document.getElementById('confirm_name');\r\n        if (!confirm_name) {\r\n            //TODO: report error in form\r\n            return;\r\n        }\r\n        let kycEditNameSave = document.getElementById('kycEditNameSave');\r\n        kycEditNameSave.disabled = true;\r\n        confirm_name.setAttribute('aria-invalid', 'true');\r\n        confirm_name.addEventListener('keyup', (evt) => {\r\n            if (confirm_name.value == this.getFullName()) {\r\n                confirm_name.setAttribute('aria-invalid', 'false');\r\n                kycEditNameSave.disabled = false;\r\n            }\r\n            else {\r\n                confirm_name.setAttribute('aria-invalid', 'true');\r\n                kycEditNameSave.disabled = true;\r\n            }\r\n        });\r\n        kycEditNameSave === null || kycEditNameSave === void 0 ? void 0 : kycEditNameSave.addEventListener('click', (evt) => KycEditNameForm_awaiter(this, void 0, void 0, function* () {\r\n            let confirm_name = document.getElementById('confirm_name');\r\n            if (confirm_name && confirm_name.value != this.getFullName()) {\r\n                alert(confirm_name.value + ' is not same as ' + this.getFullName() + '. Go over the name and make sure it is identical');\r\n                return;\r\n            }\r\n            let given_name = document.getElementById('given_name');\r\n            let middle_name = document.getElementById('middle_name');\r\n            let family_name = document.getElementById('family_name');\r\n            LoadingHelper.setLoading(kycEditNameSave);\r\n            let userService = new UserService();\r\n            yield userService.updateName(given_name.value, middle_name.value, family_name.value)\r\n                .then((response) => {\r\n                if (response.message) {\r\n                    this.showError(response.message);\r\n                    return;\r\n                }\r\n                this.modal.hideModal();\r\n            }).catch(reason => {\r\n                if (reason.message) {\r\n                    this.showError(JSON.parse(reason.message).message);\r\n                }\r\n                else {\r\n                    this.showError(reason);\r\n                }\r\n            }).finally(() => {\r\n                LoadingHelper.removeLoading();\r\n            });\r\n        }));\r\n    }\r\n    showError(message) {\r\n        let kycEditNameError = document.getElementById('kycEditNameError');\r\n        if (!kycEditNameError)\r\n            return;\r\n        kycEditNameError.innerHTML = message;\r\n        kycEditNameError.style.display = 'block';\r\n    }\r\n    getFullName() {\r\n        let given_name = document.getElementById('given_name');\r\n        let middle_name = document.getElementById('middle_name');\r\n        let family_name = document.getElementById('family_name');\r\n        return given_name.value + ' ' + (!StringHelper.isNullOrEmpty(middle_name.value) ? middle_name.value + ' ' : '') + family_name.value;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycEditContactForm.html\n// Module\nvar KycEditContactForm_code = \"<fieldset id=\\\"kycEditContactFieldset\\\">\\r\\n    <div class=\\\"warningBar\\\">\\r\\n        <strong>Warning</strong><br/>\\r\\n        After you change this information a new KYC process will be started, and you will NOT be able to do any\\r\\n        trades until it has been approved.\\r\\n    </div>\\r\\n    <form id=\\\"kycEditContactForm\\\">\\r\\n        <div>\\r\\n            <label for=\\\"email_address\\\">Email</label>\\r\\n            <input type=\\\"email\\\" required class=\\\"form-control\\\" id=\\\"email_address\\\" name=\\\"email_address\\\"\\r\\n                   placeholder=\\\"name@example.com\\\" autocomplete=\\\"email\\\"\\r\\n                   value=\\\"\\\">\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"phone_number\\\">Phone</label>\\r\\n            <input type=\\\"tel\\\" class=\\\"form-control\\\" id=\\\"phone_number\\\" name=\\\"phone_number\\\"\\r\\n                   placeholder=\\\"+1-555-666-7788\\\" autocomplete=\\\"tel\\\" value=\\\"\\\">\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"street_address\\\">Permanent Residential Address</label>\\r\\n            <div class=\\\"explain\\\">It must be a physical address, not a PO box.</div>\\r\\n            <input required id=\\\"street_address\\\" name=\\\"street_address\\\"\\r\\n                   placeholder=\\\"20 N San Mateo Dr\\\" value=\\\"\\\" autocomplete=\\\"address-line1\\\">\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"unit\\\">Unit / Apt #</label>\\r\\n            <input id=\\\"unit\\\" name=\\\"unit\\\" value=\\\"\\\">\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"city\\\">City</label>\\r\\n            <input id=\\\"city\\\" name=\\\"city\\\" placeholder=\\\"Pawnee\\\"\\r\\n                   value=\\\"\\\" autocomplete=\\\"address-level2\\\">\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"postal_code\\\">Postal code</label>\\r\\n            <input required id=\\\"postal_code\\\" autocomplete=\\\"postal-code\\\" name=\\\"postal_code\\\"\\r\\n                   placeholder=\\\"94401\\\"\\r\\n                   value=\\\"\\\">\\r\\n        </div>\\r\\n        {{#if usa}}\\r\\n        <div id=\\\"state_div\\\">\\r\\n            <label for=\\\"state\\\">State (2 letters)</label>\\r\\n            <input required maxlength=\\\"2\\\" id=\\\"state\\\" name=\\\"state\\\" placeholder=\\\"NY\\\"\\r\\n                   value=\\\"\\\" autocomplete=\\\"address-level1\\\">\\r\\n        </div>\\r\\n        {{/if}}\\r\\n        <div class=\\\"input_error\\\" id=\\\"kycEditContactError\\\"></div>\\r\\n        <div class=\\\"buttons\\\">\\r\\n            <button type=\\\"submit\\\" id=\\\"kycEditContactSave\\\">Save</button>\\r\\n        </div>\\r\\n    </form>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const Kyc_KycEditContactForm = (KycEditContactForm_code);\n;// CONCATENATED MODULE: ./src/util/FormHelper.ts\n\r\nclass FormHelper {\r\n    static getParams(selector) {\r\n        let form = document.querySelector(selector);\r\n        if (!form)\r\n            return;\r\n        let data = new FormData(form);\r\n        return this.serialize(data);\r\n    }\r\n    static serialize(data) {\r\n        let obj = {};\r\n        for (let [key, value] of data) {\r\n            if (obj[key] !== undefined) {\r\n                if (!Array.isArray(obj[key])) {\r\n                    obj[key] = [obj[key]];\r\n                }\r\n                obj[key].push(value);\r\n            }\r\n            else {\r\n                obj[key] = value;\r\n            }\r\n        }\r\n        return obj;\r\n    }\r\n    static fillInputs(properties, item) {\r\n        properties.forEach((value) => {\r\n            let input = document.querySelector('input[name=' + value + ']');\r\n            if (input) {\r\n                if (input.type == 'radio') {\r\n                    console.log('checkbox', input, item[value]);\r\n                    input.value = item[value];\r\n                }\r\n                else {\r\n                    input.value = item[value];\r\n                }\r\n                input.dispatchEvent(new Event('change'));\r\n            }\r\n            else {\r\n                let select = document.querySelector('select[name=' + value + ']');\r\n                if (select) {\r\n                    select.value = item[value];\r\n                    select.dispatchEvent(new Event('change'));\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static validate(selector) {\r\n        let inputs = document.querySelectorAll(selector + ' input[required], ' + selector + ' select[required]');\r\n        for (let i = 0; i < inputs.length; i++) {\r\n            let input = inputs[i];\r\n            input.setAttribute('aria-invalid', 'false');\r\n            if (StringHelper.isNullOrEmpty(input.value)) {\r\n                input.setAttribute('aria-invalid', 'true');\r\n                input.focus();\r\n                input.addEventListener('change', (evt) => {\r\n                    if (!StringHelper.isNullOrEmpty(input.value)) {\r\n                        input.setAttribute('aria-invalid', 'false');\r\n                    }\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycEditContactForm.ts\nvar KycEditContactForm_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass KycEditContactForm {\r\n    constructor() {\r\n        this.modal = new Modal();\r\n    }\r\n    show() {\r\n        return KycEditContactForm_awaiter(this, void 0, void 0, function* () {\r\n            let userService = new UserService();\r\n            let account = yield userService.getAccount();\r\n            let usa = account.identity.country_of_tax_residence == 'USA';\r\n            let template = Handlebars.compile(Kyc_KycEditContactForm);\r\n            this.modal.showModal('Edit contact information', template({ usa: usa }));\r\n            let contactProperties = Object.getOwnPropertyNames(account.contact);\r\n            FormHelper.fillInputs(contactProperties, account.contact);\r\n            this.bindEvents();\r\n        });\r\n    }\r\n    bindEvents() {\r\n        let kycEditContactSave = document.getElementById('kycEditContactSave');\r\n        kycEditContactSave === null || kycEditContactSave === void 0 ? void 0 : kycEditContactSave.addEventListener('click', (evt) => KycEditContactForm_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            if (!this.validate())\r\n                return;\r\n            LoadingHelper.setLoading(kycEditContactSave);\r\n            let data = FormHelper.getParams('#kycEditContactForm');\r\n            let userService = new UserService();\r\n            yield userService.updateContact(data).then((response) => {\r\n                if (response.message) {\r\n                    this.showError(response.message);\r\n                    return;\r\n                }\r\n                let accountInfo = response;\r\n                let email_address = document.getElementById('email_address');\r\n                if (accountInfo.contact.email_address != (email_address === null || email_address === void 0 ? void 0 : email_address.value)) {\r\n                    this.showError('Email was not changed. The email ' + (email_address === null || email_address === void 0 ? void 0 : email_address.value) + ' is already registered under different account.');\r\n                    return;\r\n                }\r\n                this.modal.hideModal();\r\n            }).catch(reason => {\r\n                if (reason.message) {\r\n                    this.showError(JSON.parse(reason.message).message);\r\n                }\r\n                else {\r\n                    this.showError(reason);\r\n                }\r\n            }).finally(() => {\r\n                LoadingHelper.removeLoading();\r\n            });\r\n        }));\r\n    }\r\n    showError(message) {\r\n        let kycEditNameError = document.getElementById('kycEditContactError');\r\n        if (!kycEditNameError)\r\n            return;\r\n        kycEditNameError.innerHTML = message;\r\n        kycEditNameError.style.display = 'block';\r\n    }\r\n    validate() {\r\n        let inputs = document.querySelectorAll('#kycEditContactFieldset input[required]');\r\n        for (let i = 0; i < inputs.length; i++) {\r\n            let input = inputs[i];\r\n            if (StringHelper.isNullOrEmpty(input.value)) {\r\n                input.setAttribute('aria-invalid', 'true');\r\n                input.addEventListener('change', (evt) => {\r\n                    if (!StringHelper.isNullOrEmpty(input.value)) {\r\n                        input.setAttribute('aria-invalid', 'false');\r\n                    }\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycEditTrustedContact.html\n// Module\nvar KycEditTrustedContact_code = \"<fieldset class=\\\"kycTrustedContact\\\">\\r\\n    <div class=\\\"warningBar\\\">\\r\\n        <strong>Warning</strong><br/>\\r\\n        After you change this information a new KYC process will be started, and you will NOT be able to do any\\r\\n        trades until it has been approved.\\r\\n    </div>\\r\\n\\r\\n    <form id=\\\"kycTrustedContactForm\\\" method=\\\"post\\\">\\r\\n        <div class=\\\"explain\\\">\\r\\n            A trusted contact is a person you authorize your financial firm to contact in limited circumstances,\\r\\n            such as if there is a concern about activity in your account and they have been unable to get in touch with\\r\\n            you.\\r\\n            <br/><br/>\\r\\n            A trusted contact may be a family member, attorney, accountant or another third-party who you believe would\\r\\n            respect your privacy and know how to handle the responsibility.\\r\\n            The trusted person should be 18 years old or older.\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"given_name\\\">Legal given name of trusted contact</label>\\r\\n            <input required id=\\\"given_name\\\" name=\\\"given_name\\\"/>\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"family_name\\\">Legal family name of trusted contact</label>\\r\\n            <input required id=\\\"family_name\\\" name=\\\"family_name\\\"/>\\r\\n        </div>\\r\\n        <div>\\r\\n            If you fill in name, you are required to fill in one of the following, email, phone or address\\r\\n        </div>\\r\\n        <div class=\\\"input_error\\\" id=\\\"contact_missing_info\\\"></div>\\r\\n        <div>\\r\\n            <label for=\\\"email_address\\\">Email of trusted contact</label>\\r\\n            <input id=\\\"email_address\\\" type=\\\"email\\\" name=\\\"email_address\\\"/>\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"phone_number\\\">Phone of trusted contact</label>\\r\\n            <input id=\\\"phone_number\\\" type=\\\"tel\\\" name=\\\"phone_number\\\"/>\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"street_address\\\">Address of trusted contact</label>\\r\\n            <input id=\\\"street_address\\\" name=\\\"street_address\\\"/>\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"city\\\">City of trusted contact</label>\\r\\n            <input id=\\\"city\\\" name=\\\"city\\\"/>\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"state\\\">State of trusted contact</label>\\r\\n            <input id=\\\"state\\\" name=\\\"state\\\"/>\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"postal_code\\\">Postal code of trusted contact</label>\\r\\n            <input id=\\\"postal_code\\\" name=\\\"postal_code\\\"/>\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"country\\\">Country of trusted contact</label>\\r\\n            <select required id=\\\"country\\\" required name=\\\"country\\\">\\r\\n                <option value=\\\"\\\"></option>\\r\\n                {{#each countries}}\\r\\n                <option value=\\\"{{code}}\\\">{{name}}</option>\\r\\n                {{/each}}\\r\\n            </select>\\r\\n        </div>\\r\\n        <div class=\\\"input_error\\\" id=\\\"kycEditNameError\\\"></div>\\r\\n        <div class=\\\"buttons\\\">\\r\\n            <button type=\\\"submit\\\" id=\\\"trustedContactSubmit\\\">Submit</button>\\r\\n        </div>\\r\\n    </form>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const Kyc_KycEditTrustedContact = (KycEditTrustedContact_code);\n;// CONCATENATED MODULE: ./src/util/CountryHelper.ts\nclass CountryHelper {\r\n}\r\nCountryHelper.Countries = [\r\n    { \"name\": \"United States of America\", \"code\": \"USA\" },\r\n    { \"name\": \"United Kingdom\", \"code\": \"GBR\" },\r\n    { \"name\": \"Afghanistan\", \"code\": \"AFG\" }, { \"name\": \"Albania\", \"code\": \"ALB\" }, {\r\n        \"name\": \"Algeria\",\r\n        \"code\": \"DZA\"\r\n    }, { \"name\": \"American Samoa\", \"code\": \"ASM\" }, { \"name\": \"Andorra\", \"code\": \"AND\" }, {\r\n        \"name\": \"Angola\",\r\n        \"code\": \"AGO\"\r\n    }, { \"name\": \"Anguilla\", \"code\": \"AIA\" }, { \"name\": \"Antarctica\", \"code\": \"ATA\" }, {\r\n        \"name\": \"Antigua and Barbuda\",\r\n        \"code\": \"ATG\"\r\n    }, { \"name\": \"Argentina\", \"code\": \"ARG\" }, { \"name\": \"Armenia\", \"code\": \"ARM\" }, {\r\n        \"name\": \"Aruba\",\r\n        \"code\": \"ABW\"\r\n    }, { \"name\": \"Australia\", \"code\": \"AUS\" }, { \"name\": \"Austria\", \"code\": \"AUT\" }, {\r\n        \"name\": \"Azerbaijan\",\r\n        \"code\": \"AZE\"\r\n    }, { \"name\": \"Åland Islands\", \"code\": \"ALA\" }, { \"name\": \"Bahamas\", \"code\": \"BHS\" }, {\r\n        \"name\": \"Bahrain\",\r\n        \"code\": \"BHR\"\r\n    }, { \"name\": \"Bangladesh\", \"code\": \"BGD\" }, { \"name\": \"Barbados\", \"code\": \"BRB\" }, {\r\n        \"name\": \"Belarus\",\r\n        \"code\": \"BLR\"\r\n    }, { \"name\": \"Belgium\", \"code\": \"BEL\" }, { \"name\": \"Belize\", \"code\": \"BLZ\" }, {\r\n        \"name\": \"Benin\",\r\n        \"code\": \"BEN\"\r\n    }, { \"name\": \"Bermuda\", \"code\": \"BMU\" }, {\r\n        \"name\": \"Bhutan\",\r\n        \"code\": \"BTN\"\r\n    }, { \"name\": \"Bolivia (Plurinational State of)\", \"code\": \"BOL\" }, {\r\n        \"name\": \"Bonaire, Sint Eustatius and Saba\",\r\n        \"code\": \"BES\"\r\n    }, { \"name\": \"Bosnia and Herzegovina\", \"code\": \"BIH\" }, {\r\n        \"name\": \"Botswana\",\r\n        \"code\": \"BWA\"\r\n    }, { \"name\": \"Bouvet Island\", \"code\": \"BVT\" }, {\r\n        \"name\": \"Brazil\",\r\n        \"code\": \"BRA\"\r\n    }, { \"name\": \"British Indian Ocean Territory\", \"code\": \"IOT\" }, {\r\n        \"name\": \"Brunei Darussalam\",\r\n        \"code\": \"BRN\"\r\n    }, { \"name\": \"Bulgaria\", \"code\": \"BGR\" }, { \"name\": \"Burkina Faso\", \"code\": \"BFA\" }, {\r\n        \"name\": \"Burundi\",\r\n        \"code\": \"BDI\"\r\n    }, { \"name\": \"Cabo Verde\", \"code\": \"CPV\" }, { \"name\": \"Cambodia\", \"code\": \"KHM\" }, {\r\n        \"name\": \"Cameroon\",\r\n        \"code\": \"CMR\"\r\n    }, { \"name\": \"Canada\", \"code\": \"CAN\" }, {\r\n        \"name\": \"Cayman Islands\",\r\n        \"code\": \"CYM\"\r\n    }, { \"name\": \"Central African Republic\", \"code\": \"CAF\" }, { \"name\": \"Chad\", \"code\": \"TCD\" }, {\r\n        \"name\": \"Chile\",\r\n        \"code\": \"CHL\"\r\n    }, { \"name\": \"China\", \"code\": \"CHN\" }, {\r\n        \"name\": \"Christmas Island\",\r\n        \"code\": \"CXR\"\r\n    }, { \"name\": \"Cocos (Keeling) Islands\", \"code\": \"CCK\" }, { \"name\": \"Colombia\", \"code\": \"COL\" }, {\r\n        \"name\": \"Comoros\",\r\n        \"code\": \"COM\"\r\n    }, { \"name\": \"Congo (the Democratic Republic of the)\", \"code\": \"COD\" }, {\r\n        \"name\": \"Congo\",\r\n        \"code\": \"COG\"\r\n    }, { \"name\": \"Cook Islands\", \"code\": \"COK\" }, { \"name\": \"Costa Rica\", \"code\": \"CRI\" }, {\r\n        \"name\": \"Croatia\",\r\n        \"code\": \"HRV\"\r\n    }, { \"name\": \"Cuba\", \"code\": \"CUB\" }, { \"name\": \"Curaçao\", \"code\": \"CUW\" }, {\r\n        \"name\": \"Cyprus\",\r\n        \"code\": \"CYP\"\r\n    }, { \"name\": \"Czechia\", \"code\": \"CZE\" }, { \"name\": \"Côte d'Ivoire\", \"code\": \"CIV\" }, {\r\n        \"name\": \"Denmark\",\r\n        \"code\": \"DNK\"\r\n    }, { \"name\": \"Djibouti\", \"code\": \"DJI\" }, { \"name\": \"Dominica\", \"code\": \"DMA\" }, {\r\n        \"name\": \"Dominican Republic\",\r\n        \"code\": \"DOM\"\r\n    }, { \"name\": \"Ecuador\", \"code\": \"ECU\" }, { \"name\": \"Egypt\", \"code\": \"EGY\" }, {\r\n        \"name\": \"El Salvador\",\r\n        \"code\": \"SLV\"\r\n    }, { \"name\": \"Equatorial Guinea\", \"code\": \"GNQ\" }, { \"name\": \"Eritrea\", \"code\": \"ERI\" }, {\r\n        \"name\": \"Estonia\",\r\n        \"code\": \"EST\"\r\n    }, { \"name\": \"Eswatini\", \"code\": \"SWZ\" }, {\r\n        \"name\": \"Ethiopia\",\r\n        \"code\": \"ETH\"\r\n    }, { \"name\": \"Falkland Islands [Malvinas]\", \"code\": \"FLK\" }, {\r\n        \"name\": \"Faroe Islands\",\r\n        \"code\": \"FRO\"\r\n    }, { \"name\": \"Fiji\", \"code\": \"FJI\" }, { \"name\": \"Finland\", \"code\": \"FIN\" }, {\r\n        \"name\": \"France\",\r\n        \"code\": \"FRA\"\r\n    }, { \"name\": \"French Guiana\", \"code\": \"GUF\" }, {\r\n        \"name\": \"French Polynesia\",\r\n        \"code\": \"PYF\"\r\n    }, { \"name\": \"French Southern Territories\", \"code\": \"ATF\" }, { \"name\": \"Gabon\", \"code\": \"GAB\" }, {\r\n        \"name\": \"Gambia\",\r\n        \"code\": \"GMB\"\r\n    }, { \"name\": \"Georgia\", \"code\": \"GEO\" }, { \"name\": \"Germany\", \"code\": \"DEU\" }, {\r\n        \"name\": \"Ghana\",\r\n        \"code\": \"GHA\"\r\n    }, { \"name\": \"Gibraltar\", \"code\": \"GIB\" }, { \"name\": \"Greece\", \"code\": \"GRC\" }, {\r\n        \"name\": \"Greenland\",\r\n        \"code\": \"GRL\"\r\n    }, { \"name\": \"Grenada\", \"code\": \"GRD\" }, { \"name\": \"Guadeloupe\", \"code\": \"GLP\" }, {\r\n        \"name\": \"Guam\",\r\n        \"code\": \"GUM\"\r\n    }, { \"name\": \"Guatemala\", \"code\": \"GTM\" }, { \"name\": \"Guernsey\", \"code\": \"GGY\" }, {\r\n        \"name\": \"Guinea\",\r\n        \"code\": \"GIN\"\r\n    }, { \"name\": \"Guinea-Bissau\", \"code\": \"GNB\" }, { \"name\": \"Guyana\", \"code\": \"GUY\" }, {\r\n        \"name\": \"Haiti\",\r\n        \"code\": \"HTI\"\r\n    }, { \"name\": \"Heard Island and McDonald Islands\", \"code\": \"HMD\" }, {\r\n        \"name\": \"Holy See\",\r\n        \"code\": \"VAT\"\r\n    }, { \"name\": \"Honduras\", \"code\": \"HND\" }, { \"name\": \"Hong Kong\", \"code\": \"HKG\" }, {\r\n        \"name\": \"Hungary\",\r\n        \"code\": \"HUN\"\r\n    }, { \"name\": \"Iceland\", \"code\": \"ISL\" }, { \"name\": \"India\", \"code\": \"IND\" }, {\r\n        \"name\": \"Indonesia\",\r\n        \"code\": \"IDN\"\r\n    }, { \"name\": \"Iran (Islamic Republic of)\", \"code\": \"IRN\" }, { \"name\": \"Iraq\", \"code\": \"IRQ\" }, {\r\n        \"name\": \"Ireland\",\r\n        \"code\": \"IRL\"\r\n    }, { \"name\": \"Isle of Man\", \"code\": \"IMN\" }, { \"name\": \"Israel\", \"code\": \"ISR\" }, {\r\n        \"name\": \"Italy\",\r\n        \"code\": \"ITA\"\r\n    }, { \"name\": \"Jamaica\", \"code\": \"JAM\" }, { \"name\": \"Japan\", \"code\": \"JPN\" }, {\r\n        \"name\": \"Jersey\",\r\n        \"code\": \"JEY\"\r\n    }, { \"name\": \"Jordan\", \"code\": \"JOR\" }, { \"name\": \"Kazakhstan\", \"code\": \"KAZ\" }, {\r\n        \"name\": \"Kenya\",\r\n        \"code\": \"KEN\"\r\n    }, { \"name\": \"Kiribati\", \"code\": \"KIR\" }, {\r\n        \"name\": \"Korea (the Democratic People's Republic of)\",\r\n        \"code\": \"PRK\"\r\n    }, { \"name\": \"Korea (the Republic of)\", \"code\": \"KOR\" }, { \"name\": \"Kuwait\", \"code\": \"KWT\" }, {\r\n        \"name\": \"Kyrgyzstan\",\r\n        \"code\": \"KGZ\"\r\n    }, { \"name\": \"Lao People's Democratic Republic\", \"code\": \"LAO\" }, {\r\n        \"name\": \"Latvia\",\r\n        \"code\": \"LVA\"\r\n    }, { \"name\": \"Lebanon\", \"code\": \"LBN\" }, { \"name\": \"Lesotho\", \"code\": \"LSO\" }, {\r\n        \"name\": \"Liberia\",\r\n        \"code\": \"LBR\"\r\n    }, { \"name\": \"Libya\", \"code\": \"LBY\" }, { \"name\": \"Liechtenstein\", \"code\": \"LIE\" }, {\r\n        \"name\": \"Lithuania\",\r\n        \"code\": \"LTU\"\r\n    }, { \"name\": \"Luxembourg\", \"code\": \"LUX\" }, { \"name\": \"Macao\", \"code\": \"MAC\" }, {\r\n        \"name\": \"Madagascar\",\r\n        \"code\": \"MDG\"\r\n    }, { \"name\": \"Malawi\", \"code\": \"MWI\" }, { \"name\": \"Malaysia\", \"code\": \"MYS\" }, {\r\n        \"name\": \"Maldives\",\r\n        \"code\": \"MDV\"\r\n    }, { \"name\": \"Mali\", \"code\": \"MLI\" }, { \"name\": \"Malta\", \"code\": \"MLT\" }, {\r\n        \"name\": \"Marshall Islands\",\r\n        \"code\": \"MHL\"\r\n    }, { \"name\": \"Martinique\", \"code\": \"MTQ\" }, { \"name\": \"Mauritania\", \"code\": \"MRT\" }, {\r\n        \"name\": \"Mauritius\",\r\n        \"code\": \"MUS\"\r\n    }, { \"name\": \"Mayotte\", \"code\": \"MYT\" }, {\r\n        \"name\": \"Mexico\",\r\n        \"code\": \"MEX\"\r\n    }, { \"name\": \"Micronesia (Federated States of)\", \"code\": \"FSM\" }, {\r\n        \"name\": \"Moldova (the Republic of)\",\r\n        \"code\": \"MDA\"\r\n    }, { \"name\": \"Monaco\", \"code\": \"MCO\" }, { \"name\": \"Mongolia\", \"code\": \"MNG\" }, {\r\n        \"name\": \"Montenegro\",\r\n        \"code\": \"MNE\"\r\n    }, { \"name\": \"Montserrat\", \"code\": \"MSR\" }, { \"name\": \"Morocco\", \"code\": \"MAR\" }, {\r\n        \"name\": \"Mozambique\",\r\n        \"code\": \"MOZ\"\r\n    }, { \"name\": \"Myanmar\", \"code\": \"MMR\" }, { \"name\": \"Namibia\", \"code\": \"NAM\" }, {\r\n        \"name\": \"Nauru\",\r\n        \"code\": \"NRU\"\r\n    }, { \"name\": \"Nepal\", \"code\": \"NPL\" }, { \"name\": \"Netherlands\", \"code\": \"NLD\" }, {\r\n        \"name\": \"New Caledonia\",\r\n        \"code\": \"NCL\"\r\n    }, { \"name\": \"New Zealand\", \"code\": \"NZL\" }, { \"name\": \"Nicaragua\", \"code\": \"NIC\" }, {\r\n        \"name\": \"Niger\",\r\n        \"code\": \"NER\"\r\n    }, { \"name\": \"Nigeria\", \"code\": \"NGA\" }, { \"name\": \"Niue\", \"code\": \"NIU\" }, {\r\n        \"name\": \"Norfolk Island\",\r\n        \"code\": \"NFK\"\r\n    }, { \"name\": \"Northern Mariana Islands\", \"code\": \"MNP\" }, { \"name\": \"Norway\", \"code\": \"NOR\" }, {\r\n        \"name\": \"Oman\",\r\n        \"code\": \"OMN\"\r\n    }, { \"name\": \"Pakistan\", \"code\": \"PAK\" }, { \"name\": \"Palau\", \"code\": \"PLW\" }, {\r\n        \"name\": \"Palestine, State of\",\r\n        \"code\": \"PSE\"\r\n    }, { \"name\": \"Panama\", \"code\": \"PAN\" }, { \"name\": \"Papua New Guinea\", \"code\": \"PNG\" }, {\r\n        \"name\": \"Paraguay\",\r\n        \"code\": \"PRY\"\r\n    }, { \"name\": \"Peru\", \"code\": \"PER\" }, { \"name\": \"Philippines\", \"code\": \"PHL\" }, {\r\n        \"name\": \"Pitcairn\",\r\n        \"code\": \"PCN\"\r\n    }, { \"name\": \"Poland\", \"code\": \"POL\" }, { \"name\": \"Portugal\", \"code\": \"PRT\" }, {\r\n        \"name\": \"Puerto Rico\",\r\n        \"code\": \"PRI\"\r\n    }, { \"name\": \"Qatar\", \"code\": \"QAT\" }, { \"name\": \"Republic of North Macedonia\", \"code\": \"MKD\" }, {\r\n        \"name\": \"Romania\",\r\n        \"code\": \"ROU\"\r\n    }, { \"name\": \"Russian Federation\", \"code\": \"RUS\" }, { \"name\": \"Rwanda\", \"code\": \"RWA\" }, {\r\n        \"name\": \"Réunion\",\r\n        \"code\": \"REU\"\r\n    }, { \"name\": \"Saint Barthélemy\", \"code\": \"BLM\" }, {\r\n        \"name\": \"Saint Helena, Ascension and Tristan da Cunha\",\r\n        \"code\": \"SHN\"\r\n    }, { \"name\": \"Saint Kitts and Nevis\", \"code\": \"KNA\" }, {\r\n        \"name\": \"Saint Lucia\",\r\n        \"code\": \"LCA\"\r\n    }, { \"name\": \"Saint Martin (French part)\", \"code\": \"MAF\" }, {\r\n        \"name\": \"Saint Pierre and Miquelon\",\r\n        \"code\": \"SPM\"\r\n    }, { \"name\": \"Saint Vincent and the Grenadines\", \"code\": \"VCT\" }, {\r\n        \"name\": \"Samoa\",\r\n        \"code\": \"WSM\"\r\n    }, { \"name\": \"San Marino\", \"code\": \"SMR\" }, {\r\n        \"name\": \"Sao Tome and Principe\",\r\n        \"code\": \"STP\"\r\n    }, { \"name\": \"Saudi Arabia\", \"code\": \"SAU\" }, { \"name\": \"Senegal\", \"code\": \"SEN\" }, {\r\n        \"name\": \"Serbia\",\r\n        \"code\": \"SRB\"\r\n    }, { \"name\": \"Seychelles\", \"code\": \"SYC\" }, { \"name\": \"Sierra Leone\", \"code\": \"SLE\" }, {\r\n        \"name\": \"Singapore\",\r\n        \"code\": \"SGP\"\r\n    }, { \"name\": \"Sint Maarten (Dutch part)\", \"code\": \"SXM\" }, {\r\n        \"name\": \"Slovakia\",\r\n        \"code\": \"SVK\"\r\n    }, { \"name\": \"Slovenia\", \"code\": \"SVN\" }, { \"name\": \"Solomon Islands\", \"code\": \"SLB\" }, {\r\n        \"name\": \"Somalia\",\r\n        \"code\": \"SOM\"\r\n    }, { \"name\": \"South Africa\", \"code\": \"ZAF\" }, {\r\n        \"name\": \"South Georgia and the South Sandwich Islands\",\r\n        \"code\": \"SGS\"\r\n    }, { \"name\": \"South Sudan\", \"code\": \"SSD\" }, { \"name\": \"Spain\", \"code\": \"ESP\" }, {\r\n        \"name\": \"Sri Lanka\",\r\n        \"code\": \"LKA\"\r\n    }, { \"name\": \"Sudan\", \"code\": \"SDN\" }, { \"name\": \"Suriname\", \"code\": \"SUR\" }, {\r\n        \"name\": \"Svalbard and Jan Mayen\",\r\n        \"code\": \"SJM\"\r\n    }, { \"name\": \"Sweden\", \"code\": \"SWE\" }, { \"name\": \"Switzerland\", \"code\": \"CHE\" }, {\r\n        \"name\": \"Syrian Arab Republic\",\r\n        \"code\": \"SYR\"\r\n    }, { \"name\": \"Taiwan (Province of China)\", \"code\": \"TWN\" }, {\r\n        \"name\": \"Tajikistan\",\r\n        \"code\": \"TJK\"\r\n    }, { \"name\": \"Tanzania, United Republic of\", \"code\": \"TZA\" }, {\r\n        \"name\": \"Thailand\",\r\n        \"code\": \"THA\"\r\n    }, { \"name\": \"Timor-Leste\", \"code\": \"TLS\" }, { \"name\": \"Togo\", \"code\": \"TGO\" }, {\r\n        \"name\": \"Tokelau\",\r\n        \"code\": \"TKL\"\r\n    }, { \"name\": \"Tonga\", \"code\": \"TON\" }, { \"name\": \"Trinidad and Tobago\", \"code\": \"TTO\" }, {\r\n        \"name\": \"Tunisia\",\r\n        \"code\": \"TUN\"\r\n    }, { \"name\": \"Turkey\", \"code\": \"TUR\" }, {\r\n        \"name\": \"Turkmenistan\",\r\n        \"code\": \"TKM\"\r\n    }, { \"name\": \"Turks and Caicos Islands\", \"code\": \"TCA\" }, { \"name\": \"Tuvalu\", \"code\": \"TUV\" }, {\r\n        \"name\": \"Uganda\",\r\n        \"code\": \"UGA\"\r\n    }, { \"name\": \"Ukraine\", \"code\": \"UKR\" }, {\r\n        \"name\": \"United Arab Emirates\",\r\n        \"code\": \"ARE\"\r\n    }, {\r\n        \"name\": \"United Kingdom of Great Britain and Northern Ireland\",\r\n        \"code\": \"GBR\"\r\n    }, { \"name\": \"United States Minor Outlying Islands\", \"code\": \"UMI\" }, {\r\n        \"name\": \"United States of America\",\r\n        \"code\": \"USA\"\r\n    }, { \"name\": \"Uruguay\", \"code\": \"URY\" }, { \"name\": \"Uzbekistan\", \"code\": \"UZB\" }, {\r\n        \"name\": \"Vanuatu\",\r\n        \"code\": \"VUT\"\r\n    }, { \"name\": \"Venezuela (Bolivarian Republic of)\", \"code\": \"VEN\" }, {\r\n        \"name\": \"Viet Nam\",\r\n        \"code\": \"VNM\"\r\n    }, { \"name\": \"Virgin Islands (British)\", \"code\": \"VGB\" }, {\r\n        \"name\": \"Virgin Islands (U.S.)\",\r\n        \"code\": \"VIR\"\r\n    }, { \"name\": \"Wallis and Futuna\", \"code\": \"WLF\" }, { \"name\": \"Western Sahara\", \"code\": \"ESH\" }, {\r\n        \"name\": \"Yemen\",\r\n        \"code\": \"YEM\"\r\n    }, { \"name\": \"Zambia\", \"code\": \"ZMB\" }, { \"name\": \"Zimbabwe\", \"code\": \"ZWE\" }\r\n];\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycEditTrustedContact.ts\nvar KycEditTrustedContact_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass KycEditTrustedContact {\r\n    constructor() {\r\n        this.modal = new Modal();\r\n    }\r\n    show() {\r\n        return KycEditTrustedContact_awaiter(this, void 0, void 0, function* () {\r\n            let userService = new UserService();\r\n            let account = yield userService.getAccount();\r\n            let template = Handlebars.compile(Kyc_KycEditTrustedContact);\r\n            this.modal.showModal('Edit trusted contact', template({ countries: CountryHelper.Countries }));\r\n            if (account.trusted_contact) {\r\n                let contactProperties = Object.getOwnPropertyNames(account.trusted_contact);\r\n                FormHelper.fillInputs(contactProperties, account.trusted_contact);\r\n            }\r\n            this.bindEvents();\r\n        });\r\n    }\r\n    bindEvents() {\r\n        let trustedContactSubmit = document.getElementById('trustedContactSubmit');\r\n        trustedContactSubmit === null || trustedContactSubmit === void 0 ? void 0 : trustedContactSubmit.addEventListener('click', (evt) => KycEditTrustedContact_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            if (!FormHelper.validate('#kycTrustedContactForm'))\r\n                return;\r\n            LoadingHelper.setLoading(trustedContactSubmit);\r\n            let params = FormHelper.getParams('#kycTrustedContactForm');\r\n            let userService = new UserService();\r\n            yield userService.updateTrustedContact(params).then((response) => {\r\n                if (response.message) {\r\n                    this.showError(response.message);\r\n                    return;\r\n                }\r\n                this.modal.hideModal();\r\n            }).catch(reason => {\r\n                if (reason.message) {\r\n                    this.showError(JSON.parse(reason.message).message);\r\n                }\r\n                else {\r\n                    this.showError(reason);\r\n                }\r\n            }).finally(() => {\r\n                LoadingHelper.removeLoading();\r\n            });\r\n        }));\r\n    }\r\n    showError(message) {\r\n        let kycEditNameError = document.getElementById('kycEditNameError');\r\n        if (!kycEditNameError)\r\n            return;\r\n        kycEditNameError.innerHTML = message;\r\n        kycEditNameError.style.display = 'block';\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/util/DateHelper.ts\nclass DateHelper {\r\n    static isOlderThen(date, minutes) {\r\n        let currentTime = new Date().getTime();\r\n        return (currentTime > (date.getTime() + minutes * 60 * 1000));\r\n    }\r\n    ;\r\n    static getWeekday() {\r\n        const weekday = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n        const d = new Date();\r\n        return weekday[d.getDay()];\r\n    }\r\n    static getOpenAndCloseHours() {\r\n        const d = new Date();\r\n        let openHour = 9 + 4 + (-1 * (d.getTimezoneOffset() / 60));\r\n        let closeHour = 16 + 4 + (-1 * (d.getTimezoneOffset() / 60));\r\n        return [openHour + ':30', closeHour + ':00'];\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/services/blockchain/AUSDService.ts\nvar AUSDService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nclass AUSDService extends BlockchainService {\r\n    constructor() {\r\n        super();\r\n    }\r\n    getAUSDBalanceOf(ethAddress) {\r\n        return AUSDService_awaiter(this, void 0, void 0, function* () {\r\n            if (AUSDService.lastUpdate && AUSDService.aUSDAmount &&\r\n                !DateHelper.isOlderThen(AUSDService.lastUpdate, 5)) {\r\n                return AUSDService.aUSDAmount;\r\n            }\r\n            let balanceOf = yield this.getBalanceOf(this.contracts.AUSD_ADDRESS, ethAddress);\r\n            let amount = formatEther(balanceOf.toString());\r\n            AUSDService.aUSDAmount = new bignumber(amount);\r\n            AUSDService.lastUpdate = new Date();\r\n            for (let i = 0; i < AUSDService.onAUsdLoad.length; i++) {\r\n                AUSDService.onAUsdLoad[i]();\r\n            }\r\n            return AUSDService.aUSDAmount;\r\n        });\r\n    }\r\n    transfer(symbolAddress, qty) {\r\n        const _super = Object.create(null, {\r\n            transferInner: { get: () => super.transferInner }\r\n        });\r\n        return AUSDService_awaiter(this, void 0, void 0, function* () {\r\n            let result = yield _super.transferInner.call(this, this.contracts.AUSD_ADDRESS, symbolAddress, qty);\r\n            AUSDService.aUSDAmount = undefined;\r\n            AUSDService.lastUpdate = undefined;\r\n            return result;\r\n        });\r\n    }\r\n    getAUsdAbi() {\r\n        return AUSDService_awaiter(this, void 0, void 0, function* () {\r\n            if (AUSDService.AUSDInfo)\r\n                return AUSDService.AUSDInfo.abi;\r\n            let response = yield fetch('../abi/aUSD.json');\r\n            AUSDService.AUSDInfo = yield response.json();\r\n            return AUSDService.AUSDInfo.abi;\r\n        });\r\n    }\r\n}\r\nAUSDService.onAUsdLoad = [];\r\n\n;// CONCATENATED MODULE: ./src/html/modal/funding/FakeFunding.html\n// Module\nvar FakeFunding_code = \"<article>\\r\\n    <div id=\\\"beforeFunding\\\">\\r\\n        To use liminal.market you need some aUSD. aUSD is the same value as USD.\\r\\n        We can give you some aUSD (this is all fake money), so you can play with the system.\\r\\n\\r\\n        First, you need to add aUSD to you wallet.\\r\\n\\r\\n        <button id=\\\"addTokenToWallet\\\">Add aUSD to wallet</button>\\r\\n        <blockquote id=\\\"needToCopy\\\" class=\\\"d-none\\\">\\r\\n            If the button didn't work, you can copy the address here and import it into your wallet\\r\\n            <input value=\\\"{{aUSDAddress}}\\\"/>\\r\\n        </blockquote>\\r\\n        When you have aUSD to you wallet, you can request some money to trade with.\\r\\n\\r\\n        <button id=\\\"requestFakeAUSD\\\">Request some aUSD</button>\\r\\n        <div class=\\\"warningBar notificationBar d-none\\\" id=\\\"fundingError\\\"></div>\\r\\n    </div>\\r\\n    <div id=\\\"afterFunding\\\" class=\\\"d-none center\\\">\\r\\n        We have now sending aUSD to your wallet. This usually takes few minutes, so lets wait.\\r\\n<br /><br />\\r\\n        When you have the aUSD in you wallet, we will tell you.\\r\\n        <div>\\r\\n            <h3>Current aUSD balance</h3>\\r\\n            <div id=\\\"currentAUSDBalance\\\"></div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div id=\\\"errorAfterTryFunding\\\" class=\\\"d-none\\\">\\r\\n        We had an error while trying to fund you. We'll be cracking at the issue soon to fix it.\\r\\n        Try again in few minutes. If not, try again in few hours.\\r\\n    </div>\\r\\n\\r\\n    <a href=\\\"#\\\" id=\\\"registerBankInfo\\\">Register bank information (not needed for Sandbox)</a>\\r\\n</article>\";\n// Exports\n/* harmony default export */ const FakeFunding = (FakeFunding_code);\n;// CONCATENATED MODULE: ./src/services/broker/FundingService.ts\nvar FundingService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\nclass FundingService extends BaseService {\r\n    constructor() {\r\n        super();\r\n    }\r\n    requestFakeFunding() {\r\n        return FundingService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.post('fundUser');\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Funding/Relationship/SelectFundingType.html\n// Module\nvar SelectFundingType_code = \"<p>Setup your bank relationship with Liminal.market. Please choose the type of transfer you want to make</p>\\r\\n<ul class=\\\"funding_type\\\">\\r\\n    <li><label><input type=\\\"radio\\\" name=\\\"bank_transfer\\\" id=\\\"ach_transfer\\\" value=\\\"1\\\"/> ACH bank transfer (US)</label>\\r\\n    </li>\\r\\n    <li><label><input type=\\\"radio\\\" name=\\\"bank_transfer\\\" id=\\\"wire_transfer\\\" value=\\\"2\\\"/> Wire transfer\\r\\n        (International)</label></li>\\r\\n</ul>\\r\\n<div id=\\\"selectFundingTypeError\\\" class=\\\"input_error\\\"></div>\\r\\n<button id=\\\"next_bank_information\\\">Next: Bank information</button>\\r\\n\";\n// Exports\n/* harmony default export */ const Relationship_SelectFundingType = (SelectFundingType_code);\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/Relationship/SelectFundingType.ts\n\r\nclass SelectFundingType {\r\n    constructor(aUsdFund) {\r\n        this.aUsdFund = aUsdFund;\r\n    }\r\n    show() {\r\n        let template = Handlebars.compile(Relationship_SelectFundingType);\r\n        this.aUsdFund.modal.showModal('Select funding type', template({}));\r\n        this.bindEvent();\r\n    }\r\n    bindEvent() {\r\n        let next_bank_information = document.getElementById('next_bank_information');\r\n        next_bank_information === null || next_bank_information === void 0 ? void 0 : next_bank_information.addEventListener('click', (evt) => {\r\n            this.aUsdFund.hideError('selectFundingTypeError');\r\n            let ach_transfer = document.getElementById('ach_transfer');\r\n            if (ach_transfer === null || ach_transfer === void 0 ? void 0 : ach_transfer.checked) {\r\n                this.aUsdFund.achRelationship.show();\r\n            }\r\n            let wire_transfer = document.getElementById('wire_transfer');\r\n            if (wire_transfer === null || wire_transfer === void 0 ? void 0 : wire_transfer.checked) {\r\n                this.aUsdFund.wireTransferRelationship.show();\r\n            }\r\n            this.aUsdFund.showError('selectFundingTypeError', 'Please select funding type');\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Funding/Relationship/ACHRelationship.html\n// Module\nvar ACHRelationship_code = \"<fieldset>\\r\\n    <p>Before you can transfer, you need to set up your bank information</p>\\r\\n\\r\\n    <form id=\\\"achForm\\\">\\r\\n        <div class=\\\"grid\\\">\\r\\n            <label>\\r\\n                Account owner name\\r\\n                <input name=\\\"account_owner_name\\\" required id=\\\"account_owner_name\\\"/>\\r\\n            </label>\\r\\n            <label>Bank Account Type\\r\\n                <select name=\\\"bank_account_type\\\" id=\\\"bank_account_type\\\" required>\\r\\n                    <option value=\\\"\\\"></option>\\r\\n                    <option value=\\\"CHECKING\\\">Checking</option>\\r\\n                    <option value=\\\"SAVINGS\\\">Savings</option>\\r\\n                </select>\\r\\n            </label>\\r\\n        </div>\\r\\n        <div class=\\\"grid\\\">\\r\\n            <label>\\r\\n                Bank account number\\r\\n                <input name=\\\"bank_account_number\\\" id=\\\"bank_account_number\\\" required/>\\r\\n            </label>\\r\\n            <label>\\r\\n                Bank routing number\\r\\n                <input name=\\\"bank_routing_number\\\" id=\\\"bank_routing_number\\\" required/>\\r\\n            </label>\\r\\n        </div>\\r\\n        <div class=\\\"input_error\\\" id=\\\"relationshipError\\\"></div>\\r\\n        <div class=\\\"grid\\\">\\r\\n            <button id=\\\"ach_previous\\\">Previous: Funding type</button>\\r\\n            <button id=\\\"ach_next\\\">Next: Save bank information</button>\\r\\n        </div>\\r\\n\\r\\n    </form>\\r\\n\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const Relationship_ACHRelationship = (ACHRelationship_code);\n;// CONCATENATED MODULE: ./src/enums/TransferDirectionEnum.ts\nvar TransferDirectionEnum;\r\n(function (TransferDirectionEnum) {\r\n    TransferDirectionEnum[\"Incoming\"] = \"INCOMING\";\r\n    TransferDirectionEnum[\"Outgoing\"] = \"OUTGOING\";\r\n})(TransferDirectionEnum || (TransferDirectionEnum = {}));\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/Relationship/RelationshipBase.ts\nvar RelationshipBase_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\nclass RelationshipBase {\r\n    constructor(aUsdFund) {\r\n        this.aUsdFund = aUsdFund;\r\n    }\r\n    show(title, html, param) {\r\n        let template = Handlebars.compile(html);\r\n        this.aUsdFund.modal.showModal(title, template(param));\r\n        this.bindEvents();\r\n    }\r\n    handleErrorResponse(reason) {\r\n        return RelationshipBase_awaiter(this, void 0, void 0, function* () {\r\n            if (!reason.message) {\r\n                alert(reason);\r\n                return;\r\n            }\r\n            let obj = JSON.parse(reason.message);\r\n            let errorElement = document.getElementById('relationshipError');\r\n            if (!errorElement) {\r\n                let message = (obj.serverError) ? obj.serverError.message : reason.message;\r\n                alert(message);\r\n                return;\r\n            }\r\n            if (obj.serverError.message.indexOf('only one bank association') != -1) {\r\n                let userService = new UserService();\r\n                let bankRelationship = yield userService.getBankRelationship();\r\n                if (!bankRelationship) {\r\n                    errorElement.innerText = 'We cannot create the bank connection. Something is not working as it should. Please contact us at <a href=\"mailto:info@liminal.market\">info@liminal.market</a>';\r\n                    errorElement.style.display = 'block';\r\n                }\r\n                else {\r\n                    let transfers = yield userService.getLatestTransfers(TransferDirectionEnum.Incoming);\r\n                    yield this.aUsdFund.transferNotification.show(bankRelationship, transfers);\r\n                }\r\n            }\r\n            else {\r\n                errorElement.innerText = obj.serverError.message;\r\n                errorElement.style.display = 'block';\r\n            }\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/Relationship/ACHRelationship.ts\nvar ACHRelationship_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nclass ACHRelationship extends RelationshipBase {\r\n    constructor(aUsdFund) {\r\n        super(aUsdFund);\r\n    }\r\n    show() {\r\n        super.show('Bank information', Relationship_ACHRelationship);\r\n    }\r\n    bindEvents() {\r\n        let ach_next = document.getElementById('ach_next');\r\n        ach_next === null || ach_next === void 0 ? void 0 : ach_next.addEventListener('click', (evt) => ACHRelationship_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            if (!this.validate())\r\n                return;\r\n            let params = FormHelper.getParams('#achForm');\r\n            let userService = new UserService();\r\n            userService.createAchRelationship(params.account_owner_name, params.bank_account_type, params.bank_account_number, params.bank_routing_number)\r\n                .then(result => {\r\n                this.aUsdFund.firstTransferSetup.show(result);\r\n            })\r\n                .catch((reason) => ACHRelationship_awaiter(this, void 0, void 0, function* () {\r\n                yield this.handleErrorResponse(reason);\r\n            }));\r\n        }));\r\n        let ach_previous = document.getElementById('ach_previous');\r\n        ach_previous === null || ach_previous === void 0 ? void 0 : ach_previous.addEventListener('click', (evt) => {\r\n            evt.preventDefault();\r\n            this.aUsdFund.selectFundingType.show();\r\n        });\r\n    }\r\n    validate() {\r\n        if (!FormHelper.validate('#achForm'))\r\n            return false;\r\n        return true;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Funding/TransferNotification.html\n// Module\nvar TransferNotification_code = \"<fieldset>\\r\\n\\r\\n\\r\\n    <p>\\r\\n        To fill up your broker account, you need to notify Liminal.market first about your transfer,\\r\\n        we can then match it with your account.\\r\\n        <a href=\\\"#\\\" id=\\\"first_transfer_setup\\\">Need bank information? Click here</a>\\r\\n    </p>\\r\\n    <br/>\\r\\n\\r\\n    {{{moneyTransferred}}}\\r\\n\\r\\n    {{{transfers}}}\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const Funding_TransferNotification = (TransferNotification_code);\n;// CONCATENATED MODULE: ./src/html/modal/Funding/TransfersList.html\n// Module\nvar TransfersList_code = \"<hr/>\\r\\n<h3>{{Direction}} transfers</h3>\\r\\n{{#if transfers.length}}\\r\\n<p>Below is a list of transfers, confirmed and not confirmed.</p>\\r\\n<table>\\r\\n    <thead>\\r\\n    <tr>\\r\\n        <th>Amount</th>\\r\\n        <th>Status</th>\\r\\n        <th>Created</th>\\r\\n        <th>Expires</th>\\r\\n    </tr>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n    {{#each transfers}}\\r\\n    <tr>\\r\\n        <td>${{amount}}</td>\\r\\n        <td id=\\\"status_{{id}}\\\">{{status}}</td>\\r\\n        <td>{{dateTimeFormat created_at}}</td>\\r\\n        <td>{{dateTimeFormat expires_at}}</td>\\r\\n        <td id=\\\"delete_{{id}}\\\" class=\\\"{{classByStatus status}}\\\"><a href=\\\"#\\\" class=\\\"deleteTransfer\\\" data-id=\\\"{{id}}\\\">Cancel</a>\\r\\n        </td>\\r\\n    </tr>\\r\\n    {{/each}}\\r\\n    </tbody>\\r\\n</table>\\r\\n{{else}}\\r\\n<p>No transfers registered</p>\\r\\n{{/if}}\";\n// Exports\n/* harmony default export */ const Funding_TransfersList = (TransfersList_code);\n;// CONCATENATED MODULE: ./src/util/HandlebarHelpers.ts\nclass HandlebarHelpers {\r\n    static registerHelpers() {\r\n        Handlebars.registerHelper('perc', function (number) {\r\n            return Math.round(parseFloat(number) * 10000) / 100 + '%';\r\n        });\r\n        Handlebars.registerHelper('round', function (number) {\r\n            return Math.round(parseFloat(number) * 100) / 100;\r\n        });\r\n        Handlebars.registerHelper('round2', function (number) {\r\n            return Math.round(parseFloat(number) * 10000) / 10000;\r\n        });\r\n        Handlebars.registerHelper('classColor', function (number) {\r\n            return (number > 0) ? \"green\" : \"red\";\r\n        });\r\n        Handlebars.registerHelper('dateTimeFormat', function (strDate) {\r\n            let date = new Date(strDate);\r\n            return date.toLocaleString();\r\n        });\r\n        Handlebars.registerHelper('classByStatus', function (status) {\r\n            return (status == 'QUEUED' || status == 'APPROVAL_PENDING') ? '' : 'hidden';\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/TransfersList.ts\nvar TransfersList_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\nclass TransfersList {\r\n    constructor() {\r\n        this.userService = new UserService();\r\n    }\r\n    render(direction, transfers) {\r\n        return TransfersList_awaiter(this, void 0, void 0, function* () {\r\n            HandlebarHelpers.registerHelpers();\r\n            let transfersTemplate = Handlebars.compile(Funding_TransfersList);\r\n            return transfersTemplate({ Direction: direction, transfers: transfers });\r\n        });\r\n    }\r\n    bindEvents() {\r\n        var _a;\r\n        let deleteTransfers = document.querySelectorAll('.deleteTransfer');\r\n        for (let i = 0; i < deleteTransfers.length; i++) {\r\n            (_a = deleteTransfers[i]) === null || _a === void 0 ? void 0 : _a.addEventListener('click', (evt) => TransfersList_awaiter(this, void 0, void 0, function* () {\r\n                evt.preventDefault();\r\n                if (!confirm('Are you sure you want to cancel this withdraw request?')) {\r\n                    return;\r\n                }\r\n                let id = deleteTransfers[i].dataset['id'];\r\n                if (!id)\r\n                    return;\r\n                let userService = new UserService();\r\n                yield userService.deleteTransfer(id)\r\n                    .then(() => {\r\n                    let statusTd = document.getElementById('status_' + id);\r\n                    if (statusTd) {\r\n                        statusTd.innerText = 'CANCELED';\r\n                    }\r\n                    let deleteTd = document.getElementById('delete_' + id);\r\n                    deleteTd === null || deleteTd === void 0 ? void 0 : deleteTd.remove();\r\n                });\r\n            }));\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/FirstTransferSetup/FirstTransferSetupBase.ts\nclass FirstTransferSetupBase {\r\n    constructor(aUsdFund, bankRelationship) {\r\n        this.aUsdFund = aUsdFund;\r\n        this.bankRelationship = bankRelationship;\r\n    }\r\n    render(html) {\r\n        let element = document.getElementById('html_to_fill');\r\n        if (!element)\r\n            return;\r\n        element.innerHTML = html;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Funding/FirstTransferSetup/MoneyTransferred.html\n// Module\nvar MoneyTransferred_code = \"<form>\\r\\n    <label>Type in the amount in US Dollars ($) that you transferred\\r\\n        <input name=\\\"amount\\\" class=\\\"amount\\\" type=\\\"tel\\\" id=\\\"amount\\\" minlength=\\\"1\\\" required/>\\r\\n    </label>\\r\\n    <div class=\\\"input_error\\\" id=\\\"transferError\\\"></div>\\r\\n    <button id=\\\"notifyTransfer\\\">Notify Liminal.market of incoming transfer</button>\\r\\n\\r\\n    <input type=\\\"hidden\\\" name=\\\"transfer_type\\\" id=\\\"transfer_type\\\" value=\\\"{{transfer_type}}\\\"/>\\r\\n    <input type=\\\"hidden\\\" name=\\\"relationship_id\\\" id=\\\"relationship_id\\\" value=\\\"{{relationshipId}}\\\"/>\\r\\n    <input type=\\\"hidden\\\" name=\\\"direction\\\" id=\\\"direction\\\" value=\\\"INCOMING\\\"/>\\r\\n</form>\";\n// Exports\n/* harmony default export */ const FirstTransferSetup_MoneyTransferred = (MoneyTransferred_code);\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/FirstTransferSetup/MoneyTransferred.ts\nvar MoneyTransferred_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\nclass MoneyTransferred extends FirstTransferSetupBase {\r\n    constructor(aUsdFund, bankRelationship) {\r\n        super(aUsdFund, bankRelationship);\r\n    }\r\n    show() {\r\n        let template = Handlebars.compile(FirstTransferSetup_MoneyTransferred);\r\n        super.render(template({}));\r\n        this.bindEvents();\r\n    }\r\n    render() {\r\n        let template = Handlebars.compile(FirstTransferSetup_MoneyTransferred);\r\n        return template({\r\n            transfer_type: this.bankRelationship.transfer_type,\r\n            relationshipId: this.bankRelationship.id\r\n        });\r\n    }\r\n    bindEvents() {\r\n        let notifyTransfer = document.getElementById('notifyTransfer');\r\n        notifyTransfer === null || notifyTransfer === void 0 ? void 0 : notifyTransfer.addEventListener('click', (evt) => MoneyTransferred_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            this.aUsdFund.hideError('transferError');\r\n            let amount = document.getElementById('amount');\r\n            if (StringHelper.isNullOrEmpty(amount.value) || parseFloat(amount.value) < 10) {\r\n                this.aUsdFund.showError('amountError', 'Amount cannot be empty or below $10');\r\n            }\r\n            LoadingHelper.setLoading(notifyTransfer);\r\n            let userService = new UserService();\r\n            yield userService.createTransfer(amount.value, 'INCOMING')\r\n                .then(() => {\r\n                this.aUsdFund.transferNotified.show(this.bankRelationship, amount.value);\r\n            })\r\n                .catch(reason => {\r\n                let httpError = JSON.parse(reason.message);\r\n                this.aUsdFund.showError('transferError', httpError.serverError.message);\r\n            })\r\n                .finally(() => {\r\n                LoadingHelper.removeLoading();\r\n            });\r\n        }));\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/TransferNotification.ts\nvar TransferNotification_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nclass TransferNotification {\r\n    constructor(aUsdFund) {\r\n        this.aUsdFund = aUsdFund;\r\n        this.transfersList = new TransfersList();\r\n    }\r\n    show(bankRelationship, transfers) {\r\n        return TransferNotification_awaiter(this, void 0, void 0, function* () {\r\n            this.bankRelationship = bankRelationship;\r\n            let template = Handlebars.compile(Funding_TransferNotification);\r\n            let transfersListHtml = yield this.transfersList.render(TransferDirectionEnum.Incoming, transfers);\r\n            this.moneyTransferred = new MoneyTransferred(this.aUsdFund, this.bankRelationship);\r\n            this.aUsdFund.modal.showModal('Create transfer notification', template({\r\n                moneyTransferred: this.moneyTransferred.render(),\r\n                transfers: transfersListHtml\r\n            }));\r\n            this.bindEvents();\r\n        });\r\n    }\r\n    bindEvents() {\r\n        var _a;\r\n        (_a = this.moneyTransferred) === null || _a === void 0 ? void 0 : _a.bindEvents();\r\n        this.transfersList.bindEvents();\r\n        let first_transfer_setup = document.getElementById('first_transfer_setup');\r\n        first_transfer_setup === null || first_transfer_setup === void 0 ? void 0 : first_transfer_setup.addEventListener('click', (evt) => {\r\n            evt.preventDefault();\r\n            this.aUsdFund.firstTransferSetup.show(this.bankRelationship);\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Funding/Relationship/WireTransferRelationship.html\n// Module\nvar WireTransferRelationship_code = \"<fieldset>\\r\\n    <p>Before you can transfer, you need to set up your bank information</p>\\r\\n    <form id=\\\"wireTransferForm\\\">\\r\\n        <label>Bank name\\r\\n            <input name=\\\"name\\\" required id=\\\"name\\\"/>\\r\\n        </label>\\r\\n        <div class=\\\"input_error\\\" id=\\\"swift_error\\\">BIC/SWIFT code should be 8 or 11 characters</div>\\r\\n        <label>\\r\\n            Bank code (BIC/SWIFT)\\r\\n            <input name=\\\"bank_code\\\" maxlength=\\\"11\\\" id=\\\"bank_code\\\" required/>\\r\\n        </label>\\r\\n        <label>\\r\\n            Bank Street address\\r\\n            <input name=\\\"street_address\\\" id=\\\"street_address\\\" required/>\\r\\n        </label>\\r\\n        <label>\\r\\n            Bank Postal code\\r\\n            <input name=\\\"postal_code\\\" id=\\\"postal_code\\\" required/>\\r\\n        </label>\\r\\n        <label>\\r\\n            Bank City\\r\\n            <input name=\\\"city\\\" id=\\\"city\\\" required/>\\r\\n        </label>\\r\\n\\r\\n        <label>Bank State\\r\\n            <input name=\\\"state_province\\\" id=\\\"state_province\\\" required/>\\r\\n        </label>\\r\\n        <label>\\r\\n            Country where bank account is located\\r\\n            <select required id=\\\"country\\\" required name=\\\"country\\\">\\r\\n                <option value=\\\"\\\"></option>\\r\\n                {{#each countries}}\\r\\n                <option value=\\\"{{code}}\\\">{{name}}</option>\\r\\n                {{/each}}\\r\\n            </select>\\r\\n        </label>\\r\\n        <label>\\r\\n            Account number (IBAN)\\r\\n            <input name=\\\"account_number\\\" id=\\\"account_number\\\" required/>\\r\\n        </label>\\r\\n        <input type=\\\"hidden\\\" name=\\\"bank_code_type\\\" value=\\\"BIC\\\"/>\\r\\n        <div id=\\\"relationshipError\\\" class=\\\"input_error\\\"></div>\\r\\n        <div class=\\\"grid\\\">\\r\\n            <button id=\\\"wire_transfer_previous\\\">Previous: Funding type</button>\\r\\n            <button id=\\\"save_international_bank_information\\\">Next: Transfer</button>\\r\\n        </div>\\r\\n    </form>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const Relationship_WireTransferRelationship = (WireTransferRelationship_code);\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/Relationship/WireTransferRelationship.ts\nvar WireTransferRelationship_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass WireTransferRelationship extends RelationshipBase {\r\n    constructor(aUsdFund) {\r\n        super(aUsdFund);\r\n    }\r\n    show() {\r\n        super.show('Create bank information', Relationship_WireTransferRelationship, { countries: CountryHelper.Countries });\r\n    }\r\n    bindEvents() {\r\n        let wire_transfer_previous = document.getElementById('wire_transfer_previous');\r\n        wire_transfer_previous === null || wire_transfer_previous === void 0 ? void 0 : wire_transfer_previous.addEventListener('click', (evt) => {\r\n            this.aUsdFund.selectFundingType.show();\r\n        });\r\n        let save_international_bank_information = document.getElementById('save_international_bank_information');\r\n        save_international_bank_information === null || save_international_bank_information === void 0 ? void 0 : save_international_bank_information.addEventListener('click', (evt) => WireTransferRelationship_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            if (!this.validate())\r\n                return;\r\n            let params = FormHelper.getParams('#wireTransferForm');\r\n            let userService = new UserService();\r\n            yield userService.registerWireTransferRelationship(params)\r\n                .then((bankRelationship) => WireTransferRelationship_awaiter(this, void 0, void 0, function* () {\r\n                let transfers = yield userService.getLatestTransfers(TransferDirectionEnum.Incoming);\r\n                yield this.aUsdFund.transferNotification.show(bankRelationship, transfers);\r\n            }))\r\n                .catch((reason) => WireTransferRelationship_awaiter(this, void 0, void 0, function* () {\r\n                yield this.handleErrorResponse(reason);\r\n            }));\r\n        }));\r\n    }\r\n    validate() {\r\n        let swift_error = document.getElementById('swift_error');\r\n        if (swift_error)\r\n            swift_error.style.display = 'none';\r\n        let writeTransferError = document.getElementById('writeTransferError');\r\n        if (writeTransferError)\r\n            writeTransferError.style.display = 'none';\r\n        if (!FormHelper.validate('#wireTransferForm'))\r\n            return false;\r\n        let bank_code = document.getElementById('bank_code');\r\n        if (bank_code.value.length != 8 && bank_code.value.length != 11) {\r\n            bank_code.setAttribute('aria-invalid', 'true');\r\n            let swift_error = document.getElementById('swift_error');\r\n            if (swift_error)\r\n                swift_error.style.display = 'block';\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Funding/TransferInfo.html\n// Module\nvar TransferInfo_code = \"<h2>You should transfer your money now</h2>\\r\\n\\r\\n<ul>\\r\\n    <li>Amount: {{amount}}</li>\\r\\n    <li>From Account: {{account_number}}</li>\\r\\n</ul>\";\n// Exports\n/* harmony default export */ const TransferInfo = (TransferInfo_code);\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/TransferNotified.ts\n\r\nclass TransferNotified {\r\n    constructor(aUsdFund) {\r\n        this.aUsdFund = aUsdFund;\r\n    }\r\n    show(bankRelationship, amount) {\r\n        let template = Handlebars.compile(TransferInfo);\r\n        let obj = {\r\n            amount,\r\n            account_number: bankRelationship.alpaca_account_number,\r\n            wire: (bankRelationship.transfer_type == 'wire')\r\n        };\r\n        this.aUsdFund.modal.showModal('Transfer information', template(obj));\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Funding/FirstTransferSetup/FirstTransferSetup.html\n// Module\nvar FirstTransferSetup_code = \"<div id=\\\"html_to_fill\\\">\\r\\n    {{{html}}}\\r\\n</div>\\r\\n\";\n// Exports\n/* harmony default export */ const FirstTransferSetup_FirstTransferSetup = (FirstTransferSetup_code);\n;// CONCATENATED MODULE: ./src/html/modal/Funding/FirstTransferSetup/BankInfo.html\n// Module\nvar BankInfo_code = \"Create the bank information you need in your internet bank\\r\\n<table>\\r\\n    <tr>\\r\\n        <td>Bank name</td>\\r\\n        <td>BMO Harris Bank NA</td>\\r\\n    </tr>\\r\\n    <tr>\\r\\n        <td>Bank address</td>\\r\\n        <td>BMO Harris Bank\\r\\n            111. W. Monroe Street\\r\\n            Chicago, IL 60603, USA\\r\\n        </td>\\r\\n    </tr>\\r\\n    <tr>\\r\\n        <td>Recipient - Account name</td>\\r\\n        <td>Alpaca Securities LLC</td>\\r\\n    </tr>\\r\\n    <tr>\\r\\n        <td>Alpaca address</td>\\r\\n        <td>Alpaca Securities LLC\\r\\n            3 East Third Ave, Suite 233\\r\\n            San Mateo, CA 94401, USA\\r\\n        </td>\\r\\n    </tr>\\r\\n    <tr>\\r\\n        <td>Account number / IBAN</td>\\r\\n        <td>1636877</td>\\r\\n    </tr>\\r\\n    {{#if wire}}\\r\\n    <tr>\\r\\n        <td>SWIFT CODE</td>\\r\\n        <td>HATRUS44</td>\\r\\n    </tr>\\r\\n    {{^}}\\r\\n    <tr>\\r\\n        <td>ABA ROUTING NUMBER (ACH)</td>\\r\\n        <td>071000288</td>\\r\\n    </tr>\\r\\n    {{/if}}\\r\\n    <tr>\\r\\n        <td>Please specify the following in the reference of the wire:</td>\\r\\n        <td>FFC LMKT-{{account_number}}</td>\\r\\n    </tr>\\r\\n</table>\\r\\n<button id=\\\"bank_info_next\\\">Next: I set up the information in my bank</button>\";\n// Exports\n/* harmony default export */ const FirstTransferSetup_BankInfo = (BankInfo_code);\n;// CONCATENATED MODULE: ./src/html/modal/Funding/FirstTransferSetup/WireTransferMoney.html\n// Module\nvar WireTransferMoney_code = \"<h3>Transfer money</h3>\\r\\nYou can now log in to your internet bank and transfer the money to Alpaca.\\r\\n<br/><br/>\\r\\nAfter you have transferred the money, you need to let us know the amount that you transferred.\\r\\n\\r\\n<div class=\\\"grid\\\">\\r\\n    <button id=\\\"prev_wire_transfer_money\\\">Previous: See bank information</button>\\r\\n    <button id=\\\"next_wire_transfer_money\\\">Next: I have transferred the money</button>\\r\\n</div>\";\n// Exports\n/* harmony default export */ const FirstTransferSetup_WireTransferMoney = (WireTransferMoney_code);\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/FirstTransferSetup/WireTransferMoney.ts\n\r\n\r\n\r\n\r\nclass WireTransferMoney extends FirstTransferSetupBase {\r\n    constructor(aUsdFund, bankRelationship) {\r\n        super(aUsdFund, bankRelationship);\r\n    }\r\n    show() {\r\n        let template = Handlebars.compile(FirstTransferSetup_WireTransferMoney);\r\n        this.render(template({}));\r\n        this.bindEvents();\r\n    }\r\n    bindEvents() {\r\n        let next = document.getElementById('next_wire_transfer_money');\r\n        next === null || next === void 0 ? void 0 : next.addEventListener('click', (evt) => {\r\n            evt.preventDefault();\r\n            let moneyTransferred = new MoneyTransferred(this.aUsdFund, this.bankRelationship);\r\n            moneyTransferred.show();\r\n        });\r\n        let prev = document.getElementById('prev_wire_transfer_money');\r\n        prev === null || prev === void 0 ? void 0 : prev.addEventListener('click', (evt) => {\r\n            evt.preventDefault();\r\n            let transferSetup = new FirstTransferSetup(this.aUsdFund);\r\n            transferSetup.show(this.bankRelationship);\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Funding/FirstTransferSetup/ACHTransferAccountNumber.html\n// Module\nvar ACHTransferAccountNumber_code = \"The money should come from bank account number <strong>{{bank_account_number}}</strong>\\r\\n<div class=\\\"grid\\\">\\r\\n    <button id=\\\"next_ach_account_number\\\">Yes, it's coming from {{bank_account_number}}</button>\\r\\n</div>\";\n// Exports\n/* harmony default export */ const FirstTransferSetup_ACHTransferAccountNumber = (ACHTransferAccountNumber_code);\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/FirstTransferSetup/ACHTransferAccountNumber.ts\n\r\n\r\n\r\nclass ACHTransferAccountNumber extends FirstTransferSetupBase {\r\n    constructor(aUsdFund, bankRelationship) {\r\n        super(aUsdFund, bankRelationship);\r\n    }\r\n    show() {\r\n        let template = Handlebars.compile(FirstTransferSetup_ACHTransferAccountNumber);\r\n        this.render(template({ bank_account_number: this.bankRelationship.alpaca_account_number }));\r\n        this.bindEvents();\r\n    }\r\n    bindEvents() {\r\n        let next = document.getElementById('next_ach_account_number');\r\n        next === null || next === void 0 ? void 0 : next.addEventListener('click', (evt) => {\r\n            evt.preventDefault();\r\n            let moneyTransferred = new MoneyTransferred(this.aUsdFund, this.bankRelationship);\r\n            moneyTransferred.show();\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/FirstTransferSetup/BankInfo.ts\n\r\n\r\n\r\n\r\nclass BankInfo extends FirstTransferSetupBase {\r\n    constructor(aUsdFund, bankRelationship) {\r\n        super(aUsdFund, bankRelationship);\r\n    }\r\n    show() {\r\n        let bankInfoTemplate = Handlebars.compile(FirstTransferSetup_BankInfo);\r\n        let bankInfoHtml = bankInfoTemplate({\r\n            wire: this.bankRelationship.transfer_type == 'wire',\r\n            account_number: this.bankRelationship.alpaca_account_number\r\n        });\r\n        this.render(bankInfoHtml);\r\n        this.bindEvents();\r\n    }\r\n    bindEvents() {\r\n        let next = document.getElementById('bank_info_next');\r\n        next === null || next === void 0 ? void 0 : next.addEventListener('click', (evt) => {\r\n            evt.preventDefault();\r\n            if (this.bankRelationship.transfer_type == 'wire') {\r\n                let wireTransferMoney = new WireTransferMoney(this.aUsdFund, this.bankRelationship);\r\n                wireTransferMoney.show();\r\n            }\r\n            else {\r\n                let ach = new ACHTransferAccountNumber(this.aUsdFund, this.bankRelationship);\r\n                ach.show();\r\n            }\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/FirstTransferSetup/FirstTransferSetup.ts\n\r\n\r\nclass FirstTransferSetup {\r\n    constructor(aUsdFund) {\r\n        this.aUsdFund = aUsdFund;\r\n    }\r\n    show(bankRelationship) {\r\n        this.bankRelationship = bankRelationship;\r\n        let template = Handlebars.compile(FirstTransferSetup_FirstTransferSetup);\r\n        this.aUsdFund.modal.showModal('Setup transfer', template({}));\r\n        let bankInfo = new BankInfo(this.aUsdFund, bankRelationship);\r\n        bankInfo.show();\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/AUSDFund.ts\nvar AUSDFund_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass AUSDFund {\r\n    constructor() {\r\n        this.modal = new Modal();\r\n        this.selectFundingType = new SelectFundingType(this);\r\n        this.achRelationship = new ACHRelationship(this);\r\n        this.wireTransferRelationship = new WireTransferRelationship(this);\r\n        this.firstTransferSetup = new FirstTransferSetup(this);\r\n        this.transferNotification = new TransferNotification(this);\r\n        this.transferNotified = new TransferNotified(this);\r\n    }\r\n    show() {\r\n        return AUSDFund_awaiter(this, void 0, void 0, function* () {\r\n            let userService = new UserService();\r\n            let bankRelationship = yield userService.getBankRelationship();\r\n            if (bankRelationship) {\r\n                let transfers = yield userService.getLatestTransfers(TransferDirectionEnum.Incoming);\r\n                if (transfers.length > 0) {\r\n                    yield this.transferNotification.show(bankRelationship, transfers);\r\n                }\r\n                else {\r\n                    this.firstTransferSetup.show(bankRelationship);\r\n                }\r\n            }\r\n            else {\r\n                this.selectFundingType.show();\r\n            }\r\n        });\r\n    }\r\n    showError(elementId, reason) {\r\n        let element = document.getElementById(elementId);\r\n        if (element) {\r\n            element.innerText = reason;\r\n            element.style.display = 'block';\r\n        }\r\n    }\r\n    hideError(elementId) {\r\n        let element = document.getElementById(elementId);\r\n        if (element) {\r\n            element.style.display = 'none';\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/FakeAUSDFund.ts\nvar FakeAUSDFund_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass FakeAUSDFund {\r\n    constructor() {\r\n        this.currentBalance = new bignumber(-1);\r\n        this.modal = new Modal();\r\n    }\r\n    showAUSDFund() {\r\n        let aUsdFund = new AUSDFund();\r\n        aUsdFund.show();\r\n    }\r\n    showAUSDFakeFund() {\r\n        let networkInfo = App.Network;\r\n        if (!networkInfo.TestNetwork) {\r\n            this.showAUSDFund();\r\n            return;\r\n        }\r\n        let template = Handlebars.compile(FakeFunding);\r\n        let contractInfo = ContractInfo.getContractInfo();\r\n        let content = template({ aUSDAddress: contractInfo.AUSD_ADDRESS });\r\n        this.modal.showModal('Fund my account (Fake money)', content);\r\n        let addToWallet = document.getElementById('addTokenToWallet');\r\n        if (!addToWallet)\r\n            return;\r\n        addToWallet.addEventListener('click', (evt) => FakeAUSDFund_awaiter(this, void 0, void 0, function* () {\r\n            let contractInfo = ContractInfo.getContractInfo();\r\n            let walletHelper = new WalletHelper();\r\n            let result = yield walletHelper.addTokenToWallet(contractInfo.AUSD_ADDRESS, 'aUSD', () => {\r\n                this.showCopyField();\r\n            });\r\n            if (!result)\r\n                this.showCopyField();\r\n        }));\r\n        let registerBankInfo = document.getElementById('registerBankInfo');\r\n        registerBankInfo === null || registerBankInfo === void 0 ? void 0 : registerBankInfo.addEventListener('click', (evt) => {\r\n            this.modal.hideModal();\r\n            let aUsdFund = new AUSDFund();\r\n            aUsdFund.show();\r\n        });\r\n        let requestFakeAUSD = document.getElementById('requestFakeAUSD');\r\n        requestFakeAUSD === null || requestFakeAUSD === void 0 ? void 0 : requestFakeAUSD.addEventListener('click', (evt) => FakeAUSDFund_awaiter(this, void 0, void 0, function* () {\r\n            requestFakeAUSD.setAttribute('aria-busy', 'true');\r\n            let fundingService = new FundingService();\r\n            let result = yield fundingService.requestFakeFunding()\r\n                .catch((reason) => {\r\n                this.errorWhileFunding({});\r\n            });\r\n            if (!result)\r\n                return;\r\n            if (!result.success) {\r\n                let fundingError = document.getElementById('fundingError');\r\n                if (fundingError) {\r\n                    requestFakeAUSD.removeAttribute('aria-busy');\r\n                    fundingError.classList.remove('d-none');\r\n                    fundingError.innerHTML = result.message;\r\n                    setTimeout(() => {\r\n                        fundingError.classList.add('d-none');\r\n                    }, 10 * 1000);\r\n                }\r\n            }\r\n            else if (result.success) {\r\n                let beforeFunding = document.getElementById('beforeFunding');\r\n                let afterFunding = document.getElementById('afterFunding');\r\n                if (!beforeFunding || !afterFunding)\r\n                    return;\r\n                yield this.loadAUSDBalance();\r\n                beforeFunding.classList.add('d-none');\r\n                afterFunding.classList.remove('d-none');\r\n            }\r\n            else {\r\n                this.errorWhileFunding(result);\r\n            }\r\n            //callback();\r\n        }));\r\n    }\r\n    loadAUSDBalance() {\r\n        return FakeAUSDFund_awaiter(this, void 0, void 0, function* () {\r\n            let currentAUSDBalance = document.getElementById('currentAUSDBalance');\r\n            if (!currentAUSDBalance)\r\n                return;\r\n            let aUSDService = new AUSDService();\r\n            let userService = new UserService();\r\n            let ethAddress = userService.getEthAddress();\r\n            let amount = new bignumber(0);\r\n            if (ethAddress) {\r\n                AUSDService.lastUpdate = undefined;\r\n                amount = yield aUSDService.getAUSDBalanceOf(ethAddress);\r\n            }\r\n            currentAUSDBalance.innerHTML = '$' + roundBigNumber(amount).toString();\r\n            if (this.currentBalance.eq(-1)) {\r\n                this.currentBalance = amount;\r\n            }\r\n            if (this.currentBalance.eq(amount)) {\r\n                setTimeout(() => FakeAUSDFund_awaiter(this, void 0, void 0, function* () {\r\n                    yield this.loadAUSDBalance();\r\n                }), 5 * 1000);\r\n            }\r\n            else {\r\n                window.location.reload();\r\n            }\r\n        });\r\n    }\r\n    showCopyField() {\r\n        let needToCopy = document.getElementById('needToCopy');\r\n        if (!needToCopy)\r\n            return;\r\n        needToCopy.classList.remove('d-none');\r\n    }\r\n    errorWhileFunding(result) {\r\n        let beforeFunding = document.getElementById('beforeFunding');\r\n        let errorAfterFunding = document.getElementById('errorAfterTryFunding');\r\n        if (!beforeFunding || !errorAfterFunding)\r\n            return;\r\n        if (result.message) {\r\n            errorAfterFunding.innerHTML = result.message;\r\n        }\r\n        beforeFunding.classList.add('d-none');\r\n        errorAfterFunding.classList.remove('d-none');\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Funding/WithdrawModal.html\n// Module\nvar WithdrawModal_code = \"<fieldset id=\\\"withdrawInput\\\">\\r\\n\\r\\n    {{#if bank.bank_code_type}}\\r\\n    Your money will be sent to {{bank.name}} to account number {{bank.account_number}}.\\r\\n    <br/><br/>\\r\\n    Outgoing International Wire Transfers cost is ${{transferCost}}.<br/>\\r\\n    Fees will be deducted from the amount.\\r\\n    {{/if}}\\r\\n    {{#unless bank.bank_code_type}}\\r\\n    Your money will be sent to account number {{bank.bank_account_number}}.\\r\\n    <br/><br/>\\r\\n    ACH transfer costs is ${{transferCost}}. Fees will be deducted from the amount.\\r\\n    {{/unless}}\\r\\n    <form id=\\\"withdrawForm\\\">\\r\\n        <label>Amount to withdraw\\r\\n            <input type=\\\"tel\\\" name=\\\"amount\\\" id=\\\"amount\\\"/>\\r\\n        </label>\\r\\n        <div class=\\\"input_error\\\" id=\\\"withdrawAmountError\\\">The amount is lower than the cost of transfer</div>\\r\\n        <button id=\\\"confirmWithdraw\\\">Confirm withdraw</button>\\r\\n    </form>\\r\\n    {{{Transfers}}}\\r\\n</fieldset>\\r\\n\\r\\n<fieldset id=\\\"withdrawConfirm\\\" class=\\\"hidden\\\">\\r\\n    You are about to withdraw $<span id=\\\"withdrawAmountText\\\"></span> from your account\\r\\n    <div class=\\\"warningBar\\\">\\r\\n        Warning: The fee of this transaction will be $<span id=\\\"feeWarning\\\"></span>\\r\\n        and is <span id=\\\"feePercentage\\\"></span>% of the amount.\\r\\n    </div>\\r\\n    <div class=\\\"input_error\\\" id=\\\"withdrawError\\\"></div>\\r\\n    <button id=\\\"confirmWithdrawButton\\\">Execute transfer</button>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const Funding_WithdrawModal = (WithdrawModal_code);\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/WithdrawModal.ts\nvar WithdrawModal_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass WithdrawModal {\r\n    constructor() {\r\n        this.wireTransferCost = 50;\r\n        this.achTransferCost = 25;\r\n        this.userService = new UserService();\r\n        this.transferCost = this.wireTransferCost;\r\n        this.transfersList = new TransfersList();\r\n    }\r\n    show() {\r\n        return WithdrawModal_awaiter(this, void 0, void 0, function* () {\r\n            let modal = new Modal();\r\n            let bankRelationships = yield this.userService.getBankRelationship();\r\n            if (!bankRelationships) {\r\n                modal.showModal('Withdraw information', \"You haven't setup bank connection. You cannot withdraw from without bank connection\");\r\n                return;\r\n            }\r\n            let transfers = yield this.userService.getLatestTransfers(TransferDirectionEnum.Outgoing);\r\n            let transfersHtml = yield this.transfersList.render(TransferDirectionEnum.Outgoing, transfers);\r\n            let ethAddress = this.userService.getEthAddress();\r\n            let ausdService = new AUSDService();\r\n            this.currentBalance = new bignumber(0);\r\n            if (ethAddress) {\r\n                this.currentBalance = yield ausdService.getAUSDBalanceOf(ethAddress);\r\n            }\r\n            if (this.currentBalance.eq(0)) {\r\n                let tmp = Handlebars.compile(\"Your current balance is $0. There is nothing to withdraw. {{{transfers}}}\");\r\n                modal.showModal('Withdraw information', tmp({ transfers: transfersHtml }));\r\n                return;\r\n            }\r\n            let withdrawTemplate = Handlebars.compile(Funding_WithdrawModal);\r\n            this.bankInfo = bankRelationships;\r\n            this.transferCost = (this.bankInfo.bank_code_type) ? this.wireTransferCost : this.achTransferCost;\r\n            let obj = {\r\n                amount: this.currentBalance,\r\n                transferCost: this.transferCost,\r\n                Transfers: transfersHtml,\r\n                bank: this.bankInfo\r\n            };\r\n            modal.showModal('Withdraw information', withdrawTemplate(obj));\r\n            this.bindEvents();\r\n            this.transfersList.bindEvents();\r\n        });\r\n    }\r\n    bindEvents() {\r\n        let confirmWithdraw = document.getElementById('confirmWithdraw');\r\n        confirmWithdraw === null || confirmWithdraw === void 0 ? void 0 : confirmWithdraw.addEventListener('click', (evt) => WithdrawModal_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            if (!this.bankInfo)\r\n                return;\r\n            let amount = document.getElementById('amount');\r\n            if (StringHelper.isNullOrEmpty(amount.value)) {\r\n                amount.setAttribute('aria-invalid', 'true');\r\n                return;\r\n            }\r\n            else if (parseFloat(amount.value) <= this.transferCost) {\r\n                let withdrawAmountError = document.getElementById('withdrawAmountError');\r\n                withdrawAmountError.style.display = 'block';\r\n                amount.setAttribute('aria-invalid', 'true');\r\n                return;\r\n            }\r\n            else {\r\n                amount.setAttribute('aria-invalid', 'false');\r\n            }\r\n            this.showWithdrawConfirmation();\r\n        }));\r\n    }\r\n    showWithdrawConfirmation() {\r\n        if (!this.bankInfo)\r\n            return;\r\n        let amount = document.getElementById('amount');\r\n        let withdrawInput = document.getElementById('withdrawInput');\r\n        withdrawInput === null || withdrawInput === void 0 ? void 0 : withdrawInput.classList.add('hidden');\r\n        let withdrawConfirm = document.getElementById('withdrawConfirm');\r\n        withdrawConfirm === null || withdrawConfirm === void 0 ? void 0 : withdrawConfirm.classList.remove('hidden');\r\n        let withdrawAmountText = document.getElementById('withdrawAmountText');\r\n        let feeWarning = document.getElementById('feeWarning');\r\n        let feePercentage = document.getElementById('feePercentage');\r\n        withdrawAmountText.innerText = amount.value;\r\n        feeWarning.innerText = this.transferCost.toString();\r\n        feePercentage.innerText = roundNumber((this.transferCost / parseFloat(amount.value)) * 100).toString();\r\n        let confirmWithdrawButton = document.getElementById('confirmWithdrawButton');\r\n        confirmWithdrawButton === null || confirmWithdrawButton === void 0 ? void 0 : confirmWithdrawButton.addEventListener('click', (evt) => WithdrawModal_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            yield this.userService.createTransfer(amount.value, TransferDirectionEnum.Outgoing)\r\n                .then((response) => WithdrawModal_awaiter(this, void 0, void 0, function* () {\r\n                let transfers = yield this.userService.getLatestTransfers(TransferDirectionEnum.Outgoing);\r\n                withdrawConfirm.innerHTML = yield this.transfersList.render(TransferDirectionEnum.Outgoing, transfers);\r\n                this.transfersList.bindEvents();\r\n            }))\r\n                .catch(reason => {\r\n                let withdrawError = document.getElementById('withdrawError');\r\n                if (!withdrawError)\r\n                    return;\r\n                if (withdrawError && isJSON(reason.message)) {\r\n                    let error = JSON.parse(reason.message);\r\n                    withdrawError.innerText = error.serverError.message;\r\n                }\r\n                else {\r\n                    withdrawError.innerText = reason.toString();\r\n                }\r\n                withdrawError.style.display = 'block';\r\n            });\r\n        }));\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/elements/AUsdBalance.ts\nvar AUsdBalance_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass AUsdBalance {\r\n    constructor() {\r\n    }\r\n    static forceLoadAUSDBalanceUI() {\r\n        return AUsdBalance_awaiter(this, void 0, void 0, function* () {\r\n            let ui = new AUsdBalance();\r\n            AUSDService.lastUpdate = undefined;\r\n            yield ui.loadAUSDBalanceUI();\r\n        });\r\n    }\r\n    loadAUSDBalanceUI() {\r\n        return AUsdBalance_awaiter(this, void 0, void 0, function* () {\r\n            if (!App.User.ether) {\r\n                yield AuthenticateService.enableWeb3();\r\n                if (!App.User.ether)\r\n                    return;\r\n            }\r\n            let userInfoAUsdBalance = document.getElementById('userInfoAUsdBalance');\r\n            let frontpageAUsdBalance = document.getElementById('frontpageAUsdBalance');\r\n            if (!App.User.alpacaId) {\r\n                frontpageAUsdBalance === null || frontpageAUsdBalance === void 0 ? void 0 : frontpageAUsdBalance.classList.add('hidden');\r\n                userInfoAUsdBalance === null || userInfoAUsdBalance === void 0 ? void 0 : userInfoAUsdBalance.classList.add('hidden');\r\n                //return;\r\n            }\r\n            else {\r\n                frontpageAUsdBalance === null || frontpageAUsdBalance === void 0 ? void 0 : frontpageAUsdBalance.classList.remove('hidden');\r\n                userInfoAUsdBalance === null || userInfoAUsdBalance === void 0 ? void 0 : userInfoAUsdBalance.classList.remove('hidden');\r\n            }\r\n            let aUSDService = new AUSDService();\r\n            let aUsdValueWei = yield aUSDService.getAUSDBalanceOf(App.User.address);\r\n            let aUsdValue = roundBigNumber(aUsdValueWei);\r\n            let frontpageAUSDBalance = document.getElementById('front_page_aUSD_balance');\r\n            if (frontpageAUSDBalance)\r\n                frontpageAUSDBalance.innerHTML = '$' + aUsdValue;\r\n            let user_info_ausd_balance = document.getElementById('user_info_ausd_balance');\r\n            if (user_info_ausd_balance)\r\n                user_info_ausd_balance.innerHTML = '$' + aUsdValue;\r\n            this.bindEvents();\r\n            let balance_value = document.querySelector('.balance_value');\r\n            if (balance_value) {\r\n                balance_value.innerHTML = '$' + aUsdValue.toFixed();\r\n                balance_value.title = aUsdValueWei.toFixed();\r\n                balance_value.dataset['tooltip'] = aUsdValueWei.toFixed();\r\n            }\r\n            if (aUsdValue.isLessThan(10)) {\r\n                let frontpage_fund_account = document.getElementById('frontpage_fund_account');\r\n                frontpage_fund_account === null || frontpage_fund_account === void 0 ? void 0 : frontpage_fund_account.classList.remove('hidden');\r\n            }\r\n        });\r\n    }\r\n    bindEvents() {\r\n        let networkInfo = App.Network;\r\n        let add_aUSD_to_wallet = document.querySelectorAll('.add_aUSD_to_wallet');\r\n        add_aUSD_to_wallet.forEach(element => {\r\n            element.addEventListener('click', (evt) => AUsdBalance_awaiter(this, void 0, void 0, function* () {\r\n                evt.preventDefault();\r\n                let contractInfo = ContractInfo.getContractInfo(networkInfo.Name);\r\n                let walletHelper = new WalletHelper();\r\n                yield walletHelper.addTokenToWallet(contractInfo.AUSD_ADDRESS, 'aUSD', () => {\r\n                    let template = Handlebars.compile(AddToWallet);\r\n                    let obj = { symbol: 'aUSD', address: contractInfo.AUSD_ADDRESS };\r\n                    let modal = new Modal();\r\n                    modal.showModal('Add aUSD token', template(obj));\r\n                });\r\n            }));\r\n        });\r\n        let fund_accountButtons = document.querySelectorAll('.fund_account');\r\n        fund_accountButtons.forEach(element => {\r\n            let aUSDFundingModal = new FakeAUSDFund();\r\n            if (networkInfo.TestNetwork) {\r\n                element.innerHTML = 'Click for some aUSD';\r\n                element.addEventListener('click', (evt) => {\r\n                    evt.preventDefault();\r\n                    aUSDFundingModal.showAUSDFakeFund();\r\n                });\r\n            }\r\n            else {\r\n                element.addEventListener('click', (evt) => AUsdBalance_awaiter(this, void 0, void 0, function* () {\r\n                    evt.preventDefault();\r\n                    let aUsdFund = new AUSDFund();\r\n                    yield aUsdFund.show();\r\n                }));\r\n            }\r\n        });\r\n        let withdraw_from_account = document.getElementById('withdraw_from_account');\r\n        withdraw_from_account === null || withdraw_from_account === void 0 ? void 0 : withdraw_from_account.addEventListener('click', (evt) => AUsdBalance_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            let withdrawModal = new WithdrawModal();\r\n            yield withdrawModal.show();\r\n        }));\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/elements/TestNetworkBanner.html\n// Module\nvar TestNetworkBanner_code = \"<div class=\\\"errorBar\\\">You are running on testnet. No real trades will be executed. <a href=\\\"#\\\"\\r\\n                                                                                      id=\\\"switch_from_test_network\\\">Switch\\r\\n    to mainnet</a></div>\";\n// Exports\n/* harmony default export */ const TestNetworkBanner = (TestNetworkBanner_code);\n;// CONCATENATED MODULE: ./src/ui/elements/UserInfo.ts\nvar UserInfo_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass UserInfo {\r\n    constructor(providerInfo) {\r\n        this.walletLoaded = false;\r\n        this.authenticationService = new AuthenticateService();\r\n        this.userService = new UserService();\r\n        this.providerInfo = providerInfo;\r\n        this.walletHelper = new WalletHelper();\r\n    }\r\n    render(elementId) {\r\n        return UserInfo_awaiter(this, void 0, void 0, function* () {\r\n            let user_header_info = document.getElementById('user_header_info');\r\n            if (user_header_info)\r\n                user_header_info.innerHTML = 'Loading wallet..';\r\n            LoadingHelper.setLoading(user_header_info);\r\n            this.listenForWalletChanges();\r\n            this.loadUserMenuUI(elementId);\r\n            this.loadIfTestNetwork();\r\n            this.ifTradePage();\r\n            LoadingHelper.removeLoading();\r\n            let aUsdBalance = new AUsdBalance();\r\n            yield aUsdBalance.loadAUSDBalanceUI();\r\n        });\r\n    }\r\n    listenForWalletChanges() {\r\n        /*\r\n        TODO: need fixing\r\n        this.moralis.onChainChanged(function () {\r\n            location.reload();\r\n        });\r\n        this.moralis.onAccountChanged(function () {\r\n            location.reload();\r\n        });\r\n        this.moralis.onDisconnect(function () {\r\n            location.reload();\r\n        });\r\n        this.moralis.onConnect(function () {\r\n            location.reload();\r\n        });\r\n\r\n         */\r\n    }\r\n    loadUserMenuUI(elementId) {\r\n        return UserInfo_awaiter(this, void 0, void 0, function* () {\r\n            let userInfoDiv = document.getElementById(elementId);\r\n            if (!userInfoDiv)\r\n                return;\r\n            console.log('loadUserMenuUI User:', App.User);\r\n            let networkInfo = App.Network;\r\n            let obj = {\r\n                ethAddress: App.User.address,\r\n                shortEthAddress: shortEth(App.User.address),\r\n                walletName: this.providerInfo.WalletName,\r\n                networkName: networkInfo.ChainName + ((networkInfo.TestNetwork) ? ' - (Test network)' : ''),\r\n                blockchainExplorer: networkInfo.BlockExplorer + '/address/',\r\n                isMagic: yield this.walletHelper.isMagic(),\r\n                chainId: networkInfo.ChainId\r\n            };\r\n            let template = Handlebars.compile(elements_UserInfo);\r\n            let html = template(obj);\r\n            userInfoDiv.innerHTML = html;\r\n            this.bindEvents();\r\n            this.bindUserActionEvents();\r\n            for (let i = 0; i < UserInfo.onUserLoggedIn.length; i++) {\r\n                UserInfo.onUserLoggedIn[i]();\r\n            }\r\n        });\r\n    }\r\n    bindUserActionEvents() {\r\n        let editName = document.getElementById('editName');\r\n        editName === null || editName === void 0 ? void 0 : editName.addEventListener('click', (evt) => UserInfo_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            let kycModal = new KycEditNameForm();\r\n            yield kycModal.show();\r\n        }));\r\n        let editContact = document.getElementById('editContact');\r\n        editContact === null || editContact === void 0 ? void 0 : editContact.addEventListener('click', (evt) => UserInfo_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            let kycModal = new KycEditContactForm();\r\n            yield kycModal.show();\r\n        }));\r\n        let editTrustedContact = document.getElementById('editTrustedContact');\r\n        editTrustedContact === null || editTrustedContact === void 0 ? void 0 : editTrustedContact.addEventListener('click', (evt) => UserInfo_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            let kycModal = new KycEditTrustedContact();\r\n            yield kycModal.show();\r\n        }));\r\n    }\r\n    bindEvents() {\r\n        return UserInfo_awaiter(this, void 0, void 0, function* () {\r\n            let userInfoDropdown = document.getElementById('userInfoDropdown');\r\n            if (!userInfoDropdown)\r\n                return;\r\n            document.body.addEventListener('click', (evt) => {\r\n                if (userInfoDropdown && !userInfoDropdown.classList.contains('d-none')) {\r\n                    userInfoDropdown.classList.add('d-none');\r\n                    evt.stopPropagation();\r\n                    evt.preventDefault();\r\n                }\r\n            });\r\n            let userInfoAction = document.getElementById('userInfoAction');\r\n            userInfoAction === null || userInfoAction === void 0 ? void 0 : userInfoAction.addEventListener('click', (evt) => {\r\n                evt.preventDefault();\r\n                evt.stopPropagation();\r\n                userInfoDropdown === null || userInfoDropdown === void 0 ? void 0 : userInfoDropdown.classList.toggle('d-none');\r\n                userInfoDropdown === null || userInfoDropdown === void 0 ? void 0 : userInfoDropdown.addEventListener('click', (evt) => {\r\n                    evt.stopPropagation();\r\n                });\r\n                WalletHelper.hideMagicWallet();\r\n            });\r\n            let disconnectFromNetwork = document.getElementById('disconnectFromNetwork');\r\n            disconnectFromNetwork === null || disconnectFromNetwork === void 0 ? void 0 : disconnectFromNetwork.addEventListener('click', (evt) => UserInfo_awaiter(this, void 0, void 0, function* () {\r\n                evt.preventDefault();\r\n                yield this.authenticationService.logOut();\r\n                window.location.reload();\r\n            }));\r\n            let wallet = document.getElementById('wallet');\r\n            wallet === null || wallet === void 0 ? void 0 : wallet.addEventListener('click', (evt) => UserInfo_awaiter(this, void 0, void 0, function* () {\r\n                evt.preventDefault();\r\n                LoadingHelper.setLoading(evt.target);\r\n                if (this.walletLoaded) {\r\n                    let magicIframe = document.querySelector('.magic-iframe');\r\n                    if (magicIframe)\r\n                        magicIframe.style.display = 'block';\r\n                    LoadingHelper.removeLoading();\r\n                    userInfoDropdown === null || userInfoDropdown === void 0 ? void 0 : userInfoDropdown.classList.add('d-none');\r\n                    return;\r\n                }\r\n                App.User.provider.magic.connect.showWallet()\r\n                    .catch((e) => UserInfo_awaiter(this, void 0, void 0, function* () {\r\n                    this.walletLoaded = false;\r\n                    if (e.message.indexOf('User denied account access') != -1) {\r\n                        yield this.authenticationService.logOut();\r\n                        alert('You have been logged out of you wallet and need to log back in. We will now reload the page and you can log in.');\r\n                        location.reload();\r\n                        return;\r\n                    }\r\n                    throw e;\r\n                }));\r\n                let closeMenuInterval = setInterval(() => {\r\n                    let magicIframe = document.querySelector('.magic-iframe');\r\n                    if (!magicIframe)\r\n                        clearInterval(closeMenuInterval);\r\n                    if (magicIframe && magicIframe.style.display == 'block') {\r\n                        LoadingHelper.removeLoading();\r\n                        userInfoDropdown === null || userInfoDropdown === void 0 ? void 0 : userInfoDropdown.classList.add('d-none');\r\n                        this.walletLoaded = true;\r\n                        clearInterval(closeMenuInterval);\r\n                    }\r\n                }, 1000);\r\n            }));\r\n            let switch_network = document.getElementById('switch_network');\r\n            switch_network === null || switch_network === void 0 ? void 0 : switch_network.addEventListener('click', (evt) => {\r\n                evt.preventDefault();\r\n                let switchNetworkModal = new SwitchNetworkModal();\r\n                switchNetworkModal.show();\r\n            });\r\n        });\r\n    }\r\n    loadIfTestNetwork() {\r\n        if (!App.User.provider)\r\n            return;\r\n        if (!App.Network.TestNetwork)\r\n            return;\r\n        let header = document.querySelector('header');\r\n        if (!header)\r\n            return;\r\n        let template = Handlebars.compile(TestNetworkBanner);\r\n        header.insertAdjacentHTML('beforebegin', template({}));\r\n        let switch_from_test_network = document.getElementById('switch_from_test_network');\r\n        switch_from_test_network === null || switch_from_test_network === void 0 ? void 0 : switch_from_test_network.addEventListener('click', (evt) => {\r\n            let switchNetworkModal = new SwitchNetworkModal();\r\n            switchNetworkModal.show();\r\n        });\r\n    }\r\n    ifTradePage() {\r\n        let btn = document.getElementById('liminal_market_execute_trade');\r\n        if (!btn)\r\n            return;\r\n        ExecuteOrderButton.Instance.renderButton();\r\n    }\r\n}\r\nUserInfo.onUserLoggedIn = [];\r\n\n;// CONCATENATED MODULE: ./src/html/elements/ConnectWalletButton.html\n// Module\nvar ConnectWalletButton_code = \"<button class=\\\"liminal_market_connect_wallet outline\\\">Connect wallet</button>\";\n// Exports\n/* harmony default export */ const ConnectWalletButton = (ConnectWalletButton_code);\n;// CONCATENATED MODULE: ./src/ui/modals/ConnectWallet.ts\nvar ConnectWallet_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass ConnectWallet {\r\n    constructor() {\r\n        this.providerInfo = new ProviderInfo(null);\r\n    }\r\n    renderButton(elementId) {\r\n        if (!document.getElementById(elementId))\r\n            return;\r\n        document.getElementById(elementId).innerHTML = ConnectWalletButton;\r\n        let elements = document.querySelectorAll(\".liminal_market_connect_wallet\");\r\n        elements.forEach((el) => ConnectWallet_awaiter(this, void 0, void 0, function* () {\r\n            el.addEventListener('click', (evt) => ConnectWallet_awaiter(this, void 0, void 0, function* () {\r\n                evt.preventDefault();\r\n                yield this.connectWallet(evt.target);\r\n            }));\r\n        }));\r\n    }\r\n    connectWallet(button) {\r\n        return ConnectWallet_awaiter(this, void 0, void 0, function* () {\r\n            LoadingHelper.setLoading(button);\r\n            let authenticationService = new AuthenticateService();\r\n            yield authenticationService.authenticateUser((walletConnectionInfo) => {\r\n                this.web3EnabledResult(walletConnectionInfo);\r\n            }, () => ConnectWallet_awaiter(this, void 0, void 0, function* () {\r\n                let userInfo = new UserInfo(this.providerInfo);\r\n                yield userInfo.render('user_header_info');\r\n                if (document.getElementById('liminal_market_execute_trade')) {\r\n                    let page = new TradePage();\r\n                    yield page.load();\r\n                }\r\n            }))\r\n                .catch((reason) => {\r\n                ErrorInfo.report(reason);\r\n            }).finally(() => {\r\n                LoadingHelper.removeLoading();\r\n            });\r\n        });\r\n    }\r\n    web3EnabledResult(walletConnectionInfo) {\r\n        this.providerInfo = new ProviderInfo(walletConnectionInfo);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/MarketIsClosed.html\n// Module\nvar MarketIsClosed_code = \"<div class=\\\"center\\\">\\r\\n    The stock market is currently closed.<br/>\\r\\nIt is usually open monday to friday between 9:30 AM and 4:00 PM EST (9:30 - 16:00 EST).\\r\\n    <br/><br/>\\r\\nToday is {{dayOfWeek}}\\r\\n<br /><br/>\\r\\nYour current time is {{currentTime}} ({{GMT}})\\r\\n    <br/><br/>\\r\\nThat means the market is open your time between\\r\\n{{openFrom}} - {{openTo}}\\r\\n</div>\";\n// Exports\n/* harmony default export */ const MarketIsClosed = (MarketIsClosed_code);\n;// CONCATENATED MODULE: ./src/errors/BlockchainError.ts\n\r\n\r\n\r\n\r\nclass BlockchainError extends GeneralError {\r\n    constructor(e) {\r\n        super(e);\r\n        this.message = e.toString();\r\n        if (this.userDeniedTransactionSignature()) {\r\n            this.code = BlockchainError.UserCancelled;\r\n        }\r\n        else if (this.addressIsNotValidKYC()) {\r\n            this.code = BlockchainError.AddressIsNotValidKYC;\r\n        }\r\n        else if (this.isMarketClosed()) {\r\n            this.code = BlockchainError.MarketIsClosed;\r\n            this.callback = this.marketIsClosedModal;\r\n        }\r\n        if (e.data && e.data.message) {\r\n            let msg = e.data.message;\r\n            let searchStr = 'reverted with reason string';\r\n            let idx = msg.indexOf(searchStr) + searchStr.length;\r\n            if (idx != -1) {\r\n                this.message = msg.substring(idx).trim().replace(/'/g, '');\r\n                this.code = BlockchainError.ErrorFromContract;\r\n            }\r\n        }\r\n    }\r\n    userDeniedTransactionSignature() {\r\n        return this.message.indexOf('denied transaction signature') !== -1;\r\n    }\r\n    addressIsNotValidKYC() {\r\n        return this.message.indexOf('address is not kyc valid') !== -1;\r\n    }\r\n    isMarketClosed() {\r\n        let searchStr = 'Market is closed';\r\n        return this.message.indexOf(searchStr) !== -1;\r\n    }\r\n    marketIsClosedModal() {\r\n        let [openHour, closeHour] = DateHelper.getOpenAndCloseHours();\r\n        let time = new Date().toTimeString().split(' ');\r\n        let obj = {\r\n            currentTime: time[0],\r\n            GMT: time[1],\r\n            dayOfWeek: DateHelper.getWeekday(),\r\n            openFrom: openHour,\r\n            openTo: closeHour\r\n        };\r\n        let modal = new Modal();\r\n        let template = Handlebars.compile(MarketIsClosed);\r\n        modal.showModal('Market is closed', template(obj));\r\n    }\r\n}\r\nBlockchainError.ErrorFromContract = -1;\r\nBlockchainError.UserCancelled = 1;\r\nBlockchainError.AddressIsNotValidKYC = 2;\r\nBlockchainError.MarketIsClosed = 3;\r\n\n;// CONCATENATED MODULE: ./src/services/blockchain/KYCService.ts\nvar KYCService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\nclass KYCService extends BlockchainService {\r\n    constructor() {\r\n        super();\r\n    }\r\n    getKYCAbi() {\r\n        return KYCService_awaiter(this, void 0, void 0, function* () {\r\n            if (KYCService.KYCInfo)\r\n                return KYCService.KYCInfo.abi;\r\n            const response = yield fetch(\"../abi/KYC.json\");\r\n            KYCService.KYCInfo = yield response.json();\r\n            return KYCService.KYCInfo.abi;\r\n        });\r\n    }\r\n    hasValidKYC() {\r\n        return KYCService_awaiter(this, void 0, void 0, function* () {\r\n            if (KYCService.KycResponse && KYCService.KycResponse.isValidKyc)\r\n                return KYCService.KycResponse;\r\n            KYCService.KycResponse = (yield this.get('isValidKyc')\r\n                .catch(reason => {\r\n                let blockchainError = new BlockchainError(reason);\r\n                if (blockchainError.addressIsNotValidKYC()) {\r\n                    return false;\r\n                }\r\n                ErrorInfo.report(blockchainError);\r\n                return false;\r\n            }));\r\n            if (KYCService.KycResponse.alpacaId) {\r\n                App.User.alpacaId = KYCService.KycResponse.alpacaId;\r\n                let aUsdBalance = new AUsdBalance();\r\n                yield aUsdBalance.loadAUSDBalanceUI();\r\n            }\r\n            return KYCService.KycResponse;\r\n        });\r\n    }\r\n    saveKYCInfo(data) {\r\n        return KYCService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.post(\"kycRegistration\", data);\r\n        });\r\n    }\r\n    updateKYCInfo(data) {\r\n        return KYCService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.post(\"updateAccount\", data);\r\n        });\r\n    }\r\n    isValidAccountId(str) {\r\n        const regex = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$');\r\n        return regex.test(str);\r\n    }\r\n    updateDocuments(params) {\r\n        return KYCService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.post(\"kycActionRequiredUpdate\", params);\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/services/blockchain/SecurityTokenService.ts\nvar SecurityTokenService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\nclass SecurityTokenService extends BlockchainService {\r\n    constructor() {\r\n        super();\r\n    }\r\n    getQuantityByAddress(symbol, ethAddress) {\r\n        return SecurityTokenService_awaiter(this, void 0, void 0, function* () {\r\n            let liminalMarketService = new LiminalMarketService();\r\n            let symbolAddress = yield liminalMarketService.getSymbolContractAddress(symbol);\r\n            if (symbolAddress === Helper_AddressZero)\r\n                return new bignumber(0);\r\n            let qty = yield this.getBalanceOf(symbolAddress, ethAddress);\r\n            return new bignumber(formatEther(qty.toString()));\r\n        });\r\n    }\r\n    transfer(symbolAddress, qty) {\r\n        const _super = Object.create(null, {\r\n            transferInner: { get: () => super.transferInner }\r\n        });\r\n        return SecurityTokenService_awaiter(this, void 0, void 0, function* () {\r\n            let result = _super.transferInner.call(this, symbolAddress, this.contracts.AUSD_ADDRESS, qty);\r\n            return result;\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/elements/tradepanel/ExecuteTradeButton.html\n// Module\nvar ExecuteTradeButton_code = \"<button id=\\\"liminal_market_execute_trade\\\"></button>\";\n// Exports\n/* harmony default export */ const ExecuteTradeButton = (ExecuteTradeButton_code);\n;// CONCATENATED MODULE: ./src/html/modal/FakeNativeTokenNeeded.html\n// Module\nvar FakeNativeTokenNeeded_code = \"You need to have {{symbol}} currency in your wallet. You use {{symbol}} to pay for using the blockchain.\\r\\n\\r\\nTo get some {{symbol}} currency\\r\\n<ol>\\r\\n    <li>Copy your address shown below\\r\\n        <input value=\\\"{{ethAddress}}\\\" />\\r\\n    </li>\\r\\n    <li>Open <a href=\\\"{{faucetUrl}}\\\" id=\\\"getNativeTokens\\\" target=\\\"_blank\\\">{{faucetUrl}}</a></li>\\r\\n    <li>Paste in your address you just copied and click the submit button</li>\\r\\n</ol>\\r\\n\\r\\n<div class=\\\"infoBar d-none\\\" id=\\\"waitingForNativeToken\\\">Waiting for {{symbol}}. Window will close when you have some in\\r\\n    you wallet.\\r\\n    It might take few minutes after you requested it.\\r\\n    <progress></progress>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\";\n// Exports\n/* harmony default export */ const FakeNativeTokenNeeded = (FakeNativeTokenNeeded_code);\n;// CONCATENATED MODULE: ./src/html/modal/NativeTokenNeeded.html\n// Module\nvar NativeTokenNeeded_code = \"You need to have {{symbol}} currency in your wallet. You use {{symbol}} to pay for using the blockchain.\\r\\n\\r\\nTo get some {{symbol}} currency\\r\\n<ol>\\r\\n    <li>Copy your address shown below\\r\\n        <input value=\\\"{{ethAddress}}\\\" />\\r\\n    </li>\\r\\n    <li>Open <a href=\\\"{{buyUrl}}\\\" target=\\\"_blank\\\">{{buyUrl}}</a></li>\\r\\n    <li>Paste in your address you just copied and click the submit button</li>\\r\\n</ol>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\";\n// Exports\n/* harmony default export */ const modal_NativeTokenNeeded = (NativeTokenNeeded_code);\n;// CONCATENATED MODULE: ./src/ui/modals/NativeTokenNeeded.ts\nvar NativeTokenNeeded_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\nclass NativeTokenNeeded {\r\n    constructor(onNativeTokenArrived) {\r\n        this.timeOut = undefined;\r\n        this.onNativeTokenArrived = onNativeTokenArrived;\r\n        this.modal = new Modal();\r\n    }\r\n    show() {\r\n        let networkInfo = App.Network;\r\n        let userService = new UserService();\r\n        let ethAddress = userService.getEthAddress();\r\n        if (networkInfo.TestNetwork) {\r\n            let template = Handlebars.compile(FakeNativeTokenNeeded);\r\n            let content = template({ symbol: networkInfo.NativeSymbol, faucetUrl: networkInfo.FaucetUrl, ethAddress: ethAddress });\r\n            this.modal.showModal('Get some ' + networkInfo.NativeSymbol, content, false, () => {\r\n                this.cancelTimer();\r\n            });\r\n        }\r\n        else {\r\n            let template = Handlebars.compile(modal_NativeTokenNeeded);\r\n            let content = template({ symbol: networkInfo.NativeSymbol, buyUrl: networkInfo.BuyUrl, ethAddress: ethAddress });\r\n            this.modal.showModal('Get some ' + networkInfo.NativeSymbol, content, false, () => {\r\n                this.cancelTimer();\r\n            });\r\n        }\r\n        let link = document.getElementById('getNativeTokens');\r\n        if (!link)\r\n            return;\r\n        link.addEventListener('click', () => NativeTokenNeeded_awaiter(this, void 0, void 0, function* () {\r\n            let waitingForNativeToken = document.getElementById('waitingForNativeToken');\r\n            waitingForNativeToken === null || waitingForNativeToken === void 0 ? void 0 : waitingForNativeToken.classList.remove('d-none');\r\n            yield this.checkForNativeTokens();\r\n        }));\r\n    }\r\n    cancelTimer() {\r\n        if (this.timeOut)\r\n            clearTimeout(this.timeOut);\r\n    }\r\n    checkForNativeTokens() {\r\n        return NativeTokenNeeded_awaiter(this, void 0, void 0, function* () {\r\n            let networkInfo = App.Network;\r\n            let hasEnoughNativeTokens = yield networkInfo.hasEnoughNativeTokens();\r\n            if (hasEnoughNativeTokens) {\r\n                this.modal.hideModal();\r\n                this.onNativeTokenArrived();\r\n            }\r\n            else {\r\n                this.timeOut = setTimeout(() => this.checkForNativeTokens(), 5 * 1000);\r\n            }\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycActionRequired.html\n// Module\nvar KycActionRequired_code = \"<div id=\\\"kycActionRequiredDiv\\\">\\r\\n\\r\\n    {{#if Other}}\\r\\n    <strong>This is the message from KYC processor we received</strong>\\r\\n    <blockquote>\\r\\n        {{Other}}\\r\\n    </blockquote>\\r\\n    {{/if}}\\r\\n    <form novalidate id=\\\"kycActionRequiredForm\\\" name=\\\"kycActionRequiredForm\\\" onsubmit=\\\"return false;\\\">\\r\\n        {{{KycInfo}}}\\r\\n        {{#if SubmitData}}\\r\\n        <div class=\\\"input_error\\\" id=\\\"kycActionRequiredError\\\"></div>\\r\\n        <div class=\\\"buttons\\\">\\r\\n            <button type=\\\"submit\\\" id=\\\"kycActionRequiredSubmit\\\">Send new information</button>\\r\\n        </div>\\r\\n        {{/if}}\\r\\n    </form>\\r\\n</div>\\r\\n\\r\\n<div id=\\\"kycActionRequiredSubmittedDiv\\\" class=\\\"hidden center\\\">\\r\\n    <h3>You documents have been submitted.<br/>We will email you when your account is ready.</h3>\\r\\n    You can close this window.\\r\\n</div>\";\n// Exports\n/* harmony default export */ const Kyc_KycActionRequired = (KycActionRequired_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/WeDontKnowWhy.html\n// Module\nvar WeDontKnowWhy_code = \"<fieldset>\\r\\n    Your application has been rejected during KYC process.<br/><br/>\\r\\n    We don't have the information on why that happened, but you can email us at\\r\\n    <a href='mailto:info@liminal.market?subject=My application was rejected&body=Hi, can you help me to find out what the problem is? My name is _______ and I used the email _______ to register at liminal.market'>info@liminal.market</a>\\r\\n    and we can find out, and we should be able to solve it together.\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const WeDontKnowWhy = (WeDontKnowWhy_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/IDENTITY_VERIFICATION.html\n// Module\nvar IDENTITY_VERIFICATION_code = \"<fieldset>\\r\\n    <p>\\r\\n        Identity needs to be verified.\\r\\n        This means you need to upload\\r\\n        a new photo of your id. You might try another type of ID, such as\\r\\n        driver's license if you tried passport before\\r\\n    </p>\\r\\n    <div class=\\\"grid\\\">\\r\\n        {{{fileUpload \\\"identity_verification\\\" \\\"Photo ID Front (Front of passport)\\\"}}}\\r\\n    </div>\\r\\n    <div class=\\\"grid\\\">\\r\\n        {{{fileUpload \\\"identity_verification_2\\\" \\\"Photo ID Back (Passport picture of ID) \\\"}}}\\r\\n    </div>\\r\\n\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const IDENTITY_VERIFICATION = (IDENTITY_VERIFICATION_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/ADDRESS_VERIFICATION.html\n// Module\nvar ADDRESS_VERIFICATION_code = \"<fieldset>\\r\\n    <p>\\r\\n        Address needs to be verified. Please upload document that confirms your address.\\r\\n        A bill from the government or utility company in that last 30 days with your name it should work.\\r\\n    </p>\\r\\n    <div class=\\\"grid\\\">\\r\\n        {{{fileUpload \\\"address_verification\\\" \\\"Picture of address verification\\\"}}}\\r\\n    </div>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const ADDRESS_VERIFICATION = (ADDRESS_VERIFICATION_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/AFFILIATED.html\n// Module\nvar AFFILIATED_code = \"<fieldset>\\r\\n    Further information needs to be submitted if account owner is affiliated to finra or an exchange\\r\\n    <br/>\\r\\n    Please contact us at <a href=\\\"mailto:info@liminal.market\\\">info@liminal.market</a> for further information\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const AFFILIATED = (AFFILIATED_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/CONTROL_PERSON.html\n// Module\nvar CONTROL_PERSON_code = \"<fieldset>\\r\\n    Further information needs to be submitted if account owner is a control person\\r\\n    <br/>\\r\\n    Please contact us at <a href=\\\"mailto:info@liminal.market\\\">info@liminal.market</a> for further information\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const CONTROL_PERSON = (CONTROL_PERSON_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/COUNTRY_NOT_SUPPORTED.html\n// Module\nvar COUNTRY_NOT_SUPPORTED_code = \"<fieldset>\\r\\n    The account owner’s country of tax residence is not supported by our KYC providers.\\r\\n    In this case, we’ll manually perform KYC on the user\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const COUNTRY_NOT_SUPPORTED = (COUNTRY_NOT_SUPPORTED_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/DATE_OF_BIRTH.html\n// Module\nvar DATE_OF_BIRTH_code = \"<fieldset>\\r\\n    Date of birth needs to be verified. Please upload document that confirms your date of birth.\\r\\n\\r\\n    <div class=\\\"grid\\\">\\r\\n        {{{fileUpload \\\"date_of_birth_verification\\\" \\\"Date of birth verification\\\"}}}\\r\\n    </div>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const DATE_OF_BIRTH = (DATE_OF_BIRTH_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/FAMILY_MEMBER_PEP.html\n// Module\nvar FAMILY_MEMBER_PEP_code = \"<fieldset>\\r\\n    Further information needs to be submitted if family member is a politically exposed person\\r\\n    <br/>\\r\\n    Please contact us at <a href=\\\"mailto:info@liminal.market\\\">info@liminal.market</a> for further information\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const FAMILY_MEMBER_PEP = (FAMILY_MEMBER_PEP_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/INVALID_IDENTITY_PASSPORT.html\n// Module\nvar INVALID_IDENTITY_PASSPORT_code = \"<fieldset>\\r\\n    Identity needs to be verified via a government issued ID.\\r\\n\\r\\n    <div class=\\\"grid\\\">\\r\\n        {{{fileUpload \\\"identity_verification\\\" \\\"Photo ID Front (Front of passport)\\\"}}}\\r\\n    </div>\\r\\n    <div class=\\\"grid\\\">\\r\\n        {{{fileUpload \\\"identity_verification_2\\\" \\\"Photo ID Back (Passport picture of ID) \\\"}}}\\r\\n    </div>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const INVALID_IDENTITY_PASSPORT = (INVALID_IDENTITY_PASSPORT_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/PEP.html\n// Module\nvar PEP_code = \"<fieldset>\\r\\n    Further information needs to be submitted if account owner is politically exposed person\\r\\n    <br/>\\r\\n    Please contact us at <a href=\\\"mailto:info@liminal.market\\\">info@liminal.market</a> for further information\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const PEP = (PEP_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/SELFIE_VERIFICATION.html\n// Module\nvar SELFIE_VERIFICATION_code = \"<fieldset>\\r\\n    Identity needs to be verified via a live selfie of the account owner\\r\\n\\r\\n    <div class=\\\"grid\\\">\\r\\n        {{{fileUpload \\\"identity_verification\\\" \\\"Live selfie verification\\\"}}}\\r\\n    </div>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const SELFIE_VERIFICATION = (SELFIE_VERIFICATION_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/TAX_IDENTIFICATION.html\n// Module\nvar TAX_IDENTIFICATION_code = \"<fieldset>\\r\\n    Tax ID number needs to be verified. Please upload document that confirms your Tax Id\\r\\n\\r\\n    <div class=\\\"grid\\\">\\r\\n        {{{fileUpload \\\"tax_id_verification\\\" \\\"Tax id verification\\\"}}}\\r\\n    </div>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const TAX_IDENTIFICATION = (TAX_IDENTIFICATION_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/VISA_TYPE_OTHER.html\n// Module\nvar VISA_TYPE_OTHER_code = \"<fieldset>\\r\\n    Further information needs to be submitted about account owner’s visa\\r\\n    <br/>\\r\\n    Please contact us at <a href=\\\"mailto:info@liminal.market\\\">info@liminal.market</a> for further information\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const VISA_TYPE_OTHER = (VISA_TYPE_OTHER_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/W8BEN_CORRECTION.html\n// Module\nvar W8BEN_CORRECTION_code = \"<fieldset>\\r\\n    Identifying information submitted by the user was incorrect so a new, corrected, W8BEN needs to be submitted\\r\\n    <br/>\\r\\n    Please contact us at <a href=\\\"mailto:info@liminal.market\\\">info@liminal.market</a> for further information\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const W8BEN_CORRECTION = (W8BEN_CORRECTION_code);\n;// CONCATENATED MODULE: ./src/html/elements/FileUpload.html\n// Module\nvar FileUpload_code = \"<div>\\r\\n    <label for=\\\"{{inputId}}\\\">{{label}}</label>\\r\\n    <input type=\\\"file\\\" required id=\\\"{{inputId}}\\\" accept=\\\"{{accept}}\\\" capture=\\\"{{capture}}\\\"/>\\r\\n    <input type=\\\"hidden\\\" id=\\\"{{inputId}}_base64\\\" name=\\\"{{inputId}}_base64\\\"/>\\r\\n    <div class=\\\"error hidden\\\" id=\\\"{{inputId}}_error\\\"></div>\\r\\n</div>\\r\\n<div id=\\\"{{inputId}}_preview\\\">\\r\\n\\r\\n</div>\";\n// Exports\n/* harmony default export */ const elements_FileUpload = (FileUpload_code);\n;// CONCATENATED MODULE: ./src/ui/elements/FileUpload.ts\n\r\nclass FileUpload {\r\n    constructor(inputId, label, accept = \"image/png,image/jpeg,.pdf\", capture = 'environment') {\r\n        this.maxFileSize = 8 * 1024 * 1024 * 10; //10MB\r\n        this.accept = \"image/*,.pdf\";\r\n        this.capture = 'environment';\r\n        this.inputId = inputId;\r\n        this.label = label;\r\n        this.accept = accept;\r\n        this.capture = capture;\r\n    }\r\n    render() {\r\n        let template = Handlebars.compile(elements_FileUpload);\r\n        return template(this);\r\n    }\r\n    bindEvents() {\r\n        let fileInput = document.getElementById(this.inputId);\r\n        fileInput === null || fileInput === void 0 ? void 0 : fileInput.addEventListener('change', (evt) => {\r\n            this.processFile(fileInput);\r\n        });\r\n    }\r\n    processFile(element) {\r\n        this.hideFileRelatedInfo(element.id);\r\n        let files = element.files;\r\n        if (!files)\r\n            return;\r\n        let file = files[0];\r\n        if (!file) {\r\n            this.showFileRelatedInfo(element.id, 'No file selected. Please select file.');\r\n            this.setBase64Input(element.id, '');\r\n            return;\r\n        }\r\n        if (file.size > this.maxFileSize) {\r\n            this.showFileRelatedInfo(element.id, 'File ' + file.name + ' is to large. Files cannot be larger then 10MB. You need to make it smaller before submitting your application');\r\n            this.setBase64Input(element.id, '');\r\n            return;\r\n        }\r\n        let reader = new FileReader();\r\n        reader.addEventListener('load', () => {\r\n            this.setBase64Input(element.id, reader.result);\r\n        });\r\n        reader.addEventListener('error', () => {\r\n            this.showFileRelatedInfo(element.id, 'Could not read file ' + file.name + '. Either the file is corrupt or your browser does not allow us to read it');\r\n        });\r\n        reader.readAsDataURL(file);\r\n    }\r\n    setBase64Input(elementId, value) {\r\n        let base64Input = document.getElementById(elementId + '_base64');\r\n        base64Input.value = value;\r\n        let previewElement = document.getElementById(elementId + '_preview');\r\n        if (!previewElement)\r\n            return;\r\n        if (value.indexOf('data:image') != -1) {\r\n            previewElement.innerHTML = '<img src=\"' + base64Input.value + '\" />';\r\n        }\r\n        else {\r\n            previewElement.innerHTML = '';\r\n        }\r\n    }\r\n    showFileRelatedInfo(elementId, text) {\r\n        let fileRelatedInfo = document.getElementById(elementId + '_error');\r\n        if (!fileRelatedInfo)\r\n            return;\r\n        fileRelatedInfo.innerHTML = text;\r\n        fileRelatedInfo.classList.remove('hidden');\r\n    }\r\n    hideFileRelatedInfo(elementId) {\r\n        let fileRelatedInfo = document.getElementById(elementId + '_error');\r\n        if (!fileRelatedInfo)\r\n            return;\r\n        fileRelatedInfo.classList.add('hidden');\r\n    }\r\n    static registerHandler() {\r\n        Handlebars.registerHelper('fileUpload', (id, label) => {\r\n            let fileUpload = new FileUpload(id, label);\r\n            FileUpload.fileUploads.push(fileUpload);\r\n            return fileUpload.render();\r\n        });\r\n    }\r\n}\r\nFileUpload.fileUploads = [];\r\n\n;// CONCATENATED MODULE: ./src/util/FormValidator.ts\n\r\nclass FormValidator {\r\n    constructor(selector) {\r\n        this.selector = selector;\r\n    }\r\n    validateRequiredFields() {\r\n        let inputs = document.querySelectorAll(this.selector + ' input[required], ' + this.selector + ' select[required]');\r\n        for (let i = 0; i < inputs.length; i++) {\r\n            let input = inputs[i];\r\n            if (this.isMissingInputFromUser(input)) {\r\n                let obj = {\r\n                    message: 'You must fill into this field',\r\n                    inputName: input.id,\r\n                    labelText: document.querySelector('label[for=' + input.id + ']').innerHTML,\r\n                    pattern: input.pattern\r\n                };\r\n                this.handle(obj);\r\n                return false;\r\n            }\r\n            if (input.pattern) {\r\n                let pattern = input.pattern;\r\n                let matches = input.value.match(pattern);\r\n                if (matches == null) {\r\n                    let obj = {\r\n                        message: 'This is not valid date format, please use YYYY-MM-DD (year-month-date)',\r\n                        inputName: input.id,\r\n                        labelText: document.querySelector('label[for=' + input.id + ']').innerHTML,\r\n                        pattern: input.pattern\r\n                    };\r\n                    this.handle(obj);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    isMissingInputFromUser(input) {\r\n        return ((input.type == 'checkbox' && !input.checked) || StringHelper.isNullOrEmpty(input.value));\r\n    }\r\n    removeMissingInfo(errorDivId, focusElementId) {\r\n        let element = document.getElementById(errorDivId);\r\n        if (!element)\r\n            return;\r\n        element.style.display = 'none';\r\n        if (!focusElementId)\r\n            return;\r\n        let focusElement = document.getElementById(focusElementId);\r\n        if (focusElement) {\r\n            focusElement.removeAttribute('aria-invalid');\r\n        }\r\n    }\r\n    setMissingInfo(errorDivId, text, focusElementId) {\r\n        var _a, _b;\r\n        let element = document.getElementById(errorDivId);\r\n        if (!element)\r\n            return;\r\n        element.innerHTML = text;\r\n        if (text == '') {\r\n            element.style.display = 'none';\r\n        }\r\n        else {\r\n            element.style.display = 'block';\r\n            if (focusElementId) {\r\n                (_a = document.getElementById(focusElementId)) === null || _a === void 0 ? void 0 : _a.focus();\r\n                (_b = document.getElementById(focusElementId)) === null || _b === void 0 ? void 0 : _b.setAttribute('aria-invalid', 'true');\r\n            }\r\n        }\r\n    }\r\n    handle(obj) {\r\n        let input = document.getElementById(obj.inputName);\r\n        if (!input)\r\n            return;\r\n        let inputError = input.parentElement.querySelector('.input_error');\r\n        if (inputError) {\r\n            inputError.scrollIntoView({ block: 'center' });\r\n            return;\r\n        }\r\n        input.setAttribute('aria-invalid', 'true');\r\n        input.insertAdjacentHTML(\"beforebegin\", '<div class=\"input_error\" style=\"display: block\" id=\"input_error_' + obj.inputName + '\">' + obj.message + '</div>');\r\n        input.focus();\r\n        if (obj.pattern) {\r\n            input.setAttribute('pattern', obj.pattern);\r\n        }\r\n        input.addEventListener('blur', (evt) => {\r\n            evt.preventDefault();\r\n            setTimeout(() => {\r\n                let input = evt.target;\r\n                let pattern = input.getAttribute('pattern');\r\n                if ((pattern && input.value.match(pattern)) || (input.required && input.value) || input.checked) {\r\n                    input.removeAttribute('aria-invalid');\r\n                    let errorMessage = document.getElementById('input_error_' + obj.inputName);\r\n                    if (errorMessage)\r\n                        errorMessage.remove();\r\n                }\r\n            }, 800);\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycActionRequired.ts\nvar KycActionRequired_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass KycActionRequired {\r\n    constructor(executeTradeButton) {\r\n        this.modal = new Modal();\r\n        this.templates = new Map();\r\n        this.executeTradeButton = executeTradeButton;\r\n        this.templates.set('WeDontKnowWhyHtml', WeDontKnowWhy);\r\n        this.templates.set('ADDRESS_VERIFICATION', ADDRESS_VERIFICATION);\r\n        this.templates.set('AFFILIATED', AFFILIATED);\r\n        this.templates.set('CONTROL_PERSON', CONTROL_PERSON);\r\n        this.templates.set('COUNTRY_NOT_SUPPORTED', COUNTRY_NOT_SUPPORTED);\r\n        this.templates.set('DATE_OF_BIRTH', DATE_OF_BIRTH);\r\n        this.templates.set('FAMILY_MEMBER_PEP', FAMILY_MEMBER_PEP);\r\n        this.templates.set('IDENTITY_VERIFICATION', IDENTITY_VERIFICATION);\r\n        this.templates.set('INVALID_IDENTITY_PASSPORT', INVALID_IDENTITY_PASSPORT);\r\n        this.templates.set('PEP', PEP);\r\n        this.templates.set('SELFIE_VERIFICATION', SELFIE_VERIFICATION);\r\n        this.templates.set('TAX_IDENTIFICATION', TAX_IDENTIFICATION);\r\n        this.templates.set('VISA_TYPE_OTHER', VISA_TYPE_OTHER);\r\n        this.templates.set('W8BEN_CORRECTION', W8BEN_CORRECTION);\r\n        FileUpload.registerHandler();\r\n    }\r\n    show() {\r\n        return KycActionRequired_awaiter(this, void 0, void 0, function* () {\r\n            let userService = new UserService();\r\n            let kycResult = yield userService.kycActionRequired();\r\n            if (!kycResult)\r\n                return;\r\n            let kycInfo = this.getKycMessages(kycResult.messages);\r\n            let template = Handlebars.compile(Kyc_KycActionRequired);\r\n            let content = template({\r\n                json: JSON.stringify(kycResult),\r\n                KycInfo: kycInfo,\r\n                Other: kycResult.additional_information,\r\n                SubmitData: kycInfo.indexOf('<input') != -1\r\n            });\r\n            this.modal.showModal('Action required', content, false, () => {\r\n            }, false);\r\n            let kycActionRequiredForm = document.getElementById('kycActionRequiredForm');\r\n            kycActionRequiredForm === null || kycActionRequiredForm === void 0 ? void 0 : kycActionRequiredForm.addEventListener('submit', (evt) => KycActionRequired_awaiter(this, void 0, void 0, function* () {\r\n                evt.preventDefault();\r\n                this.hideError();\r\n                let submitBtn = document.getElementById('kycActionRequiredSubmit');\r\n                LoadingHelper.setLoading(submitBtn);\r\n                let formValidator = new FormValidator('#kycActionRequiredForm');\r\n                if (!formValidator.validateRequiredFields())\r\n                    return;\r\n                let params = FormHelper.getParams('#kycActionRequiredForm');\r\n                let kycService = new KYCService();\r\n                yield kycService.updateDocuments(params)\r\n                    .then(() => {\r\n                    let kycActionRequiredDiv = document.getElementById('kycActionRequiredDiv');\r\n                    kycActionRequiredDiv === null || kycActionRequiredDiv === void 0 ? void 0 : kycActionRequiredDiv.classList.add('hidden');\r\n                    let kycActionRequiredSubmittedDiv = document.getElementById('kycActionRequiredSubmittedDiv');\r\n                    kycActionRequiredSubmittedDiv === null || kycActionRequiredSubmittedDiv === void 0 ? void 0 : kycActionRequiredSubmittedDiv.classList.remove('hidden');\r\n                    this.executeTradeButton.renderButton();\r\n                })\r\n                    .catch(reason => {\r\n                    this.showError(reason);\r\n                }).finally(() => {\r\n                    LoadingHelper.removeLoading();\r\n                });\r\n            }));\r\n            for (let i = 0; i < FileUpload.fileUploads.length; i++) {\r\n                FileUpload.fileUploads[i].bindEvents();\r\n            }\r\n        });\r\n    }\r\n    getKycMessages(messages) {\r\n        let kycInfo = '';\r\n        for (let i = 0; i < messages.length; i++) {\r\n            let htmlTemplate = this.templates.get(messages[i].key);\r\n            if (!htmlTemplate) {\r\n                //TODO: Here we should to logger, critical that we dont know why\r\n                continue;\r\n            }\r\n            let template = Handlebars.compile(htmlTemplate);\r\n            kycInfo += template({ message: messages[i].message });\r\n        }\r\n        if (kycInfo == '') {\r\n            let html = this.templates.get('WeDontKnowWhyHtml');\r\n            let template = Handlebars.compile(html);\r\n            kycInfo = template({});\r\n        }\r\n        return kycInfo;\r\n    }\r\n    hideError() {\r\n        let kycActionRequiredError = document.getElementById('kycActionRequiredError');\r\n        if (!kycActionRequiredError)\r\n            return;\r\n        kycActionRequiredError.style.display = 'none';\r\n    }\r\n    showError(reason) {\r\n        let kycActionRequiredError = document.getElementById('kycActionRequiredError');\r\n        if (!kycActionRequiredError)\r\n            return;\r\n        kycActionRequiredError.innerHTML = 'Error occurred while saving your documents. Reason:' + reason;\r\n        kycActionRequiredError.style.display = 'block';\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/KYCModal.html\n// Module\nvar KYCModal_code = \"<div id=\\\"kyc_reg\\\">\\r\\n\\r\\n    <form id=\\\"kyc_wizard_form\\\" name=\\\"kyc_wizard_form\\\" novalidate onsubmit=\\\"return false\\\">\\r\\n        {{{KycContactHtml}}}\\r\\n        {{{KycIdentityHtml}}}\\r\\n        {{{KycTrustedContactHtml}}}\\r\\n        {{{KycDisclosureHtml}}}\\r\\n        {{{KycUploadHtml}}}\\r\\n        {{{KycAccountAgreementHtml}}}\\r\\n    </form>\\r\\n</div>\\r\\n\\r\\n<div id=\\\"waiting_for_kyc_reg\\\" class=\\\"hidden\\\">\\r\\n    KYC is being processed. This may take about 4-5 minutes. Window will close when it's done.\\r\\n    <br/><br/>\\r\\n    You can close the window, we will email you when KYC is finished.\\r\\n\\r\\n    <progress></progress>\\r\\n\\r\\n</div>\";\n// Exports\n/* harmony default export */ const KYCModal = (KYCModal_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycContact.html\n// Module\nvar KycContact_code = \"<fieldset class=\\\"kycContact hidden\\\" data-form=\\\"1\\\">\\r\\n    <div class=\\\"explain\\\">\\r\\n        To be able to trade on the stock market, we need to get your information.\\r\\n        This is a requirement from the financial regulators.\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"email_address\\\">Email</label>\\r\\n        <input type=\\\"email\\\" required class=\\\"form-control\\\" id=\\\"email_address\\\" name=\\\"email_address\\\"\\r\\n               placeholder=\\\"name@example.com\\\" autocomplete=\\\"email\\\"\\r\\n               value=\\\"\\\">\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"phone_number\\\">Phone</label>\\r\\n        <input type=\\\"tel\\\" class=\\\"form-control\\\" id=\\\"phone_number\\\" name=\\\"phone_number\\\"\\r\\n               placeholder=\\\"+1-555-666-7788\\\" autocomplete=\\\"tel\\\" value=\\\"\\\">\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"street_address\\\">Permanent Residential Address</label>\\r\\n        <div class=\\\"explain\\\">It must be a physical address, not a PO box.</div>\\r\\n        <input required id=\\\"street_address\\\" name=\\\"street_address\\\"\\r\\n               placeholder=\\\"20 N San Mateo Dr\\\" value=\\\"\\\" autocomplete=\\\"address-line1\\\">\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"unit\\\">Unit / Apt #</label>\\r\\n        <input id=\\\"unit\\\" name=\\\"unit\\\" value=\\\"\\\">\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"city\\\">City</label>\\r\\n        <input id=\\\"city\\\" name=\\\"city\\\" placeholder=\\\"Pawnee\\\"\\r\\n               value=\\\"\\\" autocomplete=\\\"address-level2\\\">\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"postal_code\\\">Postal code</label>\\r\\n        <input required id=\\\"postal_code\\\" autocomplete=\\\"postal-code\\\" name=\\\"postal_code\\\"\\r\\n               placeholder=\\\"94401\\\"\\r\\n               value=\\\"\\\">\\r\\n    </div>\\r\\n    <div id=\\\"state_div\\\">\\r\\n        <label for=\\\"state\\\">State (2 letters)</label>\\r\\n        <input maxlength=\\\"2\\\" id=\\\"state\\\" name=\\\"state\\\" placeholder=\\\"NY\\\"\\r\\n               value=\\\"\\\" autocomplete=\\\"address-level1\\\">\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"country_of_tax_residence\\\">Country of tax residence</label>\\r\\n        {{#if edit}}\\r\\n        <input name=\\\"country_of_tax_residence\\\" readonly id=\\\"country_of_tax_residence\\\"/>\\r\\n        {{/if}}\\r\\n        {{#unless edit}}\\r\\n        <select required id=\\\"country_of_tax_residence\\\" name=\\\"country_of_tax_residence\\\" autocomplete=\\\"country\\\">\\r\\n            <option value=\\\"\\\"></option>\\r\\n            {{#each countries}}\\r\\n            <option value=\\\"{{code}}\\\">{{name}}</option>\\r\\n            {{/each}}\\r\\n        </select>\\r\\n        {{/unless}}\\r\\n    </div>\\r\\n    <div class=\\\"buttons\\\">\\r\\n        <button type=\\\"button\\\" id=\\\"contact_next\\\">Next: Identity</button>\\r\\n    </div>\\r\\n</fieldset>\\r\\n\";\n// Exports\n/* harmony default export */ const Kyc_KycContact = (KycContact_code);\n;// CONCATENATED MODULE: ./src/errors/cloud/KycValidatorError.ts\nvar KycValidatorError_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\nclass KycValidatorError {\r\n    constructor(error, kycForm) {\r\n        var _a, _b;\r\n        this.validValues = '';\r\n        this.inputName = '';\r\n        this.labelText = '';\r\n        this.pattern = '';\r\n        let obj = {};\r\n        try {\r\n            if (!error.inputName) {\r\n                obj = JSON.parse(error);\r\n            }\r\n            else {\r\n                obj = error;\r\n            }\r\n            this.message = (_a = obj.message) === null || _a === void 0 ? void 0 : _a.replace(/_/g, ' ');\r\n            this.validValues = (_b = obj.validValues) === null || _b === void 0 ? void 0 : _b.replace(/_/g, ' ');\r\n            this.inputName = obj.inputName;\r\n            this.labelText = obj.labelText;\r\n            this.pattern = obj.pattern;\r\n            this.onshow = obj.onshow;\r\n        }\r\n        catch (e) {\r\n            this.message = error.messsage;\r\n        }\r\n        this.kycForm = kycForm;\r\n    }\r\n    handle() {\r\n        if (StringHelper.isNullOrEmpty(this.inputName)) {\r\n            let activeFieldset = document.querySelector(this.kycForm.activeFieldsetSelector);\r\n            let inputError = activeFieldset.querySelector('.input_error');\r\n            if (inputError) {\r\n                if (this.validValues) {\r\n                    inputError.innerHTML = this.validValues.toString();\r\n                }\r\n                else {\r\n                    if (this.message && this.message.indexOf('Invalid function') != -1 || this.message.indexOf('Unable to connect to the Parse API') != -1) {\r\n                        inputError.innerHTML = 'We just deployed new version of our website. This can cause interruption. Please wait 30 seconds and submit again';\r\n                    }\r\n                    else {\r\n                        inputError.innerHTML = this.message;\r\n                    }\r\n                }\r\n                inputError.style.display = 'block';\r\n                inputError.scrollIntoView();\r\n            }\r\n            return;\r\n        }\r\n        let input = document.getElementById(this.inputName);\r\n        if (!input)\r\n            return;\r\n        let inputError = input.parentElement.querySelector('.input_error');\r\n        if (inputError) {\r\n            inputError.scrollIntoView({ block: 'center' });\r\n            return;\r\n        }\r\n        input.setAttribute('aria-invalid', 'true');\r\n        let errorInput = '<div class=\"input_error\" style=\"display: block\" id=\"input_error_' + this.inputName + '\">' + this.message + '</div>';\r\n        if (input.clientWidth < 300) {\r\n            let div = this.getDivToDisplayErrorMessage(input);\r\n            div.insertAdjacentHTML(\"beforebegin\", errorInput);\r\n        }\r\n        else {\r\n            input.insertAdjacentHTML(\"beforebegin\", errorInput);\r\n        }\r\n        input.focus();\r\n        if (this.pattern) {\r\n            input.setAttribute('pattern', this.pattern);\r\n        }\r\n        input.addEventListener('blur', (evt) => {\r\n            evt.preventDefault();\r\n            setTimeout(() => {\r\n                let input = evt.target;\r\n                let pattern = input.getAttribute('pattern');\r\n                if ((pattern && input.value.match(pattern)) || (input.type != 'checkbox' && input.type != 'radio' && input.required && input.value) || input.checked) {\r\n                    input.removeAttribute('aria-invalid');\r\n                    let errorMessage = document.getElementById('input_error_' + this.inputName);\r\n                    if (errorMessage)\r\n                        errorMessage.remove();\r\n                }\r\n            }, 800);\r\n        });\r\n        let fieldsetElement = input.closest('fieldset[data-form=\"1\"]');\r\n        if (fieldsetElement) {\r\n            let className = fieldsetElement.className.replace('hidden', '').trim();\r\n            this.kycForm.show(className);\r\n            input.scrollIntoView(false);\r\n        }\r\n        if (this.onshow) {\r\n            let link = document.getElementById(this.onshow.id);\r\n            if (!link)\r\n                return;\r\n            link.addEventListener('click', (evt) => KycValidatorError_awaiter(this, void 0, void 0, function* () {\r\n                evt.preventDefault();\r\n                //await this(this.onshow.functionName, this.onshow.params);\r\n                //TODO: fix send email\r\n                document.getElementById('input_error_' + this.inputName).innerHTML = 'Email has been sent to ' + this.onshow.params.email;\r\n            }));\r\n        }\r\n    }\r\n    getDivToDisplayErrorMessage(input, counter = 1) {\r\n        let div = input.parentElement.closest('div');\r\n        if (!div)\r\n            return input;\r\n        if (div.clientWidth > 300 || counter > 5) {\r\n            return div;\r\n        }\r\n        return this.getDivToDisplayErrorMessage(div, ++counter);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycBase.ts\n\r\n\r\n\r\nclass KycBase {\r\n    constructor(kycForm) {\r\n        this.kycForm = kycForm;\r\n        FileUpload.registerHandler();\r\n    }\r\n    showFieldset(selector, header) {\r\n        var _a;\r\n        this.hideFieldsets();\r\n        (_a = document.querySelector(selector)) === null || _a === void 0 ? void 0 : _a.classList.remove('hidden');\r\n        document.querySelector('#liminal_market_modal_div > article > header > span').innerHTML = header;\r\n        document.querySelector('#liminal_market_modal_div > article').scrollTop = 0;\r\n        this.kycForm.activeFieldsetSelector = selector;\r\n    }\r\n    showRequiredMarker() {\r\n        let inputs = document.querySelectorAll('input, select');\r\n        for (let i = 0; i < inputs.length; i++) {\r\n            let input = inputs[i];\r\n            if (!input.id)\r\n                continue;\r\n            let label = document.querySelector('label[for=' + input.id + ']');\r\n            if (!label)\r\n                continue;\r\n            if (input.required) {\r\n                if (label.innerHTML.indexOf('*') == -1) {\r\n                    label.innerHTML += '*';\r\n                }\r\n            }\r\n            else {\r\n                if (label.innerHTML.indexOf('*') != -1) {\r\n                    label.innerHTML = label.innerHTML.replace('*', '');\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setRequired(inputId) {\r\n        var _a;\r\n        (_a = document.getElementById(inputId)) === null || _a === void 0 ? void 0 : _a.setAttribute('required', 'required');\r\n    }\r\n    removeRequired(inputId) {\r\n        var _a;\r\n        (_a = document.getElementById(inputId)) === null || _a === void 0 ? void 0 : _a.removeAttribute('required');\r\n    }\r\n    bind(selector, eventName, action) {\r\n        let elements = document.querySelectorAll(selector);\r\n        for (let i = 0; i < elements.length; i++) {\r\n            elements[i].addEventListener(eventName, (evt) => {\r\n                action(evt);\r\n            });\r\n        }\r\n    }\r\n    bindFileUploads() {\r\n        for (let i = 0; i < FileUpload.fileUploads.length; i++) {\r\n            FileUpload.fileUploads[i].bindEvents();\r\n        }\r\n    }\r\n    hideFieldsets() {\r\n        let fieldsets = document.querySelectorAll('#kyc_wizard_form > fieldset');\r\n        for (let i = 0; i < fieldsets.length; i++) {\r\n            fieldsets[i].classList.add('hidden');\r\n        }\r\n    }\r\n    validateRequiredFields(selector) {\r\n        let inputs = document.querySelectorAll(selector + ' input[required], ' + selector + ' select[required]');\r\n        for (let i = 0; i < inputs.length; i++) {\r\n            let input = inputs[i];\r\n            if (this.isMissingInputFromUser(input)) {\r\n                let obj = {\r\n                    message: 'You must fill into this field',\r\n                    inputName: input.id,\r\n                    labelText: document.querySelector('label[for=' + input.id + ']').innerHTML,\r\n                    pattern: input.pattern\r\n                };\r\n                let kycValidationError = new KycValidatorError(obj, this.kycForm);\r\n                kycValidationError.handle();\r\n                return false;\r\n            }\r\n            if (input.pattern) {\r\n                let pattern = input.pattern;\r\n                let matches = input.value.match(pattern);\r\n                if (matches == null) {\r\n                    let obj = {\r\n                        message: 'This is not valid date format, please use YYYY-MM-DD (year-month-date)',\r\n                        inputName: input.id,\r\n                        labelText: document.querySelector('label[for=' + input.id + ']').innerHTML,\r\n                        pattern: input.pattern\r\n                    };\r\n                    let kycValidationError = new KycValidatorError(obj, this.kycForm);\r\n                    kycValidationError.handle();\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    showElement(elementId) {\r\n        var _a;\r\n        (_a = document.getElementById(elementId)) === null || _a === void 0 ? void 0 : _a.classList.remove('hidden');\r\n    }\r\n    hideElement(elementId) {\r\n        var _a;\r\n        (_a = document.getElementById(elementId)) === null || _a === void 0 ? void 0 : _a.classList.add('hidden');\r\n    }\r\n    setLabel(elementId, text) {\r\n        let element = document.getElementById('tax_id_label');\r\n        if (!element)\r\n            return;\r\n        element.innerHTML = text;\r\n    }\r\n    isMissingInputFromUser(input) {\r\n        return ((input.type == 'checkbox' && !input.checked) || StringHelper.isNullOrEmpty(input.value));\r\n    }\r\n    removeMissingInfo(errorDivId, focusElementId) {\r\n        let element = document.getElementById(errorDivId);\r\n        if (!element)\r\n            return;\r\n        element.style.display = 'none';\r\n        if (!focusElementId)\r\n            return;\r\n        let focusElement = document.getElementById(focusElementId);\r\n        if (focusElement) {\r\n            focusElement.removeAttribute('aria-invalid');\r\n        }\r\n    }\r\n    setMissingInfo(errorDivId, text, focusElementId) {\r\n        var _a, _b;\r\n        let element = document.getElementById(errorDivId);\r\n        if (!element)\r\n            return;\r\n        element.innerHTML = text;\r\n        if (text == '') {\r\n            element.style.display = 'none';\r\n        }\r\n        else {\r\n            element.style.display = 'block';\r\n            if (focusElementId) {\r\n                (_a = document.getElementById(focusElementId)) === null || _a === void 0 ? void 0 : _a.focus();\r\n                (_b = document.getElementById(focusElementId)) === null || _b === void 0 ? void 0 : _b.setAttribute('aria-invalid', 'true');\r\n            }\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycContact.ts\n\r\n\r\n\r\nclass KycContact extends KycBase {\r\n    constructor(kycForm) {\r\n        super(kycForm);\r\n        this.usTaxResidence = false;\r\n    }\r\n    render(edit = false) {\r\n        let template = Handlebars.compile(Kyc_KycContact);\r\n        return template({ edit: edit, countries: CountryHelper.Countries });\r\n    }\r\n    show() {\r\n        this.showFieldset('.kycContact', 'Contact information');\r\n    }\r\n    bindEvents() {\r\n        this.bind('#country_of_tax_residence', 'change', (evt) => {\r\n            var _a, _b;\r\n            let input = evt.target;\r\n            this.usTaxResidence = (input.value.toUpperCase() == 'USA');\r\n            if (this.usTaxResidence) {\r\n                (_a = document.getElementById('state_div')) === null || _a === void 0 ? void 0 : _a.classList.remove('hidden');\r\n                this.kycForm.setSteps(5);\r\n                this.setRequired('state');\r\n            }\r\n            else {\r\n                this.kycForm.setSteps(6);\r\n                this.removeRequired('state');\r\n                (_b = document.getElementById('state_div')) === null || _b === void 0 ? void 0 : _b.classList.add('hidden');\r\n            }\r\n        });\r\n        let showIdentityButton = document.getElementById('contact_next');\r\n        if (showIdentityButton) {\r\n            showIdentityButton.addEventListener('click', (evt) => {\r\n                if (!this.validateRequiredFields('.kycContact'))\r\n                    return;\r\n                this.kycForm.kycIdentity.show();\r\n            });\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycIdentity.html\n// Module\nvar KycIdentity_code = \"<fieldset class=\\\"kycIdentity hidden\\\" data-form=\\\"1\\\">\\r\\n    <div>\\r\\n        <label for=\\\"given_name\\\">Legal First name</label>\\r\\n        <input required id=\\\"given_name\\\" name=\\\"given_name\\\"\\r\\n               placeholder=\\\"Ron\\\"\\r\\n               value=\\\"\\\" autocomplete=\\\"given-name\\\">\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"middle_name\\\">Legal Middle name</label>\\r\\n        <input id=\\\"middle_name\\\" name=\\\"middle_name\\\"\\r\\n               placeholder=\\\"\\\"\\r\\n               value=\\\"\\\" autocomplete=\\\"additional-name\\\">\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"family_name\\\">Legal Last name</label>\\r\\n        <input required id=\\\"family_name\\\" name=\\\"family_name\\\"\\r\\n               placeholder=\\\"Swanson\\\"\\r\\n               value=\\\"\\\" autocomplete=\\\"family-name\\\">\\r\\n    </div>\\r\\n    {{#unless edit}}\\r\\n    <div>\\r\\n        <label for=\\\"date_of_birth\\\">Date of birth</label>\\r\\n        <input type=\\\"date\\\" required id=\\\"date_of_birth\\\" name=\\\"date_of_birth\\\"\\r\\n               placeholder=\\\"1978-11-24\\\" pattern=\\\"\\\\d{4}-\\\\d{2}-\\\\d{2}\\\" value=\\\"\\\" autocomplete=\\\"bday\\\">\\r\\n    </div>\\r\\n\\r\\n    <div id=\\\"citizen_of_usa_question\\\" class=\\\"hidden\\\">\\r\\n        <label for=\\\"citizen_yes\\\">Are you a citizen of the United States?</label>\\r\\n        <fieldset>\\r\\n            <label>\\r\\n                <input type=\\\"radio\\\" id=\\\"citizen_yes\\\"\\r\\n                       name=\\\"citizen\\\" value=\\\"1\\\"> Yes\\r\\n            </label>\\r\\n            <label>\\r\\n                <input type=\\\"radio\\\" id=\\\"citizen_no\\\"\\r\\n                       name=\\\"citizen\\\" value=\\\"0\\\"> No\\r\\n            </label>\\r\\n            <fieldset id=\\\"citizen_no_type_options\\\" class=\\\"hidden\\\">\\r\\n                <label>\\r\\n                    <input type=\\\"radio\\\" name=\\\"permanent_resident\\\" id=\\\"citizen_no_type_options_1\\\" value=\\\"1\\\"/> Green Card\\r\\n                    / Permanent Resident\\r\\n                </label>\\r\\n                <label><input type=\\\"radio\\\" name=\\\"permanent_resident\\\" id=\\\"citizen_no_type_options_2\\\" value=\\\"0\\\"/>\\r\\n                    Visa</label>\\r\\n            </fieldset>\\r\\n        </fieldset>\\r\\n    </div>\\r\\n    <div id=\\\"tax_id_type_options\\\">\\r\\n        <label for=\\\"tax_id_type\\\">Tax Id Type</label>\\r\\n        <select required id=\\\"tax_id_type\\\" name=\\\"tax_id_type\\\" placeholder=\\\"USA_SSN\\\">\\r\\n            <option value=\\\"USA_SSN\\\"></option>\\r\\n            <option value=\\\"ARG_AR_CUIT\\\">Argentina CUIT</option>\\r\\n            <option value=\\\"AUS_TFN\\\">Australian Tax File Number</option>\\r\\n            <option value=\\\"AUS_ABN\\\">Australian Business Number</option>\\r\\n            <option value=\\\"BOL_NIT\\\">Bolivia NIT</option>\\r\\n            <option value=\\\"BRA_CPF\\\">Brazil CPF</option>\\r\\n            <option value=\\\"CHL_RUT\\\">Chile RUT</option>\\r\\n            <option value=\\\"COL_NIT\\\">Colombia NIT</option>\\r\\n            <option value=\\\"CRI_NITE\\\">Costa Rica NITE</option>\\r\\n            <option value=\\\"DEU_TAX_ID\\\">Germany Tax ID (Identifikationsnummer)</option>\\r\\n            <option value=\\\"DOM_RNC\\\">Dominican Republic RNC</option>\\r\\n            <option value=\\\"ECU_RUC\\\">Ecuador RUC</option>\\r\\n            <option value=\\\"FRA_SPI\\\">France SPI (Reference Tax Number)</option>\\r\\n            <option value=\\\"GBR_UTR\\\">UK UTR (Unique Taxpayer Reference)</option>\\r\\n            <option value=\\\"GBR_NINO\\\">UK NINO (National Insurance Number)</option>\\r\\n            <option value=\\\"GTM_NIT\\\">Guatemala NIT</option>\\r\\n            <option value=\\\"HND_RTN\\\">Honduras RTN</option>\\r\\n            <option value=\\\"HUN_TIN\\\">Hungary TIN Number</option>\\r\\n            <option value=\\\"IDN_KTP\\\">Indonesia KTP</option>\\r\\n            <option value=\\\"IND_PAN\\\">India PAN Number</option>\\r\\n            <option value=\\\"ISR_TAX_ID\\\">Israel Tax ID (Teudat Zehut)</option>\\r\\n            <option value=\\\"ITA_TAX_ID\\\">Italy Tax ID (Codice Fiscale)</option>\\r\\n            <option value=\\\"JPN_TAX_ID\\\">Japan Tax ID (Koijin Bango)</option>\\r\\n            <option value=\\\"MEX_RFC\\\">Mexico RFC</option>\\r\\n            <option value=\\\"NIC_RUC\\\">Nicaragua RUC</option>\\r\\n            <option value=\\\"NLD_TIN\\\">Netherlands TIN Number</option>\\r\\n            <option value=\\\"PAN_RUC\\\">Panama RUC</option>\\r\\n            <option value=\\\"PER_RUC\\\">Peru RUC</option>\\r\\n            <option value=\\\"PRY_RUC\\\">Paraguay RUC</option>\\r\\n            <option value=\\\"SGP_NRIC\\\">Singapore NRIC</option>\\r\\n            <option value=\\\"SGP_FIN\\\">Singapore FIN</option>\\r\\n            <option value=\\\"SGP_ASGD\\\">Singapore ASGD</option>\\r\\n            <option value=\\\"SGP_ITR\\\">Singapore ITR</option>\\r\\n            <option value=\\\"SLV_NIT\\\">El Salvador NIT</option>\\r\\n            <option value=\\\"SWE_TAX_ID\\\">Sweden Tax ID (Personnummer)</option>\\r\\n            <option value=\\\"URY_RUT\\\">Uruguay RUT</option>\\r\\n            <option value=\\\"VEN_RIF\\\">Venezuela RIF</option>\\r\\n            <option value=\\\"NOT_SPECIFIED\\\">Other Tax IDs</option>\\r\\n        </select>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label id=\\\"tax_id_label\\\" for=\\\"tax_id\\\">Tax Id (SSN)</label>\\r\\n        <input required id=\\\"tax_id\\\" name=\\\"tax_id\\\"\\r\\n               placeholder=\\\"666-55-4321\\\"\\r\\n               value=\\\"\\\">\\r\\n    </div>\\r\\n    <div id=\\\"country_of_birth_option\\\">\\r\\n        <label for=\\\"country_of_birth\\\">Country of birth</label>\\r\\n        <select id=\\\"country_of_birth\\\" name=\\\"country_of_birth\\\">\\r\\n            {{#each countries}}\\r\\n            <option value=\\\"{{code}}\\\">{{name}}</option>\\r\\n            {{/each}}\\r\\n        </select>\\r\\n    </div>\\r\\n    <div id=\\\"country_of_citizenship_option\\\">\\r\\n        <label for=\\\"country_of_citizenship\\\">Country of citizenship</label>\\r\\n        <select required id=\\\"country_of_citizenship\\\" name=\\\"country_of_citizenship\\\">\\r\\n            <option value=\\\"\\\"></option>\\r\\n            {{#each countries}}\\r\\n            <option value=\\\"{{code}}\\\">{{name}}</option>\\r\\n            {{/each}}\\r\\n        </select>\\r\\n    </div>\\r\\n    <div id=\\\"visa_type_option\\\" class=\\\"hidden\\\">\\r\\n        <div>\\r\\n            <label for=\\\"visa_type\\\">Visa type - <a\\r\\n                    href=\\\"https://travel.state.gov/content/travel/en/us-visas/visa-information-resources/all-visa-categories.html\\\"\\r\\n                    target=\\\"_blank\\\">Visa\\r\\n                information</a></label>\\r\\n            <select id=\\\"visa_type\\\" name=\\\"visa_type\\\">\\r\\n                <option value=\\\"\\\"></option>\\r\\n                <option value=\\\"B1\\\" selected>USA Visa Category B-1</option>\\r\\n                <option value=\\\"B2\\\">USA Visa Category B-2</option>\\r\\n                <option value=\\\"DACA\\\">USA Visa Category DACA</option>\\r\\n                <option value=\\\"E1\\\">USA Visa Category E-1</option>\\r\\n                <option value=\\\"E2\\\">USA Visa Category E-2</option>\\r\\n                <option value=\\\"E3\\\">USA Visa Category E-3</option>\\r\\n                <option value=\\\"F1\\\">USA Visa Category F-1</option>\\r\\n                <option value=\\\"G4\\\">USA Visa Category G-4</option>\\r\\n                <option value=\\\"H1B\\\">USA Visa Category H-1B</option>\\r\\n                <option value=\\\"J1\\\">USA Visa Category J-1</option>\\r\\n                <option value=\\\"L1\\\">USA Visa Category L-1</option>\\r\\n                <option value=\\\"OTHER\\\">Any other USA Visa Category</option>\\r\\n                <option value=\\\"O1\\\">USA Visa Category O-1</option>\\r\\n                <option value=\\\"TN1\\\">USA Visa Category TN-1</option>\\r\\n            </select>\\r\\n        </div>\\r\\n        <div id=\\\"visa_expiration_date_option\\\">\\r\\n            <label for=\\\"visa_expiration_date\\\">Visa expiration date</label>\\r\\n            <input type=\\\"date\\\" id=\\\"visa_expiration_date\\\"\\r\\n                   name=\\\"visa_expiration_date\\\" placeholder=\\\"2028-05-01\\\" value=\\\"\\\">\\r\\n        </div>\\r\\n        <div id=\\\"date_of_departure_from_usa_option\\\">\\r\\n            <label for=\\\"date_of_departure_from_usa\\\">Date of departure from USA</label>\\r\\n            <input type=\\\"date\\\" id=\\\"date_of_departure_from_usa\\\"\\r\\n                   name=\\\"date_of_departure_from_usa\\\" placeholder=\\\"2028-05-01\\\" value=\\\"\\\">\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"annual_income\\\">Annual Household Income</label>\\r\\n        <div class=\\\"explain\\\">\\r\\n            Annual household income includes income from sources such as employment, alimony, social security,\\r\\n            investment income, etc.\\r\\n        </div>\\r\\n        <select name=\\\"annual_income\\\" id=\\\"annual_income\\\">\\r\\n            <option value=\\\"\\\"></option>\\r\\n            <option value=\\\"1\\\">0 - $20,000</option>\\r\\n            <option value=\\\"2\\\">$20,000 - $49,999</option>\\r\\n            <option value=\\\"3\\\">$50,000 - $99,999</option>\\r\\n            <option value=\\\"4\\\">$100,000 - $499,999</option>\\r\\n            <option value=\\\"5\\\">$500,000 - $999,999</option>\\r\\n            <option value=\\\"6\\\">$1,000,000 - $9,999,999</option>\\r\\n        </select>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"liquid_net_worth\\\">Liquid Assets</label>\\r\\n        <div class=\\\"explain\\\">Liquid assets is your net worth minus assets that cannot be\\r\\n            converted quickly and easily into cash, such as real estate, business equity,\\r\\n            personal property and automobiles, expected inheritances, assets earmarked for\\r\\n            other purposes, and investments or accounts subject to substantial penalties\\r\\n            if they were sold or if assets were withdrawn from them.\\r\\n        </div>\\r\\n        <select name=\\\"liquid_net_worth\\\" required id=\\\"liquid_net_worth\\\">\\r\\n            <option value=\\\"\\\"></option>\\r\\n            <option value=\\\"1\\\">0 - $20,000</option>\\r\\n            <option value=\\\"2\\\">$20,000 - $49,999</option>\\r\\n            <option value=\\\"3\\\">$50,000 - $99,999</option>\\r\\n            <option value=\\\"4\\\">$100,000 - $499,999</option>\\r\\n            <option value=\\\"5\\\">$500,000 - $999,999</option>\\r\\n            <option value=\\\"1\\\">$1,000,000 - $9,999,999</option>\\r\\n        </select>\\r\\n    </div>\\r\\n\\r\\n    <div>\\r\\n        <label for=\\\"funding_source\\\">Funding source</label>\\r\\n        <select required id=\\\"funding_source\\\" name=\\\"funding_source\\\"\\r\\n                multiple size=\\\"4\\\" aria-label=\\\"size 3 select\\\">\\r\\n            <option value=\\\"employment_income\\\">Employment income</option>\\r\\n            <option value=\\\"investments\\\">Investments</option>\\r\\n            <option value=\\\"inheritance\\\">Inheritance</option>\\r\\n            <option value=\\\"business_income\\\">Business income</option>\\r\\n            <option value=\\\"savings\\\">Savings</option>\\r\\n            <option value=\\\"family\\\">Family</option>\\r\\n        </select>\\r\\n    </div>\\r\\n    {{/unless}}\\r\\n    <div class=\\\"grid buttons\\\">\\r\\n        <button type=\\\"button\\\" id=\\\"identity_prev\\\">Previous: Contact</button>\\r\\n        <button type=\\\"button\\\" id=\\\"identity_next\\\">Next: Trusted contacts</button>\\r\\n    </div>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const Kyc_KycIdentity = (KycIdentity_code);\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycIdentity.ts\n\r\n\r\n\r\n\r\nclass KycIdentity extends KycBase {\r\n    constructor(kycForm) {\r\n        super(kycForm);\r\n        this.edit = false;\r\n    }\r\n    render(edit = false) {\r\n        this.edit = edit;\r\n        let template = Handlebars.compile(Kyc_KycIdentity);\r\n        return template({ edit: edit, countries: CountryHelper.Countries });\r\n    }\r\n    show() {\r\n        if (this.kycForm.kycContact.usTaxResidence) {\r\n            this.showElement('citizen_of_usa_question');\r\n            this.hideElement('tax_id_type_options');\r\n            this.setLabel('tax_id_label', 'SSN');\r\n        }\r\n        else {\r\n            this.hideElement('citizen_of_usa_question');\r\n            this.setLabel('tax_id_label', 'National Tax Id (SSN)');\r\n            this.showElement('tax_id_type_options');\r\n        }\r\n        this.showFieldset('.kycIdentity', 'Identity');\r\n        this.showElement('country_of_citizenship_option');\r\n        let country_of_citizenship = document.getElementById('country_of_citizenship');\r\n        if (country_of_citizenship) {\r\n            country_of_citizenship.options[1].disabled = false;\r\n        }\r\n    }\r\n    bindEvents() {\r\n        this.bind('#citizen_yes', 'click', (evt) => {\r\n            let input = evt.target;\r\n            if (input.checked) {\r\n                let taxIdType = document.getElementById('tax_id_type');\r\n                if (taxIdType)\r\n                    taxIdType.value = 'USA_SSN';\r\n                let country_of_citizenship = document.getElementById('country_of_citizenship');\r\n                country_of_citizenship.options[1].disabled = false;\r\n                country_of_citizenship.value = 'USA';\r\n                this.hideElement('citizen_no_type_options');\r\n                this.hideElement('visa_type_option');\r\n                this.hideElement('country_of_citizenship_option');\r\n                this.removeRequired('country_of_birth');\r\n                this.removeRequired('visa_type');\r\n                this.removeRequired('visa_expiration_date');\r\n                this.removeRequired('date_of_departure_from_usa');\r\n                document.getElementById('tax_id_label').innerHTML = 'SSN';\r\n                this.hideCitizenErrorMessage();\r\n            }\r\n        });\r\n        this.bind('#citizen_no', 'click', (evt) => {\r\n            let input = evt.target;\r\n            if (input.checked) {\r\n                this.showElement('citizen_no_type_options');\r\n                this.showElement('country_of_citizenship_option');\r\n                this.setRequired('country_of_birth');\r\n                document.getElementById('tax_id_label').innerHTML = 'SSN';\r\n                let country_of_citizenship = document.getElementById('country_of_citizenship');\r\n                country_of_citizenship.options[0].selected = true;\r\n                country_of_citizenship.options[1].disabled = true;\r\n                this.hideCitizenErrorMessage();\r\n            }\r\n        });\r\n        this.bind('#citizen_no_type_options_1', 'click', (evt) => {\r\n            let input = evt.target;\r\n            if (input.checked) {\r\n                this.showElement('country_of_citizenship_option');\r\n                this.hideElement('visa_type_option');\r\n                this.setRequired('country_of_birth');\r\n                this.removeRequired('visa_type');\r\n                this.removeRequired('visa_expiration_date');\r\n                this.removeRequired('date_of_departure_from_usa');\r\n            }\r\n        });\r\n        this.bind('#citizen_no_type_options_2', 'click', (evt) => {\r\n            let input = evt.target;\r\n            if (input.checked) {\r\n                this.showElement('visa_type_option');\r\n                this.showElement('country_of_citizenship_option');\r\n                this.setRequired('country_of_birth');\r\n                this.setRequired('country_of_citizenship');\r\n                this.setRequired('visa_type');\r\n                this.setRequired('visa_expiration_date');\r\n                this.setRequired('date_of_departure_from_usa');\r\n            }\r\n        });\r\n        this.bind('#visa_type', 'change', (evt) => {\r\n            let input = evt.target;\r\n            if (input.value == 'B1' || input.value == 'B2') {\r\n                this.showElement('date_of_departure_from_usa_option');\r\n            }\r\n            else {\r\n                this.hideElement('date_of_departure_from_usa_option');\r\n            }\r\n        });\r\n        this.bindButtons();\r\n    }\r\n    hideCitizenErrorMessage() {\r\n        document.getElementById('citizen_yes').removeAttribute('aria-invalid');\r\n        let errorMessage = document.getElementById('input_error_citizen_yes');\r\n        if (errorMessage)\r\n            errorMessage.remove();\r\n    }\r\n    bindButtons() {\r\n        let showContactButton = document.getElementById('identity_prev');\r\n        showContactButton === null || showContactButton === void 0 ? void 0 : showContactButton.addEventListener('click', (evt) => {\r\n            this.kycForm.kycContact.show();\r\n        });\r\n        let showDisclosuresButton = document.getElementById('identity_next');\r\n        showDisclosuresButton === null || showDisclosuresButton === void 0 ? void 0 : showDisclosuresButton.addEventListener('click', (evt) => {\r\n            if (!this.validateInputs())\r\n                return;\r\n            if (!this.validateRequiredFields('.kycIdentity'))\r\n                return;\r\n            this.kycForm.kycTrustedContact.show();\r\n        });\r\n    }\r\n    validateInputs() {\r\n        if (this.edit)\r\n            return true;\r\n        let citizen_yes = document.getElementById('citizen_yes');\r\n        let citizen_no = document.getElementById('citizen_no');\r\n        if (!this.kycForm.kycContact.usTaxResidence) {\r\n            citizen_yes.checked = false;\r\n            citizen_no.checked = false;\r\n            return true;\r\n        }\r\n        if (!citizen_yes.checked && !citizen_no.checked) {\r\n            let obj = {\r\n                message: 'You must select either option',\r\n                inputName: 'citizen_yes',\r\n                labelText: document.querySelector('label[for=citizen_yes]').innerHTML\r\n            };\r\n            let kycValidationError = new KycValidatorError(obj, this.kycForm);\r\n            kycValidationError.handle();\r\n            return false;\r\n        }\r\n        let greenCardOption = document.getElementById('citizen_no_type_options_1');\r\n        let visaOption = document.getElementById('citizen_no_type_options_2');\r\n        if (citizen_no.checked && !greenCardOption.checked && !visaOption.checked) {\r\n            let obj = {\r\n                message: 'You must select either option, \"Green Card / Permanent Resident\" or \"Visa\"',\r\n                inputName: 'citizen_no',\r\n                labelText: ''\r\n            };\r\n            let kycValidationError = new KycValidatorError(obj, this.kycForm);\r\n            kycValidationError.handle();\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycDisclosures.html\n// Module\nvar KycDisclosures_code = \"<fieldset class=\\\"kycDisclosures hidden\\\" data-form=\\\"1\\\">\\r\\n    {{#unless edit}}\\r\\n    <div>\\r\\n        <label for=\\\"employment_status\\\">Employment status</label>\\r\\n        <select id=\\\"employment_status\\\" required name=\\\"employment_status\\\">\\r\\n            <option value=\\\"\\\"></option>\\r\\n            <option value=\\\"employed\\\">Employed</option>\\r\\n            <option value=\\\"unemployed\\\">Unemployed</option>\\r\\n            <option value=\\\"retired\\\">Retired</option>\\r\\n            <option value=\\\"student\\\">Student</option>\\r\\n        </select>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"employer_name\\\">Employer name</label>\\r\\n        <input name=\\\"employer_name\\\" id=\\\"employer_name\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"employer_address\\\">Employer address</label>\\r\\n        <input name=\\\"employer_address\\\" id=\\\"employer_address\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"employment_position\\\">Occupation / Job title</label>\\r\\n        <input name=\\\"employment_position\\\" id=\\\"employment_position\\\" autocomplete=\\\"organization-title\\\"/>\\r\\n    </div>\\r\\n    {{/unless}}\\r\\n    <div class=\\\"disclosure_selections\\\">\\r\\n        Do any of the following apply to you or a member of your immediate family?\\r\\n        <div class=\\\"grid\\\">\\r\\n            <div>\\r\\n                <label for=\\\"is_affiliated_exchange_or_finra\\\">\\r\\n                    <input type=\\\"checkbox\\\" id=\\\"is_affiliated_exchange_or_finra\\\" name=\\\"is_affiliated_exchange_or_finra\\\"\\r\\n                           role=\\\"switch\\\">\\r\\n                </label>\\r\\n            </div>\\r\\n            <div>\\r\\n                Affiliated or work with a US registered broker-dealer or\\r\\n                FINRA.\\r\\n                <small class=\\\"explain\\\">Are you or an immediate family member affiliated with or employed by a stock\\r\\n                    exchange, regulatory body, member firm of an exchange, FINRA or a municipal securities\\r\\n                    broker-dealer?</small>\\r\\n\\r\\n                <div id=\\\"is_affiliated_exchange_or_finra_extra\\\"></div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"grid\\\">\\r\\n            <div>\\r\\n                <label for=\\\"is_control_person\\\">\\r\\n                    <input type=\\\"checkbox\\\" id=\\\"is_control_person\\\" name=\\\"is_control_person\\\" role=\\\"switch\\\">\\r\\n                </label>\\r\\n            </div>\\r\\n            <div>\\r\\n\\r\\n                Senior executive at or a 10% or greater shareholder of a publicly traded company.\\r\\n                <small class=\\\"explain\\\">Are you or an immediate family member an officer or 10% or greater shareholder of\\r\\n                    a publicly traded company, subject to the US Securities Exchange Act 1934?</small>\\r\\n                <div id=\\\"is_control_person_extra\\\"></div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"grid\\\">\\r\\n            <div>\\r\\n                <label for=\\\"is_politically_exposed\\\">\\r\\n                    <input type=\\\"checkbox\\\" id=\\\"is_politically_exposed\\\" name=\\\"is_politically_exposed\\\" role=\\\"switch\\\">\\r\\n                </label>\\r\\n            </div>\\r\\n            <div>\\r\\n                I am a senior political figure.\\r\\n                <small class=\\\"explain\\\">Are you currently or formerly a Politically Exposed Person or Public Official\\r\\n                    (PEP)? <a href=\\\"https://www.google.com/search?q=%E2%80%9CPolitically+Exposed+Person%E2%80%9D+(PEP)\\\"\\r\\n                              target=\\\"_blank\\\">What is PEP?</a> </a></small>\\r\\n                <div id=\\\"is_politically_exposed_extra\\\"></div>\\r\\n            </div>\\r\\n            </label>\\r\\n        </div>\\r\\n        <div class=\\\"grid\\\">\\r\\n            <div>\\r\\n                <label for=\\\"immediate_family_exposed\\\">\\r\\n                    <input type=\\\"checkbox\\\" id=\\\"immediate_family_exposed\\\" name=\\\"immediate_family_exposed\\\" role=\\\"switch\\\">\\r\\n                </label>\\r\\n            </div>\\r\\n            <div>\\r\\n                I am a family member or relative of a senior political figure.\\r\\n                <small class=\\\"explain\\\">Are you an immediate family member currently or formerly a Politically Exposed\\r\\n                    Person or Public Official (PEP)? <a\\r\\n                            href=\\\"https://www.google.com/search?q=%E2%80%9CPolitically+Exposed+Person%E2%80%9D+(PEP)\\\"\\r\\n                            target=\\\"_blank\\\">What is PEP?</a></small>\\r\\n                <div id=\\\"immediate_family_exposed_extra\\\"></div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"grid\\\">\\r\\n            <div>\\r\\n                <label for=\\\"none_above\\\">\\r\\n                    <input type=\\\"checkbox\\\" id=\\\"none_above\\\" name=\\\"none_above\\\" role=\\\"switch\\\"></label>\\r\\n            </div>\\r\\n            <div>\\r\\n                None of the above apply to me or my family.\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"input_error\\\" id=\\\"none_above_error\\\"></div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"grid buttons\\\">\\r\\n        <button type=\\\"button\\\" id=\\\"disclosures_prev\\\">Previous: Trusted contact</button>\\r\\n        <button type=\\\"button\\\" id=\\\"disclosures_next\\\">Next: Agreements</button>\\r\\n    </div>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const Kyc_KycDisclosures = (KycDisclosures_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycAffiliateOrControlled.html\n// Module\nvar KycAffiliateOrControlled_code = \"<fieldset id=\\\"affiliate_or_controlled\\\">\\r\\n    <div>You need to fill in the following information</div>\\r\\n    <div>\\r\\n        <label for=\\\"company_name\\\">Company name</label>\\r\\n        <input name=\\\"company_name\\\" required id=\\\"company_name\\\" autocomplete=\\\"organization\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"company_street_address\\\">Company street address</label>\\r\\n        <input name=\\\"company_street_address\\\" required id=\\\"company_street_address\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"company_city\\\">Company city</label>\\r\\n        <input name=\\\"company_city\\\" required id=\\\"company_city\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"company_state\\\">Company state</label>\\r\\n        <input name=\\\"company_state\\\" required id=\\\"company_state\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"company_country\\\">Company country</label>\\r\\n        <select required id=\\\"company_country\\\" required name=\\\"company_country\\\">\\r\\n            {{#each countries}}\\r\\n            <option value=\\\"{{code}}\\\">{{name}}</option>\\r\\n            {{/each}}\\r\\n        </select>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"company_compliance_email\\\">Company compliance officer email</label>\\r\\n        <input name=\\\"company_compliance_email\\\" required id=\\\"company_compliance_email\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <div class=\\\"explain\\\">\\r\\n            In accordance with applicable FINRA rules, user will need to obtain a letter written\\r\\n            and signed by a compliance officer on company letterhead explicitly granting permission for\\r\\n            the applicant to carry the account and explicitly stating whether or not the firm requires\\r\\n            access to duplicate account statements and/or trade confirmations.\\r\\n\\r\\n            If the firm would like online access your duplicate account statements and/or trade confirmations,\\r\\n            include in the letter the applicant's full name and the following information for the interested\\r\\n            party: First and last name, title, email address, telephone number.\\r\\n\\r\\n        </div>\\r\\n        {{{fileUpload \\\"account_approval_letter\\\" \\\"Account approval letter\\\"}}}\\r\\n\\r\\n    </div>\\r\\n</fieldset>\\r\\n\";\n// Exports\n/* harmony default export */ const Kyc_KycAffiliateOrControlled = (KycAffiliateOrControlled_code);\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycAffiliateOrControlled.ts\n\r\n\r\n\r\nclass KycAffiliateOrControlled extends KycBase {\r\n    constructor(kycForm) {\r\n        super(kycForm);\r\n    }\r\n    render() {\r\n        let kycAffiliateOrControlledTemplate = Handlebars.compile(Kyc_KycAffiliateOrControlled);\r\n        return kycAffiliateOrControlledTemplate({ countries: CountryHelper.Countries });\r\n    }\r\n    bindEvents() {\r\n        this.bindFileUploads();\r\n        let company_country = document.getElementById('company_country');\r\n        company_country === null || company_country === void 0 ? void 0 : company_country.addEventListener('change', (evt) => {\r\n            let select = evt.target;\r\n            if (select.value === 'USA') {\r\n                this.setRequired('company_state');\r\n            }\r\n            else {\r\n                this.removeRequired('company_state');\r\n            }\r\n        });\r\n    }\r\n    validate() {\r\n        let company_name = document.getElementById('company_name');\r\n        if (!company_name)\r\n            return true;\r\n        return this.validateRequiredFields('#affiliate_or_controlled');\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycImmediateFamily.html\n// Module\nvar KycImmediateFamily_code = \"<fieldset id=\\\"immediate_family\\\">\\r\\n    <div>Since you chose that your immediate family member, you need to fill in the following information</div>\\r\\n    <div>\\r\\n        <label for=\\\"disclosure_given_name\\\">Given name of political person</label>\\r\\n        <input name=\\\"disclosure_given_name\\\" id=\\\"disclosure_given_name\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"disclosure_family_name\\\">Family name of political person</label>\\r\\n        <input name=\\\"disclosure_family_name\\\" id=\\\"disclosure_family_name\\\"/>\\r\\n    </div>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const Kyc_KycImmediateFamily = (KycImmediateFamily_code);\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycImmediateFamily.ts\n\r\n\r\nclass KycImmediateFamily extends KycBase {\r\n    constructor(kycForm) {\r\n        super(kycForm);\r\n    }\r\n    render() {\r\n        let kycImmediateFamilyTemplate = Handlebars.compile(Kyc_KycImmediateFamily);\r\n        return kycImmediateFamilyTemplate({});\r\n    }\r\n    bindEvents() {\r\n    }\r\n    validate() {\r\n        let disclosure_given_name = document.getElementById('disclosure_given_name');\r\n        if (!disclosure_given_name)\r\n            return true;\r\n        return this.validateRequiredFields('#immediate_family');\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycDisclosures.ts\n\r\n\r\n\r\n\r\nclass KycDisclosures extends KycBase {\r\n    constructor(kycForm) {\r\n        super(kycForm);\r\n        this.kycAffiliatedOrControlled = new KycAffiliateOrControlled(this.kycForm);\r\n        this.kycImmediateFamily = new KycImmediateFamily(this.kycForm);\r\n    }\r\n    render(edit = false) {\r\n        let template = Handlebars.compile(Kyc_KycDisclosures);\r\n        return template({ edit: edit });\r\n    }\r\n    show() {\r\n        if (this.kycForm.steps == 5) {\r\n            document.getElementById('disclosures_next').innerText = 'Next: Agreements';\r\n        }\r\n        else {\r\n            document.getElementById('disclosures_next').innerText = 'Next: Upload documents';\r\n        }\r\n        this.showFieldset('.kycDisclosures', 'Disclosures');\r\n    }\r\n    bindEvents() {\r\n        let is_affiliated_exchange_or_finra = document.getElementById('is_affiliated_exchange_or_finra');\r\n        is_affiliated_exchange_or_finra === null || is_affiliated_exchange_or_finra === void 0 ? void 0 : is_affiliated_exchange_or_finra.addEventListener('click', (evt) => {\r\n            this.loadAffiliatedOrControlComponent('is_affiliated_exchange_or_finra');\r\n        });\r\n        let is_control_person = document.getElementById('is_control_person');\r\n        is_control_person === null || is_control_person === void 0 ? void 0 : is_control_person.addEventListener('click', (evt) => {\r\n            this.loadAffiliatedOrControlComponent('is_control_person');\r\n        });\r\n        let immediate_family_exposed = document.getElementById('immediate_family_exposed');\r\n        immediate_family_exposed === null || immediate_family_exposed === void 0 ? void 0 : immediate_family_exposed.addEventListener('click', (evt) => {\r\n            this.loadPep('immediate_family_exposed');\r\n        });\r\n        let is_politically_exposed = document.getElementById('is_politically_exposed');\r\n        is_politically_exposed === null || is_politically_exposed === void 0 ? void 0 : is_politically_exposed.addEventListener('click', (evt) => {\r\n            this.uncheck('immediate_family_exposed');\r\n        });\r\n        let none_above = document.getElementById('none_above');\r\n        none_above === null || none_above === void 0 ? void 0 : none_above.addEventListener('click', (evt) => {\r\n            this.removeMissingInfo('none_above_error');\r\n            none_above.removeAttribute('aria-invalid');\r\n        });\r\n        let prev = document.getElementById('disclosures_prev');\r\n        prev === null || prev === void 0 ? void 0 : prev.addEventListener('click', (evt) => {\r\n            this.kycForm.kycTrustedContact.show();\r\n        });\r\n        let next = document.getElementById('disclosures_next');\r\n        next === null || next === void 0 ? void 0 : next.addEventListener('click', (evt) => {\r\n            if (!this.validateFields())\r\n                return;\r\n            if (this.kycForm.steps == 5) {\r\n                this.kycForm.kycAccountAgreement.show();\r\n            }\r\n            else {\r\n                this.kycForm.kycUpload.show();\r\n            }\r\n        });\r\n    }\r\n    loadAffiliatedOrControlComponent(elementId) {\r\n        if (elementId == 'is_affiliated_exchange_or_finra') {\r\n            this.uncheck('is_control_person');\r\n        }\r\n        else {\r\n            this.uncheck('is_affiliated_exchange_or_finra');\r\n        }\r\n        let element = document.getElementById(elementId);\r\n        let extra = document.getElementById(elementId + '_extra');\r\n        if (!extra)\r\n            return;\r\n        if (element.checked) {\r\n            extra.innerHTML = this.kycAffiliatedOrControlled.render();\r\n            this.kycAffiliatedOrControlled.bindEvents();\r\n        }\r\n        else {\r\n            extra.innerHTML = '';\r\n        }\r\n    }\r\n    loadPep(elementId) {\r\n        if (elementId == 'immediate_family_exposed') {\r\n            this.uncheck('is_politically_exposed');\r\n        }\r\n        else {\r\n            this.uncheck('immediate_family_exposed');\r\n        }\r\n        let element = document.getElementById(elementId);\r\n        let extra = document.getElementById(elementId + '_extra');\r\n        if (!extra)\r\n            return;\r\n        if (element.checked) {\r\n            extra.innerHTML = this.kycImmediateFamily.render();\r\n            this.kycImmediateFamily.bindEvents();\r\n        }\r\n        else {\r\n            extra.innerHTML = '';\r\n        }\r\n    }\r\n    uncheck(elementId) {\r\n        let element = document.getElementById(elementId);\r\n        element.checked = false;\r\n        let extra = document.getElementById(elementId + '_extra');\r\n        extra.innerHTML = '';\r\n    }\r\n    validateFields() {\r\n        if (!this.validateRequiredFields('.kycDisclosures'))\r\n            return false;\r\n        if (!this.kycImmediateFamily.validate())\r\n            return false;\r\n        if (!this.kycAffiliatedOrControlled.validate())\r\n            return false;\r\n        let is_affiliated_exchange_or_finra = document.getElementById('is_affiliated_exchange_or_finra');\r\n        let is_control_person = document.getElementById('is_control_person');\r\n        let is_politically_exposed = document.getElementById('is_politically_exposed');\r\n        let immediate_family_exposed = document.getElementById('immediate_family_exposed');\r\n        let none_above = document.getElementById('none_above');\r\n        if (!none_above.checked && !is_affiliated_exchange_or_finra.checked && !is_control_person.checked\r\n            && !is_politically_exposed.checked && !immediate_family_exposed.checked) {\r\n            this.setMissingInfo('none_above_error', 'You must select, \"None of the above apply to me or my family.\" if nothing is selected', 'none_above');\r\n            return false;\r\n        }\r\n        if (none_above.checked && (is_affiliated_exchange_or_finra.checked || is_control_person.checked\r\n            || is_politically_exposed.checked || immediate_family_exposed.checked)) {\r\n            this.setMissingInfo('none_above_error', 'You cannot have \"None of the above apply to me or my family.\" selected and other options selected. Please select only one', 'none_above');\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycAccountAgreement.html\n// Module\nvar KycAccountAgreement_code = \"<fieldset class=\\\"kycAccountAgreement hidden\\\" data-form=\\\"1\\\">\\r\\n    <div class=\\\"kycAccountAgreementGrid\\\">\\r\\n        <div id=\\\"account_agreement_error\\\" class=\\\"input_error\\\"></div>\\r\\n        <div class=\\\"grid\\\">\\r\\n            <div>\\r\\n                <label for=\\\"account_agreement\\\">\\r\\n                    <input required type=\\\"checkbox\\\" name=\\\"account_agreement\\\" id=\\\"account_agreement\\\" value=\\\"1\\\"/>\\r\\n                </label>\\r\\n            </div>\\r\\n            <div>\\r\\n                <label for=\\\"account_agreement\\\">\\r\\n                    I agree to <a href=\\\"https://files.alpaca.markets/disclosures/library/AcctAppMarginAndCustAgmt.pdf\\\"\\r\\n                                  target=\\\"_blank\\\">Alpaca Customer Agreement</a>\\r\\n                </label>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div id=\\\"customer_agreement_error\\\" class=\\\"input_error\\\"></div>\\r\\n        <div class=\\\"grid\\\">\\r\\n            <div>\\r\\n                <label for=\\\"customer_agreement\\\">\\r\\n                    <input required type=\\\"checkbox\\\" name=\\\"customer_agreement\\\" id=\\\"customer_agreement\\\" value=\\\"1\\\"/>\\r\\n                </label>\\r\\n            </div>\\r\\n            <div>\\r\\n                <label for=\\\"customer_agreement\\\">\\r\\n                    Customer Agreement Acknowledgement</label>\\r\\n                <div class=\\\"explain\\\">\\r\\n                    I have read, understood, and agree to be bound by Alpaca Securities LLC and Liminal.market Inc.\\r\\n                    account\\r\\n                    terms,\\r\\n                    and all other terms, disclosures and disclaimers applicable to me, as referenced in the Alpaca\\r\\n                    Customer\\r\\n                    Agreement.\\r\\n                    I also acknowledge that the Alpaca Customer Agreement contains a pre-dispute arbitration clause\\r\\n                    in\\r\\n                    Section\\r\\n                    43.\\r\\n                </div>\\r\\n\\r\\n            </div>\\r\\n\\r\\n        </div>\\r\\n        <div id=\\\"digital_signature_error\\\" class=\\\"input_error\\\"></div>\\r\\n        <div class=\\\"grid\\\">\\r\\n            <div>\\r\\n                <label for=\\\"digital_signature\\\">\\r\\n                    <input required type=\\\"checkbox\\\" name=\\\"digital_signature\\\" id=\\\"digital_signature\\\" value=\\\"1\\\"/>\\r\\n                </label>\\r\\n            </div>\\r\\n            <div>\\r\\n                <label for=\\\"digital_signature\\\">\\r\\n                    Digital Signature Acknowledgement</label>\\r\\n                <div class=\\\"explain\\\">\\r\\n                    I understand I am signing this agreement electronically,\\r\\n                    and that my electronic signature will have the same effect as physically signing and returning\\r\\n                    the\\r\\n                    Application Agreement.\\r\\n                </div>\\r\\n\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"grid hidden\\\" id=\\\"w8disclosure_div\\\">\\r\\n            <div>\\r\\n                <label for=\\\"w8disclosure\\\">\\r\\n                    <input required type=\\\"checkbox\\\" name=\\\"w8disclosure\\\" id=\\\"w8disclosure\\\" value=\\\"1\\\"/>\\r\\n                </label>\\r\\n            </div>\\r\\n            <div><label for=\\\"w8disclosure\\\">\\r\\n                I certify that I am not a US citizen, US resident alien or other US person for US tax purposes,\\r\\n                and I am submitting the applicable Form W-8 BEN with this form to certify my foreign status and,\\r\\n                if applicable, claim tax treaty benefits. </label>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"grid buttons\\\">\\r\\n        <button type=\\\"button\\\" id=\\\"account_agreement_prev\\\">Previous: Upload documents</button>\\r\\n        <button type=\\\"submit\\\" id=\\\"submitKYC\\\">Confirm identity</button>\\r\\n    </div>\\r\\n    <div class=\\\"alert alert-danger\\\" id=\\\"kycError\\\" role=\\\"alert\\\"></div>\\r\\n</fieldset>\\r\\n\";\n// Exports\n/* harmony default export */ const Kyc_KycAccountAgreement = (KycAccountAgreement_code);\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycAccountAgreement.ts\nvar KycAccountAgreement_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass KycAccountAgreement extends KycBase {\r\n    constructor(kycForm) {\r\n        super(kycForm);\r\n    }\r\n    render(edit = false) {\r\n        let template = Handlebars.compile(Kyc_KycAccountAgreement);\r\n        return template({ edit: edit });\r\n    }\r\n    show() {\r\n        var _a, _b;\r\n        this.showFieldset('.kycAccountAgreement', 'Agreements');\r\n        if (this.kycForm.steps == 5) {\r\n            document.getElementById('account_agreement_prev').innerText = 'Previous: Disclosure';\r\n        }\r\n        else {\r\n            document.getElementById('account_agreement_prev').innerText = 'Previous: Upload documents';\r\n        }\r\n        if (this.kycForm.kycContact.usTaxResidence) {\r\n            (_a = document.getElementById('w8disclosure_div')) === null || _a === void 0 ? void 0 : _a.classList.add('hidden');\r\n        }\r\n        else {\r\n            (_b = document.getElementById('w8disclosure_div')) === null || _b === void 0 ? void 0 : _b.classList.remove('hidden');\r\n        }\r\n    }\r\n    bindEvents() {\r\n        let account_agreement_prev = document.getElementById('account_agreement_prev');\r\n        account_agreement_prev === null || account_agreement_prev === void 0 ? void 0 : account_agreement_prev.addEventListener('click', (evt) => {\r\n            if (this.kycForm.steps == 5) {\r\n                this.kycForm.kycDisclosures.show();\r\n            }\r\n            else {\r\n                this.kycForm.kycUpload.show();\r\n            }\r\n        });\r\n        this.bindSubmitKyc();\r\n    }\r\n    bindSubmitKyc(edit = false) {\r\n        let submitKYC = document.getElementById('submitKYC');\r\n        if (!submitKYC)\r\n            return;\r\n        submitKYC.addEventListener('click', (evt) => KycAccountAgreement_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            if (!edit && !this.validate())\r\n                return;\r\n            let account_agreement_prev = document.getElementById('account_agreement_prev');\r\n            //if (account_agreement_prev) account_agreement_prev.classList.add('hidden');\r\n            let liminal_market_modal_close = document.getElementById('liminal_market_modal_close');\r\n            // if (liminal_market_modal_close) liminal_market_modal_close.style.display = 'none';\r\n            let submitBtn = evt.target;\r\n            LoadingHelper.setLoading(submitBtn);\r\n            let params = FormHelper.getParams('#kyc_wizard_form');\r\n            let networkInfo = App.Network;\r\n            params.chainId = networkInfo.ChainId;\r\n            let kycService = new KYCService();\r\n            let result = yield kycService.saveKYCInfo(params)\r\n                .catch((reason) => {\r\n                if (account_agreement_prev)\r\n                    account_agreement_prev.classList.remove('hidden');\r\n                LoadingHelper.removeLoading();\r\n                if (reason.message) {\r\n                    let kycError = new KycValidatorError(JSON.parse(reason.message), this.kycForm);\r\n                    kycError.handle();\r\n                }\r\n                else {\r\n                    console.log(reason);\r\n                }\r\n            });\r\n            if (result) {\r\n                let ausdFund = new FakeAUSDFund();\r\n                ausdFund.showAUSDFakeFund();\r\n                ExecuteOrderButton.Instance.renderButton();\r\n            }\r\n            else {\r\n                if (account_agreement_prev)\r\n                    account_agreement_prev.classList.remove('hidden');\r\n                LoadingHelper.removeLoading();\r\n            }\r\n        }));\r\n    }\r\n    validate() {\r\n        let account_agreement = document.getElementById('account_agreement');\r\n        if (!(account_agreement === null || account_agreement === void 0 ? void 0 : account_agreement.checked)) {\r\n            this.setMissingInfo('account_agreement_error', 'You need to agree to agreements', 'account_agreement');\r\n            return false;\r\n        }\r\n        else {\r\n            this.removeMissingInfo('account_agreement_error', 'account_agreement');\r\n        }\r\n        let customer_agreement = document.getElementById('customer_agreement');\r\n        if (!(customer_agreement === null || customer_agreement === void 0 ? void 0 : customer_agreement.checked)) {\r\n            this.setMissingInfo('customer_agreement_error', 'You need to agree to customer agrement', 'customer_agreement');\r\n            return false;\r\n        }\r\n        else {\r\n            this.removeMissingInfo('customer_agreement_error', 'customer_agreement');\r\n        }\r\n        let digital_signature = document.getElementById('digital_signature');\r\n        if (!(digital_signature === null || digital_signature === void 0 ? void 0 : digital_signature.checked)) {\r\n            this.setMissingInfo('digital_signature_error', 'You need to sign', 'digital_signature');\r\n            return false;\r\n        }\r\n        else {\r\n            this.removeMissingInfo('digital_signature_error', 'digital_signature');\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycTrustedContact.html\n// Module\nvar KycTrustedContact_code = \"<fieldset class=\\\"kycTrustedContact hidden\\\" data-form=\\\"1\\\">\\r\\n    <div class=\\\"explain\\\">\\r\\n        A trusted contact is a person you authorize your financial firm to contact in limited circumstances,\\r\\n        such as if there is a concern about activity in your account and they have been unable to get in touch with you.\\r\\n        <br/><br/>\\r\\n        A trusted contact may be a family member, attorney, accountant or another third-party who you believe would\\r\\n        respect your privacy and know how to handle the responsibility.\\r\\n        The trusted person should be 18 years old or older.\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"trusted_first_name\\\">Legal first name of trusted contact</label>\\r\\n        <input id=\\\"trusted_first_name\\\" name=\\\"trusted_first_name\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"trusted_last_name\\\">Legal last name of trusted contact</label>\\r\\n        <input id=\\\"trusted_last_name\\\" name=\\\"trusted_last_name\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        If you fill in name, you are required to fill in one of the following, email, phone or address\\r\\n    </div>\\r\\n    <div class=\\\"input_error\\\" id=\\\"trusted_contact_missing_info\\\"></div>\\r\\n    <div>\\r\\n        <label for=\\\"trusted_email\\\">Email of trusted contact</label>\\r\\n        <input id=\\\"trusted_email\\\" type=\\\"email\\\" name=\\\"trusted_email\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"trusted_phone\\\">Phone of trusted contact</label>\\r\\n        <input id=\\\"trusted_phone\\\" type=\\\"tel\\\" name=\\\"trusted_phone\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"trusted_street_address\\\">Address of trusted contact</label>\\r\\n        <input id=\\\"trusted_street_address\\\" name=\\\"trusted_street_address\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"trusted_city\\\">City of trusted contact</label>\\r\\n        <input id=\\\"trusted_city\\\" name=\\\"trusted_city\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"trusted_state\\\">State of trusted contact</label>\\r\\n        <input id=\\\"trusted_state\\\" name=\\\"trusted_state\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"trusted_postal_code\\\">Postal code of trusted contact</label>\\r\\n        <input id=\\\"trusted_postal_code\\\" name=\\\"trusted_postal_code\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"trusted_country\\\">Country of trusted contact</label>\\r\\n        <select required id=\\\"trusted_country\\\" required name=\\\"trusted_country\\\">\\r\\n            <option value=\\\"\\\"></option>\\r\\n            {{#each countries}}\\r\\n            <option value=\\\"{{code}}\\\">{{name}}</option>\\r\\n            {{/each}}\\r\\n        </select>\\r\\n    </div>\\r\\n    {{#unless edit}}\\r\\n    <div class=\\\"grid buttons\\\">\\r\\n        <button type=\\\"button\\\" id=\\\"trustedContact_prev\\\">Previous: Identity</button>\\r\\n        <button type=\\\"button\\\" id=\\\"trustedContact_next\\\">Next: Disclosures</button>\\r\\n    </div>\\r\\n    {{/unless}}\\r\\n    {{#if edit}}\\r\\n    <div class=\\\"grid buttons\\\">\\r\\n        <button type=\\\"button\\\" id=\\\"trustedContact_prev\\\">Previous: Identity</button>\\r\\n        <button type=\\\"submit\\\" id=\\\"submitKYC\\\">Update account</button>\\r\\n    </div>\\r\\n    <div class=\\\"alert alert-danger\\\" id=\\\"kycError\\\" role=\\\"alert\\\"></div>\\r\\n    {{/if}}\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const Kyc_KycTrustedContact = (KycTrustedContact_code);\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycTrustedContact.ts\n\r\n\r\n\r\n\r\n\r\nclass KycTrustedContact extends KycBase {\r\n    constructor(kycForm) {\r\n        super(kycForm);\r\n        this.edit = false;\r\n    }\r\n    render(edit = false) {\r\n        this.edit = edit;\r\n        let template = Handlebars.compile(Kyc_KycTrustedContact);\r\n        return template({ edit: edit, countries: CountryHelper.Countries });\r\n    }\r\n    show() {\r\n        this.showFieldset('.kycTrustedContact', 'Trusted contact');\r\n    }\r\n    bindEvents() {\r\n        let showPrev = document.getElementById('trustedContact_prev');\r\n        showPrev === null || showPrev === void 0 ? void 0 : showPrev.addEventListener('click', (evt) => {\r\n            this.kycForm.kycIdentity.show();\r\n        });\r\n        let showNext = document.getElementById('trustedContact_next');\r\n        showNext === null || showNext === void 0 ? void 0 : showNext.addEventListener('click', (evt) => {\r\n            if (!this.validate())\r\n                return;\r\n            this.kycForm.kycDisclosures.show();\r\n        });\r\n        if (this.edit) {\r\n            let kycAccount = new KycAccountAgreement(this.kycForm);\r\n            if (!this.validate())\r\n                return;\r\n            kycAccount.bindSubmitKyc(this.edit);\r\n        }\r\n    }\r\n    validate() {\r\n        this.setMissingInfo('trusted_contact_missing_info', '');\r\n        let trusted_first_name = document.getElementById('trusted_first_name');\r\n        if (trusted_first_name && !StringHelper.isNullOrEmpty(trusted_first_name.value)) {\r\n            let trusted_email = document.getElementById('trusted_email');\r\n            let trusted_phone = document.getElementById('trusted_phone');\r\n            let trusted_street_address = document.getElementById('trusted_street_address');\r\n            let trusted_city = document.getElementById('trusted_city');\r\n            let trusted_postal_code = document.getElementById('trusted_postal_code');\r\n            let trusted_country = document.getElementById('trusted_country');\r\n            if (StringHelper.isNullOrEmpty(trusted_email.value) && StringHelper.isNullOrEmpty(trusted_phone.value)\r\n                && StringHelper.isNullOrEmpty(trusted_street_address.value)) {\r\n                this.setMissingInfo('trusted_contact_missing_info', 'You need to fill in either email, phone or address');\r\n                return;\r\n            }\r\n            if (!StringHelper.isNullOrEmpty(trusted_email.value) && trusted_email.value.indexOf('@') == -1) {\r\n                this.setMissingInfo('trusted_contact_missing_info', 'Email is not valid. It must contain @ sign');\r\n                return;\r\n            }\r\n            if (!StringHelper.isNullOrEmpty(trusted_street_address.value) &&\r\n                (StringHelper.isNullOrEmpty(trusted_city.value) ||\r\n                    StringHelper.isNullOrEmpty(trusted_postal_code.value) ||\r\n                    StringHelper.isNullOrEmpty(trusted_country.value))) {\r\n                this.setMissingInfo('trusted_contact_missing_info', 'You need fill inn into City, Postal code and Country when filling the street address');\r\n                return;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycUpload.html\n// Module\nvar KycUpload_code = \"<fieldset class=\\\"kycUpload hidden\\\" data-form=\\\"1\\\">\\r\\n    <div class=\\\"grid\\\">\\r\\n        {{{fileUpload \\\"identity_verification\\\" \\\"Photo ID Front (Front of passport)\\\"}}}\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"grid\\\">\\r\\n        {{{fileUpload \\\"identity_verification_2\\\" \\\"Photo ID Back (Passport picture of ID) \\\"}}}\\r\\n    </div>\\r\\n    <div class=\\\"grid\\\">\\r\\n        {{{fileUpload \\\"address_verification\\\" \\\"Picture of address verification\\\"}}}\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"grid buttons\\\">\\r\\n        <button type=\\\"button\\\" id=\\\"upload_prev\\\">Previous: Disclosures</button>\\r\\n        <button type=\\\"button\\\" id=\\\"upload_next\\\">Next: Agreements</button>\\r\\n    </div>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const Kyc_KycUpload = (KycUpload_code);\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycUpload.ts\n\r\n\r\nclass KycUpload extends KycBase {\r\n    constructor(kycForm) {\r\n        super(kycForm);\r\n    }\r\n    render() {\r\n        let template = Handlebars.compile(Kyc_KycUpload);\r\n        return template({});\r\n    }\r\n    show() {\r\n        this.showFieldset('.kycUpload', 'Upload documents');\r\n    }\r\n    bindEvents() {\r\n        this.bindFileUploads();\r\n        let upload_prev = document.getElementById('upload_prev');\r\n        upload_prev === null || upload_prev === void 0 ? void 0 : upload_prev.addEventListener('click', (evt) => {\r\n            this.kycForm.kycDisclosures.show();\r\n        });\r\n        let upload_next = document.getElementById('upload_next');\r\n        upload_next === null || upload_next === void 0 ? void 0 : upload_next.addEventListener('click', (evt) => {\r\n            if (!this.validateRequiredFields('.kycUpload'))\r\n                return;\r\n            this.kycForm.kycAccountAgreement.show();\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/KYCForm.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass KYCForm {\r\n    constructor(onHide) {\r\n        this.steps = 5;\r\n        this.timeout = undefined;\r\n        this.activeFieldsetSelector = '.kycContact';\r\n        this.modal = new Modal();\r\n        this.onHide = onHide;\r\n        this.kycContact = new KycContact(this);\r\n        this.kycIdentity = new KycIdentity(this);\r\n        this.kycTrustedContact = new KycTrustedContact(this);\r\n        this.kycDisclosures = new KycDisclosures(this);\r\n        this.kycUpload = new KycUpload(this);\r\n        this.kycAccountAgreement = new KycAccountAgreement(this);\r\n    }\r\n    show(className) {\r\n        let kycForm = new KYCForm(() => {\r\n        });\r\n        const ble = className;\r\n        this[ble].show();\r\n        this.activeFieldsetSelector = className;\r\n    }\r\n    showKYCForm(edit = false) {\r\n        let template = Handlebars.compile(KYCModal);\r\n        let obj = {\r\n            KycContactHtml: this.kycContact.render(),\r\n            KycIdentityHtml: this.kycIdentity.render(),\r\n            KycDisclosureHtml: this.kycDisclosures.render(),\r\n            KycTrustedContactHtml: this.kycTrustedContact.render(),\r\n            KycAccountAgreementHtml: this.kycAccountAgreement.render(),\r\n            KycUploadHtml: this.kycUpload.render()\r\n        };\r\n        let content = template(obj);\r\n        let newModal = this.modal.showModal('KYC & AML', content, true, () => {\r\n            this.clearTimeout();\r\n            this.onHide();\r\n        }, false);\r\n        let taxResidence = document.getElementById('country_of_tax_residence');\r\n        if (taxResidence) {\r\n            this.steps = (taxResidence.value == 'USA') ? 5 : 6;\r\n        }\r\n        if (newModal) {\r\n            this.kycContact.bindEvents();\r\n            this.kycIdentity.bindEvents();\r\n            this.kycTrustedContact.bindEvents();\r\n            this.kycDisclosures.bindEvents();\r\n            this.kycUpload.bindEvents();\r\n            this.kycAccountAgreement.bindEvents();\r\n            document.getElementById('kyc_wizard_form').addEventListener('keyup', (evt) => {\r\n                if (evt.key == 'Enter') {\r\n                    evt.preventDefault();\r\n                    evt.stopPropagation();\r\n                }\r\n            });\r\n        }\r\n        this.kycContact.show();\r\n    }\r\n    setSteps(steps) {\r\n        this.steps = steps;\r\n    }\r\n    clearTimeout() {\r\n        if (this.timeout)\r\n            clearTimeout(this.timeout);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycStatusHandler.ts\nvar KycStatusHandler_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\nclass KycStatusHandler {\r\n    constructor(kycResponse, executeTradeButton) {\r\n        this.kycResponse = kycResponse;\r\n        this.executeTradeButton = executeTradeButton;\r\n    }\r\n    getButtonText() {\r\n        let txt = 'Finish KYC';\r\n        switch (this.kycResponse.status) {\r\n            case 'SUBMITTED':\r\n            case 'ONBOARDING':\r\n            case 'INACTIVE':\r\n            case 'APPROVED':\r\n            case 'EDITED':\r\n            case 'APPROVAL_PENDING':\r\n                txt = 'Submitted to KYC processor';\r\n                break;\r\n            case 'ACTION_REQUIRED':\r\n                txt = 'Action required. Click to continue';\r\n                break;\r\n            case 'REJECTED':\r\n                txt = 'Your application was rejected';\r\n                break;\r\n            case 'DISABLED':\r\n                txt = 'Your account has been disabled';\r\n                break;\r\n            case 'ACTIVE':\r\n            case 'ACCOUNT_UPDATED':\r\n                txt = 'You are approved. KYC is being sent to blockchain. Give it few minutes';\r\n                break;\r\n            case 'ACCOUNT_CLOSED':\r\n                txt = 'Your account has been closed';\r\n                break;\r\n        }\r\n        return txt + '<small>Click for more info</small>';\r\n    }\r\n    getButtonClickEvent(executeTradeButton) {\r\n        switch (this.kycResponse.status) {\r\n            case 'SUBMITTED':\r\n            case 'ONBOARDING':\r\n            case 'INACTIVE':\r\n            case 'APPROVED':\r\n            case 'EDITED':\r\n            case 'APPROVAL_PENDING':\r\n                return this.showModal('Application is being processed', \"You need to wait for KYC to be approved. Then you'll be able to do trades. \" +\r\n                    \"This usually takes few minutes for the first submission, but can take longer for second submission. \" +\r\n                    \"We will email you when you are approved or if there are problems<br /><br />\" +\r\n                    \"If this status has been for more than 1 day, and you haven't gotten any email from us. Please email us at \" +\r\n                    \"<a target='_blank' href='mailto:info@liminal.market?subject=My application is being processed for to long&body=Hi, can you help me to find out what the problem is, the KYC process has not changed for some time? My name is _______ and I used the email _______ to register at liminal.market'>info@liminal.market</a>\");\r\n            case 'ACTION_REQUIRED':\r\n                return () => KycStatusHandler_awaiter(this, void 0, void 0, function* () {\r\n                    let kycActionRequired = new KycActionRequired(executeTradeButton);\r\n                    yield kycActionRequired.show();\r\n                });\r\n            case 'REJECTED':\r\n                return this.showModal('Application was rejected', \"Your application has been rejected during KYC process.<br /><br />\" +\r\n                    \"We don't have the information on why that happened, but you can email us at \" +\r\n                    \"<a target='_blank' href='mailto:info@liminal.market?subject=My application was rejected&body=Hi, can you help me to find out what the problem is? My name is _______ and I used the email _______ to register at liminal.market'>info@liminal.market</a>\" +\r\n                    \" and we can find out, and we should be able to solve it together.\");\r\n            case 'DISABLED':\r\n                return this.showModal('Application was disabled', \"Your account has been disabled.<br /><br />\" +\r\n                    \"We don't have the information on why that happened, but you can email us at \" +\r\n                    \"<a target='_blank' href='mailto:info@liminal.market?subject=My application was disabled&body=Hi, can you help me to find out what the problem is? My name is _______ and I used the email _______ to register at liminal.market'>info@liminal.market</a>\" +\r\n                    \" and we can find out, and we should be able to solve it together.\");\r\n            case 'ACCOUNT_CLOSED':\r\n                return this.showModal('Application was closed', \"Your account has been closed.<br /><br />\" +\r\n                    \"We don't have the information on why that happened, but you can email us at \" +\r\n                    \"<a target='_blank' href='mailto:info@liminal.market?subject=My application was closed&body=Hi, can you help me to find out what the problem is? My name is _______ and I used the email _______ to register at liminal.market'>info@liminal.market</a>\" +\r\n                    \" and we can find out, and we should be able to solve it together.\");\r\n            case 'ACCOUNT_UPDATED':\r\n            case 'ACTIVE':\r\n                return this.showModal('Account soon ready', 'Your account has been approved...<br /><br/>' +\r\n                    '..but, after we approve your account, we write the information to the blockchain.' +\r\n                    ' This usually takes just few(2-3) minutes.<br /><br/> If this is taking longer, ' +\r\n                    'please email us at <a target=\"_blank\" href=\"mailto:info@liminal.market?subject=KYC is being written to blockchain&body=Hi, can you help me to find out what the problem is? My name is _______ and I used the email _______ to register at liminal.market\">info@liminal.market</a>');\r\n        }\r\n        return () => {\r\n            let kycForm = new KYCForm(() => KycStatusHandler_awaiter(this, void 0, void 0, function* () {\r\n                yield this.executeTradeButton.renderButton();\r\n            }));\r\n            kycForm.showKYCForm();\r\n        };\r\n    }\r\n    showModal(title, content) {\r\n        return () => {\r\n            let modal = new Modal();\r\n            modal.showModal(title, content);\r\n        };\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycApproved.html\n// Module\nvar KycApproved_code = \"<h2>You are account has been approved</h2>\\r\\n<p>We have approved your account. You can now fund your account and start to trade.\\r\\n\\r\\n    <button id=\\\"kycApprovedFund\\\">Fund account</button>\\r\\n</p>\";\n// Exports\n/* harmony default export */ const Kyc_KycApproved = (KycApproved_code);\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycApproved.ts\n\r\n\r\n\r\n\r\nclass KycApproved {\r\n    show() {\r\n        let template = Handlebars.compile(Kyc_KycApproved);\r\n        let modal = new Modal();\r\n        modal.showModal('Account approved', template({}));\r\n        let fundAccount = document.getElementById('kycApprovedFund');\r\n        fundAccount === null || fundAccount === void 0 ? void 0 : fundAccount.addEventListener('click', (evt) => {\r\n            modal.hideModal();\r\n            let ausdFund = new FakeAUSDFund();\r\n            ausdFund.showAUSDFakeFund();\r\n        });\r\n        if (ExecuteOrderButton.Instance) {\r\n            clearInterval(ExecuteOrderButton.Instance.kycIdDoneTimeout);\r\n            ExecuteOrderButton.Instance.renderButton();\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/elements/tradepanel/OrderProgress.ts\n\r\nclass OrderProgress {\r\n    constructor() {\r\n        this.progressNr = 0;\r\n    }\r\n    static getInstance() {\r\n        return this.instance;\r\n    }\r\n    clearProgressText() {\r\n        let executingOrderProgress = document.getElementById('executing-order-progress');\r\n        executingOrderProgress === null || executingOrderProgress === void 0 ? void 0 : executingOrderProgress.classList.add('hidden');\r\n        this.progressNr = 0;\r\n    }\r\n    setProgressText(progressNr, text, hash) {\r\n        console.log('thisNr', this.progressNr, 'nr', progressNr, 'text', text);\r\n        if (progressNr < this.progressNr)\r\n            return;\r\n        let executingOrderProgress = document.getElementById('executing-order-progress');\r\n        if (!executingOrderProgress)\r\n            return;\r\n        let progressText = document.getElementById('progress-text');\r\n        if (!progressText)\r\n            return;\r\n        let networkInfo = App.Network;\r\n        progressText.innerHTML = text + '<br /><a href=\"' + networkInfo.BlockExplorer + '/tx/' + hash + '\" target=\"_blank\" style=\"font-size:10px\">View</a>';\r\n        executingOrderProgress.classList.remove('hidden');\r\n        this.progressNr = progressNr;\r\n    }\r\n}\r\nOrderProgress.instance = new OrderProgress();\r\n\n;// CONCATENATED MODULE: ./src/ui/elements/tradepanel/ExecuteOrderButton.ts\nvar ExecuteOrderButton_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass ExecuteOrderButton {\r\n    constructor(sellTradeInput, buyTradeInput) {\r\n        this.hasBuyingPower = false;\r\n        this.sellTradeInput = sellTradeInput;\r\n        this.buyTradeInput = buyTradeInput;\r\n        this.authenticateService = new AuthenticateService();\r\n        this.template = Handlebars.compile(ExecuteTradeButton);\r\n        this.button = document.getElementById('liminal_market_execute_trade');\r\n        ExecuteOrderButton.Instance = this;\r\n    }\r\n    renderButton() {\r\n        return ExecuteOrderButton_awaiter(this, void 0, void 0, function* () {\r\n            this.button.outerHTML = this.button.outerHTML;\r\n            this.button = document.getElementById('liminal_market_execute_trade');\r\n            this.loadingButton(this.button);\r\n            //wallet connected\r\n            if (!this.walletIsConnected(this.button)) {\r\n                return;\r\n            }\r\n            //user logged in\r\n            if (!(yield this.userIsLoggedIn(this.button))) {\r\n                return;\r\n            }\r\n            //chain id correct\r\n            if (!this.chainIdIsCorrect(this.button)) {\r\n                return;\r\n            }\r\n            //native token is available\r\n            if (!(yield this.userHasNativeToken(this.button))) {\r\n                return;\r\n            }\r\n            //kyc is done\r\n            if (!(yield this.kycIsDone(this.button))) {\r\n                return;\r\n            }\r\n            //ausd is setup\r\n            if (!(yield this.userHasAUSD(this.button))) {\r\n                return;\r\n            }\r\n            //ausd > buy amount\r\n            if (!(yield this.userHasEnoughQty(this.button))) {\r\n                return;\r\n            }\r\n            if (!this.hasQuantityAndSymbol(this.button)) {\r\n                return;\r\n            }\r\n            if (!(yield this.isMarketOpen(this.button))) {\r\n                return;\r\n            }\r\n            this.enableExecuteOrder(this.button);\r\n        });\r\n    }\r\n    enableExecuteOrder(button) {\r\n        //if (this.sellTradeInput.quantity.eq(0)) return;\r\n        //execute trade can be done\r\n        button.innerHTML = 'Execute trade';\r\n        button.classList.replace('disabled', 'enabled');\r\n        this.stopLoadingButton(button);\r\n        button.addEventListener('click', () => ExecuteOrderButton_awaiter(this, void 0, void 0, function* () {\r\n            this.loadingButton(button);\r\n            button.innerHTML = 'Confirm transaction in your wallet';\r\n            if (this.sellTradeInput.symbol == 'aUSD') {\r\n                let liminalMarketService = new LiminalMarketService();\r\n                let symbolAddress = yield liminalMarketService.getSymbolContractAddress(this.buyTradeInput.symbol);\r\n                if (symbolAddress === Helper_AddressZero) {\r\n                    let result = yield liminalMarketService.createToken(this.buyTradeInput.symbol, () => {\r\n                        button.innerHTML = 'Creating token. Give it few seconds';\r\n                    }).finally(() => {\r\n                        this.stopLoadingButton(button);\r\n                        button.innerHTML = 'Execute trade';\r\n                    });\r\n                    if (result instanceof BlockchainError) {\r\n                        showBar('Error:' + result.message);\r\n                        console.error(result);\r\n                        return;\r\n                    }\r\n                    symbolAddress = result;\r\n                }\r\n                yield this.executeTransfer(symbolAddress, this.sellTradeInput.quantity, new AUSDService(), button);\r\n            }\r\n            else {\r\n                let liminalMarketService = new LiminalMarketService();\r\n                let symbolAddress = yield liminalMarketService.getSymbolContractAddress(this.sellTradeInput.symbol);\r\n                yield this.executeTransfer(symbolAddress, this.sellTradeInput.quantity, new SecurityTokenService(), button);\r\n            }\r\n        }));\r\n    }\r\n    executeTransfer(symbolAddress, quantity, service, button) {\r\n        return ExecuteOrderButton_awaiter(this, void 0, void 0, function* () {\r\n            yield service.transfer(symbolAddress, quantity)\r\n                .then(transaction => {\r\n                button.innerHTML = 'Execute trade';\r\n                if (!transaction)\r\n                    return;\r\n                OrderProgress.getInstance().setProgressText(0, 'Sending to blockchain', transaction.hash);\r\n            }).catch(reason => {\r\n                let msg = reason.toString();\r\n                console.log('CATCH - contract.transfer', reason);\r\n                if (msg.indexOf('Market is closed') != -1) {\r\n                    this.button.innerHTML = 'Market is closed';\r\n                }\r\n                else {\r\n                    button.innerHTML = 'Execute trade';\r\n                }\r\n            }).finally(() => {\r\n                this.stopLoadingButton(button);\r\n            });\r\n        });\r\n    }\r\n    loadingButton(button) {\r\n        button.setAttribute('aria-busy', 'true');\r\n    }\r\n    stopLoadingButton(button) {\r\n        button.removeAttribute('aria-busy');\r\n    }\r\n    walletIsConnected(button) {\r\n        if (App.User.provider)\r\n            return true;\r\n        button.innerHTML = 'Connect wallet';\r\n        button.addEventListener('click', (evt) => ExecuteOrderButton_awaiter(this, void 0, void 0, function* () {\r\n            let connectWallet = new ConnectWallet();\r\n            yield connectWallet.connectWallet(evt.target);\r\n        }));\r\n        this.stopLoadingButton(button);\r\n        return false;\r\n    }\r\n    userIsLoggedIn(button) {\r\n        return ExecuteOrderButton_awaiter(this, void 0, void 0, function* () {\r\n            if (App.User.isLoggedIn)\r\n                return true;\r\n            button.innerHTML = 'Login';\r\n            button.addEventListener('click', () => ExecuteOrderButton_awaiter(this, void 0, void 0, function* () {\r\n                yield this.authenticateService.authenticateUser();\r\n            }));\r\n            this.stopLoadingButton(button);\r\n            return false;\r\n        });\r\n    }\r\n    chainIdIsCorrect(button) {\r\n        let chainId = App.User.chainId;\r\n        if (chainId === App.Network.ChainId)\r\n            return true;\r\n        let usersWalletNetwork = NetworkInfo.getNetworkInfoByChainId(chainId);\r\n        if (usersWalletNetwork) {\r\n            NetworkInfo.setNetworkByChainId(chainId);\r\n            return true;\r\n        }\r\n        button.innerHTML = 'Switch Network';\r\n        button.addEventListener('click', () => ExecuteOrderButton_awaiter(this, void 0, void 0, function* () {\r\n            yield App.Network.addNetworkToWallet();\r\n        }));\r\n        this.stopLoadingButton(button);\r\n        return false;\r\n    }\r\n    userHasNativeToken(button) {\r\n        return ExecuteOrderButton_awaiter(this, void 0, void 0, function* () {\r\n            let networkInfo = App.Network;\r\n            let hasEnoughNativeTokens = yield networkInfo.hasEnoughNativeTokens();\r\n            if (hasEnoughNativeTokens)\r\n                return true;\r\n            button.classList.replace('enabled', 'disabled');\r\n            button.innerHTML = 'You need ' + networkInfo.NativeCurrencyName + ' tokens. Click me for some tokens';\r\n            button.addEventListener('click', () => {\r\n                let nativeTokenNeededModal = new NativeTokenNeeded(() => {\r\n                    this.renderButton();\r\n                });\r\n                nativeTokenNeededModal.show();\r\n            });\r\n            this.stopLoadingButton(button);\r\n            return false;\r\n        });\r\n    }\r\n    kycIsDone(button) {\r\n        return ExecuteOrderButton_awaiter(this, void 0, void 0, function* () {\r\n            let kycService = new KYCService();\r\n            let kycResponse = yield kycService.hasValidKYC();\r\n            if (!kycResponse.isValidKyc) {\r\n                let kycStatusHandler = new KycStatusHandler(kycResponse, this);\r\n                button.innerHTML = kycStatusHandler.getButtonText();\r\n                button.addEventListener('click', kycStatusHandler.getButtonClickEvent(this));\r\n                if (kycResponse.status == 'ACTIVE') {\r\n                    this.loadingButton(button);\r\n                    this.kycIdDoneTimeout = setInterval(() => ExecuteOrderButton_awaiter(this, void 0, void 0, function* () {\r\n                        kycResponse = yield kycService.hasValidKYC();\r\n                        if (kycResponse.isValidKyc) {\r\n                            this.hasBuyingPower = kycResponse.hasBuyingPower;\r\n                            if (!this.hasBuyingPower) {\r\n                                let kycApproved = new KycApproved();\r\n                                kycApproved.show();\r\n                            }\r\n                            clearInterval(this.kycIdDoneTimeout);\r\n                            yield this.renderButton();\r\n                        }\r\n                    }), 30 * 1000);\r\n                }\r\n                else {\r\n                    this.stopLoadingButton(button);\r\n                }\r\n                return false;\r\n            }\r\n            this.stopLoadingButton(button);\r\n            return true;\r\n        });\r\n    }\r\n    userHasAUSD(button) {\r\n        return ExecuteOrderButton_awaiter(this, void 0, void 0, function* () {\r\n            let ausdService = new AUSDService();\r\n            let balance = yield ausdService.getAUSDBalanceOf(App.User.address);\r\n            if (balance.isGreaterThan(0))\r\n                return true;\r\n            if (this.hasBuyingPower) {\r\n                button.innerHTML = 'We are funding your aUSD token';\r\n                this.checkBalanceInterval = setInterval(() => ExecuteOrderButton_awaiter(this, void 0, void 0, function* () {\r\n                    AUSDService.lastUpdate = undefined;\r\n                    let balance = yield ausdService.getAUSDBalanceOf(App.User.address);\r\n                    if (balance.isGreaterThan(0)) {\r\n                        yield AUsdBalance.forceLoadAUSDBalanceUI();\r\n                        clearInterval(this.checkBalanceInterval);\r\n                        yield this.renderButton();\r\n                    }\r\n                }), 10 * 1000);\r\n                return false;\r\n            }\r\n            if (App.Network.TestNetwork) {\r\n                button.innerHTML = 'You need aUSD. Click here to get some';\r\n            }\r\n            else {\r\n                button.innerHTML = 'You need aUSD. Click here for instructions';\r\n            }\r\n            button.addEventListener('click', () => {\r\n                let ausdFund = new FakeAUSDFund();\r\n                ausdFund.showAUSDFakeFund();\r\n            });\r\n            this.stopLoadingButton(button);\r\n            return false;\r\n        });\r\n    }\r\n    userHasEnoughQty(button) {\r\n        return ExecuteOrderButton_awaiter(this, void 0, void 0, function* () {\r\n            let ausdService = new AUSDService();\r\n            if (this.sellTradeInput.symbol == 'aUSD') {\r\n                let balance = yield ausdService.getAUSDBalanceOf(App.User.address);\r\n                if (balance.isGreaterThanOrEqualTo(this.sellTradeInput.quantity))\r\n                    return true;\r\n                button.innerHTML = \"You don't have enough aUSD. Click for more funding\";\r\n                button.addEventListener('click', () => {\r\n                    let ausdFund = new FakeAUSDFund();\r\n                    ausdFund.showAUSDFakeFund();\r\n                });\r\n            }\r\n            else {\r\n                let securityTokenService = new SecurityTokenService();\r\n                let userQuantity = yield securityTokenService.getQuantityByAddress(this.sellTradeInput.symbol, App.User.address);\r\n                if (this.sellTradeInput.quantity <= userQuantity)\r\n                    return true;\r\n                button.innerHTML = \"You don't have enough \" + this.sellTradeInput.symbol;\r\n                button.classList.replace('disable', 'enable');\r\n            }\r\n            this.stopLoadingButton(button);\r\n            return false;\r\n        });\r\n    }\r\n    isMarketOpen(button) {\r\n        return ExecuteOrderButton_awaiter(this, void 0, void 0, function* () {\r\n            let userService = new UserService();\r\n            let isMarketOpen = yield userService.isMarketOpenOrUserOffHours();\r\n            if (isMarketOpen)\r\n                return true;\r\n            button.innerHTML = 'Market is closed';\r\n            button.classList.replace('enabled', 'disabled');\r\n            this.stopLoadingButton(button);\r\n            return false;\r\n        });\r\n    }\r\n    hasQuantityAndSymbol(button) {\r\n        if (this.sellTradeInput.quantity.eq(0)) {\r\n            button.innerHTML = 'Type in quantity';\r\n            this.stopLoadingButton(button);\r\n            return false;\r\n        }\r\n        if (this.buyTradeInput.name == '') {\r\n            button.innerHTML = 'Select stock to buy';\r\n            this.stopLoadingButton(button);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/enums/TradeType.ts\nvar TradeType;\r\n(function (TradeType) {\r\n    TradeType[\"Sell\"] = \"Sell\";\r\n    TradeType[\"Buy\"] = \"Buy\";\r\n})(TradeType || (TradeType = {}));\r\n\n;// CONCATENATED MODULE: ./src/html/elements/tradepanel/TradeInput.html\n// Module\nvar TradeInput_code = \"<article class=\\\"{{tradeType}}Inputs tradeInputArticle\\\">\\r\\n    <div class=\\\"grid tradeInput\\\">\\r\\n        <div class=\\\"select_token\\\">\\r\\n            <a id=\\\"{{tradeType}}SelectStock\\\" href=\\\"#\\\" role=\\\"button\\\">\\r\\n                <img src=\\\"{{logo}}\\\"/>\\r\\n                {{symbol}}\\r\\n            </a>\\r\\n        </div>\\r\\n        <div class=\\\"trade_input\\\"><input autocomplete=\\\"off\\\" autocorrect=\\\"off\\\" type=\\\"tel\\\" spellcheck=\\\"false\\\"\\r\\n                                        value=\\\"{{strQuantity}}\\\" placeholder=\\\"0.0\\\"/></div>\\r\\n        <div class=\\\"balance\\\">Balance : <abbr title=\\\"{{balance}}\\\" data-tooltip=\\\"{{balance}}\\\" class=\\\"balance_value\\\">{{abbrBalance}}</abbr>\\r\\n            <a href=\\\"\\\" class=\\\"balance_max\\\">Max</a></div>\\r\\n        <div class=\\\"price_per_share\\\"></div>\\r\\n    </div>\\r\\n    <progress class=\\\"progress d-none\\\" value=\\\"0\\\" max=\\\"1\\\"></progress>\\r\\n    <div class=\\\"exceeds_wallet_balance d-none\\\">Exceeds wallet balance</div>\\r\\n</article>\\r\\n\";\n// Exports\n/* harmony default export */ const TradeInput = (TradeInput_code);\n;// CONCATENATED MODULE: ./src/ui/modals/SecuritiesListModal.ts\nvar SecuritiesListModal_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\nclass SecuritiesListModal {\r\n    constructor() {\r\n        this.tbodyId = 'liminal_market_securities_list';\r\n        this.page = 0;\r\n        this.loadmore = true;\r\n        this.modal = new Modal();\r\n    }\r\n    showModal(onSelectSymbol) {\r\n        return SecuritiesListModal_awaiter(this, void 0, void 0, function* () {\r\n            let securitiesList = new SecuritiesList();\r\n            let content = yield securitiesList.render();\r\n            let newInstance = this.modal.showModal('Select stock to buy', content, true);\r\n            //if (newInstance)\r\n            {\r\n                yield securitiesList.bindEvents(onSelectSymbol);\r\n            }\r\n        });\r\n    }\r\n    hideModal() {\r\n        this.modal.hideModal();\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/services/backend/TradeInfo.ts\nclass TradeInfo {\r\n    constructor(price, lastTrade) {\r\n        this.price = price;\r\n        this.lastTrade = lastTrade;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/errors/cloud/HttpError.ts\n\r\n\r\nclass HttpError {\r\n    constructor(obj) {\r\n        this.method = obj.method;\r\n        this.url = obj.url;\r\n        this.body = obj.body;\r\n        this.serverError = obj.serverError;\r\n    }\r\n    handle() {\r\n        console.log(this);\r\n        ErrorInfo.report(new GeneralError('Error doing request. Server response was:' + this.serverError.data.message));\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/errors/CloudError.ts\n\r\n\r\n\r\nclass CloudError extends GeneralError {\r\n    constructor(e) {\r\n        super(e);\r\n        try {\r\n            let obj = JSON.parse(e.message);\r\n            if (obj.name) {\r\n                let errorHandler = CloudError.getActionInstance(obj.name, obj);\r\n                if (errorHandler) {\r\n                    errorHandler.handle();\r\n                    return;\r\n                }\r\n            }\r\n            ErrorInfo.error(obj);\r\n        }\r\n        catch (jsonError) {\r\n            ErrorInfo.error(e);\r\n        }\r\n    }\r\n    static getActionInstance(action, obj) {\r\n        let tmp = undefined;\r\n        for (let i = 0; i < CloudError.Errors.length; i++) {\r\n            if (CloudError.Errors[i].name === action) {\r\n                let errorHandler = CloudError.Errors[i];\r\n                return new errorHandler(obj);\r\n            }\r\n        }\r\n        return tmp;\r\n    }\r\n}\r\nCloudError.Errors = [\r\n    HttpError\r\n];\r\n\n;// CONCATENATED MODULE: ./src/services/backend/StockPriceService.ts\nvar StockPriceService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nclass StockPriceService extends BaseService {\r\n    constructor() {\r\n        super();\r\n    }\r\n    getSymbolPrice(symbol, tradeType) {\r\n        return StockPriceService_awaiter(this, void 0, void 0, function* () {\r\n            const params = {\r\n                symbol: symbol\r\n            };\r\n            let result = yield this.get(\"getSymbolPrice\", params)\r\n                .catch((e) => {\r\n                throw new CloudError(e);\r\n            });\r\n            let quote = result.quote;\r\n            let price = (tradeType == TradeType.Sell) ? quote.ap : quote.bp;\r\n            let tradeInfo = new TradeInfo(price, quote.t);\r\n            return tradeInfo;\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/elements/tradepanel/PricePerShare.html\n// Module\nvar PricePerShare_code = \"<abbr title=\\\"Last trade was {{lastTraded}}\\\" data-tooltip=\\\"Last trade was {{lastTraded}}\\\">{{text}}</abbr>\";\n// Exports\n/* harmony default export */ const PricePerShare = (PricePerShare_code);\n;// CONCATENATED MODULE: ./src/ui/elements/tradepanel/TradePanelInput.ts\nvar TradePanelInput_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass TradePanelInput {\r\n    constructor(symbol, name, logo, address, tradeType) {\r\n        this.isDirty = false;\r\n        this.symbol = symbol;\r\n        this.name = name;\r\n        this.logo = logo;\r\n        this.address = address;\r\n        this.tradeType = tradeType;\r\n        this.quantity = new bignumber(0);\r\n        this.strQuantity = '';\r\n        this.balance = new bignumber(0);\r\n        this.lastPrice = 0;\r\n        this.qtyPerDollar = 0;\r\n        this.lastTraded = '';\r\n        this.template = Handlebars.compile(TradeInput);\r\n        this.pricePerShareTemplate = Handlebars.compile(PricePerShare);\r\n    }\r\n    setOtherTradePanelInput(tradePanelInput) {\r\n        this.otherTradePanelInput = tradePanelInput;\r\n    }\r\n    renderToString() {\r\n        return this.template(this);\r\n    }\r\n    render(bindEvents = true) {\r\n        let element = document.querySelector('.' + this.tradeType + 'Inputs');\r\n        element.outerHTML = this.renderToString();\r\n        if (bindEvents) {\r\n            this.bindEvents();\r\n        }\r\n    }\r\n    bindEvents() {\r\n        this.bindQuantityListener();\r\n        this.bindSelectStockButton();\r\n        this.bindMaxLink();\r\n    }\r\n    setSymbol(symbol, name, logo) {\r\n        this.symbol = symbol;\r\n        this.name = name;\r\n        this.logo = logo;\r\n        this.isDirty = true;\r\n    }\r\n    bindSelectStockButton() {\r\n        let selectStock = document.querySelector('#' + this.tradeType + 'SelectStock');\r\n        if (!selectStock)\r\n            return;\r\n        selectStock.addEventListener('click', (evt) => TradePanelInput_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            let securityList = new SecuritiesListModal();\r\n            yield securityList.showModal((symbol, name, logo) => TradePanelInput_awaiter(this, void 0, void 0, function* () {\r\n                securityList.hideModal();\r\n                if (this.otherTradePanelInput && this.symbol == 'aUSD' && symbol != this.symbol) {\r\n                    this.otherTradePanelInput.setSymbol(this.symbol, this.name, this.logo);\r\n                }\r\n                this.symbol = symbol;\r\n                this.name = name;\r\n                this.logo = logo;\r\n                let liminalMarketService = new LiminalMarketService();\r\n                this.address = yield liminalMarketService.getSymbolContractAddress(symbol);\r\n                this.render();\r\n                this.loadBalance().then();\r\n                yield this.loadLastTrade();\r\n                if (this.onUpdate)\r\n                    this.onUpdate();\r\n            }));\r\n        }));\r\n    }\r\n    bindQuantityListener() {\r\n        let qtyInput = document.querySelector('.' + this.tradeType + 'Inputs .trade_input input');\r\n        if (!qtyInput)\r\n            return;\r\n        let inputTimer;\r\n        qtyInput.addEventListener('keyup', (evt) => {\r\n            if (inputTimer)\r\n                clearTimeout(inputTimer);\r\n            inputTimer = setTimeout(() => {\r\n                let inputValue = evt.target.value;\r\n                this.setQuantity(inputValue);\r\n                this.loadProgressbar();\r\n                if (this.otherTradePanelInput)\r\n                    this.otherTradePanelInput.updateQuantity();\r\n                if (this.onUpdate)\r\n                    this.onUpdate();\r\n            }, 300);\r\n        });\r\n    }\r\n    bindMaxLink() {\r\n        let maxBalanceDom = document.querySelector('.' + this.tradeType + 'Inputs .balance_max');\r\n        if (!maxBalanceDom)\r\n            return;\r\n        maxBalanceDom.addEventListener('click', (evt) => {\r\n            evt.preventDefault();\r\n            let qtyInput = document.querySelector('.' + this.tradeType + 'Inputs .trade_input input');\r\n            if (!qtyInput)\r\n                return;\r\n            qtyInput.value = this.balance.toFixed();\r\n            this.setQuantity(qtyInput.value);\r\n            this.loadProgressbar();\r\n            if (this.otherTradePanelInput)\r\n                this.otherTradePanelInput.updateQuantity();\r\n            if (this.onUpdate)\r\n                this.onUpdate();\r\n        });\r\n    }\r\n    loadBalance() {\r\n        return TradePanelInput_awaiter(this, void 0, void 0, function* () {\r\n            this.balance = new bignumber(0);\r\n            let userService = new UserService();\r\n            let ethAddress = userService.getEthAddress();\r\n            let balanceDom = document.querySelector('.' + this.tradeType + 'Inputs .balance_value');\r\n            if (!balanceDom)\r\n                return;\r\n            if (this.symbol === 'aUSD') {\r\n                if (ethAddress) {\r\n                    let aUsdService = new AUSDService();\r\n                    this.balance = yield aUsdService.getAUSDBalanceOf(ethAddress);\r\n                }\r\n                balanceDom.innerHTML = '$' + this.balance;\r\n            }\r\n            else if (this.name !== '') {\r\n                this.balance = new bignumber(0);\r\n                if (ethAddress) {\r\n                    let securityTokenService = new SecurityTokenService();\r\n                    this.balance = yield securityTokenService.getQuantityByAddress(this.symbol, ethAddress);\r\n                }\r\n                balanceDom.innerHTML = this.balance.toString();\r\n            }\r\n            balanceDom.dataset.tooltip = this.balance.toString();\r\n            balanceDom.title = this.balance.toString();\r\n            this.loadProgressbar();\r\n            this.toggleMaxBalanceLink();\r\n        });\r\n    }\r\n    loadLastTrade() {\r\n        return TradePanelInput_awaiter(this, void 0, void 0, function* () {\r\n            if (this.symbol === 'aUSD') {\r\n                this.lastPrice = 1;\r\n                this.qtyPerDollar = 1;\r\n                return;\r\n            }\r\n            if (!this.otherTradePanelInput || this.name == '')\r\n                return;\r\n            let aUsdPricePerShare = document.querySelector('.' + this.otherTradePanelInput.tradeType + 'Inputs .price_per_share');\r\n            if (!aUsdPricePerShare)\r\n                return;\r\n            let pricePerShare = document.querySelector('.' + this.tradeType + 'Inputs .price_per_share');\r\n            if (!pricePerShare)\r\n                return;\r\n            aUsdPricePerShare.setAttribute('aria-busy', 'true');\r\n            pricePerShare.setAttribute('aria-busy', 'true');\r\n            let stockPriceService = new StockPriceService();\r\n            let tradeInfo = yield stockPriceService.getSymbolPrice(this.symbol, this.otherTradePanelInput.tradeType);\r\n            this.lastPrice = tradeInfo.price;\r\n            this.lastTraded = tradeInfo.lastTrade.toString();\r\n            this.qtyPerDollar = 1 / this.lastPrice;\r\n            let pricePerShareHtml = {\r\n                lastTraded: this.lastTraded,\r\n                text: '≈ $' + this.lastPrice + ' per share'\r\n            };\r\n            pricePerShare.innerHTML = this.pricePerShareTemplate(pricePerShareHtml);\r\n            let pricePerAUsdHtml = {\r\n                lastTraded: this.lastTraded,\r\n                text: '1 aUSD ≈ ' + roundNumberDecimal(this.qtyPerDollar, 6) + ' ' + this.symbol\r\n            };\r\n            aUsdPricePerShare.innerHTML = this.pricePerShareTemplate(pricePerAUsdHtml);\r\n            this.updateQuantity();\r\n            aUsdPricePerShare.removeAttribute('aria-busy');\r\n            pricePerShare.removeAttribute('aria-busy');\r\n        });\r\n    }\r\n    updateQuantity() {\r\n        if (!this.otherTradePanelInput)\r\n            return;\r\n        let qtyInput = document.querySelector('.' + this.tradeType + 'Inputs .trade_input input');\r\n        if (!qtyInput)\r\n            return;\r\n        if (this.symbol === 'aUSD') {\r\n            qtyInput.value = this.otherTradePanelInput.quantity.div(this.otherTradePanelInput.qtyPerDollar).toString();\r\n        }\r\n        else {\r\n            qtyInput.value = this.otherTradePanelInput.quantity.multipliedBy(this.qtyPerDollar).toString();\r\n        }\r\n        this.setQuantity(qtyInput.value);\r\n        this.loadProgressbar();\r\n    }\r\n    loadProgressbar() {\r\n        if (this.quantity.eq(0) || this.balance.eq(0) || this.tradeType == TradeType.Buy)\r\n            return;\r\n        let progressDom = document.querySelector('.' + this.tradeType + 'Inputs .progress');\r\n        if (!progressDom)\r\n            return;\r\n        let percentage = this.quantity.div(this.balance).toNumber();\r\n        progressDom.value = percentage;\r\n        progressDom.classList.remove('d-none');\r\n        let exceedsBalance = document.querySelector('.' + this.tradeType + 'Inputs .exceeds_wallet_balance');\r\n        if (percentage > 1) {\r\n            exceedsBalance.classList.remove('d-none');\r\n            progressDom.setAttribute('aria-invalid', 'true');\r\n        }\r\n        else {\r\n            exceedsBalance.classList.add('d-none');\r\n        }\r\n    }\r\n    static switchPanels(sellTradePanelInput, buyTradePanelInput) {\r\n        return TradePanelInput_awaiter(this, void 0, void 0, function* () {\r\n            let sellSymbol = sellTradePanelInput.symbol;\r\n            let sellName = sellTradePanelInput.name;\r\n            let sellLogo = sellTradePanelInput.logo;\r\n            let sellQuantity = sellTradePanelInput.quantity;\r\n            sellTradePanelInput.setSymbol(buyTradePanelInput.symbol, buyTradePanelInput.name, buyTradePanelInput.logo);\r\n            sellTradePanelInput.quantity = buyTradePanelInput.quantity;\r\n            buyTradePanelInput.setSymbol(sellSymbol, sellName, sellLogo);\r\n            buyTradePanelInput.quantity = sellQuantity;\r\n            yield sellTradePanelInput.updatePanel();\r\n            yield buyTradePanelInput.updatePanel();\r\n            return [sellTradePanelInput, buyTradePanelInput];\r\n        });\r\n    }\r\n    setQuantity(value) {\r\n        if (value == '' || value == '0')\r\n            return;\r\n        this.quantity = new bignumber(value);\r\n        this.strQuantity = value;\r\n    }\r\n    quantityFormatted() {\r\n        return (this.symbol === 'aUSD') ? '$' + this.quantity : this.quantity;\r\n    }\r\n    updatePanel() {\r\n        return TradePanelInput_awaiter(this, void 0, void 0, function* () {\r\n            this.updateQuantity();\r\n            this.render(true);\r\n            yield this.loadBalance();\r\n            yield this.loadLastTrade();\r\n        });\r\n    }\r\n    toggleMaxBalanceLink() {\r\n        let maxBalanceDom = document.querySelector('.' + this.tradeType + 'Inputs .balance_max');\r\n        if (!maxBalanceDom)\r\n            return;\r\n        if (this.balance.eq(0)) {\r\n            maxBalanceDom.classList.add('d-none');\r\n        }\r\n        else {\r\n            maxBalanceDom.classList.remove('d-none');\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/elements/tradepanel/TradeSwitch.html\n// Module\nvar TradeSwitch_code = \"<div class=\\\"grid tradeSwitch\\\">\\r\\n    <a title=\\\"Switch the trade\\\" href=\\\"\\\" class=\\\"switchBtn\\\" class=\\\"outline\\\"></a>\\r\\n</div>\";\n// Exports\n/* harmony default export */ const tradepanel_TradeSwitch = (TradeSwitch_code);\n;// CONCATENATED MODULE: ./src/ui/elements/tradepanel/TradeSwitch.ts\nvar TradeSwitch_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\nclass TradeSwitch {\r\n    constructor() {\r\n        this.template = undefined;\r\n        this.template = Handlebars.compile(tradepanel_TradeSwitch);\r\n    }\r\n    renderToString() {\r\n        return this.template();\r\n    }\r\n    render() {\r\n        let dom = document.querySelector('.tradeSwitch');\r\n        if (!dom)\r\n            return;\r\n        dom.outerHTML = this.renderToString();\r\n    }\r\n    bindEvents(sellTradePanelInput, buyTradePanelInput, executeTradeButton) {\r\n        let dom = document.querySelector('.switchBtn');\r\n        if (!dom)\r\n            return;\r\n        dom.addEventListener('click', (evt) => TradeSwitch_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            [sellTradePanelInput, buyTradePanelInput] = yield TradePanelInput.switchPanels(sellTradePanelInput, buyTradePanelInput);\r\n        }));\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/elements/TradePanel.ts\nvar TradePanel_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\nclass TradePanel {\r\n    constructor() {\r\n        this.quantity = 0;\r\n    }\r\n    render(elementId, symbol, name, logo, address) {\r\n        return TradePanel_awaiter(this, void 0, void 0, function* () {\r\n            let element = document.getElementById(elementId);\r\n            if (!element)\r\n                return;\r\n            let contractInfo = ContractInfo.getContractInfo();\r\n            let sellTradeInput = new TradePanelInput(\"aUSD\", \"aUSD at Broker\", \"/img/ausd.png\", contractInfo.AUSD_ADDRESS, TradeType.Sell);\r\n            let buyTradeInput;\r\n            if (!symbol) {\r\n                buyTradeInput = new TradePanelInput(\"Select stock\", \"\", \"\", \"\", TradeType.Buy);\r\n            }\r\n            else {\r\n                buyTradeInput = new TradePanelInput(symbol, name, logo, address, TradeType.Buy);\r\n            }\r\n            sellTradeInput.setOtherTradePanelInput(buyTradeInput);\r\n            buyTradeInput.setOtherTradePanelInput(sellTradeInput);\r\n            let tradeSwitch = new TradeSwitch();\r\n            let sellInput = sellTradeInput.renderToString();\r\n            let buyInput = buyTradeInput.renderToString();\r\n            let switchHtml = tradeSwitch.renderToString();\r\n            element.innerHTML = sellInput + switchHtml + buyInput;\r\n            yield sellTradeInput.loadBalance();\r\n            yield buyTradeInput.loadBalance();\r\n            if (symbol) {\r\n                yield buyTradeInput.loadLastTrade();\r\n            }\r\n            sellTradeInput.bindEvents();\r\n            buyTradeInput.bindEvents();\r\n            let executeTradeButton = new ExecuteOrderButton(sellTradeInput, buyTradeInput);\r\n            yield executeTradeButton.renderButton();\r\n            tradeSwitch.bindEvents(sellTradeInput, buyTradeInput, executeTradeButton);\r\n            sellTradeInput.onUpdate = () => {\r\n                if (buyTradeInput.isDirty)\r\n                    buyTradeInput.updatePanel();\r\n                executeTradeButton.renderButton();\r\n            };\r\n            buyTradeInput.onUpdate = () => {\r\n                if (sellTradeInput.isDirty)\r\n                    sellTradeInput.updatePanel();\r\n                executeTradeButton.renderButton();\r\n            };\r\n        });\r\n    }\r\n    formatBuyPanel(symbol, name, logo, tradeType, contractAddress) {\r\n        document.getElementById('liminal_market_select_symbol').innerHTML = symbol;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/pages/trade.html\n// Module\nvar trade_code = \"<div id=\\\"tradingPanel\\\">\\r\\n    <a href=\\\"#use_wallet_for_orders\\\" id=\\\"use_wallet_for_orders_link\\\" class=\\\"not_visible\\\">Trade in your wallet instead of\\r\\n        here</a>\\r\\n    <article id=\\\"liminal_market_trade_panel\\\"></article>\\r\\n    <div id=\\\"executing-order-progress\\\" class=\\\"hidden\\\">\\r\\n        <div id=\\\"progress-text\\\"></div>\\r\\n        <progress></progress>\\r\\n    </div>\\r\\n    <button id=\\\"liminal_market_execute_trade\\\"></button>\\r\\n\\r\\n    <article id=\\\"use_wallet_for_orders\\\">\\r\\n\\r\\n        <h3>How to buy in wallet</h3>\\r\\n        <ul>\\r\\n            <li>If you haven't added aUSD to your wallet, now is the time - <small><a href=\\\"\\\" id=\\\"addAUSDToWallet\\\">Click\\r\\n                here to add aUSD to wallet</a></small></li>\\r\\n            <li><a href=\\\"\\\" class=\\\"findSymbol\\\">Find symbol</a> you want to buy & click \\\"Get address\\\"</li>\\r\\n            <li>Go to your wallet and find the aUSD token, click \\\"Send\\\"</li>\\r\\n            <li>Paste in the address you just copied for the Receiver.\\r\\n                <ul>\\r\\n                    <li><em>Note: If you can, save the address to your contact list for easy access next time</em></li>\\r\\n                </ul>\\r\\n            </li>\\r\\n\\r\\n            <li>Type in the amount & click Confirm</li>\\r\\n            <li>You have now bought the shares, don't forget to <a href=\\\"\\\" class=\\\"findSymbol\\\">add the token to wallet</a>. &#127881;</li>\\r\\n        </ul>\\r\\n        <div style=\\\"text-align: center;\\\">\\r\\n            <!--\\r\\n                        <iframe width=\\\"380\\\" height=\\\"500\\\" src=\\\"https://www.youtube.com/embed/m1iNotgaic4?autoplay=1&cc_load_policy=1&playlist=m1iNotgaic4&loop=1\\\" title=\\\"YouTube video player\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\\" allowfullscreen></iframe>\\r\\n            -->\\r\\n        </div>\\r\\n\\r\\n\\r\\n        <h3>Sell your securities</h3>\\r\\n\\r\\n        <ul>\\r\\n            <li>Find the token you want so sell in you wallet and click Send</li>\\r\\n            <li>Put the in the aUSD address<br/><input id=\\\"aUsdAddress\\\" value=\\\"{{AUSDAddress}}\\\">\\r\\n                <ul>\\r\\n                    <li><em>Note: If you can, save the address to your contact list for easy access next time</em></li>\\r\\n                </ul>\\r\\n            </li>\\r\\n            <li>Type in the quantity of shares you want to sell & click Confirm</li>\\r\\n            <li>You have now sold the shares &#127881;</li>\\r\\n        </ul>\\r\\n\\r\\n    </article>\\r\\n</div>\";\n// Exports\n/* harmony default export */ const trade = (trade_code);\n;// CONCATENATED MODULE: ./src/html/modal/CopyTokenAddressToAddToWallet.html\n// Module\nvar CopyTokenAddressToAddToWallet_code = \"\\r\\n\\r\\n    You can copy the address of {{symbol}} and import it into your wallet\\r\\n    <input id=\\\"tokenAddress\\\" value=\\\"{{tokenAddress}}\\\" />\\r\\n\\r\\n\";\n// Exports\n/* harmony default export */ const CopyTokenAddressToAddToWallet = (CopyTokenAddressToAddToWallet_code);\n;// CONCATENATED MODULE: ./src/ui/pages/TradePage.ts\nvar TradePage_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass TradePage {\r\n    constructor() {\r\n        this.contractInfo = ContractInfo.getContractInfo();\r\n    }\r\n    load(symbol, name, logo, address) {\r\n        return TradePage_awaiter(this, void 0, void 0, function* () {\r\n            let mainContainer = document.getElementById('main_container');\r\n            if (!mainContainer)\r\n                return;\r\n            let template = Handlebars.compile(trade);\r\n            mainContainer.innerHTML = template({ AUSDAddress: this.contractInfo.AUSD_ADDRESS });\r\n            let tradePanel = new TradePanel();\r\n            yield tradePanel.render('liminal_market_trade_panel');\r\n            if (symbol) {\r\n                yield this.selectSymbol(symbol, name, logo, address);\r\n            }\r\n            AUSDService.onAUsdLoad.push(() => {\r\n                this.loadBuyWithWallet();\r\n            });\r\n            let findSymbols = document.querySelectorAll('.findSymbol');\r\n            findSymbols === null || findSymbols === void 0 ? void 0 : findSymbols.forEach(findSymbol => {\r\n                findSymbol.addEventListener('click', (evt) => {\r\n                    evt.preventDefault();\r\n                    let securitiesModal = new SecuritiesListModal();\r\n                    securitiesModal.showModal(() => {\r\n                        securitiesModal.hideModal();\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    selectSymbol(symbol, name, logo, address) {\r\n        return TradePage_awaiter(this, void 0, void 0, function* () {\r\n            let tradePanel = new TradePanel();\r\n            yield tradePanel.render('liminal_market_trade_panel', symbol, name, logo, address);\r\n        });\r\n    }\r\n    loadBuyWithWallet() {\r\n        return TradePage_awaiter(this, void 0, void 0, function* () {\r\n            let user = new UserService();\r\n            let ethAddress = user.getEthAddress();\r\n            if (!ethAddress) {\r\n                return;\r\n            }\r\n            let aUSDService = new AUSDService();\r\n            let ausdAmount = yield aUSDService.getAUSDBalanceOf(ethAddress);\r\n            let userWallet = document.getElementById('use_wallet_for_orders');\r\n            let userWalletLink = document.getElementById('use_wallet_for_orders_link');\r\n            if (ausdAmount.eq(0)) {\r\n                userWallet === null || userWallet === void 0 ? void 0 : userWallet.classList.add('hidden');\r\n                userWalletLink === null || userWalletLink === void 0 ? void 0 : userWalletLink.classList.add('not_visible');\r\n            }\r\n            else {\r\n                userWallet === null || userWallet === void 0 ? void 0 : userWallet.classList.remove('hidden');\r\n                userWalletLink === null || userWalletLink === void 0 ? void 0 : userWalletLink.classList.remove('not_visible');\r\n            }\r\n            let addAUSDToWallet = document.getElementById('addAUSDToWallet');\r\n            addAUSDToWallet === null || addAUSDToWallet === void 0 ? void 0 : addAUSDToWallet.addEventListener('click', (evt) => {\r\n                evt.preventDefault();\r\n                let walletHelper = new WalletHelper();\r\n                walletHelper.addTokenToWallet(this.contractInfo.AUSD_ADDRESS, 'aUSD', () => {\r\n                    let modal = new Modal();\r\n                    let template = Handlebars.compile(CopyTokenAddressToAddToWallet);\r\n                    let content = template({ symbol: 'aUSD', tokenAddress: this.contractInfo.AUSD_ADDRESS });\r\n                    modal.showModal('Add aUSD to wallet', content);\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/pages/stockspage.html\n// Module\nvar stockspage_code = \"\\r\\n<article id=\\\"stockList\\\">\\r\\n <div id=\\\"ua\\\"></div>\\r\\n <div id=\\\"list_of_securities\\\">{{{securities}}}</div>\\r\\n\\r\\n</article>\";\n// Exports\n/* harmony default export */ const stockspage = (stockspage_code);\n;// CONCATENATED MODULE: ./src/ui/pages/StocksPage.ts\nvar StocksPage_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nclass StocksPage {\r\n    constructor() {\r\n    }\r\n    load() {\r\n        return StocksPage_awaiter(this, void 0, void 0, function* () {\r\n            let mainContainer = document.getElementById('main_container');\r\n            if (!mainContainer)\r\n                return;\r\n            let securitiesList = new SecuritiesList();\r\n            let securities = yield securitiesList.render();\r\n            let template = Handlebars.compile(stockspage);\r\n            mainContainer.innerHTML = template({ securities: securities });\r\n            yield securitiesList.loadMore();\r\n            yield securitiesList.bindEvents((symbol, name, logo) => StocksPage_awaiter(this, void 0, void 0, function* () {\r\n                let liminalMarketService = new LiminalMarketService();\r\n                let address = yield liminalMarketService.getSymbolContractAddress(symbol);\r\n                let tradePage = new TradePage();\r\n                window.scrollTo(0, 0);\r\n                history.pushState(null, 'Buy stocks', '#/trade');\r\n                yield tradePage.load(symbol, name, logo, address);\r\n            }));\r\n        });\r\n    }\r\n    ;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/elements/documents.html\n// Module\nvar documents_code = \"<h3>Documents</h3>\\r\\n<p>These are your documents for your trades, generated by the broker. These documents are trade confirmation & monthly statements.\\r\\n\\tThey are generated at the end of the day, between 06:30PM-07:30PM EST.\\r\\n</p>\\r\\n{{#if result}}\\r\\n<table class=\\\"table table-hover\\\">\\r\\n\\t<thead>\\r\\n\\t\\t<tr>\\r\\n\\t\\t\\t<th>Type</th>\\r\\n\\t\\t\\t<th>Date</th>\\r\\n\\t\\t\\t<th>Download</th>\\r\\n\\t\\t</tr>\\r\\n\\t</thead>\\r\\n\\t<tbody>\\r\\n\\t\\t{{#each result}}\\r\\n\\t\\t<tr>\\r\\n\\t\\t\\t<td title=\\\"{{id}}\\\">{{type}}</a></td>\\r\\n\\t\\t\\t<td>{{date}}</td>\\r\\n\\t\\t\\t<td><a href=\\\"\\\" class=\\\"downloadDoc\\\" data-docid=\\\"{{id}}\\\">Download</a></td>\\r\\n\\t\\t</tr>\\r\\n\\t\\t{{/each}}\\r\\n\\t</tbody>\\r\\n</table>\\r\\n{{/if}}\";\n// Exports\n/* harmony default export */ const elements_documents = (documents_code);\n;// CONCATENATED MODULE: ./src/services/backend/DocumentService.ts\nvar DocumentService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\nclass DocumentService extends BaseService {\r\n    constructor() {\r\n        super();\r\n    }\r\n    getDocuments() {\r\n        return DocumentService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.get('documents');\r\n        });\r\n    }\r\n    getDocument(documentId) {\r\n        return DocumentService_awaiter(this, void 0, void 0, function* () {\r\n            const params = {\r\n                documentId: documentId\r\n            };\r\n            return yield this.get(\"download\", params);\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/CreateToken.html\n// Module\nvar CreateToken_code = \"Token for {{symbol}} does not exist. You can click the button below to create the token. This will cost a bit of gas.\\r\\n<br /><br />\\r\\nAfter the token has been created we will try to add it to your wallet.\\r\\n<br /><br />\\r\\n<button id=\\\"createTokenBtn\\\">Create token</button>\\r\\n\\r\\n<div class=\\\"d-none\\\" id=\\\"copyAddressInfo\\\">\\r\\n    You can copy the address of the token and import it into your wallet\\r\\n    <input id=\\\"tokenAddress\\\" />\\r\\n\\r\\n</div>\";\n// Exports\n/* harmony default export */ const modal_CreateToken = (CreateToken_code);\n;// CONCATENATED MODULE: ./src/ui/modals/CreateToken.ts\nvar CreateToken_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass CreateToken {\r\n    constructor() {\r\n    }\r\n    show(symbol) {\r\n        let modal = new Modal();\r\n        let template = Handlebars.compile(modal_CreateToken);\r\n        modal.showModal(\"Token \" + symbol + \" doesn't exist\", template({ symbol: symbol }));\r\n        let btn = document.getElementById('createTokenBtn');\r\n        if (!btn)\r\n            return;\r\n        btn.addEventListener('click', () => CreateToken_awaiter(this, void 0, void 0, function* () {\r\n            LoadingHelper.setLoading(btn);\r\n            let liminalMarketService = new LiminalMarketService();\r\n            let address = yield liminalMarketService.getSymbolContractAddress(symbol);\r\n            if (address === Helper_AddressZero) {\r\n                let result = yield liminalMarketService.createToken(symbol, () => {\r\n                    btn.innerHTML = 'Creating token. Give it few seconds';\r\n                });\r\n                if (result instanceof BlockchainError && result.code == BlockchainError.UserCancelled) {\r\n                    LoadingHelper.removeLoading();\r\n                    return;\r\n                }\r\n                address = result;\r\n            }\r\n            LoadingHelper.removeLoading();\r\n            btn.innerHTML = 'Add token to wallet';\r\n            let walletHelper = new WalletHelper();\r\n            yield walletHelper.addTokenToWallet(address, symbol, () => {\r\n                let tokenAddressInput = document.getElementById('tokenAddress');\r\n                if (!tokenAddressInput)\r\n                    return;\r\n                tokenAddressInput.innerHTML = address;\r\n                document.getElementById('copyAddressInfo').classList.remove('d-none');\r\n            });\r\n        }));\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/pages/positions.html\n// Module\nvar positions_code = \"<article class=\\\"loaded-content2\\\">\\r\\n\\t<h3>Positions<!-- <a href=\\\"\\\" role=\\\"button\\\" id=\\\"syncWallet\\\">Sync wallet</a>--></h3>\\r\\n\\t<figure>\\r\\n\\t<table>\\r\\n\\t\\t<thead>\\r\\n\\t\\t\\t<tr>\\r\\n\\t\\t\\t\\t<th></th>\\r\\n\\t\\t\\t\\t<th>Symbol</th>\\r\\n\\t\\t\\t\\t<th>Current price</th>\\r\\n\\t\\t\\t\\t<th>Avg. entry value</th>\\r\\n\\t\\t\\t\\t<th>Quantity</th>\\r\\n\\t\\t\\t\\t<th>Market value</th>\\r\\n\\t\\t\\t\\t<th>Unrealize PL</th>\\r\\n\\t\\t\\t\\t<th>Trade</th>\\r\\n\\t\\t\\t\\t<th>Add to wallet</th>\\r\\n\\t\\t\\t</tr>\\r\\n\\t\\t</thead>\\r\\n\\t\\t<tbody>\\r\\n\\t\\t\\t{{#if result}}\\r\\n\\t\\t\\t{{#each result}}\\r\\n\\t\\t\\t<tr>\\r\\n\\t\\t\\t\\t<td class=\\\"symbol_logo\\\"><img id=\\\"symbol_logo_{{symbol}}\\\" src=\\\"/img/logos/default_logo.png\\\" /></td>\\r\\n\\t\\t\\t\\t<td><a href=\\\"https://strike.market/stocks/{{symbol}}\\\" target=\\\"_blank\\\">{{symbol}}</a></td>\\r\\n\\t\\t\\t\\t<td>{{current_price}}</td>\\r\\n\\t\\t\\t\\t<td>{{round2 avg_entry_price}}</td>\\r\\n\\t\\t\\t\\t<td>{{round2 qty}}</td>\\r\\n\\t\\t\\t\\t<td>${{round market_value}}</td>\\r\\n\\t\\t\\t\\t<td class=\\\"{{classColor unrealized_pl}}\\\">${{round unrealized_pl}} ({{perc unrealized_plpc}})</td>\\r\\n\\t\\t\\t\\t<td><a href=\\\"#\\\" class=\\\"tradeSecurity\\\" data-symbol=\\\"{{symbol}}\\\" data-qty={{qty}}>Trade</a></td>\\r\\n\\t\\t\\t\\t<td><a href=\\\"\\\" class=\\\"addToWallet\\\" data-symbol=\\\"{{symbol}}\\\">Add</a></td>\\r\\n\\t\\t\\t</tr>\\r\\n\\t\\t\\t{{/each}}\\r\\n\\t\\t\\t{{^}}\\r\\n\\t\\t\\t<tr>\\r\\n\\t\\t\\t\\t<td colspan=\\\"9\\\">No trades have been executed on this wallet. Start trading to see\\r\\n\\t\\t\\t\\t\\tyour positions\\r\\n\\t\\t\\t\\t</td>\\r\\n\\t\\t\\t</tr>\\r\\n\\t\\t\\t{{/if}}\\r\\n\\t\\t</tbody>\\r\\n\\t</table>\\r\\n\\t</figure>\\r\\n\\t<div id=\\\"documents\\\"></div>\\r\\n\\r\\n</article>\";\n// Exports\n/* harmony default export */ const pages_positions = (positions_code);\n;// CONCATENATED MODULE: ./src/services/backend/PositionsService.ts\nvar PositionsService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\nclass PositionsService extends BaseService {\r\n    constructor() {\r\n        super();\r\n    }\r\n    getPositions(address) {\r\n        return PositionsService_awaiter(this, void 0, void 0, function* () {\r\n            let userPosition = yield this.get('positions', { address });\r\n            return userPosition === null || userPosition === void 0 ? void 0 : userPosition.positions;\r\n        });\r\n    }\r\n    getUserPositions(address) {\r\n        return PositionsService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.get('positions', { address });\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/pages/BasePage.ts\n\r\nclass BasePage {\r\n    constructor() {\r\n        this.user = App.User;\r\n        this.network = App.Network;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/pages/PositionsPage.ts\nvar PositionsPage_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass PositionsPage extends BasePage {\r\n    constructor() {\r\n        super();\r\n        this.documentService = new DocumentService();\r\n    }\r\n    load() {\r\n        return PositionsPage_awaiter(this, void 0, void 0, function* () {\r\n            let mainContainer = document.getElementById('main_container');\r\n            if (!mainContainer)\r\n                return;\r\n            let userService = new UserService();\r\n            let positionService = new PositionsService();\r\n            let positions = yield positionService.getPositions(userService.getEthAddress());\r\n            if (!positions)\r\n                positions = [];\r\n            HandlebarHelpers.registerHelpers();\r\n            let template = Handlebars.compile(pages_positions);\r\n            mainContainer.innerHTML = template({ result: positions });\r\n            let symbols = new Array();\r\n            const sellLinks = document.getElementsByClassName('tradeSecurity');\r\n            for (let i = 0; i < sellLinks.length; i++) {\r\n                let element = sellLinks[i];\r\n                let symbol = element.dataset.symbol;\r\n                if (!symbol)\r\n                    continue;\r\n                symbols.push(symbol);\r\n                sellLinks[i].addEventListener('click', (evt) => PositionsPage_awaiter(this, void 0, void 0, function* () {\r\n                    evt.preventDefault();\r\n                    let element = evt.target;\r\n                    let symbol = element.dataset.symbol;\r\n                    if (!symbol)\r\n                        return;\r\n                    let liminalMarketService = new LiminalMarketService();\r\n                    let contractAddress = yield liminalMarketService.getSymbolContractAddress(symbol);\r\n                    let securitiesService = yield SecuritiesService.getInstance();\r\n                    let security = yield securitiesService.getSecurityBySymbol(symbol);\r\n                    let tradePage = new TradePage();\r\n                    yield tradePage.load(symbol, security.Name, security.LogoPath + security.Logo, contractAddress);\r\n                    window.scrollTo(0, 0);\r\n                }));\r\n            }\r\n            const addToWalletLinks = document.getElementsByClassName('addToWallet');\r\n            for (let i = 0; i < addToWalletLinks.length; i++) {\r\n                addToWalletLinks[i].addEventListener('click', (evt) => PositionsPage_awaiter(this, void 0, void 0, function* () {\r\n                    evt.preventDefault();\r\n                    console.log(evt.target);\r\n                    let element = addToWalletLinks[i];\r\n                    let symbol = element.dataset.symbol;\r\n                    let liminalMarketService = new LiminalMarketService();\r\n                    let contractAddress = yield liminalMarketService.getSymbolContractAddress(symbol);\r\n                    if (contractAddress.toString() == Helper_AddressZero) {\r\n                        let createToken = new CreateToken();\r\n                        createToken.show(symbol);\r\n                        return;\r\n                    }\r\n                    let walletHelper = new WalletHelper();\r\n                    yield walletHelper.addTokenToWallet(contractAddress.toString(), symbol, () => {\r\n                        let modal = new Modal();\r\n                        let template = Handlebars.compile(AddressInfo);\r\n                        let content = template({ symbol: symbol, address: contractAddress });\r\n                        modal.showModal('Import token to wallet', content);\r\n                    });\r\n                }));\r\n            }\r\n            yield this.renderSymbolLogos(symbols);\r\n            let docTemplate = Handlebars.compile(elements_documents);\r\n            let documents = yield this.documentService.getDocuments();\r\n            let documentDom = document.getElementById('documents');\r\n            if (!documentDom)\r\n                return;\r\n            documentDom.innerHTML = docTemplate({ result: documents });\r\n            yield this.initDocuments();\r\n        });\r\n    }\r\n    renderSymbolLogos(symbols) {\r\n        return PositionsPage_awaiter(this, void 0, void 0, function* () {\r\n            let securitiesService = yield SecuritiesService.getInstance();\r\n            const assets = yield securitiesService.getSecurities();\r\n            let asset;\r\n            for (let i = 0; i < symbols.length; i++) {\r\n                asset = assets.get(symbols[i]);\r\n                if (asset) {\r\n                    document.getElementById('symbol_logo_' + symbols[i]).setAttribute('src', '/img/logos/' + asset.Logo);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    initDocuments() {\r\n        return PositionsPage_awaiter(this, void 0, void 0, function* () {\r\n            if (!this.user.isLoggedIn)\r\n                return;\r\n            const links = document.getElementsByClassName('downloadDoc');\r\n            for (let i = 0; i < links.length; i++) {\r\n                links[i].addEventListener('click', (evt) => PositionsPage_awaiter(this, void 0, void 0, function* () {\r\n                    evt.preventDefault();\r\n                    let documentId = links[i].dataset.docid;\r\n                    if (!documentId)\r\n                        return;\r\n                    let locationUrl = yield this.documentService.getDocument(documentId);\r\n                    if (locationUrl == '') {\r\n                        alert('Could not find document. Please contact us if you should have gotten a document');\r\n                        return;\r\n                    }\r\n                    window.location = locationUrl;\r\n                }));\r\n            }\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/routing/Routing.ts\nvar Routing_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Routing {\r\n    constructor() {\r\n        this.settings = {\r\n            show_trade: this.showTrade,\r\n            show_positions: this.showPositions,\r\n            show_stocks: this.showStocks,\r\n            show_kyc_action_required: this.showKycActionRequired,\r\n            show_funding: this.showFunding,\r\n            show_kyc: this.showKyc\r\n        };\r\n    }\r\n    loadRoutes() {\r\n        var _a;\r\n        return Routing_awaiter(this, void 0, void 0, function* () {\r\n            let path = window.location.hash.replace('#', '').replace('/', '');\r\n            if (path === '')\r\n                path = 'stocks';\r\n            this.attachNavLinks();\r\n            let fn = (_a = this.settings['show_' + path]) !== null && _a !== void 0 ? _a : this.settings['show_stocks'];\r\n            if (typeof fn === 'function') {\r\n                yield fn(this);\r\n            }\r\n            else {\r\n                yield fn(this.settings['show_stocks']);\r\n            }\r\n        });\r\n    }\r\n    showKycActionRequired(routing, evt) {\r\n        return Routing_awaiter(this, void 0, void 0, function* () {\r\n            if (evt)\r\n                evt.preventDefault();\r\n            let page = new TradePage();\r\n            yield page.load();\r\n            history.pushState(null, 'Buy stocks', '#/kyc_action_required');\r\n            let button = document.getElementById('liminal_market_execute_trade');\r\n            button === null || button === void 0 ? void 0 : button.dispatchEvent(new MouseEvent('click'));\r\n        });\r\n    }\r\n    showKyc(routing, evt) {\r\n        return Routing_awaiter(this, void 0, void 0, function* () {\r\n            if (evt)\r\n                evt.preventDefault();\r\n            let page = new TradePage();\r\n            yield page.load();\r\n            history.pushState(null, 'Buy stocks', '#/kyc');\r\n            let button = document.getElementById('liminal_market_execute_trade');\r\n            button === null || button === void 0 ? void 0 : button.dispatchEvent(new MouseEvent('click'));\r\n        });\r\n    }\r\n    showFunding(routing, evt) {\r\n        return Routing_awaiter(this, void 0, void 0, function* () {\r\n            if (evt)\r\n                evt.preventDefault();\r\n            let page = new TradePage();\r\n            yield page.load();\r\n            history.pushState(null, 'Buy stocks', '#/funding');\r\n            let aUSDFundingModal = new FakeAUSDFund();\r\n            if (App.Network.TestNetwork) {\r\n                aUSDFundingModal.showAUSDFakeFund();\r\n            }\r\n            else {\r\n                aUSDFundingModal.showAUSDFund();\r\n            }\r\n        });\r\n    }\r\n    showTrade(routing, evt) {\r\n        return Routing_awaiter(this, void 0, void 0, function* () {\r\n            if (evt)\r\n                evt.preventDefault();\r\n            let page = new TradePage();\r\n            yield page.load();\r\n            history.pushState(null, 'Buy stocks', '#/trade');\r\n        });\r\n    }\r\n    showStocks(routing, evt) {\r\n        return Routing_awaiter(this, void 0, void 0, function* () {\r\n            if (evt)\r\n                evt.preventDefault();\r\n            let page = new StocksPage();\r\n            yield page.load();\r\n            history.pushState(null, 'Stocks', '#/stocks');\r\n        });\r\n    }\r\n    showPositions(routing, evt) {\r\n        return Routing_awaiter(this, void 0, void 0, function* () {\r\n            if (evt)\r\n                evt.preventDefault();\r\n            let page = new PositionsPage();\r\n            yield page.load();\r\n            history.pushState(null, 'Positions', '#/positions');\r\n        });\r\n    }\r\n    attachNavLinks() {\r\n        let router = this;\r\n        let tradeNavLinks = document.querySelectorAll('.tradeNavLink');\r\n        tradeNavLinks.forEach(link => {\r\n            link.addEventListener('click', (evt) => Routing_awaiter(this, void 0, void 0, function* () {\r\n                WalletHelper.hideMagicWallet();\r\n                yield router.showTrade(router, evt);\r\n                link.parentElement.parentElement.parentElement.removeAttribute('open');\r\n            }));\r\n        });\r\n        let investLinks = document.querySelectorAll('.investNavLink');\r\n        investLinks.forEach(link => {\r\n            link.addEventListener('click', (evt) => Routing_awaiter(this, void 0, void 0, function* () {\r\n                WalletHelper.hideMagicWallet();\r\n                yield router.showStocks(router, evt);\r\n                link.parentElement.parentElement.parentElement.removeAttribute('open');\r\n            }));\r\n        });\r\n        let positionLinks = document.querySelectorAll('.positionNavLink');\r\n        positionLinks.forEach(link => {\r\n            link.addEventListener('click', (evt) => Routing_awaiter(this, void 0, void 0, function* () {\r\n                WalletHelper.hideMagicWallet();\r\n                yield router.showPositions(router, evt);\r\n                link.parentElement.parentElement.parentElement.removeAttribute('open');\r\n            }));\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/elements/Header.ts\nvar Header_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nclass Header {\r\n    load() {\r\n        return Header_awaiter(this, void 0, void 0, function* () {\r\n            this.loadImage();\r\n            yield this.showUserOptions();\r\n        });\r\n    }\r\n    loadImage() {\r\n        return Header_awaiter(this, void 0, void 0, function* () {\r\n            let header = document.querySelector('body > header');\r\n            if (!header)\r\n                return;\r\n            let random = Math.floor(Math.random() * 10);\r\n            header.style.backgroundImage = \"url(/img/header/\" + random + \".jpg)\";\r\n        });\r\n    }\r\n    showUserOptions() {\r\n        return Header_awaiter(this, void 0, void 0, function* () {\r\n            let authenticationService = new AuthenticateService();\r\n            let isAuthenticated = yield authenticationService.isAuthenticated();\r\n            if (!isAuthenticated) {\r\n                let connectWallet = new ConnectWallet();\r\n                connectWallet.renderButton('user_header_info');\r\n                return;\r\n            }\r\n            let userInfo = new UserInfo(App.User.providerInfo);\r\n            yield userInfo.render('user_header_info');\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/elements/UserPosition.ts\nvar UserPosition_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\nclass UserPosition {\r\n    constructor() {\r\n    }\r\n    static registerListener() {\r\n        UserInfo.onUserLoggedIn.push(() => UserPosition_awaiter(this, void 0, void 0, function* () {\r\n            let userPosition = new UserPosition();\r\n            userPosition.render();\r\n        }));\r\n    }\r\n    render() {\r\n        return UserPosition_awaiter(this, void 0, void 0, function* () {\r\n            let userService = new UserService();\r\n            let positionService = new PositionsService();\r\n            let userPosition = yield positionService.getUserPositions(userService.getEthAddress());\r\n            if (!userPosition)\r\n                return;\r\n            let pl_status = document.querySelector('.pl_status');\r\n            pl_status === null || pl_status === void 0 ? void 0 : pl_status.classList.remove('hidden');\r\n            pl_status === null || pl_status === void 0 ? void 0 : pl_status.addEventListener('click', (evt) => {\r\n                evt.preventDefault();\r\n                let positionPage = new PositionsPage();\r\n                positionPage.load();\r\n            });\r\n            let unrealized_pl = document.getElementById('unrealized_pl');\r\n            if (unrealized_pl) {\r\n                let number = new bignumber(userPosition.unrealizedPL);\r\n                unrealized_pl.innerHTML = '$' + number.decimalPlaces(0).toFixed();\r\n                let className = this.getClassName(userPosition.unrealizedPL);\r\n                unrealized_pl.classList.add(className);\r\n            }\r\n            let unrealized_plpc = document.getElementById('unrealized_plpc');\r\n            if (unrealized_plpc) {\r\n                let number = new bignumber(userPosition.unrealizedPLPc);\r\n                unrealized_plpc.innerHTML = number.multipliedBy(100).decimalPlaces(2).toFixed() + '%';\r\n                let className = this.getClassName(userPosition.unrealizedPL);\r\n                unrealized_plpc.classList.add(className);\r\n            }\r\n        });\r\n    }\r\n    getClassName(value) {\r\n        return (value.toString().indexOf('-') == -1) ? 'green' : 'red';\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/elements/tradepanel/TradeExecuted.html\n// Module\nvar TradeExecuted_code = \"\\r\\n<article class=\\\"trade_executed\\\">\\r\\n    <nav>\\r\\n    <ul>\\r\\n        <li>\\r\\n            <img src=\\\"{{sellingLogo}}\\\"><br />\\r\\n            {{sellingSymbol}}<br />\\r\\n            {{sellingAmount}}\\r\\n        </li>\\r\\n    </ul>\\r\\n    <ul>\\r\\n        <li> ----> </li>\\r\\n    </ul>\\r\\n    <ul>\\r\\n        <li>\\r\\n            <img src=\\\"{{buyingLogo}}\\\" /><br />\\r\\n            {{buyingSymbol}}<br />\\r\\n            <abbr title=\\\"{{buyingQuantity}}\\\" data-tooltip=\\\"{{buyingQuantity}}\\\">{{buyingRoundQuantity}}</abbr>\\r\\n        </li>\\r\\n    </ul>\\r\\n    </nav>\\r\\n    <div>\\r\\n        If you haven't already, add the {{buyingSymbol}} to your wallet.\\r\\n        <br /><br />\\r\\n        <button id=\\\"addTokenToWallet\\\" data-address=\\\"{{tokenAddress}}\\\">Add {{buyingSymbol}} to wallet</button>\\r\\n        <div id=\\\"addTokenToWalletFailed\\\" class=\\\"d-none\\\">\\r\\n            You can copy the address, to import the token\\r\\n            <input value=\\\"{{tokenAddress}}\\\" />\\r\\n        </div>\\r\\n        <br />\\r\\n        Should be visible in your {{walletName}} on address {{shortEthAddress}}.\\r\\n        <br /><br />\\r\\n        <small>You can view the <a href=\\\"{{blockExplorerLink}}\\\" target=\\\"_blank\\\">block transaction here</a></small>\\r\\n    </div>\\r\\n</article>\\r\\n\";\n// Exports\n/* harmony default export */ const TradeExecuted = (TradeExecuted_code);\n;// CONCATENATED MODULE: ./src/ui/elements/tradepanel/OrderExecutedModal.ts\nvar OrderExecutedModal_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst confetti = __webpack_require__(/*! canvas-confetti */ \"./node_modules/canvas-confetti/dist/confetti.module.mjs\");\r\nclass OrderExecutedModal {\r\n    show(object) {\r\n        var _a;\r\n        return OrderExecutedModal_awaiter(this, void 0, void 0, function* () {\r\n            yield AUsdBalance.forceLoadAUSDBalanceUI();\r\n            OrderProgress.getInstance().clearProgressText();\r\n            let providerInfo = ProviderInfo.Instance;\r\n            let networkInfo = App.Network;\r\n            let isBuy = (object.side == 'buy');\r\n            let obj = (isBuy) ? this.getBuyingSharesObj(object) : this.getSellSharesObj(object);\r\n            obj.walletName = (_a = providerInfo === null || providerInfo === void 0 ? void 0 : providerInfo.WalletName) !== null && _a !== void 0 ? _a : '';\r\n            obj.blockExplorerLink = networkInfo.BlockExplorer + '/tx/' + object.transaction_hash;\r\n            let template = Handlebars.compile(TradeExecuted);\r\n            let content = template(obj);\r\n            let modal = new Modal();\r\n            modal.showModal('Trade executed', content);\r\n            let myCanvas = document.createElement('canvas');\r\n            myCanvas.id = 'confetti';\r\n            document.querySelector('.trade_executed').appendChild(myCanvas);\r\n            let myConfetti = confetti.create(myCanvas, { resize: true, useWorker: true });\r\n            myConfetti({ particleCount: 200, spread: 200 });\r\n            let addTokenToWallet = document.getElementById('addTokenToWallet');\r\n            if (!addTokenToWallet)\r\n                return;\r\n            addTokenToWallet.addEventListener('click', (evt) => {\r\n                let address = evt.target.dataset.address;\r\n                let walletHelper = new WalletHelper();\r\n                walletHelper.addTokenToWallet(address, obj.buyingSymbol, () => {\r\n                    let addTokenToWalletFailed = document.getElementById('addTokenToWalletFailed');\r\n                    if (!addTokenToWalletFailed)\r\n                        return;\r\n                    addTokenToWalletFailed.classList.remove('d-none');\r\n                });\r\n            });\r\n        });\r\n    }\r\n    getBuyingSharesObj(object) {\r\n        let ethAddress = object.walletAddress;\r\n        let tokenAddress = object.tokenAddress;\r\n        let buyingQuantity = object.filled_qty;\r\n        let sellingAmount = '$' + object.amount;\r\n        return {\r\n            sellingLogo: '/img/logos/aUSD.png',\r\n            sellingSymbol: 'aUSD',\r\n            sellingAmount: sellingAmount,\r\n            buyingLogo: '/img/logos/' + object.symbol + '.png',\r\n            buyingSymbol: object.symbol,\r\n            buyingQuantity: buyingQuantity,\r\n            buyingRoundQuantity: roundNumberDecimal(buyingQuantity, 6) + ' shares',\r\n            shortEthAddress: shortEth(ethAddress),\r\n            tokenAddress: tokenAddress\r\n        };\r\n    }\r\n    getSellSharesObj(object) {\r\n        let ethAddress = object.sender;\r\n        let tokenAddress = object.recipient;\r\n        let buyingQuantity = new bignumber(object.filled_avg_price).multipliedBy(new bignumber(object.filled_qty));\r\n        let sellingAmount = object.filled_qty;\r\n        return {\r\n            sellingLogo: '/img/logos/' + object.symbol + '.png',\r\n            sellingSymbol: object.symbol,\r\n            sellingAmount: sellingAmount + ' shares',\r\n            buyingLogo: '/img/logos/aUSD.png',\r\n            buyingSymbol: 'aUSD',\r\n            buyingQuantity: buyingQuantity.toFixed(),\r\n            buyingRoundQuantity: '$' + roundBigNumberDecimal(buyingQuantity, 6).toFixed(),\r\n            shortEthAddress: shortEth(ethAddress),\r\n            tokenAddress: tokenAddress\r\n        };\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/services/backend/EventService.ts\nvar EventService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass EventService_EventService {\r\n    static register() {\r\n        UserInfo.onUserLoggedIn.push(() => EventService_awaiter(this, void 0, void 0, function* () {\r\n            let eventService = new EventService_EventService();\r\n            eventService.listen();\r\n        }));\r\n    }\r\n    listen() {\r\n        let network = App.Network;\r\n        let eventSource = new EventSource(network.ServerUrl + '/listenForChanges?jwt=' + App.User.token);\r\n        eventSource.onmessage = (e) => EventService_awaiter(this, void 0, void 0, function* () {\r\n            let data = e.data;\r\n            console.log(e);\r\n            if (!data || data == 'ok')\r\n                return;\r\n            let obj = isJSON(data);\r\n            if (!obj) {\r\n                console.log('data is not json:', data);\r\n                return;\r\n            }\r\n            if (obj.methodName == 'OrderExecuted') {\r\n                let orderExecutedModal = new OrderExecutedModal();\r\n                orderExecutedModal.show(obj);\r\n            }\r\n            else if (obj.methodName == 'SendingToExchange') {\r\n                yield OrderProgress.getInstance().setProgressText(1, 'Received order, sending to stock exchange', obj.hash);\r\n            }\r\n            else if (obj.methodName == 'BalanceSet') {\r\n                if (obj.balance != '0') {\r\n                    ExecuteOrderButton.Instance.renderButton();\r\n                }\r\n            }\r\n            else if (obj.methodName == 'AccountValidated') {\r\n                let hasBuyingPower = obj.hasBuyingPower;\r\n                if (!hasBuyingPower) {\r\n                    let kycApproved = new KycApproved();\r\n                    kycApproved.show();\r\n                }\r\n                else if (ExecuteOrderButton.Instance) {\r\n                    ExecuteOrderButton.Instance.hasBuyingPower = obj.hasBuyingPower;\r\n                    clearInterval(ExecuteOrderButton.Instance.kycIdDoneTimeout);\r\n                    ExecuteOrderButton.Instance.renderButton();\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/main.ts\nvar main_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass App {\r\n    constructor() {\r\n        console.log('App constructor');\r\n        App.Network = NetworkInfo.getInstance();\r\n        window.addEventListener('load', () => {\r\n            // @ts-ignore\r\n            if (window.ethereum && window.ethereum.chainId != App.Network.ChainIdHex) {\r\n                // @ts-ignore\r\n                NetworkInfo.setNetworkByChainId(window.ethereum.chainId);\r\n                App.Network = NetworkInfo.getInstance();\r\n            }\r\n            console.log('network', App.Network);\r\n        });\r\n        App.User = new User(null, '', App.Network.ChainId, '');\r\n    }\r\n    start() {\r\n        return main_awaiter(this, void 0, void 0, function* () {\r\n            let routing = new Routing();\r\n            yield routing.loadRoutes();\r\n            UserPosition.registerListener();\r\n            EventService_EventService.register();\r\n            let header = new Header();\r\n            header.load();\r\n            if (WalletHelper.isWebview()) {\r\n                // @ts-ignore\r\n                var vConsole = new window.VConsole();\r\n            }\r\n        });\r\n    }\r\n}\r\nlet app = new App();\r\napp.start().then();\r\n// @ts-ignore\r\nwindow.app = app;\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/main.ts\n");

            /***/
        }),

        /***/ "?8131":
        /*!************************!*\
          !*** buffer (ignored) ***!
          \************************/
        /***/ (() => {

            /* (ignored) */

            /***/
        }),

        /***/ "./node_modules/canvas-confetti/dist/confetti.module.mjs":
        /*!***************************************************************!*\
          !*** ./node_modules/canvas-confetti/dist/confetti.module.mjs ***!
          \***************************************************************/
        /***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

            "use strict";
            eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"create\": () => (/* binding */ create),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// canvas-confetti v1.6.0 built on 2022-10-24T21:26:41.619Z\nvar module = {};\n\n// source content\n(function main(global, module, isWorker, workerSize) {\n  var canUseWorker = !!(\n    global.Worker &&\n    global.Blob &&\n    global.Promise &&\n    global.OffscreenCanvas &&\n    global.OffscreenCanvasRenderingContext2D &&\n    global.HTMLCanvasElement &&\n    global.HTMLCanvasElement.prototype.transferControlToOffscreen &&\n    global.URL &&\n    global.URL.createObjectURL);\n\n  function noop() {}\n\n  // create a promise if it exists, otherwise, just\n  // call the function directly\n  function promise(func) {\n    var ModulePromise = module.exports.Promise;\n    var Prom = ModulePromise !== void 0 ? ModulePromise : global.Promise;\n\n    if (typeof Prom === 'function') {\n      return new Prom(func);\n    }\n\n    func(noop, noop);\n\n    return null;\n  }\n\n  var raf = (function () {\n    var TIME = Math.floor(1000 / 60);\n    var frame, cancel;\n    var frames = {};\n    var lastFrameTime = 0;\n\n    if (typeof requestAnimationFrame === 'function' && typeof cancelAnimationFrame === 'function') {\n      frame = function (cb) {\n        var id = Math.random();\n\n        frames[id] = requestAnimationFrame(function onFrame(time) {\n          if (lastFrameTime === time || lastFrameTime + TIME - 1 < time) {\n            lastFrameTime = time;\n            delete frames[id];\n\n            cb();\n          } else {\n            frames[id] = requestAnimationFrame(onFrame);\n          }\n        });\n\n        return id;\n      };\n      cancel = function (id) {\n        if (frames[id]) {\n          cancelAnimationFrame(frames[id]);\n        }\n      };\n    } else {\n      frame = function (cb) {\n        return setTimeout(cb, TIME);\n      };\n      cancel = function (timer) {\n        return clearTimeout(timer);\n      };\n    }\n\n    return { frame: frame, cancel: cancel };\n  }());\n\n  var getWorker = (function () {\n    var worker;\n    var prom;\n    var resolves = {};\n\n    function decorate(worker) {\n      function execute(options, callback) {\n        worker.postMessage({ options: options || {}, callback: callback });\n      }\n      worker.init = function initWorker(canvas) {\n        var offscreen = canvas.transferControlToOffscreen();\n        worker.postMessage({ canvas: offscreen }, [offscreen]);\n      };\n\n      worker.fire = function fireWorker(options, size, done) {\n        if (prom) {\n          execute(options, null);\n          return prom;\n        }\n\n        var id = Math.random().toString(36).slice(2);\n\n        prom = promise(function (resolve) {\n          function workerDone(msg) {\n            if (msg.data.callback !== id) {\n              return;\n            }\n\n            delete resolves[id];\n            worker.removeEventListener('message', workerDone);\n\n            prom = null;\n            done();\n            resolve();\n          }\n\n          worker.addEventListener('message', workerDone);\n          execute(options, id);\n\n          resolves[id] = workerDone.bind(null, { data: { callback: id }});\n        });\n\n        return prom;\n      };\n\n      worker.reset = function resetWorker() {\n        worker.postMessage({ reset: true });\n\n        for (var id in resolves) {\n          resolves[id]();\n          delete resolves[id];\n        }\n      };\n    }\n\n    return function () {\n      if (worker) {\n        return worker;\n      }\n\n      if (!isWorker && canUseWorker) {\n        var code = [\n          'var CONFETTI, SIZE = {}, module = {};',\n          '(' + main.toString() + ')(this, module, true, SIZE);',\n          'onmessage = function(msg) {',\n          '  if (msg.data.options) {',\n          '    CONFETTI(msg.data.options).then(function () {',\n          '      if (msg.data.callback) {',\n          '        postMessage({ callback: msg.data.callback });',\n          '      }',\n          '    });',\n          '  } else if (msg.data.reset) {',\n          '    CONFETTI && CONFETTI.reset();',\n          '  } else if (msg.data.resize) {',\n          '    SIZE.width = msg.data.resize.width;',\n          '    SIZE.height = msg.data.resize.height;',\n          '  } else if (msg.data.canvas) {',\n          '    SIZE.width = msg.data.canvas.width;',\n          '    SIZE.height = msg.data.canvas.height;',\n          '    CONFETTI = module.exports.create(msg.data.canvas);',\n          '  }',\n          '}',\n        ].join('\\n');\n        try {\n          worker = new Worker(URL.createObjectURL(new Blob([code])));\n        } catch (e) {\n          // eslint-disable-next-line no-console\n          typeof console !== undefined && typeof console.warn === 'function' ? console.warn('🎊 Could not load worker', e) : null;\n\n          return null;\n        }\n\n        decorate(worker);\n      }\n\n      return worker;\n    };\n  })();\n\n  var defaults = {\n    particleCount: 50,\n    angle: 90,\n    spread: 45,\n    startVelocity: 45,\n    decay: 0.9,\n    gravity: 1,\n    drift: 0,\n    ticks: 200,\n    x: 0.5,\n    y: 0.5,\n    shapes: ['square', 'circle'],\n    zIndex: 100,\n    colors: [\n      '#26ccff',\n      '#a25afd',\n      '#ff5e7e',\n      '#88ff5a',\n      '#fcff42',\n      '#ffa62d',\n      '#ff36ff'\n    ],\n    // probably should be true, but back-compat\n    disableForReducedMotion: false,\n    scalar: 1\n  };\n\n  function convert(val, transform) {\n    return transform ? transform(val) : val;\n  }\n\n  function isOk(val) {\n    return !(val === null || val === undefined);\n  }\n\n  function prop(options, name, transform) {\n    return convert(\n      options && isOk(options[name]) ? options[name] : defaults[name],\n      transform\n    );\n  }\n\n  function onlyPositiveInt(number){\n    return number < 0 ? 0 : Math.floor(number);\n  }\n\n  function randomInt(min, max) {\n    // [min, max)\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  function toDecimal(str) {\n    return parseInt(str, 16);\n  }\n\n  function colorsToRgb(colors) {\n    return colors.map(hexToRgb);\n  }\n\n  function hexToRgb(str) {\n    var val = String(str).replace(/[^0-9a-f]/gi, '');\n\n    if (val.length < 6) {\n        val = val[0]+val[0]+val[1]+val[1]+val[2]+val[2];\n    }\n\n    return {\n      r: toDecimal(val.substring(0,2)),\n      g: toDecimal(val.substring(2,4)),\n      b: toDecimal(val.substring(4,6))\n    };\n  }\n\n  function getOrigin(options) {\n    var origin = prop(options, 'origin', Object);\n    origin.x = prop(origin, 'x', Number);\n    origin.y = prop(origin, 'y', Number);\n\n    return origin;\n  }\n\n  function setCanvasWindowSize(canvas) {\n    canvas.width = document.documentElement.clientWidth;\n    canvas.height = document.documentElement.clientHeight;\n  }\n\n  function setCanvasRectSize(canvas) {\n    var rect = canvas.getBoundingClientRect();\n    canvas.width = rect.width;\n    canvas.height = rect.height;\n  }\n\n  function getCanvas(zIndex) {\n    var canvas = document.createElement('canvas');\n\n    canvas.style.position = 'fixed';\n    canvas.style.top = '0px';\n    canvas.style.left = '0px';\n    canvas.style.pointerEvents = 'none';\n    canvas.style.zIndex = zIndex;\n\n    return canvas;\n  }\n\n  function ellipse(context, x, y, radiusX, radiusY, rotation, startAngle, endAngle, antiClockwise) {\n    context.save();\n    context.translate(x, y);\n    context.rotate(rotation);\n    context.scale(radiusX, radiusY);\n    context.arc(0, 0, 1, startAngle, endAngle, antiClockwise);\n    context.restore();\n  }\n\n  function randomPhysics(opts) {\n    var radAngle = opts.angle * (Math.PI / 180);\n    var radSpread = opts.spread * (Math.PI / 180);\n\n    return {\n      x: opts.x,\n      y: opts.y,\n      wobble: Math.random() * 10,\n      wobbleSpeed: Math.min(0.11, Math.random() * 0.1 + 0.05),\n      velocity: (opts.startVelocity * 0.5) + (Math.random() * opts.startVelocity),\n      angle2D: -radAngle + ((0.5 * radSpread) - (Math.random() * radSpread)),\n      tiltAngle: (Math.random() * (0.75 - 0.25) + 0.25) * Math.PI,\n      color: opts.color,\n      shape: opts.shape,\n      tick: 0,\n      totalTicks: opts.ticks,\n      decay: opts.decay,\n      drift: opts.drift,\n      random: Math.random() + 2,\n      tiltSin: 0,\n      tiltCos: 0,\n      wobbleX: 0,\n      wobbleY: 0,\n      gravity: opts.gravity * 3,\n      ovalScalar: 0.6,\n      scalar: opts.scalar\n    };\n  }\n\n  function updateFetti(context, fetti) {\n    fetti.x += Math.cos(fetti.angle2D) * fetti.velocity + fetti.drift;\n    fetti.y += Math.sin(fetti.angle2D) * fetti.velocity + fetti.gravity;\n    fetti.wobble += fetti.wobbleSpeed;\n    fetti.velocity *= fetti.decay;\n    fetti.tiltAngle += 0.1;\n    fetti.tiltSin = Math.sin(fetti.tiltAngle);\n    fetti.tiltCos = Math.cos(fetti.tiltAngle);\n    fetti.random = Math.random() + 2;\n    fetti.wobbleX = fetti.x + ((10 * fetti.scalar) * Math.cos(fetti.wobble));\n    fetti.wobbleY = fetti.y + ((10 * fetti.scalar) * Math.sin(fetti.wobble));\n\n    var progress = (fetti.tick++) / fetti.totalTicks;\n\n    var x1 = fetti.x + (fetti.random * fetti.tiltCos);\n    var y1 = fetti.y + (fetti.random * fetti.tiltSin);\n    var x2 = fetti.wobbleX + (fetti.random * fetti.tiltCos);\n    var y2 = fetti.wobbleY + (fetti.random * fetti.tiltSin);\n\n    context.fillStyle = 'rgba(' + fetti.color.r + ', ' + fetti.color.g + ', ' + fetti.color.b + ', ' + (1 - progress) + ')';\n    context.beginPath();\n\n    if (fetti.shape === 'circle') {\n      context.ellipse ?\n        context.ellipse(fetti.x, fetti.y, Math.abs(x2 - x1) * fetti.ovalScalar, Math.abs(y2 - y1) * fetti.ovalScalar, Math.PI / 10 * fetti.wobble, 0, 2 * Math.PI) :\n        ellipse(context, fetti.x, fetti.y, Math.abs(x2 - x1) * fetti.ovalScalar, Math.abs(y2 - y1) * fetti.ovalScalar, Math.PI / 10 * fetti.wobble, 0, 2 * Math.PI);\n    } else if (fetti.shape === 'star') {\n      var rot = Math.PI / 2 * 3;\n      var innerRadius = 4 * fetti.scalar;\n      var outerRadius = 8 * fetti.scalar;\n      var x = fetti.x;\n      var y = fetti.y;\n      var spikes = 5;\n      var step = Math.PI / spikes;\n\n      while (spikes--) {\n        x = fetti.x + Math.cos(rot) * outerRadius;\n        y = fetti.y + Math.sin(rot) * outerRadius;\n        context.lineTo(x, y);\n        rot += step;\n\n        x = fetti.x + Math.cos(rot) * innerRadius;\n        y = fetti.y + Math.sin(rot) * innerRadius;\n        context.lineTo(x, y);\n        rot += step;\n      }\n    } else {\n      context.moveTo(Math.floor(fetti.x), Math.floor(fetti.y));\n      context.lineTo(Math.floor(fetti.wobbleX), Math.floor(y1));\n      context.lineTo(Math.floor(x2), Math.floor(y2));\n      context.lineTo(Math.floor(x1), Math.floor(fetti.wobbleY));\n    }\n\n    context.closePath();\n    context.fill();\n\n    return fetti.tick < fetti.totalTicks;\n  }\n\n  function animate(canvas, fettis, resizer, size, done) {\n    var animatingFettis = fettis.slice();\n    var context = canvas.getContext('2d');\n    var animationFrame;\n    var destroy;\n\n    var prom = promise(function (resolve) {\n      function onDone() {\n        animationFrame = destroy = null;\n\n        context.clearRect(0, 0, size.width, size.height);\n\n        done();\n        resolve();\n      }\n\n      function update() {\n        if (isWorker && !(size.width === workerSize.width && size.height === workerSize.height)) {\n          size.width = canvas.width = workerSize.width;\n          size.height = canvas.height = workerSize.height;\n        }\n\n        if (!size.width && !size.height) {\n          resizer(canvas);\n          size.width = canvas.width;\n          size.height = canvas.height;\n        }\n\n        context.clearRect(0, 0, size.width, size.height);\n\n        animatingFettis = animatingFettis.filter(function (fetti) {\n          return updateFetti(context, fetti);\n        });\n\n        if (animatingFettis.length) {\n          animationFrame = raf.frame(update);\n        } else {\n          onDone();\n        }\n      }\n\n      animationFrame = raf.frame(update);\n      destroy = onDone;\n    });\n\n    return {\n      addFettis: function (fettis) {\n        animatingFettis = animatingFettis.concat(fettis);\n\n        return prom;\n      },\n      canvas: canvas,\n      promise: prom,\n      reset: function () {\n        if (animationFrame) {\n          raf.cancel(animationFrame);\n        }\n\n        if (destroy) {\n          destroy();\n        }\n      }\n    };\n  }\n\n  function confettiCannon(canvas, globalOpts) {\n    var isLibCanvas = !canvas;\n    var allowResize = !!prop(globalOpts || {}, 'resize');\n    var globalDisableForReducedMotion = prop(globalOpts, 'disableForReducedMotion', Boolean);\n    var shouldUseWorker = canUseWorker && !!prop(globalOpts || {}, 'useWorker');\n    var worker = shouldUseWorker ? getWorker() : null;\n    var resizer = isLibCanvas ? setCanvasWindowSize : setCanvasRectSize;\n    var initialized = (canvas && worker) ? !!canvas.__confetti_initialized : false;\n    var preferLessMotion = typeof matchMedia === 'function' && matchMedia('(prefers-reduced-motion)').matches;\n    var animationObj;\n\n    function fireLocal(options, size, done) {\n      var particleCount = prop(options, 'particleCount', onlyPositiveInt);\n      var angle = prop(options, 'angle', Number);\n      var spread = prop(options, 'spread', Number);\n      var startVelocity = prop(options, 'startVelocity', Number);\n      var decay = prop(options, 'decay', Number);\n      var gravity = prop(options, 'gravity', Number);\n      var drift = prop(options, 'drift', Number);\n      var colors = prop(options, 'colors', colorsToRgb);\n      var ticks = prop(options, 'ticks', Number);\n      var shapes = prop(options, 'shapes');\n      var scalar = prop(options, 'scalar');\n      var origin = getOrigin(options);\n\n      var temp = particleCount;\n      var fettis = [];\n\n      var startX = canvas.width * origin.x;\n      var startY = canvas.height * origin.y;\n\n      while (temp--) {\n        fettis.push(\n          randomPhysics({\n            x: startX,\n            y: startY,\n            angle: angle,\n            spread: spread,\n            startVelocity: startVelocity,\n            color: colors[temp % colors.length],\n            shape: shapes[randomInt(0, shapes.length)],\n            ticks: ticks,\n            decay: decay,\n            gravity: gravity,\n            drift: drift,\n            scalar: scalar\n          })\n        );\n      }\n\n      // if we have a previous canvas already animating,\n      // add to it\n      if (animationObj) {\n        return animationObj.addFettis(fettis);\n      }\n\n      animationObj = animate(canvas, fettis, resizer, size , done);\n\n      return animationObj.promise;\n    }\n\n    function fire(options) {\n      var disableForReducedMotion = globalDisableForReducedMotion || prop(options, 'disableForReducedMotion', Boolean);\n      var zIndex = prop(options, 'zIndex', Number);\n\n      if (disableForReducedMotion && preferLessMotion) {\n        return promise(function (resolve) {\n          resolve();\n        });\n      }\n\n      if (isLibCanvas && animationObj) {\n        // use existing canvas from in-progress animation\n        canvas = animationObj.canvas;\n      } else if (isLibCanvas && !canvas) {\n        // create and initialize a new canvas\n        canvas = getCanvas(zIndex);\n        document.body.appendChild(canvas);\n      }\n\n      if (allowResize && !initialized) {\n        // initialize the size of a user-supplied canvas\n        resizer(canvas);\n      }\n\n      var size = {\n        width: canvas.width,\n        height: canvas.height\n      };\n\n      if (worker && !initialized) {\n        worker.init(canvas);\n      }\n\n      initialized = true;\n\n      if (worker) {\n        canvas.__confetti_initialized = true;\n      }\n\n      function onResize() {\n        if (worker) {\n          // TODO this really shouldn't be immediate, because it is expensive\n          var obj = {\n            getBoundingClientRect: function () {\n              if (!isLibCanvas) {\n                return canvas.getBoundingClientRect();\n              }\n            }\n          };\n\n          resizer(obj);\n\n          worker.postMessage({\n            resize: {\n              width: obj.width,\n              height: obj.height\n            }\n          });\n          return;\n        }\n\n        // don't actually query the size here, since this\n        // can execute frequently and rapidly\n        size.width = size.height = null;\n      }\n\n      function done() {\n        animationObj = null;\n\n        if (allowResize) {\n          global.removeEventListener('resize', onResize);\n        }\n\n        if (isLibCanvas && canvas) {\n          document.body.removeChild(canvas);\n          canvas = null;\n          initialized = false;\n        }\n      }\n\n      if (allowResize) {\n        global.addEventListener('resize', onResize, false);\n      }\n\n      if (worker) {\n        return worker.fire(options, size, done);\n      }\n\n      return fireLocal(options, size, done);\n    }\n\n    fire.reset = function () {\n      if (worker) {\n        worker.reset();\n      }\n\n      if (animationObj) {\n        animationObj.reset();\n      }\n    };\n\n    return fire;\n  }\n\n  // Make default export lazy to defer worker creation until called.\n  var defaultFire;\n  function getDefaultFire() {\n    if (!defaultFire) {\n      defaultFire = confettiCannon(null, { useWorker: true, resize: true });\n    }\n    return defaultFire;\n  }\n\n  module.exports = function() {\n    return getDefaultFire().apply(this, arguments);\n  };\n  module.exports.reset = function() {\n    getDefaultFire().reset();\n  };\n  module.exports.create = confettiCannon;\n}((function () {\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n\n  return this || {};\n})(), module, false));\n\n// end source content\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (module.exports);\nvar create = module.exports.create;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2FudmFzLWNvbmZldHRpL2Rpc3QvY29uZmV0dGkubW9kdWxlLm1qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsYUFBYTtBQUNiLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDZCQUE2QixzQkFBc0Isc0JBQXNCO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixtQkFBbUI7QUFDaEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxpREFBaUQsUUFBUSxlQUFlO0FBQ3hFLFNBQVM7O0FBRVQ7QUFDQTs7QUFFQTtBQUNBLDZCQUE2QixhQUFhOztBQUUxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtDQUFrQyxjQUFjO0FBQ2hELCtEQUErRDtBQUMvRCxzQ0FBc0M7QUFDdEMsb0NBQW9DO0FBQ3BDLDREQUE0RDtBQUM1RCx5Q0FBeUM7QUFDekMsaUNBQWlDLDZCQUE2QixFQUFFO0FBQ2hFLGtCQUFrQjtBQUNsQixnQkFBZ0IsRUFBRTtBQUNsQixlQUFlLDBCQUEwQjtBQUN6Qyw0Q0FBNEM7QUFDNUMsZUFBZSwyQkFBMkI7QUFDMUMsa0RBQWtEO0FBQ2xELG9EQUFvRDtBQUNwRCxlQUFlLDJCQUEyQjtBQUMxQyxrREFBa0Q7QUFDbEQsb0RBQW9EO0FBQ3BELGlFQUFpRTtBQUNqRSxjQUFjO0FBQ2QsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsaUVBQWlFO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsK0JBQStCO0FBQzFFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQSxpRUFBZSxjQUFjLEVBQUM7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saW1pbmFsLWFwcC8uL25vZGVfbW9kdWxlcy9jYW52YXMtY29uZmV0dGkvZGlzdC9jb25mZXR0aS5tb2R1bGUubWpzP2JkOTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY2FudmFzLWNvbmZldHRpIHYxLjYuMCBidWlsdCBvbiAyMDIyLTEwLTI0VDIxOjI2OjQxLjYxOVpcbnZhciBtb2R1bGUgPSB7fTtcblxuLy8gc291cmNlIGNvbnRlbnRcbihmdW5jdGlvbiBtYWluKGdsb2JhbCwgbW9kdWxlLCBpc1dvcmtlciwgd29ya2VyU2l6ZSkge1xuICB2YXIgY2FuVXNlV29ya2VyID0gISEoXG4gICAgZ2xvYmFsLldvcmtlciAmJlxuICAgIGdsb2JhbC5CbG9iICYmXG4gICAgZ2xvYmFsLlByb21pc2UgJiZcbiAgICBnbG9iYWwuT2Zmc2NyZWVuQ2FudmFzICYmXG4gICAgZ2xvYmFsLk9mZnNjcmVlbkNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCAmJlxuICAgIGdsb2JhbC5IVE1MQ2FudmFzRWxlbWVudCAmJlxuICAgIGdsb2JhbC5IVE1MQ2FudmFzRWxlbWVudC5wcm90b3R5cGUudHJhbnNmZXJDb250cm9sVG9PZmZzY3JlZW4gJiZcbiAgICBnbG9iYWwuVVJMICYmXG4gICAgZ2xvYmFsLlVSTC5jcmVhdGVPYmplY3RVUkwpO1xuXG4gIGZ1bmN0aW9uIG5vb3AoKSB7fVxuXG4gIC8vIGNyZWF0ZSBhIHByb21pc2UgaWYgaXQgZXhpc3RzLCBvdGhlcndpc2UsIGp1c3RcbiAgLy8gY2FsbCB0aGUgZnVuY3Rpb24gZGlyZWN0bHlcbiAgZnVuY3Rpb24gcHJvbWlzZShmdW5jKSB7XG4gICAgdmFyIE1vZHVsZVByb21pc2UgPSBtb2R1bGUuZXhwb3J0cy5Qcm9taXNlO1xuICAgIHZhciBQcm9tID0gTW9kdWxlUHJvbWlzZSAhPT0gdm9pZCAwID8gTW9kdWxlUHJvbWlzZSA6IGdsb2JhbC5Qcm9taXNlO1xuXG4gICAgaWYgKHR5cGVvZiBQcm9tID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gbmV3IFByb20oZnVuYyk7XG4gICAgfVxuXG4gICAgZnVuYyhub29wLCBub29wKTtcblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHJhZiA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIFRJTUUgPSBNYXRoLmZsb29yKDEwMDAgLyA2MCk7XG4gICAgdmFyIGZyYW1lLCBjYW5jZWw7XG4gICAgdmFyIGZyYW1lcyA9IHt9O1xuICAgIHZhciBsYXN0RnJhbWVUaW1lID0gMDtcblxuICAgIGlmICh0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBjYW5jZWxBbmltYXRpb25GcmFtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZnJhbWUgPSBmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgdmFyIGlkID0gTWF0aC5yYW5kb20oKTtcblxuICAgICAgICBmcmFtZXNbaWRdID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uIG9uRnJhbWUodGltZSkge1xuICAgICAgICAgIGlmIChsYXN0RnJhbWVUaW1lID09PSB0aW1lIHx8IGxhc3RGcmFtZVRpbWUgKyBUSU1FIC0gMSA8IHRpbWUpIHtcbiAgICAgICAgICAgIGxhc3RGcmFtZVRpbWUgPSB0aW1lO1xuICAgICAgICAgICAgZGVsZXRlIGZyYW1lc1tpZF07XG5cbiAgICAgICAgICAgIGNiKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZyYW1lc1tpZF0gPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUob25GcmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gaWQ7XG4gICAgICB9O1xuICAgICAgY2FuY2VsID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIGlmIChmcmFtZXNbaWRdKSB7XG4gICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoZnJhbWVzW2lkXSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGZyYW1lID0gZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGNiLCBUSU1FKTtcbiAgICAgIH07XG4gICAgICBjYW5jZWwgPSBmdW5jdGlvbiAodGltZXIpIHtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7IGZyYW1lOiBmcmFtZSwgY2FuY2VsOiBjYW5jZWwgfTtcbiAgfSgpKTtcblxuICB2YXIgZ2V0V29ya2VyID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgd29ya2VyO1xuICAgIHZhciBwcm9tO1xuICAgIHZhciByZXNvbHZlcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gZGVjb3JhdGUod29ya2VyKSB7XG4gICAgICBmdW5jdGlvbiBleGVjdXRlKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZSh7IG9wdGlvbnM6IG9wdGlvbnMgfHwge30sIGNhbGxiYWNrOiBjYWxsYmFjayB9KTtcbiAgICAgIH1cbiAgICAgIHdvcmtlci5pbml0ID0gZnVuY3Rpb24gaW5pdFdvcmtlcihjYW52YXMpIHtcbiAgICAgICAgdmFyIG9mZnNjcmVlbiA9IGNhbnZhcy50cmFuc2ZlckNvbnRyb2xUb09mZnNjcmVlbigpO1xuICAgICAgICB3b3JrZXIucG9zdE1lc3NhZ2UoeyBjYW52YXM6IG9mZnNjcmVlbiB9LCBbb2Zmc2NyZWVuXSk7XG4gICAgICB9O1xuXG4gICAgICB3b3JrZXIuZmlyZSA9IGZ1bmN0aW9uIGZpcmVXb3JrZXIob3B0aW9ucywgc2l6ZSwgZG9uZSkge1xuICAgICAgICBpZiAocHJvbSkge1xuICAgICAgICAgIGV4ZWN1dGUob3B0aW9ucywgbnVsbCk7XG4gICAgICAgICAgcmV0dXJuIHByb207XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaWQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtcblxuICAgICAgICBwcm9tID0gcHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgIGZ1bmN0aW9uIHdvcmtlckRvbmUobXNnKSB7XG4gICAgICAgICAgICBpZiAobXNnLmRhdGEuY2FsbGJhY2sgIT09IGlkKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVsZXRlIHJlc29sdmVzW2lkXTtcbiAgICAgICAgICAgIHdvcmtlci5yZW1vdmVFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgd29ya2VyRG9uZSk7XG5cbiAgICAgICAgICAgIHByb20gPSBudWxsO1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHdvcmtlci5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgd29ya2VyRG9uZSk7XG4gICAgICAgICAgZXhlY3V0ZShvcHRpb25zLCBpZCk7XG5cbiAgICAgICAgICByZXNvbHZlc1tpZF0gPSB3b3JrZXJEb25lLmJpbmQobnVsbCwgeyBkYXRhOiB7IGNhbGxiYWNrOiBpZCB9fSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBwcm9tO1xuICAgICAgfTtcblxuICAgICAgd29ya2VyLnJlc2V0ID0gZnVuY3Rpb24gcmVzZXRXb3JrZXIoKSB7XG4gICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZSh7IHJlc2V0OiB0cnVlIH0pO1xuXG4gICAgICAgIGZvciAodmFyIGlkIGluIHJlc29sdmVzKSB7XG4gICAgICAgICAgcmVzb2x2ZXNbaWRdKCk7XG4gICAgICAgICAgZGVsZXRlIHJlc29sdmVzW2lkXTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHdvcmtlcikge1xuICAgICAgICByZXR1cm4gd29ya2VyO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzV29ya2VyICYmIGNhblVzZVdvcmtlcikge1xuICAgICAgICB2YXIgY29kZSA9IFtcbiAgICAgICAgICAndmFyIENPTkZFVFRJLCBTSVpFID0ge30sIG1vZHVsZSA9IHt9OycsXG4gICAgICAgICAgJygnICsgbWFpbi50b1N0cmluZygpICsgJykodGhpcywgbW9kdWxlLCB0cnVlLCBTSVpFKTsnLFxuICAgICAgICAgICdvbm1lc3NhZ2UgPSBmdW5jdGlvbihtc2cpIHsnLFxuICAgICAgICAgICcgIGlmIChtc2cuZGF0YS5vcHRpb25zKSB7JyxcbiAgICAgICAgICAnICAgIENPTkZFVFRJKG1zZy5kYXRhLm9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKCkgeycsXG4gICAgICAgICAgJyAgICAgIGlmIChtc2cuZGF0YS5jYWxsYmFjaykgeycsXG4gICAgICAgICAgJyAgICAgICAgcG9zdE1lc3NhZ2UoeyBjYWxsYmFjazogbXNnLmRhdGEuY2FsbGJhY2sgfSk7JyxcbiAgICAgICAgICAnICAgICAgfScsXG4gICAgICAgICAgJyAgICB9KTsnLFxuICAgICAgICAgICcgIH0gZWxzZSBpZiAobXNnLmRhdGEucmVzZXQpIHsnLFxuICAgICAgICAgICcgICAgQ09ORkVUVEkgJiYgQ09ORkVUVEkucmVzZXQoKTsnLFxuICAgICAgICAgICcgIH0gZWxzZSBpZiAobXNnLmRhdGEucmVzaXplKSB7JyxcbiAgICAgICAgICAnICAgIFNJWkUud2lkdGggPSBtc2cuZGF0YS5yZXNpemUud2lkdGg7JyxcbiAgICAgICAgICAnICAgIFNJWkUuaGVpZ2h0ID0gbXNnLmRhdGEucmVzaXplLmhlaWdodDsnLFxuICAgICAgICAgICcgIH0gZWxzZSBpZiAobXNnLmRhdGEuY2FudmFzKSB7JyxcbiAgICAgICAgICAnICAgIFNJWkUud2lkdGggPSBtc2cuZGF0YS5jYW52YXMud2lkdGg7JyxcbiAgICAgICAgICAnICAgIFNJWkUuaGVpZ2h0ID0gbXNnLmRhdGEuY2FudmFzLmhlaWdodDsnLFxuICAgICAgICAgICcgICAgQ09ORkVUVEkgPSBtb2R1bGUuZXhwb3J0cy5jcmVhdGUobXNnLmRhdGEuY2FudmFzKTsnLFxuICAgICAgICAgICcgIH0nLFxuICAgICAgICAgICd9JyxcbiAgICAgICAgXS5qb2luKCdcXG4nKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB3b3JrZXIgPSBuZXcgV29ya2VyKFVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoW2NvZGVdKSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBjb25zb2xlLndhcm4gPT09ICdmdW5jdGlvbicgPyBjb25zb2xlLndhcm4oJ/CfjoogQ291bGQgbm90IGxvYWQgd29ya2VyJywgZSkgOiBudWxsO1xuXG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBkZWNvcmF0ZSh3b3JrZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gd29ya2VyO1xuICAgIH07XG4gIH0pKCk7XG5cbiAgdmFyIGRlZmF1bHRzID0ge1xuICAgIHBhcnRpY2xlQ291bnQ6IDUwLFxuICAgIGFuZ2xlOiA5MCxcbiAgICBzcHJlYWQ6IDQ1LFxuICAgIHN0YXJ0VmVsb2NpdHk6IDQ1LFxuICAgIGRlY2F5OiAwLjksXG4gICAgZ3Jhdml0eTogMSxcbiAgICBkcmlmdDogMCxcbiAgICB0aWNrczogMjAwLFxuICAgIHg6IDAuNSxcbiAgICB5OiAwLjUsXG4gICAgc2hhcGVzOiBbJ3NxdWFyZScsICdjaXJjbGUnXSxcbiAgICB6SW5kZXg6IDEwMCxcbiAgICBjb2xvcnM6IFtcbiAgICAgICcjMjZjY2ZmJyxcbiAgICAgICcjYTI1YWZkJyxcbiAgICAgICcjZmY1ZTdlJyxcbiAgICAgICcjODhmZjVhJyxcbiAgICAgICcjZmNmZjQyJyxcbiAgICAgICcjZmZhNjJkJyxcbiAgICAgICcjZmYzNmZmJ1xuICAgIF0sXG4gICAgLy8gcHJvYmFibHkgc2hvdWxkIGJlIHRydWUsIGJ1dCBiYWNrLWNvbXBhdFxuICAgIGRpc2FibGVGb3JSZWR1Y2VkTW90aW9uOiBmYWxzZSxcbiAgICBzY2FsYXI6IDFcbiAgfTtcblxuICBmdW5jdGlvbiBjb252ZXJ0KHZhbCwgdHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIHRyYW5zZm9ybSA/IHRyYW5zZm9ybSh2YWwpIDogdmFsO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNPayh2YWwpIHtcbiAgICByZXR1cm4gISh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvcChvcHRpb25zLCBuYW1lLCB0cmFuc2Zvcm0pIHtcbiAgICByZXR1cm4gY29udmVydChcbiAgICAgIG9wdGlvbnMgJiYgaXNPayhvcHRpb25zW25hbWVdKSA/IG9wdGlvbnNbbmFtZV0gOiBkZWZhdWx0c1tuYW1lXSxcbiAgICAgIHRyYW5zZm9ybVxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBvbmx5UG9zaXRpdmVJbnQobnVtYmVyKXtcbiAgICByZXR1cm4gbnVtYmVyIDwgMCA/IDAgOiBNYXRoLmZsb29yKG51bWJlcik7XG4gIH1cblxuICBmdW5jdGlvbiByYW5kb21JbnQobWluLCBtYXgpIHtcbiAgICAvLyBbbWluLCBtYXgpXG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pKSArIG1pbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvRGVjaW1hbChzdHIpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoc3RyLCAxNik7XG4gIH1cblxuICBmdW5jdGlvbiBjb2xvcnNUb1JnYihjb2xvcnMpIHtcbiAgICByZXR1cm4gY29sb3JzLm1hcChoZXhUb1JnYik7XG4gIH1cblxuICBmdW5jdGlvbiBoZXhUb1JnYihzdHIpIHtcbiAgICB2YXIgdmFsID0gU3RyaW5nKHN0cikucmVwbGFjZSgvW14wLTlhLWZdL2dpLCAnJyk7XG5cbiAgICBpZiAodmFsLmxlbmd0aCA8IDYpIHtcbiAgICAgICAgdmFsID0gdmFsWzBdK3ZhbFswXSt2YWxbMV0rdmFsWzFdK3ZhbFsyXSt2YWxbMl07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHI6IHRvRGVjaW1hbCh2YWwuc3Vic3RyaW5nKDAsMikpLFxuICAgICAgZzogdG9EZWNpbWFsKHZhbC5zdWJzdHJpbmcoMiw0KSksXG4gICAgICBiOiB0b0RlY2ltYWwodmFsLnN1YnN0cmluZyg0LDYpKVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBnZXRPcmlnaW4ob3B0aW9ucykge1xuICAgIHZhciBvcmlnaW4gPSBwcm9wKG9wdGlvbnMsICdvcmlnaW4nLCBPYmplY3QpO1xuICAgIG9yaWdpbi54ID0gcHJvcChvcmlnaW4sICd4JywgTnVtYmVyKTtcbiAgICBvcmlnaW4ueSA9IHByb3Aob3JpZ2luLCAneScsIE51bWJlcik7XG5cbiAgICByZXR1cm4gb3JpZ2luO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0Q2FudmFzV2luZG93U2l6ZShjYW52YXMpIHtcbiAgICBjYW52YXMud2lkdGggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgY2FudmFzLmhlaWdodCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRDYW52YXNSZWN0U2l6ZShjYW52YXMpIHtcbiAgICB2YXIgcmVjdCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjYW52YXMud2lkdGggPSByZWN0LndpZHRoO1xuICAgIGNhbnZhcy5oZWlnaHQgPSByZWN0LmhlaWdodDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldENhbnZhcyh6SW5kZXgpIHtcbiAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG5cbiAgICBjYW52YXMuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnO1xuICAgIGNhbnZhcy5zdHlsZS50b3AgPSAnMHB4JztcbiAgICBjYW52YXMuc3R5bGUubGVmdCA9ICcwcHgnO1xuICAgIGNhbnZhcy5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ25vbmUnO1xuICAgIGNhbnZhcy5zdHlsZS56SW5kZXggPSB6SW5kZXg7XG5cbiAgICByZXR1cm4gY2FudmFzO1xuICB9XG5cbiAgZnVuY3Rpb24gZWxsaXBzZShjb250ZXh0LCB4LCB5LCByYWRpdXNYLCByYWRpdXNZLCByb3RhdGlvbiwgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIGFudGlDbG9ja3dpc2UpIHtcbiAgICBjb250ZXh0LnNhdmUoKTtcbiAgICBjb250ZXh0LnRyYW5zbGF0ZSh4LCB5KTtcbiAgICBjb250ZXh0LnJvdGF0ZShyb3RhdGlvbik7XG4gICAgY29udGV4dC5zY2FsZShyYWRpdXNYLCByYWRpdXNZKTtcbiAgICBjb250ZXh0LmFyYygwLCAwLCAxLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgYW50aUNsb2Nrd2lzZSk7XG4gICAgY29udGV4dC5yZXN0b3JlKCk7XG4gIH1cblxuICBmdW5jdGlvbiByYW5kb21QaHlzaWNzKG9wdHMpIHtcbiAgICB2YXIgcmFkQW5nbGUgPSBvcHRzLmFuZ2xlICogKE1hdGguUEkgLyAxODApO1xuICAgIHZhciByYWRTcHJlYWQgPSBvcHRzLnNwcmVhZCAqIChNYXRoLlBJIC8gMTgwKTtcblxuICAgIHJldHVybiB7XG4gICAgICB4OiBvcHRzLngsXG4gICAgICB5OiBvcHRzLnksXG4gICAgICB3b2JibGU6IE1hdGgucmFuZG9tKCkgKiAxMCxcbiAgICAgIHdvYmJsZVNwZWVkOiBNYXRoLm1pbigwLjExLCBNYXRoLnJhbmRvbSgpICogMC4xICsgMC4wNSksXG4gICAgICB2ZWxvY2l0eTogKG9wdHMuc3RhcnRWZWxvY2l0eSAqIDAuNSkgKyAoTWF0aC5yYW5kb20oKSAqIG9wdHMuc3RhcnRWZWxvY2l0eSksXG4gICAgICBhbmdsZTJEOiAtcmFkQW5nbGUgKyAoKDAuNSAqIHJhZFNwcmVhZCkgLSAoTWF0aC5yYW5kb20oKSAqIHJhZFNwcmVhZCkpLFxuICAgICAgdGlsdEFuZ2xlOiAoTWF0aC5yYW5kb20oKSAqICgwLjc1IC0gMC4yNSkgKyAwLjI1KSAqIE1hdGguUEksXG4gICAgICBjb2xvcjogb3B0cy5jb2xvcixcbiAgICAgIHNoYXBlOiBvcHRzLnNoYXBlLFxuICAgICAgdGljazogMCxcbiAgICAgIHRvdGFsVGlja3M6IG9wdHMudGlja3MsXG4gICAgICBkZWNheTogb3B0cy5kZWNheSxcbiAgICAgIGRyaWZ0OiBvcHRzLmRyaWZ0LFxuICAgICAgcmFuZG9tOiBNYXRoLnJhbmRvbSgpICsgMixcbiAgICAgIHRpbHRTaW46IDAsXG4gICAgICB0aWx0Q29zOiAwLFxuICAgICAgd29iYmxlWDogMCxcbiAgICAgIHdvYmJsZVk6IDAsXG4gICAgICBncmF2aXR5OiBvcHRzLmdyYXZpdHkgKiAzLFxuICAgICAgb3ZhbFNjYWxhcjogMC42LFxuICAgICAgc2NhbGFyOiBvcHRzLnNjYWxhclxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVGZXR0aShjb250ZXh0LCBmZXR0aSkge1xuICAgIGZldHRpLnggKz0gTWF0aC5jb3MoZmV0dGkuYW5nbGUyRCkgKiBmZXR0aS52ZWxvY2l0eSArIGZldHRpLmRyaWZ0O1xuICAgIGZldHRpLnkgKz0gTWF0aC5zaW4oZmV0dGkuYW5nbGUyRCkgKiBmZXR0aS52ZWxvY2l0eSArIGZldHRpLmdyYXZpdHk7XG4gICAgZmV0dGkud29iYmxlICs9IGZldHRpLndvYmJsZVNwZWVkO1xuICAgIGZldHRpLnZlbG9jaXR5ICo9IGZldHRpLmRlY2F5O1xuICAgIGZldHRpLnRpbHRBbmdsZSArPSAwLjE7XG4gICAgZmV0dGkudGlsdFNpbiA9IE1hdGguc2luKGZldHRpLnRpbHRBbmdsZSk7XG4gICAgZmV0dGkudGlsdENvcyA9IE1hdGguY29zKGZldHRpLnRpbHRBbmdsZSk7XG4gICAgZmV0dGkucmFuZG9tID0gTWF0aC5yYW5kb20oKSArIDI7XG4gICAgZmV0dGkud29iYmxlWCA9IGZldHRpLnggKyAoKDEwICogZmV0dGkuc2NhbGFyKSAqIE1hdGguY29zKGZldHRpLndvYmJsZSkpO1xuICAgIGZldHRpLndvYmJsZVkgPSBmZXR0aS55ICsgKCgxMCAqIGZldHRpLnNjYWxhcikgKiBNYXRoLnNpbihmZXR0aS53b2JibGUpKTtcblxuICAgIHZhciBwcm9ncmVzcyA9IChmZXR0aS50aWNrKyspIC8gZmV0dGkudG90YWxUaWNrcztcblxuICAgIHZhciB4MSA9IGZldHRpLnggKyAoZmV0dGkucmFuZG9tICogZmV0dGkudGlsdENvcyk7XG4gICAgdmFyIHkxID0gZmV0dGkueSArIChmZXR0aS5yYW5kb20gKiBmZXR0aS50aWx0U2luKTtcbiAgICB2YXIgeDIgPSBmZXR0aS53b2JibGVYICsgKGZldHRpLnJhbmRvbSAqIGZldHRpLnRpbHRDb3MpO1xuICAgIHZhciB5MiA9IGZldHRpLndvYmJsZVkgKyAoZmV0dGkucmFuZG9tICogZmV0dGkudGlsdFNpbik7XG5cbiAgICBjb250ZXh0LmZpbGxTdHlsZSA9ICdyZ2JhKCcgKyBmZXR0aS5jb2xvci5yICsgJywgJyArIGZldHRpLmNvbG9yLmcgKyAnLCAnICsgZmV0dGkuY29sb3IuYiArICcsICcgKyAoMSAtIHByb2dyZXNzKSArICcpJztcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xuXG4gICAgaWYgKGZldHRpLnNoYXBlID09PSAnY2lyY2xlJykge1xuICAgICAgY29udGV4dC5lbGxpcHNlID9cbiAgICAgICAgY29udGV4dC5lbGxpcHNlKGZldHRpLngsIGZldHRpLnksIE1hdGguYWJzKHgyIC0geDEpICogZmV0dGkub3ZhbFNjYWxhciwgTWF0aC5hYnMoeTIgLSB5MSkgKiBmZXR0aS5vdmFsU2NhbGFyLCBNYXRoLlBJIC8gMTAgKiBmZXR0aS53b2JibGUsIDAsIDIgKiBNYXRoLlBJKSA6XG4gICAgICAgIGVsbGlwc2UoY29udGV4dCwgZmV0dGkueCwgZmV0dGkueSwgTWF0aC5hYnMoeDIgLSB4MSkgKiBmZXR0aS5vdmFsU2NhbGFyLCBNYXRoLmFicyh5MiAtIHkxKSAqIGZldHRpLm92YWxTY2FsYXIsIE1hdGguUEkgLyAxMCAqIGZldHRpLndvYmJsZSwgMCwgMiAqIE1hdGguUEkpO1xuICAgIH0gZWxzZSBpZiAoZmV0dGkuc2hhcGUgPT09ICdzdGFyJykge1xuICAgICAgdmFyIHJvdCA9IE1hdGguUEkgLyAyICogMztcbiAgICAgIHZhciBpbm5lclJhZGl1cyA9IDQgKiBmZXR0aS5zY2FsYXI7XG4gICAgICB2YXIgb3V0ZXJSYWRpdXMgPSA4ICogZmV0dGkuc2NhbGFyO1xuICAgICAgdmFyIHggPSBmZXR0aS54O1xuICAgICAgdmFyIHkgPSBmZXR0aS55O1xuICAgICAgdmFyIHNwaWtlcyA9IDU7XG4gICAgICB2YXIgc3RlcCA9IE1hdGguUEkgLyBzcGlrZXM7XG5cbiAgICAgIHdoaWxlIChzcGlrZXMtLSkge1xuICAgICAgICB4ID0gZmV0dGkueCArIE1hdGguY29zKHJvdCkgKiBvdXRlclJhZGl1cztcbiAgICAgICAgeSA9IGZldHRpLnkgKyBNYXRoLnNpbihyb3QpICogb3V0ZXJSYWRpdXM7XG4gICAgICAgIGNvbnRleHQubGluZVRvKHgsIHkpO1xuICAgICAgICByb3QgKz0gc3RlcDtcblxuICAgICAgICB4ID0gZmV0dGkueCArIE1hdGguY29zKHJvdCkgKiBpbm5lclJhZGl1cztcbiAgICAgICAgeSA9IGZldHRpLnkgKyBNYXRoLnNpbihyb3QpICogaW5uZXJSYWRpdXM7XG4gICAgICAgIGNvbnRleHQubGluZVRvKHgsIHkpO1xuICAgICAgICByb3QgKz0gc3RlcDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29udGV4dC5tb3ZlVG8oTWF0aC5mbG9vcihmZXR0aS54KSwgTWF0aC5mbG9vcihmZXR0aS55KSk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhNYXRoLmZsb29yKGZldHRpLndvYmJsZVgpLCBNYXRoLmZsb29yKHkxKSk7XG4gICAgICBjb250ZXh0LmxpbmVUbyhNYXRoLmZsb29yKHgyKSwgTWF0aC5mbG9vcih5MikpO1xuICAgICAgY29udGV4dC5saW5lVG8oTWF0aC5mbG9vcih4MSksIE1hdGguZmxvb3IoZmV0dGkud29iYmxlWSkpO1xuICAgIH1cblxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgY29udGV4dC5maWxsKCk7XG5cbiAgICByZXR1cm4gZmV0dGkudGljayA8IGZldHRpLnRvdGFsVGlja3M7XG4gIH1cblxuICBmdW5jdGlvbiBhbmltYXRlKGNhbnZhcywgZmV0dGlzLCByZXNpemVyLCBzaXplLCBkb25lKSB7XG4gICAgdmFyIGFuaW1hdGluZ0ZldHRpcyA9IGZldHRpcy5zbGljZSgpO1xuICAgIHZhciBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgdmFyIGFuaW1hdGlvbkZyYW1lO1xuICAgIHZhciBkZXN0cm95O1xuXG4gICAgdmFyIHByb20gPSBwcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICBmdW5jdGlvbiBvbkRvbmUoKSB7XG4gICAgICAgIGFuaW1hdGlvbkZyYW1lID0gZGVzdHJveSA9IG51bGw7XG5cbiAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgc2l6ZS53aWR0aCwgc2l6ZS5oZWlnaHQpO1xuXG4gICAgICAgIGRvbmUoKTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICAgIGlmIChpc1dvcmtlciAmJiAhKHNpemUud2lkdGggPT09IHdvcmtlclNpemUud2lkdGggJiYgc2l6ZS5oZWlnaHQgPT09IHdvcmtlclNpemUuaGVpZ2h0KSkge1xuICAgICAgICAgIHNpemUud2lkdGggPSBjYW52YXMud2lkdGggPSB3b3JrZXJTaXplLndpZHRoO1xuICAgICAgICAgIHNpemUuaGVpZ2h0ID0gY2FudmFzLmhlaWdodCA9IHdvcmtlclNpemUuaGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzaXplLndpZHRoICYmICFzaXplLmhlaWdodCkge1xuICAgICAgICAgIHJlc2l6ZXIoY2FudmFzKTtcbiAgICAgICAgICBzaXplLndpZHRoID0gY2FudmFzLndpZHRoO1xuICAgICAgICAgIHNpemUuaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHNpemUud2lkdGgsIHNpemUuaGVpZ2h0KTtcblxuICAgICAgICBhbmltYXRpbmdGZXR0aXMgPSBhbmltYXRpbmdGZXR0aXMuZmlsdGVyKGZ1bmN0aW9uIChmZXR0aSkge1xuICAgICAgICAgIHJldHVybiB1cGRhdGVGZXR0aShjb250ZXh0LCBmZXR0aSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChhbmltYXRpbmdGZXR0aXMubGVuZ3RoKSB7XG4gICAgICAgICAgYW5pbWF0aW9uRnJhbWUgPSByYWYuZnJhbWUodXBkYXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvbkRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBhbmltYXRpb25GcmFtZSA9IHJhZi5mcmFtZSh1cGRhdGUpO1xuICAgICAgZGVzdHJveSA9IG9uRG9uZTtcbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICBhZGRGZXR0aXM6IGZ1bmN0aW9uIChmZXR0aXMpIHtcbiAgICAgICAgYW5pbWF0aW5nRmV0dGlzID0gYW5pbWF0aW5nRmV0dGlzLmNvbmNhdChmZXR0aXMpO1xuXG4gICAgICAgIHJldHVybiBwcm9tO1xuICAgICAgfSxcbiAgICAgIGNhbnZhczogY2FudmFzLFxuICAgICAgcHJvbWlzZTogcHJvbSxcbiAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChhbmltYXRpb25GcmFtZSkge1xuICAgICAgICAgIHJhZi5jYW5jZWwoYW5pbWF0aW9uRnJhbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlc3Ryb3kpIHtcbiAgICAgICAgICBkZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uZmV0dGlDYW5ub24oY2FudmFzLCBnbG9iYWxPcHRzKSB7XG4gICAgdmFyIGlzTGliQ2FudmFzID0gIWNhbnZhcztcbiAgICB2YXIgYWxsb3dSZXNpemUgPSAhIXByb3AoZ2xvYmFsT3B0cyB8fCB7fSwgJ3Jlc2l6ZScpO1xuICAgIHZhciBnbG9iYWxEaXNhYmxlRm9yUmVkdWNlZE1vdGlvbiA9IHByb3AoZ2xvYmFsT3B0cywgJ2Rpc2FibGVGb3JSZWR1Y2VkTW90aW9uJywgQm9vbGVhbik7XG4gICAgdmFyIHNob3VsZFVzZVdvcmtlciA9IGNhblVzZVdvcmtlciAmJiAhIXByb3AoZ2xvYmFsT3B0cyB8fCB7fSwgJ3VzZVdvcmtlcicpO1xuICAgIHZhciB3b3JrZXIgPSBzaG91bGRVc2VXb3JrZXIgPyBnZXRXb3JrZXIoKSA6IG51bGw7XG4gICAgdmFyIHJlc2l6ZXIgPSBpc0xpYkNhbnZhcyA/IHNldENhbnZhc1dpbmRvd1NpemUgOiBzZXRDYW52YXNSZWN0U2l6ZTtcbiAgICB2YXIgaW5pdGlhbGl6ZWQgPSAoY2FudmFzICYmIHdvcmtlcikgPyAhIWNhbnZhcy5fX2NvbmZldHRpX2luaXRpYWxpemVkIDogZmFsc2U7XG4gICAgdmFyIHByZWZlckxlc3NNb3Rpb24gPSB0eXBlb2YgbWF0Y2hNZWRpYSA9PT0gJ2Z1bmN0aW9uJyAmJiBtYXRjaE1lZGlhKCcocHJlZmVycy1yZWR1Y2VkLW1vdGlvbiknKS5tYXRjaGVzO1xuICAgIHZhciBhbmltYXRpb25PYmo7XG5cbiAgICBmdW5jdGlvbiBmaXJlTG9jYWwob3B0aW9ucywgc2l6ZSwgZG9uZSkge1xuICAgICAgdmFyIHBhcnRpY2xlQ291bnQgPSBwcm9wKG9wdGlvbnMsICdwYXJ0aWNsZUNvdW50Jywgb25seVBvc2l0aXZlSW50KTtcbiAgICAgIHZhciBhbmdsZSA9IHByb3Aob3B0aW9ucywgJ2FuZ2xlJywgTnVtYmVyKTtcbiAgICAgIHZhciBzcHJlYWQgPSBwcm9wKG9wdGlvbnMsICdzcHJlYWQnLCBOdW1iZXIpO1xuICAgICAgdmFyIHN0YXJ0VmVsb2NpdHkgPSBwcm9wKG9wdGlvbnMsICdzdGFydFZlbG9jaXR5JywgTnVtYmVyKTtcbiAgICAgIHZhciBkZWNheSA9IHByb3Aob3B0aW9ucywgJ2RlY2F5JywgTnVtYmVyKTtcbiAgICAgIHZhciBncmF2aXR5ID0gcHJvcChvcHRpb25zLCAnZ3Jhdml0eScsIE51bWJlcik7XG4gICAgICB2YXIgZHJpZnQgPSBwcm9wKG9wdGlvbnMsICdkcmlmdCcsIE51bWJlcik7XG4gICAgICB2YXIgY29sb3JzID0gcHJvcChvcHRpb25zLCAnY29sb3JzJywgY29sb3JzVG9SZ2IpO1xuICAgICAgdmFyIHRpY2tzID0gcHJvcChvcHRpb25zLCAndGlja3MnLCBOdW1iZXIpO1xuICAgICAgdmFyIHNoYXBlcyA9IHByb3Aob3B0aW9ucywgJ3NoYXBlcycpO1xuICAgICAgdmFyIHNjYWxhciA9IHByb3Aob3B0aW9ucywgJ3NjYWxhcicpO1xuICAgICAgdmFyIG9yaWdpbiA9IGdldE9yaWdpbihvcHRpb25zKTtcblxuICAgICAgdmFyIHRlbXAgPSBwYXJ0aWNsZUNvdW50O1xuICAgICAgdmFyIGZldHRpcyA9IFtdO1xuXG4gICAgICB2YXIgc3RhcnRYID0gY2FudmFzLndpZHRoICogb3JpZ2luLng7XG4gICAgICB2YXIgc3RhcnRZID0gY2FudmFzLmhlaWdodCAqIG9yaWdpbi55O1xuXG4gICAgICB3aGlsZSAodGVtcC0tKSB7XG4gICAgICAgIGZldHRpcy5wdXNoKFxuICAgICAgICAgIHJhbmRvbVBoeXNpY3Moe1xuICAgICAgICAgICAgeDogc3RhcnRYLFxuICAgICAgICAgICAgeTogc3RhcnRZLFxuICAgICAgICAgICAgYW5nbGU6IGFuZ2xlLFxuICAgICAgICAgICAgc3ByZWFkOiBzcHJlYWQsXG4gICAgICAgICAgICBzdGFydFZlbG9jaXR5OiBzdGFydFZlbG9jaXR5LFxuICAgICAgICAgICAgY29sb3I6IGNvbG9yc1t0ZW1wICUgY29sb3JzLmxlbmd0aF0sXG4gICAgICAgICAgICBzaGFwZTogc2hhcGVzW3JhbmRvbUludCgwLCBzaGFwZXMubGVuZ3RoKV0sXG4gICAgICAgICAgICB0aWNrczogdGlja3MsXG4gICAgICAgICAgICBkZWNheTogZGVjYXksXG4gICAgICAgICAgICBncmF2aXR5OiBncmF2aXR5LFxuICAgICAgICAgICAgZHJpZnQ6IGRyaWZ0LFxuICAgICAgICAgICAgc2NhbGFyOiBzY2FsYXJcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBpZiB3ZSBoYXZlIGEgcHJldmlvdXMgY2FudmFzIGFscmVhZHkgYW5pbWF0aW5nLFxuICAgICAgLy8gYWRkIHRvIGl0XG4gICAgICBpZiAoYW5pbWF0aW9uT2JqKSB7XG4gICAgICAgIHJldHVybiBhbmltYXRpb25PYmouYWRkRmV0dGlzKGZldHRpcyk7XG4gICAgICB9XG5cbiAgICAgIGFuaW1hdGlvbk9iaiA9IGFuaW1hdGUoY2FudmFzLCBmZXR0aXMsIHJlc2l6ZXIsIHNpemUgLCBkb25lKTtcblxuICAgICAgcmV0dXJuIGFuaW1hdGlvbk9iai5wcm9taXNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpcmUob3B0aW9ucykge1xuICAgICAgdmFyIGRpc2FibGVGb3JSZWR1Y2VkTW90aW9uID0gZ2xvYmFsRGlzYWJsZUZvclJlZHVjZWRNb3Rpb24gfHwgcHJvcChvcHRpb25zLCAnZGlzYWJsZUZvclJlZHVjZWRNb3Rpb24nLCBCb29sZWFuKTtcbiAgICAgIHZhciB6SW5kZXggPSBwcm9wKG9wdGlvbnMsICd6SW5kZXgnLCBOdW1iZXIpO1xuXG4gICAgICBpZiAoZGlzYWJsZUZvclJlZHVjZWRNb3Rpb24gJiYgcHJlZmVyTGVzc01vdGlvbikge1xuICAgICAgICByZXR1cm4gcHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0xpYkNhbnZhcyAmJiBhbmltYXRpb25PYmopIHtcbiAgICAgICAgLy8gdXNlIGV4aXN0aW5nIGNhbnZhcyBmcm9tIGluLXByb2dyZXNzIGFuaW1hdGlvblxuICAgICAgICBjYW52YXMgPSBhbmltYXRpb25PYmouY2FudmFzO1xuICAgICAgfSBlbHNlIGlmIChpc0xpYkNhbnZhcyAmJiAhY2FudmFzKSB7XG4gICAgICAgIC8vIGNyZWF0ZSBhbmQgaW5pdGlhbGl6ZSBhIG5ldyBjYW52YXNcbiAgICAgICAgY2FudmFzID0gZ2V0Q2FudmFzKHpJbmRleCk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2FudmFzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFsbG93UmVzaXplICYmICFpbml0aWFsaXplZCkge1xuICAgICAgICAvLyBpbml0aWFsaXplIHRoZSBzaXplIG9mIGEgdXNlci1zdXBwbGllZCBjYW52YXNcbiAgICAgICAgcmVzaXplcihjYW52YXMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2l6ZSA9IHtcbiAgICAgICAgd2lkdGg6IGNhbnZhcy53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBjYW52YXMuaGVpZ2h0XG4gICAgICB9O1xuXG4gICAgICBpZiAod29ya2VyICYmICFpbml0aWFsaXplZCkge1xuICAgICAgICB3b3JrZXIuaW5pdChjYW52YXMpO1xuICAgICAgfVxuXG4gICAgICBpbml0aWFsaXplZCA9IHRydWU7XG5cbiAgICAgIGlmICh3b3JrZXIpIHtcbiAgICAgICAgY2FudmFzLl9fY29uZmV0dGlfaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBvblJlc2l6ZSgpIHtcbiAgICAgICAgaWYgKHdvcmtlcikge1xuICAgICAgICAgIC8vIFRPRE8gdGhpcyByZWFsbHkgc2hvdWxkbid0IGJlIGltbWVkaWF0ZSwgYmVjYXVzZSBpdCBpcyBleHBlbnNpdmVcbiAgICAgICAgICB2YXIgb2JqID0ge1xuICAgICAgICAgICAgZ2V0Qm91bmRpbmdDbGllbnRSZWN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmICghaXNMaWJDYW52YXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHJlc2l6ZXIob2JqKTtcblxuICAgICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICByZXNpemU6IHtcbiAgICAgICAgICAgICAgd2lkdGg6IG9iai53aWR0aCxcbiAgICAgICAgICAgICAgaGVpZ2h0OiBvYmouaGVpZ2h0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZG9uJ3QgYWN0dWFsbHkgcXVlcnkgdGhlIHNpemUgaGVyZSwgc2luY2UgdGhpc1xuICAgICAgICAvLyBjYW4gZXhlY3V0ZSBmcmVxdWVudGx5IGFuZCByYXBpZGx5XG4gICAgICAgIHNpemUud2lkdGggPSBzaXplLmhlaWdodCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgICAgIGFuaW1hdGlvbk9iaiA9IG51bGw7XG5cbiAgICAgICAgaWYgKGFsbG93UmVzaXplKSB7XG4gICAgICAgICAgZ2xvYmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uUmVzaXplKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0xpYkNhbnZhcyAmJiBjYW52YXMpIHtcbiAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGNhbnZhcyk7XG4gICAgICAgICAgY2FudmFzID0gbnVsbDtcbiAgICAgICAgICBpbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhbGxvd1Jlc2l6ZSkge1xuICAgICAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25SZXNpemUsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHdvcmtlcikge1xuICAgICAgICByZXR1cm4gd29ya2VyLmZpcmUob3B0aW9ucywgc2l6ZSwgZG9uZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmaXJlTG9jYWwob3B0aW9ucywgc2l6ZSwgZG9uZSk7XG4gICAgfVxuXG4gICAgZmlyZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh3b3JrZXIpIHtcbiAgICAgICAgd29ya2VyLnJlc2V0KCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmltYXRpb25PYmopIHtcbiAgICAgICAgYW5pbWF0aW9uT2JqLnJlc2V0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBmaXJlO1xuICB9XG5cbiAgLy8gTWFrZSBkZWZhdWx0IGV4cG9ydCBsYXp5IHRvIGRlZmVyIHdvcmtlciBjcmVhdGlvbiB1bnRpbCBjYWxsZWQuXG4gIHZhciBkZWZhdWx0RmlyZTtcbiAgZnVuY3Rpb24gZ2V0RGVmYXVsdEZpcmUoKSB7XG4gICAgaWYgKCFkZWZhdWx0RmlyZSkge1xuICAgICAgZGVmYXVsdEZpcmUgPSBjb25mZXR0aUNhbm5vbihudWxsLCB7IHVzZVdvcmtlcjogdHJ1ZSwgcmVzaXplOiB0cnVlIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdEZpcmU7XG4gIH1cblxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBnZXREZWZhdWx0RmlyZSgpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG4gIG1vZHVsZS5leHBvcnRzLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgZ2V0RGVmYXVsdEZpcmUoKS5yZXNldCgpO1xuICB9O1xuICBtb2R1bGUuZXhwb3J0cy5jcmVhdGUgPSBjb25mZXR0aUNhbm5vbjtcbn0oKGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gc2VsZjtcbiAgfVxuXG4gIHJldHVybiB0aGlzIHx8IHt9O1xufSkoKSwgbW9kdWxlLCBmYWxzZSkpO1xuXG4vLyBlbmQgc291cmNlIGNvbnRlbnRcblxuZXhwb3J0IGRlZmF1bHQgbW9kdWxlLmV4cG9ydHM7XG5leHBvcnQgdmFyIGNyZWF0ZSA9IG1vZHVsZS5leHBvcnRzLmNyZWF0ZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/canvas-confetti/dist/confetti.module.mjs\n");

            /***/
        })

        /******/
    });
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
            /******/            exports: {}
            /******/
        };
        /******/
        /******/ 		// Execute the module function
        /******/
        __webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/
        /******/ 		// Flag the module as loaded
        /******/
        module.loaded = true;
        /******/
        /******/ 		// Return the exports of the module
        /******/
        return module.exports;
        /******/
    }

    /******/
    /************************************************************************/
    /******/ 	/* webpack/runtime/amd options */
    /******/
    (() => {
        /******/
        __webpack_require__.amdO = {};
        /******/
    })();
    /******/
    /******/ 	/* webpack/runtime/compat get default export */
    /******/
    (() => {
        /******/ 		// getDefaultExport function for compatibility with non-harmony modules
        /******/
        __webpack_require__.n = (module) => {
            /******/
            var getter = module && module.__esModule ?
                /******/                () => (module['default']) :
                /******/                () => (module);
            /******/
            __webpack_require__.d(getter, {a: getter});
            /******/
            return getter;
            /******/
        };
        /******/
    })();
    /******/
    /******/ 	/* webpack/runtime/define property getters */
    /******/
    (() => {
        /******/ 		// define getter functions for harmony exports
        /******/
        __webpack_require__.d = (exports, definition) => {
            /******/
            for (var key in definition) {
                /******/
                if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
                    /******/
                    Object.defineProperty(exports, key, {enumerable: true, get: definition[key]});
                    /******/
                }
                /******/
            }
            /******/
        };
        /******/
    })();
    /******/
    /******/ 	/* webpack/runtime/global */
    /******/
    (() => {
        /******/
        __webpack_require__.g = (function () {
            /******/
            if (typeof globalThis === 'object') return globalThis;
            /******/
            try {
                /******/
                return this || new Function('return this')();
                /******/
            } catch (e) {
                /******/
                if (typeof window === 'object') return window;
                /******/
            }
            /******/
        })();
        /******/
    })();
    /******/
    /******/ 	/* webpack/runtime/hasOwnProperty shorthand */
    /******/
    (() => {
        /******/
        __webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
        /******/
    })();
    /******/
    /******/ 	/* webpack/runtime/make namespace object */
    /******/
    (() => {
        /******/ 		// define __esModule on exports
        /******/
        __webpack_require__.r = (exports) => {
            /******/
            if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
                /******/
                Object.defineProperty(exports, Symbol.toStringTag, {value: 'Module'});
                /******/
            }
            /******/
            Object.defineProperty(exports, '__esModule', {value: true});
            /******/
        };
        /******/
    })();
    /******/
    /******/ 	/* webpack/runtime/node module decorator */
    /******/
    (() => {
        /******/
        __webpack_require__.nmd = (module) => {
            /******/
            module.paths = [];
            /******/
            if (!module.children) module.children = [];
            /******/
            return module;
            /******/
        };
        /******/
    })();
    /******/
    /************************************************************************/
    /******/
    /******/ 	// startup
    /******/ 	// Load entry module and return exports
    /******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
    /******/
    var __webpack_exports__ = __webpack_require__("./src/main.ts");
    /******/
    /******/
})()
;