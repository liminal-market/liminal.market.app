/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

        /***/ "./node_modules/bignumber.js/bignumber.js":
        /*!************************************************!*\
          !*** ./node_modules/bignumber.js/bignumber.js ***!
          \************************************************/
        /***/ (function (module, exports, __webpack_require__) {

            eval("var __WEBPACK_AMD_DEFINE_RESULT__;;(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.0.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n      alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (true) {\r\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () { return BigNumber; }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else {}\r\n})(this);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/bignumber.js/bignumber.js\n");

            /***/
        }),

        /***/ "./src/main.ts":
        /*!***********************************!*\
          !*** ./src/main.ts + 161 modules ***!
          \***********************************/
        /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

            "use strict";
            eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n;// CONCATENATED MODULE: ./src/networks/Network.ts\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nclass Network {\r\n    constructor() {\r\n        this.ServerUrl = \"\";\r\n        this.AppId = \"\";\r\n        this.ChainId = 0;\r\n        this.Name = \"\";\r\n        this.ChainName = '';\r\n        this.NativeCurrencyName = \"\";\r\n        this.NativeSymbol = \"\";\r\n        this.NativeDecimal = 18;\r\n        this.RpcUrl = '';\r\n        this.BlockExplorer = '';\r\n        this.TestNetwork = true;\r\n        this.FaucetUrl = '';\r\n        this.BuyUrl = '';\r\n        if (window.location.host.indexOf('localhost') != -1) {\r\n            this.ServerUrl = \"https://dqet8dfymvzj.usemoralis.com:2053/server\";\r\n            this.AppId = \"TXR6YesK99VgRCxSecnySRMp1KI5rLnCfIetQuuU\";\r\n        }\r\n        else {\r\n            this.ServerUrl = \"https://f8t1vrrwtboa.usemoralis.com:2053/server\";\r\n            this.AppId = \"XZhp3wQobrKiCib0Bf4FPVKAUhbHM9SvTLKOKvBb\";\r\n        }\r\n    }\r\n    addNetworkToWallet(moralis) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const web3 = yield moralis.enableWeb3();\r\n            if (!web3 || !web3.provider.request)\r\n                return;\r\n            web3.provider.request({\r\n                method: 'wallet_addEthereumChain',\r\n                params: [{\r\n                        chainId: '0x' + this.ChainId.toString(16),\r\n                        chainName: this.ChainName,\r\n                        nativeCurrency: {\r\n                            name: this.NativeCurrencyName,\r\n                            symbol: this.NativeSymbol,\r\n                            decimals: this.NativeDecimal\r\n                        },\r\n                        rpcUrls: [this.RpcUrl],\r\n                        blockExplorerUrls: [this.BlockExplorer]\r\n                    }]\r\n            }).catch((error) => {\r\n                console.log(error);\r\n            });\r\n        });\r\n    }\r\n    hasEnoughNativeTokens(moralis) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            //TODO: remove later, Moralis doesnt support getNativeBalance on localhost so it's always true\r\n            if (this.Name == 'localhost') {\r\n                return true;\r\n            }\r\n            else {\r\n                const options = { chain: '0x' + this.ChainId.toString(16) };\r\n                const result = yield moralis.Web3API.account.getNativeBalance(options);\r\n                const balance = parseFloat(Moralis.Units.FromWei(result.balance, 18));\r\n                if (balance < 0.005) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        });\r\n    }\r\n    ;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/networks/localhost-network.ts\n\r\n//localhost\r\nclass localhostNetwork extends Network {\r\n    constructor() {\r\n        super();\r\n        this.ChainId = 31337;\r\n        this.Name = \"localhost\";\r\n        this.ChainName = 'localhost test';\r\n        this.NativeCurrencyName = \"Ethereum\";\r\n        this.NativeSymbol = \"ETH\";\r\n        this.NativeDecimal = 18;\r\n        this.RpcUrl = 'https://rinkeby.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161';\r\n        this.BlockExplorer = 'https://rinkeby.etherscan.io';\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/networks/mumbai-network.ts\n\r\nclass mumbaiNetwork extends Network {\r\n    constructor() {\r\n        super();\r\n        this.ChainId = 80001;\r\n        this.Name = \"mumbai\";\r\n        this.ChainName = 'Polygon Mumbai';\r\n        this.NativeCurrencyName = \"Matic\";\r\n        this.NativeSymbol = \"MATIC\";\r\n        this.NativeDecimal = 18;\r\n        this.RpcUrl = 'https://matic-mumbai.chainstacklabs.com/';\r\n        this.BlockExplorer = 'https://mumbai.polygonscan.com/';\r\n        this.FaucetUrl = 'https://faucet.polygon.technology/';\r\n        this.BuyUrl = 'https://www.moonpay.com/buy/matic';\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/util/CookieHelper.ts\nclass CookieHelper {\r\n    constructor(document) {\r\n        this.setCookieNetwork = (name) => {\r\n            this.setCookie(\"network\", name);\r\n        };\r\n        this.document = document;\r\n    }\r\n    setCookie(name, value) {\r\n        let date = new Date();\r\n        this.document.cookie = name + \"=\" + value + \"; expires=Mon, 2 Dec 2024 12:00:00 UTC;path=/;SameSite=Strict\";\r\n    }\r\n    getCookieValue(name) {\r\n        var _a;\r\n        return ((_a = this.document.cookie.match('(^|;)\\\\s*' + name + '\\\\s*=\\\\s*([^;]+)')) === null || _a === void 0 ? void 0 : _a.pop()) || '';\r\n    }\r\n    setCookieProvider(providerName) {\r\n        this.setCookie(\"provider\", providerName);\r\n    }\r\n    deleteCookie(name) {\r\n        this.document.cookie = name + \"=0; expires=Mon, 2 Dec 2020 12:00:00 UTC;path=/\";\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/networks/fuji-network.ts\n\r\nclass fujiNetwork extends Network {\r\n    constructor() {\r\n        super();\r\n        this.ChainId = 43113;\r\n        this.Name = \"fuji\";\r\n        this.ChainName = 'Avax test';\r\n        this.NativeCurrencyName = \"Avax\";\r\n        this.NativeSymbol = \"AVAX\";\r\n        this.NativeDecimal = 18;\r\n        this.RpcUrl = 'https://api.avax-test.network/ext/bc/C/rpc';\r\n        this.BlockExplorer = 'https://explorer.avax-test.network/';\r\n        this.FaucetUrl = 'https://faucet.avax-test.network/';\r\n        this.BuyUrl = 'https://www.moonpay.com/buy/avax';\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/networks/NetworkInfo.ts\n\r\n\r\n\r\n\r\nconst networkInfos = [localhostNetwork, mumbaiNetwork, fujiNetwork];\r\nclass NetworkInfo {\r\n    constructor(moralis) {\r\n        this.moralis = moralis;\r\n    }\r\n    static getInstance() {\r\n        if (NetworkInfo.instance)\r\n            return NetworkInfo.instance;\r\n        if (typeof ethereum != 'undefined' && ethereum && ethereum.chainId) {\r\n            let networkInfo = this.getNetworkInfoByChainId(ethereum.chainId);\r\n            if (networkInfo) {\r\n                NetworkInfo.instance = networkInfo;\r\n                return NetworkInfo.instance;\r\n            }\r\n        }\r\n        NetworkInfo.instance = this.getNetworkInfo();\r\n        return NetworkInfo.instance;\r\n    }\r\n    static loadNetwork(networkName) {\r\n        NetworkInfo.instance = this.getNetworkInfo(networkName);\r\n    }\r\n    static setNetworkByChainId(chainId) {\r\n        let network = this.getNetworkInfoByChainId(chainId);\r\n        if (network) {\r\n            NetworkInfo.instance = network;\r\n        }\r\n    }\r\n    static getNetworks() {\r\n        let networks = new Array();\r\n        let isLocalhost = window.location.host.indexOf('localhost') != -1;\r\n        networkInfos.forEach(networkInfoType => {\r\n            let tmp = new networkInfoType();\r\n            if (!isLocalhost && tmp.Name == \"localhost\")\r\n                return;\r\n            networks.push(tmp);\r\n        });\r\n        return networks;\r\n    }\r\n    static getNetworkInfoByChainId(chainId) {\r\n        let networkInfo;\r\n        networkInfos.forEach(networkInfoType => {\r\n            let tmp = new networkInfoType();\r\n            if (tmp.ChainId == chainId) {\r\n                networkInfo = tmp;\r\n            }\r\n        });\r\n        return networkInfo;\r\n    }\r\n    static getNetworkInfo(networkName) {\r\n        let cookieHelper = new CookieHelper(document);\r\n        //if (window.location.host.indexOf('localhost')) networkName = 'localhost'\r\n        if (!networkName)\r\n            networkName = cookieHelper.getCookieValue('network');\r\n        if (!networkName)\r\n            networkName = 'mumbai';\r\n        let networkInfo = null;\r\n        networkInfos.forEach(networkInfoType => {\r\n            let tmp = new networkInfoType();\r\n            if (tmp.Name == networkName) {\r\n                networkInfo = tmp;\r\n            }\r\n        });\r\n        if (networkInfo)\r\n            return networkInfo;\r\n        cookieHelper.setCookieNetwork('mumbai');\r\n        console.error(\"Network '\" + networkName + \"' could not be found. Defaulting to Mumbai network.\");\r\n        return new mumbaiNetwork();\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/services/backend/ConnectionService.ts\nvar ConnectionService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\nclass ConnectionService {\r\n    constructor(moralis) {\r\n        if (!moralis)\r\n            moralis = Moralis;\r\n        this.moralis = moralis;\r\n        this.options = { serverUrl: '', appId: '' };\r\n    }\r\n    getOptions() {\r\n        return this.options;\r\n    }\r\n    start() {\r\n        return ConnectionService_awaiter(this, void 0, void 0, function* () {\r\n            let networkInfo = NetworkInfo.getInstance();\r\n            this.options = { serverUrl: networkInfo.ServerUrl, appId: networkInfo.AppId };\r\n            yield this.moralis.start(this.options).catch(function (err) {\r\n                if (err.message.indexOf('Invalid session token') != -1) {\r\n                    Moralis.User.logOut();\r\n                }\r\n                ;\r\n            });\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/services/broker/MarketService.ts\nvar MarketService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nclass MarketService {\r\n    constructor(moralis) {\r\n        if (!moralis)\r\n            moralis = Moralis;\r\n        this.moralis = moralis;\r\n    }\r\n    isMarketOpen() {\r\n        return MarketService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.moralis.Cloud.run('isOpen');\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/errors/GeneralError.ts\nclass GeneralError extends Error {\r\n    constructor(e) {\r\n        super();\r\n        this.code = 0;\r\n        this.stack = \"\";\r\n        if (!e.message) {\r\n            this.message = e.toString();\r\n        }\r\n        else if (e.message.data) {\r\n            this.code = e.message.data.code;\r\n            this.message = e.message.data.message;\r\n            this.error = e;\r\n            this.headers = e.message.headers;\r\n            this.stack = e.stack;\r\n        }\r\n        else if (typeof (e.data) == 'object') {\r\n            this.code = e.data.code;\r\n            this.message = e.data.message;\r\n            this.stack = e.stack;\r\n        }\r\n        else if (e.message) {\r\n            this.message = e.message;\r\n        }\r\n        else {\r\n            this.message = e.toString();\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/WrongNetwork.html\n// Module\nvar code = \"<div id=\\\"switchNetworkInfo\\\">\\r\\n    You are using wrong network in your wallet.\\r\\n    You can choose any of these networks.\\r\\n    <ul>\\r\\n        {{#each networks}}\\r\\n        <li><a href=\\\"\\\" class=\\\"setNetwork\\\"\\r\\n               data-chainid=\\\"{{ChainId}}\\\">{{ChainName}}</a></li>\\r\\n        {{/each}}\\r\\n    </ul>\\r\\n</div>\\r\\n<div id=\\\"jsSwitchNetworkNotWorking\\\" class=\\\"d-none\\\">\\r\\n    It seem as we can't add the network automatically for your, so you need to add it your self.\\r\\n    This is the information you need to add the network. You will need to figure out where to\\r\\n    add new network for your wallet, as it difference between wallets.\\r\\n    <form>\\r\\n        <label>ChainId:\\r\\n            <input id=\\\"switchChainId\\\"/>\\r\\n        </label>\\r\\n        <label>Chain name\\r\\n            <input id=\\\"switchChainName\\\"/>\\r\\n        </label>\\r\\n        <label>Currency name\\r\\n            <input id=\\\"switchCurrencyName\\\"/>\\r\\n        </label>\\r\\n        <label>\\r\\n            Symbol\\r\\n            <input id=\\\"switchSymbol\\\"/>\\r\\n        </label>\\r\\n        <label>Decimal\\r\\n            <input id=\\\"switchDecimal\\\"/>\\r\\n        </label>\\r\\n        <label>Rpc Url\\r\\n            <input id=\\\"switchRpcUrl\\\"/>\\r\\n        </label>\\r\\n    </form>\\r\\n</div>\";\n// Exports\n/* harmony default export */ const WrongNetwork = (code);\n;// CONCATENATED MODULE: ./src/html/modal/Modal.html\n// Module\nvar Modal_code = \"<dialog id=\\\"liminal_market_modal_div\\\" data-title=\\\"{{{title}}}\\\">\\r\\n    <article>\\r\\n        <header>\\r\\n            <span>{{title}}</span>\\r\\n            <a href=\\\"#close\\\" aria-label=\\\"Close\\\" class=\\\"close\\\" id=\\\"liminal_market_modal_close\\\"></a>\\r\\n        </header>\\r\\n        {{{content}}}\\r\\n    </article>\\r\\n\\r\\n</dialog>\";\n// Exports\n/* harmony default export */ const modal_Modal = (Modal_code);\n;// CONCATENATED MODULE: ./src/ui/modals/Modal.ts\n\r\nclass Modal {\r\n    constructor() {\r\n        this.modalId = 'liminal_market_modal_div';\r\n    }\r\n    hideModal() {\r\n        let modalDiv = document.getElementById(this.modalId);\r\n        modalDiv.removeAttribute('open');\r\n        if (this.onHide) {\r\n            this.onHide();\r\n        }\r\n    }\r\n    showModal(title, content, reuseModalIfSameTitle = false, onHide, hideOnOutsideClick = true) {\r\n        var _a;\r\n        let modalDiv = document.getElementById(this.modalId);\r\n        if (modalDiv) {\r\n            let modalTitle = modalDiv.dataset.title;\r\n            if (reuseModalIfSameTitle && modalTitle && modalTitle === title) {\r\n                modalDiv.setAttribute('open', '');\r\n                return false;\r\n            }\r\n        }\r\n        let template = Handlebars.compile(modal_Modal);\r\n        let obj = {\r\n            title: title, content: content\r\n        };\r\n        let html = template(obj);\r\n        if (modalDiv) {\r\n            document.body.removeChild(modalDiv);\r\n        }\r\n        document.body.insertAdjacentHTML('beforeend', html);\r\n        modalDiv = document.getElementById(this.modalId);\r\n        modalDiv.setAttribute('open', '');\r\n        if (hideOnOutsideClick) {\r\n            modalDiv.addEventListener('mousedown', (evt) => {\r\n                if (evt.target && evt.target.id === 'liminal_market_modal_div') {\r\n                    this.hideModal();\r\n                }\r\n            });\r\n        }\r\n        let liminal_market_modal_close = document.getElementById('liminal_market_modal_close');\r\n        if (liminal_market_modal_close)\r\n            liminal_market_modal_close.style.display = 'block';\r\n        (_a = document.getElementById('liminal_market_modal_close')) === null || _a === void 0 ? void 0 : _a.addEventListener('click', (evt) => {\r\n            evt.preventDefault();\r\n            this.hideModal();\r\n        });\r\n        this.onHide = onHide;\r\n        return true;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/services/broker/Security.ts\nclass Security {\r\n    constructor() {\r\n        this.Class = \"\";\r\n        this.Exchange = \"\";\r\n        this.Symbol = \"\";\r\n        this.Name = \"\";\r\n        this.Status = \"\";\r\n        this.Tradable = false;\r\n        this.Fractionable = false;\r\n        this.Logo = \"\";\r\n        this.Favorite = 0;\r\n        this.LogoPath = \"/img/logos/\";\r\n        this.LogoPath = \"/img/logos/\";\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/services/broker/SecuritiesService.ts\nvar SecuritiesService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\nclass SecuritiesService {\r\n    constructor() {\r\n        this.securities = new Map();\r\n        this.symbols = [\"MSFT\", \"AAPL\", \"AMZN\", \"TSLA\", \"GOOGL\", \"GOOG\", \"GME\", \"META\", \"NVDA\", \"BRK.B\", \"JPM\", \"HD\", \"JNJ\", \"UNH\", \"PG\", \"BAC\", \"V\", \"ADBE\", \"NFLX\", \"CRM\", \"PFE\", \"DIS\", \"MA\", \"XOM\", \"TMO\", \"COST\"];\r\n        this.securities = new Map();\r\n        this.page = 1;\r\n    }\r\n    static getInstance() {\r\n        return SecuritiesService_awaiter(this, void 0, void 0, function* () {\r\n            if (!SecuritiesService.instance) {\r\n                SecuritiesService.instance = new SecuritiesService();\r\n                SecuritiesService.instance.securities = yield SecuritiesService.instance.getSecurities();\r\n            }\r\n            return SecuritiesService.instance;\r\n        });\r\n    }\r\n    getSecurities() {\r\n        return SecuritiesService_awaiter(this, void 0, void 0, function* () {\r\n            if (this.securities.size != 0)\r\n                return this.securities;\r\n            const response = yield fetch('/securities/securities.json');\r\n            const results = yield response.json();\r\n            for (let i = 0; i < results.length; i++) {\r\n                this.securities.set(results[i].Symbol, Object.assign(new Security, results[i]));\r\n            }\r\n            this.securitiesArray = Array.from(this.securities);\r\n            return this.securities;\r\n        });\r\n    }\r\n    getSecurityBySymbol(symbol) {\r\n        return SecuritiesService_awaiter(this, void 0, void 0, function* () {\r\n            let securities = yield this.getSecurities();\r\n            let security = securities.get(symbol);\r\n            return (security) ? security : new Security();\r\n        });\r\n    }\r\n    getTopSecurities() {\r\n        return SecuritiesService_awaiter(this, void 0, void 0, function* () {\r\n            let securities = yield this.getSecurities();\r\n            let topSecurities = new Array();\r\n            for (const symbol of this.symbols) {\r\n                let security = securities.get(symbol);\r\n                if (security) {\r\n                    topSecurities.push(security);\r\n                }\r\n            }\r\n            return topSecurities;\r\n        });\r\n    }\r\n    getPaginatingSecurities(page) {\r\n        return SecuritiesService_awaiter(this, void 0, void 0, function* () {\r\n            if (page == 0)\r\n                return this.getTopSecurities();\r\n            let securitiesOnPage = new Array();\r\n            let i = page * this.symbols.length;\r\n            let pageCount = i + 10;\r\n            for (; i < pageCount && i < this.securitiesArray.length; i++) {\r\n                securitiesOnPage.push(this.securitiesArray[i][1]);\r\n            }\r\n            return securitiesOnPage;\r\n        });\r\n    }\r\n    find(search) {\r\n        return SecuritiesService_awaiter(this, void 0, void 0, function* () {\r\n            let results = new Array();\r\n            search = search.toLocaleLowerCase();\r\n            this.securities.forEach(function (security) {\r\n                if (security.Symbol.toLowerCase().indexOf(search) != -1 ||\r\n                    security.Name.toLowerCase().indexOf(search) != -1) {\r\n                    results.push(security);\r\n                }\r\n            });\r\n            return results;\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/util/LoadingHelper.ts\nclass LoadingHelper {\r\n    static setLoading(element) {\r\n        if (LoadingHelper.lastElement) {\r\n            LoadingHelper.lastElement.removeAttribute('aria-busy');\r\n        }\r\n        if (!element)\r\n            return;\r\n        element.setAttribute('aria-busy', 'true');\r\n        LoadingHelper.lastElement = element;\r\n    }\r\n    static removeLoading() {\r\n        if (this.lastElement) {\r\n            this.lastElement.removeAttribute('aria-busy');\r\n        }\r\n    }\r\n}\r\nLoadingHelper.lastElement = undefined;\r\n\n;// CONCATENATED MODULE: ./src/ui/elements/InfoBarType.ts\nvar InfoBarType;\r\n(function (InfoBarType) {\r\n    InfoBarType[\"Info\"] = \"infoBar\";\r\n    InfoBarType[\"Warning\"] = \"warningBar\";\r\n    InfoBarType[\"Error\"] = \"errorBar\";\r\n})(InfoBarType || (InfoBarType = {}));\r\n\n;// CONCATENATED MODULE: ./src/ui/elements/InfoBar.ts\n\r\nclass InfoBar {\r\n    static show(message, type, timeoutInSeconds = 4) {\r\n        let infoBar = document.getElementById('infoBar');\r\n        if (!infoBar) {\r\n            infoBar = document.createElement('div');\r\n            infoBar.classList.add('notificationBar');\r\n            document.body.insertAdjacentElement('beforeend', infoBar);\r\n        }\r\n        ;\r\n        infoBar.innerHTML = message;\r\n        infoBar.classList.remove('d-none');\r\n        infoBar.classList.remove(InfoBarType.Info);\r\n        infoBar.classList.remove(InfoBarType.Warning);\r\n        infoBar.classList.remove(InfoBarType.Error);\r\n        infoBar.classList.add(type);\r\n        if (timeoutInSeconds > 0) {\r\n            setTimeout(() => {\r\n                infoBar === null || infoBar === void 0 ? void 0 : infoBar.classList.add('d-none');\r\n            }, timeoutInSeconds * 1000);\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/WalletMissing.html\n// Module\nvar WalletMissing_code = \"\\r\\nYou need to set up a wallet in your browser before you can use liminal.market.\\r\\n<br/><br/>\\r\\nTo make it simple, we would like to suggest two options. In your browser or your phone.\\r\\n<ul>\\r\\n    <li>For the browser we recommend <a href=\\\"https://metamask.io/download/\\\"\\r\\n                                                                         target=\\\"_blank\\\">Metamask</a>.\\r\\n    </li>\\r\\n    <li>\\r\\n        For your phone, we like <a href=\\\"https://www.tokenpocket.pro/en/download/app\\\" target=\\\"_blank\\\">Token Poket</a>\\r\\n    </li>\\r\\n</ul>\\r\\n<br/>\\r\\nBut, you have <a href=\\\"https://ethereum.org/en/wallets/\\\" target=\\\"_blank\\\">many options</a> if you want to learn more.\";\n// Exports\n/* harmony default export */ const WalletMissing = (WalletMissing_code);\n;// CONCATENATED MODULE: ./src/errors/PredefinedErrorHandlers.ts\n\r\n\r\n\r\n\r\nclass PredefinedErrorHandlers {\r\n    constructor() {\r\n        this.errorMessageMapping = new Map();\r\n        this.SentLoginRequest = \"We have sent request to you wallet to login. Open your wallet to login\";\r\n        this.errorMessageMapping.set('already processing eth_requestaccounts', this.SentLoginRequest);\r\n        this.errorMessageMapping.set('request of type \\'wallet_requestPermissions\\' already pending', this.SentLoginRequest);\r\n        this.errorMessageMapping.set('already has been called, but is not finished yet', this.SentLoginRequest);\r\n        this.errorMessageMapping.set('request is already in progress', this.SentLoginRequest);\r\n        this.errorMessageMapping.set('web3 instance', () => {\r\n            let elements = document.querySelectorAll(\".liminal_market_connect_wallet\");\r\n            if (elements.length > 0) {\r\n                elements[0].dispatchEvent(new MouseEvent('click'));\r\n                return;\r\n            }\r\n        });\r\n        this.errorMessageMapping.set('user rejected the request', () => {\r\n            Moralis.User.logOut();\r\n            window.location.reload();\r\n        });\r\n        this.errorMessageMapping.set('Non ethereum enabled browser', () => {\r\n            let modal = new Modal();\r\n            let template = Handlebars.compile(WalletMissing);\r\n            modal.showModal('New to blockchain?', template(null), false, () => {\r\n                window.location.reload();\r\n            });\r\n        });\r\n    }\r\n    handle(message) {\r\n        let handled = false;\r\n        this.errorMessageMapping.forEach((value, key) => {\r\n            if (!handled && message.toLowerCase().indexOf(key.toLowerCase()) != -1) {\r\n                if (typeof value == 'string') {\r\n                    InfoBar.show(value.toString(), InfoBarType.Warning, 10);\r\n                }\r\n                else {\r\n                    value();\r\n                }\r\n                handled = true;\r\n                return handled;\r\n            }\r\n        });\r\n        return handled;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/errors/ErrorInfo.ts\n\r\n\r\n\r\nclass ErrorInfo {\r\n    constructor(errorInfo) {\r\n        this.errorInfo = errorInfo;\r\n    }\r\n    getErrorInfo() {\r\n        return this.errorInfo;\r\n    }\r\n    static report(error) {\r\n        LoadingHelper.removeLoading();\r\n        if (!error)\r\n            return;\r\n        let errorHandler = new PredefinedErrorHandlers();\r\n        if (errorHandler.handle(error.message)) {\r\n            return;\r\n        }\r\n        if (error.callback) {\r\n            error.callback();\r\n            return;\r\n        }\r\n        if (error) {\r\n            console.error(error.toString());\r\n        }\r\n        //InfoBar.show(error.message, InfoBarType.Error);\r\n    }\r\n    static log(obj) {\r\n        ErrorInfo.report(new GeneralError(obj));\r\n    }\r\n    static info(obj) {\r\n        ErrorInfo.report(new GeneralError(obj));\r\n    }\r\n    static error(obj) {\r\n        console.log(obj);\r\n        ErrorInfo.report(new GeneralError(obj));\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/util/WalletHelper.ts\nvar WalletHelper_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nclass WalletHelper {\r\n    constructor(moralis) {\r\n        this.moralis = moralis;\r\n    }\r\n    getAUsdAsset() {\r\n        return {\r\n            Logo: '../ausd.png'\r\n        };\r\n    }\r\n    addTokenToWallet(address, symbol, fallbackTimeout) {\r\n        return WalletHelper_awaiter(this, void 0, void 0, function* () {\r\n            let securitiesService = yield SecuritiesService.getInstance();\r\n            const asset = (symbol == 'aUSD') ? this.getAUsdAsset() : yield securitiesService.getSecurityBySymbol(symbol);\r\n            let web3 = this.moralis.web3;\r\n            if (!web3) {\r\n                web3 = (yield this.moralis.enableWeb3().catch(reason => {\r\n                    ErrorInfo.report(reason);\r\n                }));\r\n                if (!web3) {\r\n                    return;\r\n                }\r\n            }\r\n            if (!web3.provider.request)\r\n                return;\r\n            let timeout = (WalletHelper.addTokenFallbackLoaded === undefined) ? 2 * 1000 : 200;\r\n            setTimeout(() => {\r\n                if (WalletHelper.addTokenFallbackLoaded !== false) {\r\n                    WalletHelper.addTokenFallbackLoaded = true;\r\n                    if (fallbackTimeout)\r\n                        fallbackTimeout();\r\n                }\r\n            }, timeout);\r\n            const wasAdded = yield web3.provider.request({\r\n                method: 'wallet_watchAsset',\r\n                params: {\r\n                    type: 'ERC20',\r\n                    options: {\r\n                        address: address,\r\n                        symbol: symbol,\r\n                        decimals: 18,\r\n                        image: 'https://app.liminal.market/img/logos/' + asset.Logo,\r\n                    },\r\n                },\r\n            }).then((result) => {\r\n                return true;\r\n            }).catch((error) => {\r\n                LoadingHelper.removeLoading();\r\n                return false;\r\n            }).finally(() => {\r\n                WalletHelper.addTokenFallbackLoaded = false;\r\n            });\r\n            return wasAdded;\r\n        });\r\n    }\r\n    ;\r\n    isWebview(ua) {\r\n        // if it says it's a webview, let's go with that\r\n        let rules = ['WebView',\r\n            // iOS webview will be the same as safari but missing \"Safari\"\r\n            '(iPhone|iPod|iPad)(?!.*Safari)',\r\n            // Android Lollipop and Above: webview will be the same as native but it will contain \"wv\"\r\n            // Android KitKat to lollipop webview will put {version}.0.0.0\r\n            'Android.*(wv|.0.0.0)',\r\n            // old chrome android webview agent\r\n            'Linux; U; Android',\r\n            'SDK'\r\n        ];\r\n        let webviewRegExp = new RegExp('(' + rules.join('|') + ')', 'ig');\r\n        return !!ua.match(webviewRegExp);\r\n    }\r\n    switchNetwork(network) {\r\n        return WalletHelper_awaiter(this, void 0, void 0, function* () {\r\n            let web3 = this.moralis.web3;\r\n            return yield web3.provider.request({\r\n                method: 'wallet_switchEthereumChain',\r\n                params: [{ chainId: '0x' + network.ChainId.toString(16) }]\r\n            })\r\n                .then((result) => {\r\n                console.log('switch result:', result);\r\n                return true;\r\n            })\r\n                .catch((err) => WalletHelper_awaiter(this, void 0, void 0, function* () {\r\n                // This error code indicates that the chain has not been added to MetaMask\r\n                if (err.code === 4902) {\r\n                    return yield web3.provider.request({\r\n                        method: 'wallet_addEthereumChain',\r\n                        params: [\r\n                            {\r\n                                chainName: network.ChainName,\r\n                                chainId: '0x' + network.ChainId.toString(16),\r\n                                nativeCurrency: {\r\n                                    name: network.NativeCurrencyName,\r\n                                    decimals: network.NativeDecimal,\r\n                                    symbol: network.NativeSymbol\r\n                                },\r\n                                rpcUrls: [network.RpcUrl]\r\n                            }\r\n                        ]\r\n                    })\r\n                        .then((result) => {\r\n                        console.log('addChain result:' + result);\r\n                        return true;\r\n                    }).catch((error) => {\r\n                        console.log('error on addNetwork:', error);\r\n                        throw new GeneralError(error);\r\n                    });\r\n                }\r\n                else {\r\n                    throw new GeneralError(err);\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\nWalletHelper.addTokenFallbackLoaded = undefined;\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/SwitchNetworkModal.ts\nvar SwitchNetworkModal_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\nclass SwitchNetworkModal {\r\n    constructor(moralis) {\r\n        this.moralis = moralis;\r\n    }\r\n    show() {\r\n        let template = Handlebars.compile(WrongNetwork);\r\n        let networks = NetworkInfo.getNetworks();\r\n        let content = template({ networks: networks });\r\n        let modal = new Modal();\r\n        modal.showModal('Switch network', content, false, () => SwitchNetworkModal_awaiter(this, void 0, void 0, function* () {\r\n            if (!this.selectedNetwork)\r\n                return;\r\n            let walletHelper = new WalletHelper(this.moralis);\r\n            yield walletHelper.switchNetwork(this.selectedNetwork);\r\n        }));\r\n        let setNetworkLinks = document.querySelectorAll('.setNetwork');\r\n        setNetworkLinks.forEach(setNetworkLink => {\r\n            setNetworkLink.addEventListener('click', (evt) => SwitchNetworkModal_awaiter(this, void 0, void 0, function* () {\r\n                evt.preventDefault();\r\n                let dataset = evt.target.dataset;\r\n                this.selectedNetwork = NetworkInfo.getNetworkInfoByChainId(parseInt(dataset.chainid));\r\n                if (!this.selectedNetwork)\r\n                    throw new GeneralError('Could not find chainId:' + dataset.chainid);\r\n                let walletHelper = new WalletHelper(this.moralis);\r\n                let successAddingNetwork = yield walletHelper.switchNetwork(this.selectedNetwork)\r\n                    .catch((error) => {\r\n                    let jsSwitchNetworkNotWorking = document.getElementById('jsSwitchNetworkNotWorking');\r\n                    if (!jsSwitchNetworkNotWorking)\r\n                        throw error;\r\n                    jsSwitchNetworkNotWorking.classList.remove('d-none');\r\n                    let switchNetworkInfo = document.getElementById('switchNetworkInfo');\r\n                    switchNetworkInfo.classList.add('d-none');\r\n                    document.getElementById('switchChainId').value = dataset.chainid + ' or it might be: ' + '0x' + parseInt(dataset.chainid).toString(16);\r\n                    document.getElementById('switchChainName').value = dataset.chainname;\r\n                    document.getElementById('switchCurrencyName').value = dataset.currencyname;\r\n                    document.getElementById('switchSymbol').value = dataset.symbol;\r\n                    document.getElementById('switchDecimal').value = dataset.decimal;\r\n                    document.getElementById('switchRpcUrl').value = dataset.rpcurl;\r\n                });\r\n                if (successAddingNetwork) {\r\n                    modal.hideModal();\r\n                    let elements = document.querySelectorAll(\".liminal_market_connect_wallet\");\r\n                    if (elements.length > 0) {\r\n                        elements[0].dispatchEvent(new MouseEvent('click'));\r\n                        return;\r\n                    }\r\n                }\r\n            }));\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/services/backend/AuthenticateService.ts\nvar AuthenticateService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\nclass AuthenticateService {\r\n    constructor(moralis) {\r\n        this.moralis = moralis;\r\n    }\r\n    authenticateUser(provider, enableWeb3Callback, authenticatedCallback) {\r\n        return AuthenticateService_awaiter(this, void 0, void 0, function* () {\r\n            let moralis = this.moralis;\r\n            let chainId = NetworkInfo.getInstance().ChainId;\r\n            let web3Result = yield moralis.enableWeb3({\r\n                provider: provider,\r\n                chainId: chainId, appLogo: 'https://app.liminal.market/img/logos/default_logo.png'\r\n            })\r\n                .catch((reason) => AuthenticateService_awaiter(this, void 0, void 0, function* () {\r\n                throw new GeneralError(reason);\r\n            }));\r\n            if (enableWeb3Callback) {\r\n                enableWeb3Callback(web3Result);\r\n            }\r\n            let user = this.moralis.User.current();\r\n            if (user) {\r\n                if (authenticatedCallback)\r\n                    authenticatedCallback(user);\r\n                return;\r\n            }\r\n            if (web3Result.network.chainId != chainId) {\r\n                let userNetwork = NetworkInfo.getNetworkInfoByChainId(web3Result.network.chainId);\r\n                if (userNetwork) {\r\n                    NetworkInfo.setNetworkByChainId(web3Result.network.chainId);\r\n                }\r\n                else {\r\n                    let modal = new SwitchNetworkModal(this.moralis);\r\n                    modal.show();\r\n                    return;\r\n                }\r\n            }\r\n            let result = yield moralis.authenticate({\r\n                signingMessage: \"You are logging into Liminal.market.\\n\\n\",\r\n                provider: provider,\r\n                chainId: chainId\r\n            }).catch((reason) => {\r\n                console.log(reason);\r\n                throw new GeneralError(reason);\r\n            });\r\n            if (authenticatedCallback) {\r\n                authenticatedCallback(result);\r\n            }\r\n            else {\r\n                location.reload();\r\n            }\r\n        });\r\n    }\r\n    getUser() {\r\n        return this.moralis.User.current();\r\n    }\r\n    getEthAddress() {\r\n        let user = this.getUser();\r\n        if (!user)\r\n            return '';\r\n        let ethAddress = user.get('ethAddress');\r\n        return ethAddress;\r\n    }\r\n    isWalletConnected() {\r\n        return this.moralis.isWeb3Enabled();\r\n    }\r\n    isUserLoggedIn() {\r\n        return (this.moralis.User.current() !== null);\r\n    }\r\n    getChainId() {\r\n        if (!this.moralis.chainId)\r\n            return 0;\r\n        return parseInt(this.moralis.chainId, 16);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/enums/WalletType.ts\nvar WalletType;\r\n(function (WalletType) {\r\n    WalletType[\"Metamask\"] = \"metamask\";\r\n    WalletType[\"WalletConnect\"] = \"walletConnect\";\r\n    WalletType[\"CoinbaseWallet\"] = \"coinbase\";\r\n    WalletType[\"Unknown\"] = \"unknown\";\r\n})(WalletType || (WalletType = {}));\r\n\n;// CONCATENATED MODULE: ./src/wallet/ProviderInfo.ts\n\r\nclass ProviderInfo {\r\n    constructor(walletConnectionInfo) {\r\n        this.ProviderName = 'unknown';\r\n        this.WalletName = '';\r\n        this.WalletUrl = '';\r\n        this.WalletType = WalletType.Unknown;\r\n        this.ChainId = 0;\r\n        this.UserAddress = '';\r\n        if (!walletConnectionInfo || !walletConnectionInfo.provider)\r\n            return;\r\n        this.walletConnectionInfo = walletConnectionInfo;\r\n        if (this.walletConnectionInfo.connection && this.walletConnectionInfo.connection.url == 'metamask') {\r\n            this.loadMetamask(walletConnectionInfo);\r\n        }\r\n        else if (this.walletConnectionInfo.provider.wc) {\r\n            this.loadWalletConnect(walletConnectionInfo);\r\n        }\r\n        else {\r\n            console.error('Dont have provider for this', walletConnectionInfo);\r\n        }\r\n        ProviderInfo.Instance = this;\r\n    }\r\n    loadMetamask(walletConnectionInfo) {\r\n        this.ProviderName = 'metamask';\r\n        this.WalletName = \"Metamask\";\r\n        this.WalletUrl = 'https://metamask.io/';\r\n        this.WalletType = WalletType.Metamask;\r\n        this.ChainId = walletConnectionInfo.provider.chainId;\r\n        this.UserAddress = walletConnectionInfo.provider.selectedAddress;\r\n    }\r\n    loadWalletConnect(walletConnectionInfo) {\r\n        var _a;\r\n        let wc = walletConnectionInfo.provider.wc;\r\n        this.ProviderName = \"walletConnect\";\r\n        this.WalletName = wc._peerMeta.name;\r\n        this.WalletUrl = (_a = wc._peerMeta.url) !== null && _a !== void 0 ? _a : '';\r\n        this.WalletType = WalletType.WalletConnect;\r\n        this.ChainId = walletConnectionInfo.provider.chainId;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/services/backend/UserService.ts\nvar UserService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass UserService {\r\n    constructor(moralis) {\r\n        if (!moralis)\r\n            moralis = Moralis;\r\n        this.moralis = moralis;\r\n    }\r\n    logIn() {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                yield this.moralis.enableWeb3();\r\n                let user = this.moralis.User.current();\r\n                if (user)\r\n                    return Promise.resolve(user);\r\n                return this.moralis.authenticate();\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        });\r\n    }\r\n    logOut() {\r\n        return this.moralis.User.logOut();\r\n    }\r\n    isLoggedIn(loadingMessage) {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            let user = this.moralis.User.current();\r\n            if (user) {\r\n                let cookieHelper = new CookieHelper(document);\r\n                let providerName = cookieHelper.getCookieValue('provider');\r\n                let walletHelper = new WalletHelper(this.moralis);\r\n                if (walletHelper.isWebview(window.navigator.userAgent))\r\n                    providerName = ' ';\r\n                if (!providerName) {\r\n                    return undefined;\r\n                }\r\n                if (!this.moralis.isWeb3Enabled()) {\r\n                    let str = 'We are sending login request to your wallet. If you cancel we will simply log you out. You can always log again in.';\r\n                    str += '<button id=\"logoutButton\">Logout</button>';\r\n                    loadingMessage.innerHTML = str;\r\n                    let logoutButton = document.getElementById('logoutButton');\r\n                    if (logoutButton) {\r\n                        logoutButton.addEventListener('click', () => {\r\n                            this.moralis.User.logOut();\r\n                        });\r\n                    }\r\n                    let result = yield this.moralis.enableWeb3({ provider: providerName })\r\n                        .catch((reason) => UserService_awaiter(this, void 0, void 0, function* () {\r\n                        ErrorInfo.report(reason);\r\n                    }));\r\n                    if (!result)\r\n                        return;\r\n                }\r\n                let providerInfo = new ProviderInfo(null);\r\n                let authenticationService = new AuthenticateService(this.moralis);\r\n                yield authenticationService.authenticateUser(providerName, (walletConnectionInfo) => {\r\n                    providerInfo = new ProviderInfo(walletConnectionInfo);\r\n                });\r\n                user.providerInfo = providerInfo;\r\n                return user;\r\n            }\r\n            return undefined;\r\n        });\r\n    }\r\n    isMarketOpenOrUserOffHours() {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            let marketService = new MarketService(this.moralis);\r\n            let isOpen = yield marketService.isMarketOpen();\r\n            if (isOpen)\r\n                return true;\r\n            let networkInfo = NetworkInfo.getInstance();\r\n            if (!networkInfo.TestNetwork)\r\n                return false;\r\n            return false;\r\n        });\r\n    }\r\n    getUser() {\r\n        return this.moralis.User.current();\r\n    }\r\n    getAlpacaId() {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            let user = this.getUser();\r\n            if (!user)\r\n                return '';\r\n            return (yield user.fetch()).get('alpacaId').toString();\r\n        });\r\n    }\r\n    getAccount() {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            let user = this.getUser();\r\n            if (!user)\r\n                return;\r\n            return yield this.moralis.Cloud.run('account');\r\n        });\r\n    }\r\n    getEthAddress() {\r\n        var _a;\r\n        return (_a = this.getUser()) === null || _a === void 0 ? void 0 : _a.get('ethAddress');\r\n    }\r\n    kycActionRequired() {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            let kycResults = yield this.moralis.Cloud.run('kycActionRequired');\r\n            return kycResults;\r\n        });\r\n    }\r\n    updateName(given_name, middle_name, family_name) {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.moralis.Cloud.run('updateName', {\r\n                given_name: given_name,\r\n                middle_name: middle_name,\r\n                family_name: family_name\r\n            });\r\n        });\r\n    }\r\n    updateContact(data) {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.moralis.Cloud.run('updateContact', data);\r\n        });\r\n    }\r\n    updateTrustedContact(data) {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.moralis.Cloud.run('updateTrustedContact', data);\r\n        });\r\n    }\r\n    createAchRelationship(public_token, accountId) {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.moralis.Cloud.run('createAchRelationship', {\r\n                public_token: public_token,\r\n                account_id: accountId\r\n            });\r\n        });\r\n    }\r\n    getPlaidLinkToken() {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.moralis.Cloud.run('createPlaidLinkToken');\r\n        });\r\n    }\r\n    getBankRelationships() {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.moralis.Cloud.run('getBankRelationship');\r\n        });\r\n    }\r\n    getLatestTransfers(direction) {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.moralis.Cloud.run('getTransfers', { direction: direction });\r\n        });\r\n    }\r\n    createTransfer(amount, direction, relationship_id, transfer_type) {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.moralis.Cloud.run('createTransfer', { amount: amount, direction: direction, relationship_id: relationship_id, transfer_type: transfer_type });\r\n        });\r\n    }\r\n    deleteTransfer(id) {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.moralis.Cloud.run('deleteTransfer', { id: id });\r\n        });\r\n    }\r\n    registerWireTransferRelationship(params) {\r\n        return UserService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.moralis.Cloud.run('createWireRelationship', params);\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/contracts/localhost-contract-addresses.ts\nclass localhostContractAddresses {\r\n    constructor() {\r\n        this.NetworkName = \"localhost\";\r\n        this.KYC_ADDRESS = \"0x2856a0C8034bF887928845D05179847e0ADC2209\";\r\n        this.AUSD_ADDRESS = \"0x6aCE712D412e99727aDf2272BE24f8e45aF76270\";\r\n        this.LIMINAL_MARKET_ADDRESS = \"0xbd1270f3f8175927Fe427a220b9253b360Be52Bd\";\r\n        this.MARKET_CALENDAR_ADDRESS = \"0x459239D96976440d68fd78e1401983376840d563\";\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/contracts/ContractAddresses.ts\nclass ContractAddresses {\r\n    constructor() {\r\n        this.KYC_ADDRESS = \"0xEBC688DaF0924D1A3b95B869717b987087A52156\";\r\n        this.AUSD_ADDRESS = \"0x8E32f274476CE23D64ae0037CE80CE8b8D670658\";\r\n        this.LIMINAL_MARKET_ADDRESS = \"0xe8C8C9Ff944c04318f43FE1479A1d51EBAf2EBD8\";\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/contracts/rinkeby-contract-addresses.ts\n\r\nclass rinkebyContractAddresses extends ContractAddresses {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.KYC_ADDRESS = \"0x1d8AeaC4cEaBe985e1AD73B8F09ae57284834Fd7\";\r\n        this.AUSD_ADDRESS = \"0x4925f35Db2b3fB7FF2A5F0525Da29CB4F5F12cAc\";\r\n        this.LIMINAL_MARKET_ADDRESS = \"0xFBaAb9F394F1aA80182dD6FFb5187E48cAFB9922\";\r\n        this.USDC_ADDRESS = \"0x4DBCdF9B62e891a7cec5A2568C3F4FAF9E8Abe2b\";\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/contracts/mumbai-contract-addresses.ts\n\r\nclass mumbaiContractAddresses extends ContractAddresses {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.KYC_ADDRESS = \"0x23c2d25Ba4E8dD2d465348A7039c8D5aaaa72c5B\";\r\n        this.AUSD_ADDRESS = \"0xe65Fb29C8CeB720755D456233c971DDb11fcbb8d\";\r\n        this.LIMINAL_MARKET_ADDRESS = \"0x2BFb0207BC88BA9e2Ac74F19c9e88EdCcdBbC2a9\";\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/contracts/fuji-contract-addresses.ts\nclass fujiContractAddresses {\r\n    constructor() {\r\n        this.NetworkName = \"fuji\";\r\n        this.KYC_ADDRESS = \"0x0594D04FDB5C98Fb7F777a799139424Ae2414AaD\";\r\n        this.AUSD_ADDRESS = \"0xbAc482aE0b0d652854df377be566445984A021ED\";\r\n        this.LIMINAL_MARKET_ADDRESS = \"0x098A512B017408008a23ECe22843788799CDebFd\";\r\n        this.MARKET_CALENDAR_ADDRESS = \"0x77E6A62Be8398B18d2dA81CDB6Eb097bD8132ccB\";\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/contracts/ContractInfo.ts\n/*\r\nexport const KYC_ADDRESS = \"0xD5f071F2D8BF6E7d6BC25A1D89e9b1430AC78A58\";\r\nexport const LIMINAL_ADDRESS = \"0x3D7CD28EfD08FfE9Ce8cA329EC2e67822C756526\";\r\nexport const AUSD_ADDRESS = \"0x6854DC0e58Ef1029aA42Ba61ca1160527bBeC01E\";\r\nexport const SECURITY_FACTORY_ADDRESS = \"0x0c8Cd13ff68D41263E6937224B9e5c7fF54d72f9\";\r\nexport const SECURITY_TOKEN_OWNER = \"0x0c8Cd13ff68D41263E6937224B9e5c7fF54d72f9\";\r\nexport const USDC_ADDRESS = \"0x4DBCdF9B62e891a7cec5A2568C3F4FAF9E8Abe2b\";\r\n*/\r\n\r\n\r\n\r\n\r\n\r\nclass ContractInfo {\r\n    static getContractInfo(networkName) {\r\n        let contractInfos = {\r\n            localhostContractAddresses: localhostContractAddresses, rinkebyContractAddresses: rinkebyContractAddresses,\r\n            mumbaiContractAddresses: mumbaiContractAddresses, fujiContractAddresses: fujiContractAddresses\r\n        };\r\n        if (!networkName) {\r\n            networkName = NetworkInfo.getInstance().Name;\r\n        }\r\n        const contractInfoType = contractInfos[networkName + 'ContractAddresses'];\r\n        return new contractInfoType();\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/MarketIsClosed.html\n// Module\nvar MarketIsClosed_code = \"<div class=\\\"center\\\">\\r\\n    The stock market is currently closed.<br/>\\r\\nIt is usually open monday to friday between 9:30 AM and 4:00 PM EST (9:30 - 16:00 EST).\\r\\n    <br/><br/>\\r\\nToday is {{dayOfWeek}}\\r\\n<br /><br/>\\r\\nYour current time is {{currentTime}} ({{GMT}})\\r\\n    <br/><br/>\\r\\nThat means the market is open your time between\\r\\n{{openFrom}} - {{openTo}}\\r\\n</div>\";\n// Exports\n/* harmony default export */ const MarketIsClosed = (MarketIsClosed_code);\n;// CONCATENATED MODULE: ./src/util/DateHelper.ts\nclass DateHelper {\r\n    static isOlderThen(date, minutes) {\r\n        let currentTime = new Date().getTime();\r\n        return (currentTime > (date.getTime() + minutes * 60 * 1000));\r\n    }\r\n    ;\r\n    static getWeekday() {\r\n        const weekday = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n        const d = new Date();\r\n        return weekday[d.getDay()];\r\n    }\r\n    static getOpenAndCloseHours() {\r\n        const d = new Date();\r\n        let openHour = 9 + 4 + (-1 * (d.getTimezoneOffset() / 60));\r\n        let closeHour = 16 + 4 + (-1 * (d.getTimezoneOffset() / 60));\r\n        return [openHour + ':30', closeHour + ':00'];\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/errors/BlockchainError.ts\n\r\n\r\n\r\n\r\nclass BlockchainError extends GeneralError {\r\n    constructor(e) {\r\n        super(e);\r\n        this.message = e.toString();\r\n        if (this.userDeniedTransactionSignature()) {\r\n            this.code = BlockchainError.UserCancelled;\r\n        }\r\n        else if (this.addressIsNotValidKYC()) {\r\n            this.code = BlockchainError.AddressIsNotValidKYC;\r\n        }\r\n        else if (this.isMarketClosed()) {\r\n            this.code = BlockchainError.MarketIsClosed;\r\n            this.callback = this.marketIsClosedModal;\r\n        }\r\n        if (e.data && e.data.message) {\r\n            let msg = e.data.message;\r\n            let searchStr = 'reverted with reason string';\r\n            let idx = msg.indexOf(searchStr) + searchStr.length;\r\n            if (idx != -1) {\r\n                this.message = msg.substring(idx).trim().replace(/'/g, '');\r\n                this.code = BlockchainError.ErrorFromContract;\r\n            }\r\n        }\r\n    }\r\n    userDeniedTransactionSignature() {\r\n        return this.message.indexOf('denied transaction signature') !== -1;\r\n    }\r\n    addressIsNotValidKYC() {\r\n        return this.message.indexOf('address is not kyc valid') !== -1;\r\n    }\r\n    isMarketClosed() {\r\n        let searchStr = 'Market is closed';\r\n        return this.message.indexOf(searchStr) !== -1;\r\n    }\r\n    marketIsClosedModal() {\r\n        let [openHour, closeHour] = DateHelper.getOpenAndCloseHours();\r\n        let time = new Date().toTimeString().split(' ');\r\n        let obj = {\r\n            currentTime: time[0],\r\n            GMT: time[1],\r\n            dayOfWeek: DateHelper.getWeekday(),\r\n            openFrom: openHour,\r\n            openTo: closeHour\r\n        };\r\n        let modal = new Modal();\r\n        let template = Handlebars.compile(MarketIsClosed);\r\n        modal.showModal('Market is closed', template(obj));\r\n    }\r\n}\r\nBlockchainError.ErrorFromContract = -1;\r\nBlockchainError.UserCancelled = 1;\r\nBlockchainError.AddressIsNotValidKYC = 2;\r\nBlockchainError.MarketIsClosed = 3;\r\n\n;// CONCATENATED MODULE: ./src/services/blockchain/LiminalMarketService.ts\nvar LiminalMarketService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\nclass LiminalMarketService {\r\n    constructor(moralis) {\r\n        this.moralis = moralis;\r\n    }\r\n    getSymbolContractAddress(symbol) {\r\n        return LiminalMarketService_awaiter(this, void 0, void 0, function* () {\r\n            const options = yield this.getOptions(\"getSecurityToken\", {\r\n                symbol: symbol\r\n            });\r\n            let result = yield this.moralis.executeFunction(options)\r\n                .then((value) => {\r\n                return value.toString();\r\n            }).catch((reason) => {\r\n                let blockchainError = new BlockchainError(reason);\r\n                throw ErrorInfo.report(blockchainError);\r\n            });\r\n            return result;\r\n        });\r\n    }\r\n    getOptions(functionName, params) {\r\n        return LiminalMarketService_awaiter(this, void 0, void 0, function* () {\r\n            let contractInfo = ContractInfo.getContractInfo();\r\n            let abi = yield this.getLiminalMarketAbi();\r\n            const options = {\r\n                contractAddress: contractInfo.LIMINAL_MARKET_ADDRESS,\r\n                functionName: functionName,\r\n                abi: abi,\r\n                params: params,\r\n            };\r\n            return options;\r\n        });\r\n    }\r\n    getLiminalMarketAbi() {\r\n        return LiminalMarketService_awaiter(this, void 0, void 0, function* () {\r\n            if (LiminalMarketService.LiminalMarketInfo)\r\n                return LiminalMarketService.LiminalMarketInfo.abi;\r\n            let response = yield fetch('../abi/LiminalMarket.json');\r\n            LiminalMarketService.LiminalMarketInfo = yield response.json();\r\n            return LiminalMarketService.LiminalMarketInfo.abi;\r\n        });\r\n    }\r\n    createToken(symbol, creatingToken) {\r\n        return LiminalMarketService_awaiter(this, void 0, void 0, function* () {\r\n            let salt = (new Date().getTime() + (Math.random() * 100000)).toString();\r\n            salt = salt.substring(0, salt.indexOf('.'));\r\n            const liminalOptions = yield this.getOptions(\"createToken\", {\r\n                symbol: symbol,\r\n                salt: salt\r\n            });\r\n            let result = yield this.moralis.executeFunction(liminalOptions)\r\n                .then(result => {\r\n                return result;\r\n            }).catch(reason => {\r\n                let blockchainError = new BlockchainError(reason);\r\n                if (blockchainError.userDeniedTransactionSignature()) {\r\n                    return blockchainError;\r\n                }\r\n                throw ErrorInfo.report(blockchainError);\r\n            });\r\n            if (result instanceof BlockchainError)\r\n                return result;\r\n            creatingToken();\r\n            yield result.wait();\r\n            return yield this.getSymbolContractAddress(symbol);\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/elements/SecuritiesList.html\n// Module\nvar SecuritiesList_code = \"<figure>\\r\\n    <table id=\\\"liminal_market_securities_table\\\" role=\\\"grid\\\">\\r\\n    <thead>\\r\\n    <tr>\\r\\n        <th colspan=\\\"2\\\"><input autocomplete=\\\"off\\\" type=\\\"search\\\" id=\\\"search_for_symbol\\\" placeholder=\\\"Search for name or symbol in {{securitiesCount}} stocks\\\"></th>\\r\\n    </tr>\\r\\n    </thead>\\r\\n    <tbody id=\\\"{{tbodyId}}\\\">\\r\\n    {{>securities}}\\r\\n    </tbody>\\r\\n</table>\\r\\n<span id=\\\"liminal_market_load_more\\\"></span>\\r\\n</figure>\";\n// Exports\n/* harmony default export */ const elements_SecuritiesList = (SecuritiesList_code);\n;// CONCATENATED MODULE: ./src/html/elements/Securities.html\n// Module\nvar Securities_code = \"{{#each securities}}\\r\\n<tr data-symbol=\\\"{{{Symbol}}}\\\" data-logo=\\\"{{LogoPath}}{{Logo}}\\\" data-name=\\\"{{Name}}\\\">\\r\\n    <td class=\\\"symbol_logo\\\"><img src=\\\"{{LogoPath}}{{Logo}}\\\"/></td>\\r\\n    <td class=\\\"security_information\\\">\\r\\n        <strong>{{Name}}</strong><br/>\\r\\n        <nav class=\\\"security_extra\\\">\\r\\n            <ul>\\r\\n                <li>\\r\\n                    <a href=\\\"https://strike.market/stocks/{{Symbol}}\\\" target=\\\"_blank\\\">{{Symbol}}</a>\\r\\n                </li>\\r\\n            </ul>\\r\\n            <ul>\\r\\n                <li>\\r\\n                    <a href=\\\"\\\" class=\\\"getAddress\\\" data-symbol=\\\"{{Symbol}}\\\">Get address</a>\\r\\n                </li>\\r\\n            </ul>\\r\\n            <ul>\\r\\n                <li>\\r\\n                    <a href=\\\"\\\" class=\\\"addToWallet\\\" data-symbol=\\\"{{Symbol}}\\\">Add to wallet</a>\\r\\n                </li>\\r\\n            </ul>\\r\\n        </nav>\\r\\n    </td>\\r\\n</tr>\\r\\n{{/each}}\";\n// Exports\n/* harmony default export */ const Securities = (Securities_code);\n;// CONCATENATED MODULE: ./src/util/CopyHelper.ts\nvar CopyHelper_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nclass CopyHelper {\r\n    fallbackCopyTextToClipboard(text) {\r\n        let textArea = document.createElement(\"textarea\");\r\n        textArea.value = text;\r\n        // Avoid scrolling to bottom\r\n        textArea.style.top = \"0\";\r\n        textArea.style.left = \"0\";\r\n        textArea.style.position = \"fixed\";\r\n        document.body.appendChild(textArea);\r\n        textArea.focus();\r\n        textArea.select();\r\n        try {\r\n            let successful = document.execCommand('copy');\r\n            return successful;\r\n        }\r\n        catch (err) {\r\n            console.error(err);\r\n            return false;\r\n        }\r\n        finally {\r\n            document.body.removeChild(textArea);\r\n        }\r\n    }\r\n    copyTextToClipboard(text) {\r\n        return CopyHelper_awaiter(this, void 0, void 0, function* () {\r\n            if (!navigator.clipboard) {\r\n                return this.fallbackCopyTextToClipboard(text);\r\n            }\r\n            let result = yield navigator.clipboard.writeText(text).then(ble => {\r\n                console.log('ble', ble);\r\n                return true;\r\n            }).\r\n                catch(function (err) {\r\n                console.info(err);\r\n                return false;\r\n            });\r\n            console.log(result);\r\n            return result;\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/elements/AddressInfo.html\n// Module\nvar AddressInfo_code = \"<article id=\\\"symbolInfoToCopy\\\">\\r\\n    This is the address for the symbol {{symbol}}.\\r\\n    <br/>\\r\\n    <input value=\\\"{{address}}\\\"/>\\r\\n</article>\\r\\n\";\n// Exports\n/* harmony default export */ const AddressInfo = (AddressInfo_code);\n;// CONCATENATED MODULE: ./src/html/elements/ContractAddressNotFound.html\n// Module\nvar ContractAddressNotFound_code = \"<tr id=\\\"symbolInfoToCopy\\\">\\r\\n    <td colspan=\\\"4\\\">\\r\\n        <article>\\r\\n        This symbol has never been bought and does not exist. Buy this symbol and address will become available.\\r\\n        </article>\\r\\n    </td>\\r\\n</tr>\";\n// Exports\n/* harmony default export */ const ContractAddressNotFound = (ContractAddressNotFound_code);\n// EXTERNAL MODULE: ./node_modules/bignumber.js/bignumber.js\nvar bignumber = __webpack_require__(\"./node_modules/bignumber.js/bignumber.js\");\nvar bignumber_default = /*#__PURE__*/__webpack_require__.n(bignumber);\n;// CONCATENATED MODULE: ./src/util/Helper.ts\n\r\nconst showContainer = function (id) {\r\n    let containers = document.querySelectorAll('.container');\r\n    for (let i = 0; i < containers.length; i++) {\r\n        let element = containers[i];\r\n        if (element.id == id) {\r\n            element.classList.remove('d-none');\r\n            element.style.display = 'block';\r\n        }\r\n        else {\r\n            element.style.display = 'none';\r\n        }\r\n    }\r\n};\r\nconst roundNumber = function (number) {\r\n    return Math.round(number * 100) / 100;\r\n};\r\nconst roundNumberDecimal = function (number, decimal) {\r\n    let hundred = parseInt('1' + '0'.repeat(decimal));\r\n    return Math.round(number * hundred) / hundred;\r\n};\r\nconst roundBigNumber = function (number) {\r\n    return new (bignumber_default())(Math.round(number.toNumber() * 100) / 100);\r\n};\r\nconst roundBigNumberDecimal = function (number, decimal) {\r\n    let hundred = parseInt('1' + '0'.repeat(decimal));\r\n    return new (bignumber_default())(Math.round(number.toNumber() * hundred) / hundred);\r\n};\r\nconst AddressZero = \"0x0000000000000000000000000000000000000000\";\r\nconst isJSON = function (str) {\r\n    try {\r\n        JSON.parse(str);\r\n        return true;\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n};\r\nconst shortEth = function (ethAddress) {\r\n    if (!ethAddress)\r\n        return '';\r\n    return ethAddress.substring(0, 6) + \"...\" + ethAddress.substring(ethAddress.length - 4);\r\n};\r\nconst upperFirstLetter = function (text) {\r\n    return text[0].toUpperCase() + text.substring(1);\r\n};\r\n\n;// CONCATENATED MODULE: ./src/html/elements/AddToWallet.html\n// Module\nvar AddToWallet_code = \"<tr id=\\\"symbolInfoToCopy\\\">\\r\\n    <td colspan=\\\"4\\\">\\r\\n        <article>\\r\\n        Some wallets detect automatically the coins that are registered to your address.\\r\\n        Those that don't do automatic detection, you need to add them manually.\\r\\n        <br /><br />\\r\\n        This is the address for the symbol {{symbol}},\\r\\n        you need to copy it and import the token in your wallet\\r\\n        <br />\\r\\n        <input value=\\\"{{address}}\\\" />\\r\\n        </article>\\r\\n    </td>\\r\\n</tr>\";\n// Exports\n/* harmony default export */ const AddToWallet = (AddToWallet_code);\n;// CONCATENATED MODULE: ./src/ui/elements/SecuritiesList.ts\nvar SecuritiesList_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass SecuritiesList {\r\n    constructor() {\r\n        this.tbodyId = 'liminal_market_securities_list';\r\n        this.onSelectSymbol = undefined;\r\n        this.page = 0;\r\n        this.loadmore = true;\r\n    }\r\n    render() {\r\n        return SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n            let securitiesService = yield SecuritiesService.getInstance();\r\n            let securitiesCount = securitiesService.securitiesArray.length;\r\n            let securities = yield securitiesService.getPaginatingSecurities(this.page++);\r\n            Handlebars.registerPartial(\"securities\", Securities);\r\n            let template = Handlebars.compile(elements_SecuritiesList);\r\n            let obj = {\r\n                tbodyId: this.tbodyId,\r\n                securities: securities,\r\n                securitiesCount: securitiesCount\r\n            };\r\n            return template(obj);\r\n        });\r\n    }\r\n    bindEvents(onSelectSymbol) {\r\n        return SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n            this.bindOnClickEvent(onSelectSymbol);\r\n            yield this.bindSearchEvent();\r\n            this.bindLoadMore();\r\n        });\r\n    }\r\n    bindOnClickEvent(onSelectSymbol) {\r\n        let table = document.getElementById('liminal_market_securities_table');\r\n        if (!table) {\r\n            ErrorInfo.report(new GeneralError(\"Page could not load correctly, try reloading\"));\r\n            return;\r\n        }\r\n        this.onSelectSymbol = onSelectSymbol;\r\n        table.onclick = (evt) => SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n            yield this.handleClick(evt);\r\n        });\r\n    }\r\n    handleClick(evt) {\r\n        return SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n            let element = evt.target;\r\n            if (element.tagName.toLocaleLowerCase() === 'a') {\r\n                yield this.addToWalletOrGetAddress(evt, element);\r\n                return;\r\n            }\r\n            let parentTr = element.parentElement;\r\n            if (!parentTr)\r\n                return;\r\n            if (parentTr.tagName.toLocaleLowerCase() !== 'tr') {\r\n                parentTr = parentTr.parentElement;\r\n            }\r\n            let symbol = parentTr.dataset.symbol;\r\n            if (!symbol)\r\n                return;\r\n            let name = parentTr.dataset.name;\r\n            let logo = parentTr.dataset.logo;\r\n            if (this.onSelectSymbol) {\r\n                this.onSelectSymbol(symbol, name, logo);\r\n            }\r\n        });\r\n    }\r\n    bindSearchEvent() {\r\n        return SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n            let searchForSymbol = document.getElementById('search_for_symbol');\r\n            if (!searchForSymbol)\r\n                return;\r\n            let securitiesService = yield SecuritiesService.getInstance();\r\n            let timeout = null;\r\n            searchForSymbol.addEventListener('keyup', (evt) => SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n                if (timeout != null)\r\n                    clearTimeout(timeout);\r\n                timeout = setTimeout(() => SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n                    let search = evt.target.value;\r\n                    if (!search || search.length < 2) {\r\n                        this.loadmore = true;\r\n                        yield this.showTopSecurities(securitiesService);\r\n                        return;\r\n                    }\r\n                    this.loadmore = false;\r\n                    let securities = yield securitiesService.find(search);\r\n                    this.loadSecuritiesToDom(securities);\r\n                }), 500);\r\n            }));\r\n        });\r\n    }\r\n    showTopSecurities(securitiesService) {\r\n        return SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n            let securities = yield securitiesService.getTopSecurities();\r\n            this.loadSecuritiesToDom(securities);\r\n        });\r\n    }\r\n    loadSecuritiesToDom(securities) {\r\n        let tbody = document.getElementById(this.tbodyId);\r\n        if (!tbody)\r\n            return;\r\n        let template = Handlebars.compile(Securities);\r\n        let obj = {\r\n            securities: securities\r\n        };\r\n        let content = template(obj);\r\n        tbody.innerHTML = content;\r\n    }\r\n    bindLoadMore() {\r\n        const el = document.querySelector('#liminal_market_load_more');\r\n        const observer = new window.IntersectionObserver(([entry]) => SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n            if (entry.isIntersecting) {\r\n                yield this.loadMore();\r\n            }\r\n        }), {\r\n            root: null,\r\n            threshold: 0.1, // set offset 0.1 means trigger if atleast 10% of element in viewport\r\n        });\r\n        observer.observe(el);\r\n    }\r\n    loadMore() {\r\n        return SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n            if (!this.loadmore)\r\n                return;\r\n            let tbody = document.getElementById(this.tbodyId);\r\n            if (!tbody)\r\n                return;\r\n            let securitiesService = yield SecuritiesService.getInstance();\r\n            let securities = yield securitiesService.getPaginatingSecurities(this.page++);\r\n            let template = Handlebars.compile(Securities);\r\n            let obj = {\r\n                securities: securities\r\n            };\r\n            let content = template(obj);\r\n            tbody.insertAdjacentHTML('beforeend', content);\r\n        });\r\n    }\r\n    addToWalletOrGetAddress(event, element) {\r\n        return SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n            let className = element.className;\r\n            if (className != 'getAddress' && className != 'addToWallet') {\r\n                return;\r\n            }\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            let symbol = element.dataset.symbol;\r\n            if (!symbol)\r\n                return;\r\n            LoadingHelper.setLoading(element);\r\n            let liminalMarketService = new LiminalMarketService(Moralis);\r\n            let address = yield liminalMarketService.getSymbolContractAddress(symbol);\r\n            if (className == 'getAddress') {\r\n                yield this.showGetAddress(element, symbol, address);\r\n            }\r\n            else {\r\n                yield this.showAddToWallet(element, symbol, address);\r\n            }\r\n            LoadingHelper.removeLoading();\r\n        });\r\n    }\r\n    showGetAddress(element, symbol, address) {\r\n        return SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n            if (address !== AddressZero) {\r\n                let copyHelper = new CopyHelper();\r\n                let success = yield copyHelper.copyTextToClipboard(address);\r\n                if (success) {\r\n                    element.innerText = 'Copied';\r\n                    return;\r\n                }\r\n            }\r\n            this.renderContractInfoToString(element, address, symbol, AddressInfo);\r\n        });\r\n    }\r\n    showAddToWallet(element, symbol, address) {\r\n        return SecuritiesList_awaiter(this, void 0, void 0, function* () {\r\n            if (address !== AddressZero) {\r\n                let walletHelper = new WalletHelper(Moralis);\r\n                let added = yield walletHelper.addTokenToWallet(address, symbol, () => {\r\n                    LoadingHelper.removeLoading();\r\n                    this.renderContractInfoToString(element, address, symbol, AddToWallet);\r\n                });\r\n                if (added) {\r\n                    return '';\r\n                }\r\n            }\r\n            this.renderContractInfoToString(element, address, symbol, AddToWallet);\r\n        });\r\n    }\r\n    renderContractInfoToString(element, address, symbol, template) {\r\n        let symbolInfoToCopy = document.getElementById('symbolInfoToCopy');\r\n        if (symbolInfoToCopy)\r\n            symbolInfoToCopy.remove();\r\n        let content = '';\r\n        if (address === AddressZero) {\r\n            let template = Handlebars.compile(ContractAddressNotFound);\r\n            content = template(null);\r\n        }\r\n        else {\r\n            let template = Handlebars.compile(AddressInfo);\r\n            let obj = {\r\n                symbol: symbol,\r\n                address: address\r\n            };\r\n            content = template(obj);\r\n        }\r\n        element.parentElement.parentElement.parentElement.insertAdjacentHTML('afterend', content);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/elements/UserInfo.html\n// Module\nvar UserInfo_code = \"<div id=\\\"userMenuPanel\\\">\\r\\n    <a href=\\\"#\\\" id=\\\"userInfoAction\\\" aria-expanded=\\\"false\\\">\\r\\n        <img src=\\\"https://effigy.im/a/{{ethAddress}}.png\\\" width=\\\"24\\\">\\r\\n        <span id=\\\"user_info_ethAddress\\\">{{shortEthAddress}}</span>\\r\\n    </a>\\r\\n\\r\\n    <div id=\\\"userInfoDropdown\\\" class=\\\"d-none\\\">\\r\\n        <div class=\\\"grid account_info\\\">\\r\\n            <h6>Account</h6>\\r\\n            <a id=\\\"disconnectFromNetwork\\\" href=\\\"#\\\">Disconnect</a>\\r\\n\\r\\n        </div>\\r\\n        <div class=\\\"edit_account grid\\\">\\r\\n            <a id=\\\"editName\\\" href=\\\"#\\\">Edit name</a>\\r\\n            <a id=\\\"editContact\\\" href=\\\"#\\\">Edit contact info</a>\\r\\n        </div>\\r\\n        <div class=\\\"edit_account\\\">\\r\\n            <a id=\\\"editTrustedContact\\\" href=\\\"#\\\">Edit trusted contact</a>\\r\\n        </div>\\r\\n        <hr/>\\r\\n        <div class=\\\"grid\\\">\\r\\n            <div>\\r\\n                <img src=\\\"https://effigy.im/a/{{ethAddress}}.png\\\">\\r\\n            </div>\\r\\n            <div>\\r\\n                <strong class=\\\"d-block\\\"><a href=\\\"{{blockchainExplorer}}{{ethAddress}}\\\" target=\\\"_blank\\\">{{shortEthAddress}}</a></strong>\\r\\n                <small>{{walletName}}</small>\\r\\n            </div>\\r\\n        </div>\\r\\n        <hr/>\\r\\n        <div class=\\\"hidden\\\" id=\\\"userInfoAUsdBalance\\\">\\r\\n            <div class=\\\"grid\\\">\\r\\n                <div><img src=\\\"https://app.liminal.market/img/ausd.png\\\"></div>\\r\\n                <div>\\r\\n                    <strong class=\\\"d-block\\\">aUSD <span id=\\\"user_info_ausd_balance\\\"></span></strong>\\r\\n\\r\\n                    <a href=\\\"#\\\" class=\\\"fund_account\\\">Fund my account</a>\\r\\n                    <a href=\\\"#\\\" id=\\\"withdraw_from_account\\\">Withdraw from account</a>\\r\\n                </div>\\r\\n            </div>\\r\\n            <hr/>\\r\\n        </div>\\r\\n        <div class=\\\"grid\\\">\\r\\n            <strong class=\\\"d-block\\\">Network</strong>\\r\\n            <small>{{networkName}}</small>\\r\\n\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</div>\";\n// Exports\n/* harmony default export */ const elements_UserInfo = (UserInfo_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycEditName.html\n// Module\nvar KycEditName_code = \"<fieldset id=\\\"kycEditName\\\">\\r\\n    <div class=\\\"warningBar\\\">\\r\\n        <strong>Warning</strong><br/>\\r\\n        You can only change the name once. Be careful of what you change.\\r\\n        <br/><br/>\\r\\n        After you change this information a new KYC process will be started, and you will NOT be able to do any\\r\\n        trades\\r\\n        until it has been approved.\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"given_name\\\">Legal First name</label>\\r\\n        <input required id=\\\"given_name\\\" name=\\\"given_name\\\"\\r\\n               placeholder=\\\"Ron\\\"\\r\\n               value=\\\"{{given_name}}\\\" autocomplete=\\\"given-name\\\">\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"middle_name\\\">Legal Middle name</label>\\r\\n        <input id=\\\"middle_name\\\" name=\\\"middle_name\\\"\\r\\n               placeholder=\\\"\\\"\\r\\n               value=\\\"{{middle_name}}\\\" autocomplete=\\\"additional-name\\\">\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"family_name\\\">Legal Last name</label>\\r\\n        <input required id=\\\"family_name\\\" name=\\\"family_name\\\"\\r\\n               placeholder=\\\"Swanson\\\"\\r\\n               value=\\\"{{family_name}}\\\" autocomplete=\\\"family-name\\\">\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"buttons\\\">\\r\\n        <button id=\\\"kycEditNameConfirm\\\">Confirm</button>\\r\\n    </div>\\r\\n</fieldset>\\r\\n\\r\\n<fieldset class=\\\"hidden\\\" id=\\\"confirmNameFieldset\\\">\\r\\n    <div class=\\\"confirm_name\\\">\\r\\n        <label for=\\\"confirm_name\\\" id=\\\"label_confirm_name\\\">Please type</label>\\r\\n        <input name=\\\"confirm_name\\\" id=\\\"confirm_name\\\"/>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"input_error\\\" id=\\\"kycEditNameError\\\"></div>\\r\\n\\r\\n    <div class=\\\"buttons grid\\\">\\r\\n        <button id=\\\"kycEditNameBack\\\">Back</button>\\r\\n        <button type=\\\"submit\\\" id=\\\"kycEditNameSave\\\">Confirm</button>\\r\\n    </div>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const KycEditName = (KycEditName_code);\n;// CONCATENATED MODULE: ./src/util/StringHelper.ts\nclass StringHelper {\r\n    static isNullOrEmpty(str) {\r\n        return !str || str.toString().trim().length == 0;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycEditNameForm.ts\nvar KycEditNameForm_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\nclass KycEditNameForm {\r\n    constructor() {\r\n        this.modal = new Modal();\r\n    }\r\n    show() {\r\n        return KycEditNameForm_awaiter(this, void 0, void 0, function* () {\r\n            let kycEditNameError = document.getElementById('kycEditNameError');\r\n            if (kycEditNameError)\r\n                kycEditNameError.style.display = 'none';\r\n            let userService = new UserService(Moralis);\r\n            let account = yield userService.getAccount();\r\n            let given_name = account.identity.given_name;\r\n            let middle_name = account.identity.middle_name;\r\n            let family_name = account.identity.family_name;\r\n            let template = Handlebars.compile(KycEditName);\r\n            let content = template({ given_name: given_name, middle_name: middle_name, family_name: family_name });\r\n            this.modal.showModal('Edit name', content);\r\n            this.bindEvents();\r\n        });\r\n    }\r\n    bindEvents() {\r\n        let kycEditNameConfirm = document.getElementById('kycEditNameConfirm');\r\n        kycEditNameConfirm === null || kycEditNameConfirm === void 0 ? void 0 : kycEditNameConfirm.addEventListener('click', (evt) => KycEditNameForm_awaiter(this, void 0, void 0, function* () {\r\n            var _a, _b;\r\n            let given_name = document.getElementById('given_name');\r\n            let middle_name = document.getElementById('middle_name');\r\n            let family_name = document.getElementById('family_name');\r\n            if (StringHelper.isNullOrEmpty(given_name.value)) {\r\n                this.showError('Given name cannot be empty');\r\n                return;\r\n            }\r\n            if (StringHelper.isNullOrEmpty(family_name.value)) {\r\n                this.showError('Family name cannot be empty');\r\n                return;\r\n            }\r\n            let full_name = this.getFullName();\r\n            let label_confirm_name = document.getElementById('label_confirm_name');\r\n            if (!label_confirm_name) {\r\n                //TODO: report error in form\r\n                return;\r\n            }\r\n            label_confirm_name.innerHTML = 'Please type in the full name \"' + full_name + '\" in the box below to confirm. You WILL NOT be able to change it again.';\r\n            (_a = document.getElementById('confirmNameFieldset')) === null || _a === void 0 ? void 0 : _a.classList.remove('hidden');\r\n            (_b = document.getElementById('kycEditName')) === null || _b === void 0 ? void 0 : _b.classList.add('hidden');\r\n        }));\r\n        let kycEditNameBack = document.getElementById('kycEditNameBack');\r\n        kycEditNameBack === null || kycEditNameBack === void 0 ? void 0 : kycEditNameBack.addEventListener('click', (evt) => {\r\n            var _a, _b;\r\n            (_a = document.getElementById('confirmNameFieldset')) === null || _a === void 0 ? void 0 : _a.classList.add('hidden');\r\n            (_b = document.getElementById('kycEditName')) === null || _b === void 0 ? void 0 : _b.classList.remove('hidden');\r\n        });\r\n        let confirm_name = document.getElementById('confirm_name');\r\n        if (!confirm_name) {\r\n            //TODO: report error in form\r\n            return;\r\n        }\r\n        let kycEditNameSave = document.getElementById('kycEditNameSave');\r\n        kycEditNameSave.disabled = true;\r\n        confirm_name.setAttribute('aria-invalid', 'true');\r\n        confirm_name.addEventListener('keyup', (evt) => {\r\n            if (confirm_name.value == this.getFullName()) {\r\n                confirm_name.setAttribute('aria-invalid', 'false');\r\n                kycEditNameSave.disabled = false;\r\n            }\r\n            else {\r\n                confirm_name.setAttribute('aria-invalid', 'true');\r\n                kycEditNameSave.disabled = true;\r\n            }\r\n        });\r\n        kycEditNameSave === null || kycEditNameSave === void 0 ? void 0 : kycEditNameSave.addEventListener('click', (evt) => KycEditNameForm_awaiter(this, void 0, void 0, function* () {\r\n            let confirm_name = document.getElementById('confirm_name');\r\n            if (confirm_name && confirm_name.value != this.getFullName()) {\r\n                alert(confirm_name.value + ' is not same as ' + this.getFullName() + '. Go over the name and make sure it is identical');\r\n                return;\r\n            }\r\n            let given_name = document.getElementById('given_name');\r\n            let middle_name = document.getElementById('middle_name');\r\n            let family_name = document.getElementById('family_name');\r\n            LoadingHelper.setLoading(kycEditNameSave);\r\n            let userService = new UserService(Moralis);\r\n            yield userService.updateName(given_name.value, middle_name.value, family_name.value)\r\n                .then((response) => {\r\n                if (response.message) {\r\n                    this.showError(response.message);\r\n                    return;\r\n                }\r\n                this.modal.hideModal();\r\n            }).catch(reason => {\r\n                if (reason.message) {\r\n                    this.showError(JSON.parse(reason.message).message);\r\n                }\r\n                else {\r\n                    this.showError(reason);\r\n                }\r\n            }).finally(() => {\r\n                LoadingHelper.removeLoading();\r\n            });\r\n        }));\r\n    }\r\n    showError(message) {\r\n        let kycEditNameError = document.getElementById('kycEditNameError');\r\n        if (!kycEditNameError)\r\n            return;\r\n        kycEditNameError.innerHTML = message;\r\n        kycEditNameError.style.display = 'block';\r\n    }\r\n    getFullName() {\r\n        let given_name = document.getElementById('given_name');\r\n        let middle_name = document.getElementById('middle_name');\r\n        let family_name = document.getElementById('family_name');\r\n        return given_name.value + ' ' + (!StringHelper.isNullOrEmpty(middle_name.value) ? middle_name.value + ' ' : '') + family_name.value;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycEditContactForm.html\n// Module\nvar KycEditContactForm_code = \"<fieldset id=\\\"kycEditContactFieldset\\\">\\r\\n    <div class=\\\"warningBar\\\">\\r\\n        <strong>Warning</strong><br/>\\r\\n        After you change this information a new KYC process will be started, and you will NOT be able to do any\\r\\n        trades until it has been approved.\\r\\n    </div>\\r\\n    <form id=\\\"kycEditContactForm\\\">\\r\\n        <div>\\r\\n            <label for=\\\"email_address\\\">Email</label>\\r\\n            <input type=\\\"email\\\" required class=\\\"form-control\\\" id=\\\"email_address\\\" name=\\\"email_address\\\"\\r\\n                   placeholder=\\\"name@example.com\\\" autocomplete=\\\"email\\\"\\r\\n                   value=\\\"\\\">\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"phone_number\\\">Phone</label>\\r\\n            <input type=\\\"tel\\\" class=\\\"form-control\\\" id=\\\"phone_number\\\" name=\\\"phone_number\\\"\\r\\n                   placeholder=\\\"+1-555-666-7788\\\" autocomplete=\\\"tel\\\" value=\\\"\\\">\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"street_address\\\">Permanent Residential Address</label>\\r\\n            <div class=\\\"explain\\\">It must be a physical address, not a PO box.</div>\\r\\n            <input required id=\\\"street_address\\\" name=\\\"street_address\\\"\\r\\n                   placeholder=\\\"20 N San Mateo Dr\\\" value=\\\"\\\" autocomplete=\\\"address-line1\\\">\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"unit\\\">Unit / Apt #</label>\\r\\n            <input id=\\\"unit\\\" name=\\\"unit\\\" value=\\\"\\\">\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"city\\\">City</label>\\r\\n            <input id=\\\"city\\\" name=\\\"city\\\" placeholder=\\\"Pawnee\\\"\\r\\n                   value=\\\"\\\" autocomplete=\\\"address-level2\\\">\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"postal_code\\\">Postal code</label>\\r\\n            <input required id=\\\"postal_code\\\" autocomplete=\\\"postal-code\\\" name=\\\"postal_code\\\"\\r\\n                   placeholder=\\\"94401\\\"\\r\\n                   value=\\\"\\\">\\r\\n        </div>\\r\\n        {{#if usa}}\\r\\n        <div id=\\\"state_div\\\">\\r\\n            <label for=\\\"state\\\">State (2 letters)</label>\\r\\n            <input required maxlength=\\\"2\\\" id=\\\"state\\\" name=\\\"state\\\" placeholder=\\\"NY\\\"\\r\\n                   value=\\\"\\\" autocomplete=\\\"address-level1\\\">\\r\\n        </div>\\r\\n        {{/if}}\\r\\n        <div class=\\\"input_error\\\" id=\\\"kycEditContactError\\\"></div>\\r\\n        <div class=\\\"buttons\\\">\\r\\n            <button type=\\\"submit\\\" id=\\\"kycEditContactSave\\\">Save</button>\\r\\n        </div>\\r\\n    </form>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const Kyc_KycEditContactForm = (KycEditContactForm_code);\n;// CONCATENATED MODULE: ./src/util/FormHelper.ts\n\r\nclass FormHelper {\r\n    static getParams(selector) {\r\n        let form = document.querySelector(selector);\r\n        if (!form)\r\n            return;\r\n        let data = new FormData(form);\r\n        return this.serialize(data);\r\n    }\r\n    static serialize(data) {\r\n        let obj = {};\r\n        for (let [key, value] of data) {\r\n            if (obj[key] !== undefined) {\r\n                if (!Array.isArray(obj[key])) {\r\n                    obj[key] = [obj[key]];\r\n                }\r\n                obj[key].push(value);\r\n            }\r\n            else {\r\n                obj[key] = value;\r\n            }\r\n        }\r\n        return obj;\r\n    }\r\n    static fillInputs(properties, item) {\r\n        properties.forEach((value) => {\r\n            let input = document.querySelector('input[name=' + value + ']');\r\n            if (input) {\r\n                if (input.type == 'radio') {\r\n                    console.log('checkbox', input, item[value]);\r\n                    input.value = item[value];\r\n                }\r\n                else {\r\n                    input.value = item[value];\r\n                }\r\n                input.dispatchEvent(new Event('change'));\r\n            }\r\n            else {\r\n                let select = document.querySelector('select[name=' + value + ']');\r\n                if (select) {\r\n                    select.value = item[value];\r\n                    select.dispatchEvent(new Event('change'));\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static validate(selector) {\r\n        let inputs = document.querySelectorAll(selector + ' input[required]');\r\n        for (let i = 0; i < inputs.length; i++) {\r\n            let input = inputs[i];\r\n            input.setAttribute('aria-invalid', 'false');\r\n            if (StringHelper.isNullOrEmpty(input.value)) {\r\n                input.setAttribute('aria-invalid', 'true');\r\n                input.focus();\r\n                input.addEventListener('change', (evt) => {\r\n                    if (!StringHelper.isNullOrEmpty(input.value)) {\r\n                        input.setAttribute('aria-invalid', 'false');\r\n                    }\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycEditContactForm.ts\nvar KycEditContactForm_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass KycEditContactForm {\r\n    constructor() {\r\n        this.modal = new Modal();\r\n    }\r\n    show() {\r\n        return KycEditContactForm_awaiter(this, void 0, void 0, function* () {\r\n            let userService = new UserService(Moralis);\r\n            let account = yield userService.getAccount();\r\n            let usa = account.identity.country_of_tax_residence == 'USA';\r\n            let template = Handlebars.compile(Kyc_KycEditContactForm);\r\n            this.modal.showModal('Edit contact information', template({ usa: usa }));\r\n            let contactProperties = Object.getOwnPropertyNames(account.contact);\r\n            FormHelper.fillInputs(contactProperties, account.contact);\r\n            this.bindEvents();\r\n        });\r\n    }\r\n    bindEvents() {\r\n        let kycEditContactSave = document.getElementById('kycEditContactSave');\r\n        kycEditContactSave === null || kycEditContactSave === void 0 ? void 0 : kycEditContactSave.addEventListener('click', (evt) => KycEditContactForm_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            if (!this.validate())\r\n                return;\r\n            LoadingHelper.setLoading(kycEditContactSave);\r\n            let data = FormHelper.getParams('#kycEditContactForm');\r\n            let userService = new UserService(Moralis);\r\n            yield userService.updateContact(data).then((response) => {\r\n                if (response.message) {\r\n                    this.showError(response.message);\r\n                    return;\r\n                }\r\n                let accountInfo = response;\r\n                let email_address = document.getElementById('email_address');\r\n                if (accountInfo.contact.email_address != (email_address === null || email_address === void 0 ? void 0 : email_address.value)) {\r\n                    this.showError('Email was not changed. The email ' + (email_address === null || email_address === void 0 ? void 0 : email_address.value) + ' is already registered under different account.');\r\n                    return;\r\n                }\r\n                this.modal.hideModal();\r\n            }).catch(reason => {\r\n                if (reason.message) {\r\n                    this.showError(JSON.parse(reason.message).message);\r\n                }\r\n                else {\r\n                    this.showError(reason);\r\n                }\r\n            }).finally(() => {\r\n                LoadingHelper.removeLoading();\r\n            });\r\n        }));\r\n    }\r\n    showError(message) {\r\n        let kycEditNameError = document.getElementById('kycEditContactError');\r\n        if (!kycEditNameError)\r\n            return;\r\n        kycEditNameError.innerHTML = message;\r\n        kycEditNameError.style.display = 'block';\r\n    }\r\n    validate() {\r\n        let inputs = document.querySelectorAll('#kycEditContactFieldset input[required]');\r\n        for (let i = 0; i < inputs.length; i++) {\r\n            let input = inputs[i];\r\n            if (StringHelper.isNullOrEmpty(input.value)) {\r\n                input.setAttribute('aria-invalid', 'true');\r\n                input.addEventListener('change', (evt) => {\r\n                    if (!StringHelper.isNullOrEmpty(input.value)) {\r\n                        input.setAttribute('aria-invalid', 'false');\r\n                    }\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycEditTrustedContact.html\n// Module\nvar KycEditTrustedContact_code = \"<fieldset class=\\\"kycTrustedContact\\\">\\r\\n    <div class=\\\"warningBar\\\">\\r\\n        <strong>Warning</strong><br/>\\r\\n        After you change this information a new KYC process will be started, and you will NOT be able to do any\\r\\n        trades until it has been approved.\\r\\n    </div>\\r\\n\\r\\n    <form id=\\\"kycTrustedContactForm\\\" method=\\\"post\\\">\\r\\n        <div class=\\\"explain\\\">\\r\\n            A trusted contact is a person you authorize your financial firm to contact in limited circumstances,\\r\\n            such as if there is a concern about activity in your account and they have been unable to get in touch with\\r\\n            you.\\r\\n            <br/><br/>\\r\\n            A trusted contact may be a family member, attorney, accountant or another third-party who you believe would\\r\\n            respect your privacy and know how to handle the responsibility.\\r\\n            The trusted person should be 18 years old or older.\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"given_name\\\">Legal given name of trusted contact</label>\\r\\n            <input required id=\\\"given_name\\\" name=\\\"given_name\\\"/>\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"family_name\\\">Legal family name of trusted contact</label>\\r\\n            <input required id=\\\"family_name\\\" name=\\\"family_name\\\"/>\\r\\n        </div>\\r\\n        <div>\\r\\n            If you fill in name, you are required to fill in one of the following, email, phone or address\\r\\n        </div>\\r\\n        <div class=\\\"input_error\\\" id=\\\"contact_missing_info\\\"></div>\\r\\n        <div>\\r\\n            <label for=\\\"email_address\\\">Email of trusted contact</label>\\r\\n            <input id=\\\"email_address\\\" type=\\\"email\\\" name=\\\"email_address\\\"/>\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"phone_number\\\">Phone of trusted contact</label>\\r\\n            <input id=\\\"phone_number\\\" type=\\\"tel\\\" name=\\\"phone_number\\\"/>\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"street_address\\\">Address of trusted contact</label>\\r\\n            <input id=\\\"street_address\\\" name=\\\"street_address\\\"/>\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"city\\\">City of trusted contact</label>\\r\\n            <input id=\\\"city\\\" name=\\\"city\\\"/>\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"state\\\">State of trusted contact</label>\\r\\n            <input id=\\\"state\\\" name=\\\"state\\\"/>\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"postal_code\\\">Postal code of trusted contact</label>\\r\\n            <input id=\\\"postal_code\\\" name=\\\"postal_code\\\"/>\\r\\n        </div>\\r\\n        <div>\\r\\n            <label for=\\\"country\\\">Country of trusted contact</label>\\r\\n            <select required id=\\\"country\\\" required name=\\\"country\\\">\\r\\n                <option value=\\\"\\\"></option>\\r\\n                {{#each countries}}\\r\\n                <option value=\\\"{{code}}\\\">{{name}}</option>\\r\\n                {{/each}}\\r\\n            </select>\\r\\n        </div>\\r\\n        <div class=\\\"input_error\\\" id=\\\"kycEditNameError\\\"></div>\\r\\n        <div class=\\\"buttons\\\">\\r\\n            <button type=\\\"submit\\\" id=\\\"trustedContactSubmit\\\">Submit</button>\\r\\n        </div>\\r\\n    </form>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const Kyc_KycEditTrustedContact = (KycEditTrustedContact_code);\n;// CONCATENATED MODULE: ./src/util/CountryHelper.ts\nclass CountryHelper {\r\n}\r\nCountryHelper.Countries = [\r\n    { \"name\": \"United States of America\", \"code\": \"USA\" },\r\n    { \"name\": \"United Kingdom\", \"code\": \"GBR\" },\r\n    { \"name\": \"Afghanistan\", \"code\": \"AFG\" }, { \"name\": \"Albania\", \"code\": \"ALB\" }, {\r\n        \"name\": \"Algeria\",\r\n        \"code\": \"DZA\"\r\n    }, { \"name\": \"American Samoa\", \"code\": \"ASM\" }, { \"name\": \"Andorra\", \"code\": \"AND\" }, {\r\n        \"name\": \"Angola\",\r\n        \"code\": \"AGO\"\r\n    }, { \"name\": \"Anguilla\", \"code\": \"AIA\" }, { \"name\": \"Antarctica\", \"code\": \"ATA\" }, {\r\n        \"name\": \"Antigua and Barbuda\",\r\n        \"code\": \"ATG\"\r\n    }, { \"name\": \"Argentina\", \"code\": \"ARG\" }, { \"name\": \"Armenia\", \"code\": \"ARM\" }, {\r\n        \"name\": \"Aruba\",\r\n        \"code\": \"ABW\"\r\n    }, { \"name\": \"Australia\", \"code\": \"AUS\" }, { \"name\": \"Austria\", \"code\": \"AUT\" }, {\r\n        \"name\": \"Azerbaijan\",\r\n        \"code\": \"AZE\"\r\n    }, { \"name\": \"Åland Islands\", \"code\": \"ALA\" }, { \"name\": \"Bahamas\", \"code\": \"BHS\" }, {\r\n        \"name\": \"Bahrain\",\r\n        \"code\": \"BHR\"\r\n    }, { \"name\": \"Bangladesh\", \"code\": \"BGD\" }, { \"name\": \"Barbados\", \"code\": \"BRB\" }, {\r\n        \"name\": \"Belarus\",\r\n        \"code\": \"BLR\"\r\n    }, { \"name\": \"Belgium\", \"code\": \"BEL\" }, { \"name\": \"Belize\", \"code\": \"BLZ\" }, {\r\n        \"name\": \"Benin\",\r\n        \"code\": \"BEN\"\r\n    }, { \"name\": \"Bermuda\", \"code\": \"BMU\" }, {\r\n        \"name\": \"Bhutan\",\r\n        \"code\": \"BTN\"\r\n    }, { \"name\": \"Bolivia (Plurinational State of)\", \"code\": \"BOL\" }, {\r\n        \"name\": \"Bonaire, Sint Eustatius and Saba\",\r\n        \"code\": \"BES\"\r\n    }, { \"name\": \"Bosnia and Herzegovina\", \"code\": \"BIH\" }, {\r\n        \"name\": \"Botswana\",\r\n        \"code\": \"BWA\"\r\n    }, { \"name\": \"Bouvet Island\", \"code\": \"BVT\" }, {\r\n        \"name\": \"Brazil\",\r\n        \"code\": \"BRA\"\r\n    }, { \"name\": \"British Indian Ocean Territory\", \"code\": \"IOT\" }, {\r\n        \"name\": \"Brunei Darussalam\",\r\n        \"code\": \"BRN\"\r\n    }, { \"name\": \"Bulgaria\", \"code\": \"BGR\" }, { \"name\": \"Burkina Faso\", \"code\": \"BFA\" }, {\r\n        \"name\": \"Burundi\",\r\n        \"code\": \"BDI\"\r\n    }, { \"name\": \"Cabo Verde\", \"code\": \"CPV\" }, { \"name\": \"Cambodia\", \"code\": \"KHM\" }, {\r\n        \"name\": \"Cameroon\",\r\n        \"code\": \"CMR\"\r\n    }, { \"name\": \"Canada\", \"code\": \"CAN\" }, {\r\n        \"name\": \"Cayman Islands\",\r\n        \"code\": \"CYM\"\r\n    }, { \"name\": \"Central African Republic\", \"code\": \"CAF\" }, { \"name\": \"Chad\", \"code\": \"TCD\" }, {\r\n        \"name\": \"Chile\",\r\n        \"code\": \"CHL\"\r\n    }, { \"name\": \"China\", \"code\": \"CHN\" }, {\r\n        \"name\": \"Christmas Island\",\r\n        \"code\": \"CXR\"\r\n    }, { \"name\": \"Cocos (Keeling) Islands\", \"code\": \"CCK\" }, { \"name\": \"Colombia\", \"code\": \"COL\" }, {\r\n        \"name\": \"Comoros\",\r\n        \"code\": \"COM\"\r\n    }, { \"name\": \"Congo (the Democratic Republic of the)\", \"code\": \"COD\" }, {\r\n        \"name\": \"Congo\",\r\n        \"code\": \"COG\"\r\n    }, { \"name\": \"Cook Islands\", \"code\": \"COK\" }, { \"name\": \"Costa Rica\", \"code\": \"CRI\" }, {\r\n        \"name\": \"Croatia\",\r\n        \"code\": \"HRV\"\r\n    }, { \"name\": \"Cuba\", \"code\": \"CUB\" }, { \"name\": \"Curaçao\", \"code\": \"CUW\" }, {\r\n        \"name\": \"Cyprus\",\r\n        \"code\": \"CYP\"\r\n    }, { \"name\": \"Czechia\", \"code\": \"CZE\" }, { \"name\": \"Côte d'Ivoire\", \"code\": \"CIV\" }, {\r\n        \"name\": \"Denmark\",\r\n        \"code\": \"DNK\"\r\n    }, { \"name\": \"Djibouti\", \"code\": \"DJI\" }, { \"name\": \"Dominica\", \"code\": \"DMA\" }, {\r\n        \"name\": \"Dominican Republic\",\r\n        \"code\": \"DOM\"\r\n    }, { \"name\": \"Ecuador\", \"code\": \"ECU\" }, { \"name\": \"Egypt\", \"code\": \"EGY\" }, {\r\n        \"name\": \"El Salvador\",\r\n        \"code\": \"SLV\"\r\n    }, { \"name\": \"Equatorial Guinea\", \"code\": \"GNQ\" }, { \"name\": \"Eritrea\", \"code\": \"ERI\" }, {\r\n        \"name\": \"Estonia\",\r\n        \"code\": \"EST\"\r\n    }, { \"name\": \"Eswatini\", \"code\": \"SWZ\" }, {\r\n        \"name\": \"Ethiopia\",\r\n        \"code\": \"ETH\"\r\n    }, { \"name\": \"Falkland Islands [Malvinas]\", \"code\": \"FLK\" }, {\r\n        \"name\": \"Faroe Islands\",\r\n        \"code\": \"FRO\"\r\n    }, { \"name\": \"Fiji\", \"code\": \"FJI\" }, { \"name\": \"Finland\", \"code\": \"FIN\" }, {\r\n        \"name\": \"France\",\r\n        \"code\": \"FRA\"\r\n    }, { \"name\": \"French Guiana\", \"code\": \"GUF\" }, {\r\n        \"name\": \"French Polynesia\",\r\n        \"code\": \"PYF\"\r\n    }, { \"name\": \"French Southern Territories\", \"code\": \"ATF\" }, { \"name\": \"Gabon\", \"code\": \"GAB\" }, {\r\n        \"name\": \"Gambia\",\r\n        \"code\": \"GMB\"\r\n    }, { \"name\": \"Georgia\", \"code\": \"GEO\" }, { \"name\": \"Germany\", \"code\": \"DEU\" }, {\r\n        \"name\": \"Ghana\",\r\n        \"code\": \"GHA\"\r\n    }, { \"name\": \"Gibraltar\", \"code\": \"GIB\" }, { \"name\": \"Greece\", \"code\": \"GRC\" }, {\r\n        \"name\": \"Greenland\",\r\n        \"code\": \"GRL\"\r\n    }, { \"name\": \"Grenada\", \"code\": \"GRD\" }, { \"name\": \"Guadeloupe\", \"code\": \"GLP\" }, {\r\n        \"name\": \"Guam\",\r\n        \"code\": \"GUM\"\r\n    }, { \"name\": \"Guatemala\", \"code\": \"GTM\" }, { \"name\": \"Guernsey\", \"code\": \"GGY\" }, {\r\n        \"name\": \"Guinea\",\r\n        \"code\": \"GIN\"\r\n    }, { \"name\": \"Guinea-Bissau\", \"code\": \"GNB\" }, { \"name\": \"Guyana\", \"code\": \"GUY\" }, {\r\n        \"name\": \"Haiti\",\r\n        \"code\": \"HTI\"\r\n    }, { \"name\": \"Heard Island and McDonald Islands\", \"code\": \"HMD\" }, {\r\n        \"name\": \"Holy See\",\r\n        \"code\": \"VAT\"\r\n    }, { \"name\": \"Honduras\", \"code\": \"HND\" }, { \"name\": \"Hong Kong\", \"code\": \"HKG\" }, {\r\n        \"name\": \"Hungary\",\r\n        \"code\": \"HUN\"\r\n    }, { \"name\": \"Iceland\", \"code\": \"ISL\" }, { \"name\": \"India\", \"code\": \"IND\" }, {\r\n        \"name\": \"Indonesia\",\r\n        \"code\": \"IDN\"\r\n    }, { \"name\": \"Iran (Islamic Republic of)\", \"code\": \"IRN\" }, { \"name\": \"Iraq\", \"code\": \"IRQ\" }, {\r\n        \"name\": \"Ireland\",\r\n        \"code\": \"IRL\"\r\n    }, { \"name\": \"Isle of Man\", \"code\": \"IMN\" }, { \"name\": \"Israel\", \"code\": \"ISR\" }, {\r\n        \"name\": \"Italy\",\r\n        \"code\": \"ITA\"\r\n    }, { \"name\": \"Jamaica\", \"code\": \"JAM\" }, { \"name\": \"Japan\", \"code\": \"JPN\" }, {\r\n        \"name\": \"Jersey\",\r\n        \"code\": \"JEY\"\r\n    }, { \"name\": \"Jordan\", \"code\": \"JOR\" }, { \"name\": \"Kazakhstan\", \"code\": \"KAZ\" }, {\r\n        \"name\": \"Kenya\",\r\n        \"code\": \"KEN\"\r\n    }, { \"name\": \"Kiribati\", \"code\": \"KIR\" }, {\r\n        \"name\": \"Korea (the Democratic People's Republic of)\",\r\n        \"code\": \"PRK\"\r\n    }, { \"name\": \"Korea (the Republic of)\", \"code\": \"KOR\" }, { \"name\": \"Kuwait\", \"code\": \"KWT\" }, {\r\n        \"name\": \"Kyrgyzstan\",\r\n        \"code\": \"KGZ\"\r\n    }, { \"name\": \"Lao People's Democratic Republic\", \"code\": \"LAO\" }, {\r\n        \"name\": \"Latvia\",\r\n        \"code\": \"LVA\"\r\n    }, { \"name\": \"Lebanon\", \"code\": \"LBN\" }, { \"name\": \"Lesotho\", \"code\": \"LSO\" }, {\r\n        \"name\": \"Liberia\",\r\n        \"code\": \"LBR\"\r\n    }, { \"name\": \"Libya\", \"code\": \"LBY\" }, { \"name\": \"Liechtenstein\", \"code\": \"LIE\" }, {\r\n        \"name\": \"Lithuania\",\r\n        \"code\": \"LTU\"\r\n    }, { \"name\": \"Luxembourg\", \"code\": \"LUX\" }, { \"name\": \"Macao\", \"code\": \"MAC\" }, {\r\n        \"name\": \"Madagascar\",\r\n        \"code\": \"MDG\"\r\n    }, { \"name\": \"Malawi\", \"code\": \"MWI\" }, { \"name\": \"Malaysia\", \"code\": \"MYS\" }, {\r\n        \"name\": \"Maldives\",\r\n        \"code\": \"MDV\"\r\n    }, { \"name\": \"Mali\", \"code\": \"MLI\" }, { \"name\": \"Malta\", \"code\": \"MLT\" }, {\r\n        \"name\": \"Marshall Islands\",\r\n        \"code\": \"MHL\"\r\n    }, { \"name\": \"Martinique\", \"code\": \"MTQ\" }, { \"name\": \"Mauritania\", \"code\": \"MRT\" }, {\r\n        \"name\": \"Mauritius\",\r\n        \"code\": \"MUS\"\r\n    }, { \"name\": \"Mayotte\", \"code\": \"MYT\" }, {\r\n        \"name\": \"Mexico\",\r\n        \"code\": \"MEX\"\r\n    }, { \"name\": \"Micronesia (Federated States of)\", \"code\": \"FSM\" }, {\r\n        \"name\": \"Moldova (the Republic of)\",\r\n        \"code\": \"MDA\"\r\n    }, { \"name\": \"Monaco\", \"code\": \"MCO\" }, { \"name\": \"Mongolia\", \"code\": \"MNG\" }, {\r\n        \"name\": \"Montenegro\",\r\n        \"code\": \"MNE\"\r\n    }, { \"name\": \"Montserrat\", \"code\": \"MSR\" }, { \"name\": \"Morocco\", \"code\": \"MAR\" }, {\r\n        \"name\": \"Mozambique\",\r\n        \"code\": \"MOZ\"\r\n    }, { \"name\": \"Myanmar\", \"code\": \"MMR\" }, { \"name\": \"Namibia\", \"code\": \"NAM\" }, {\r\n        \"name\": \"Nauru\",\r\n        \"code\": \"NRU\"\r\n    }, { \"name\": \"Nepal\", \"code\": \"NPL\" }, { \"name\": \"Netherlands\", \"code\": \"NLD\" }, {\r\n        \"name\": \"New Caledonia\",\r\n        \"code\": \"NCL\"\r\n    }, { \"name\": \"New Zealand\", \"code\": \"NZL\" }, { \"name\": \"Nicaragua\", \"code\": \"NIC\" }, {\r\n        \"name\": \"Niger\",\r\n        \"code\": \"NER\"\r\n    }, { \"name\": \"Nigeria\", \"code\": \"NGA\" }, { \"name\": \"Niue\", \"code\": \"NIU\" }, {\r\n        \"name\": \"Norfolk Island\",\r\n        \"code\": \"NFK\"\r\n    }, { \"name\": \"Northern Mariana Islands\", \"code\": \"MNP\" }, { \"name\": \"Norway\", \"code\": \"NOR\" }, {\r\n        \"name\": \"Oman\",\r\n        \"code\": \"OMN\"\r\n    }, { \"name\": \"Pakistan\", \"code\": \"PAK\" }, { \"name\": \"Palau\", \"code\": \"PLW\" }, {\r\n        \"name\": \"Palestine, State of\",\r\n        \"code\": \"PSE\"\r\n    }, { \"name\": \"Panama\", \"code\": \"PAN\" }, { \"name\": \"Papua New Guinea\", \"code\": \"PNG\" }, {\r\n        \"name\": \"Paraguay\",\r\n        \"code\": \"PRY\"\r\n    }, { \"name\": \"Peru\", \"code\": \"PER\" }, { \"name\": \"Philippines\", \"code\": \"PHL\" }, {\r\n        \"name\": \"Pitcairn\",\r\n        \"code\": \"PCN\"\r\n    }, { \"name\": \"Poland\", \"code\": \"POL\" }, { \"name\": \"Portugal\", \"code\": \"PRT\" }, {\r\n        \"name\": \"Puerto Rico\",\r\n        \"code\": \"PRI\"\r\n    }, { \"name\": \"Qatar\", \"code\": \"QAT\" }, { \"name\": \"Republic of North Macedonia\", \"code\": \"MKD\" }, {\r\n        \"name\": \"Romania\",\r\n        \"code\": \"ROU\"\r\n    }, { \"name\": \"Russian Federation\", \"code\": \"RUS\" }, { \"name\": \"Rwanda\", \"code\": \"RWA\" }, {\r\n        \"name\": \"Réunion\",\r\n        \"code\": \"REU\"\r\n    }, { \"name\": \"Saint Barthélemy\", \"code\": \"BLM\" }, {\r\n        \"name\": \"Saint Helena, Ascension and Tristan da Cunha\",\r\n        \"code\": \"SHN\"\r\n    }, { \"name\": \"Saint Kitts and Nevis\", \"code\": \"KNA\" }, {\r\n        \"name\": \"Saint Lucia\",\r\n        \"code\": \"LCA\"\r\n    }, { \"name\": \"Saint Martin (French part)\", \"code\": \"MAF\" }, {\r\n        \"name\": \"Saint Pierre and Miquelon\",\r\n        \"code\": \"SPM\"\r\n    }, { \"name\": \"Saint Vincent and the Grenadines\", \"code\": \"VCT\" }, {\r\n        \"name\": \"Samoa\",\r\n        \"code\": \"WSM\"\r\n    }, { \"name\": \"San Marino\", \"code\": \"SMR\" }, {\r\n        \"name\": \"Sao Tome and Principe\",\r\n        \"code\": \"STP\"\r\n    }, { \"name\": \"Saudi Arabia\", \"code\": \"SAU\" }, { \"name\": \"Senegal\", \"code\": \"SEN\" }, {\r\n        \"name\": \"Serbia\",\r\n        \"code\": \"SRB\"\r\n    }, { \"name\": \"Seychelles\", \"code\": \"SYC\" }, { \"name\": \"Sierra Leone\", \"code\": \"SLE\" }, {\r\n        \"name\": \"Singapore\",\r\n        \"code\": \"SGP\"\r\n    }, { \"name\": \"Sint Maarten (Dutch part)\", \"code\": \"SXM\" }, {\r\n        \"name\": \"Slovakia\",\r\n        \"code\": \"SVK\"\r\n    }, { \"name\": \"Slovenia\", \"code\": \"SVN\" }, { \"name\": \"Solomon Islands\", \"code\": \"SLB\" }, {\r\n        \"name\": \"Somalia\",\r\n        \"code\": \"SOM\"\r\n    }, { \"name\": \"South Africa\", \"code\": \"ZAF\" }, {\r\n        \"name\": \"South Georgia and the South Sandwich Islands\",\r\n        \"code\": \"SGS\"\r\n    }, { \"name\": \"South Sudan\", \"code\": \"SSD\" }, { \"name\": \"Spain\", \"code\": \"ESP\" }, {\r\n        \"name\": \"Sri Lanka\",\r\n        \"code\": \"LKA\"\r\n    }, { \"name\": \"Sudan\", \"code\": \"SDN\" }, { \"name\": \"Suriname\", \"code\": \"SUR\" }, {\r\n        \"name\": \"Svalbard and Jan Mayen\",\r\n        \"code\": \"SJM\"\r\n    }, { \"name\": \"Sweden\", \"code\": \"SWE\" }, { \"name\": \"Switzerland\", \"code\": \"CHE\" }, {\r\n        \"name\": \"Syrian Arab Republic\",\r\n        \"code\": \"SYR\"\r\n    }, { \"name\": \"Taiwan (Province of China)\", \"code\": \"TWN\" }, {\r\n        \"name\": \"Tajikistan\",\r\n        \"code\": \"TJK\"\r\n    }, { \"name\": \"Tanzania, United Republic of\", \"code\": \"TZA\" }, {\r\n        \"name\": \"Thailand\",\r\n        \"code\": \"THA\"\r\n    }, { \"name\": \"Timor-Leste\", \"code\": \"TLS\" }, { \"name\": \"Togo\", \"code\": \"TGO\" }, {\r\n        \"name\": \"Tokelau\",\r\n        \"code\": \"TKL\"\r\n    }, { \"name\": \"Tonga\", \"code\": \"TON\" }, { \"name\": \"Trinidad and Tobago\", \"code\": \"TTO\" }, {\r\n        \"name\": \"Tunisia\",\r\n        \"code\": \"TUN\"\r\n    }, { \"name\": \"Turkey\", \"code\": \"TUR\" }, {\r\n        \"name\": \"Turkmenistan\",\r\n        \"code\": \"TKM\"\r\n    }, { \"name\": \"Turks and Caicos Islands\", \"code\": \"TCA\" }, { \"name\": \"Tuvalu\", \"code\": \"TUV\" }, {\r\n        \"name\": \"Uganda\",\r\n        \"code\": \"UGA\"\r\n    }, { \"name\": \"Ukraine\", \"code\": \"UKR\" }, {\r\n        \"name\": \"United Arab Emirates\",\r\n        \"code\": \"ARE\"\r\n    }, {\r\n        \"name\": \"United Kingdom of Great Britain and Northern Ireland\",\r\n        \"code\": \"GBR\"\r\n    }, { \"name\": \"United States Minor Outlying Islands\", \"code\": \"UMI\" }, {\r\n        \"name\": \"United States of America\",\r\n        \"code\": \"USA\"\r\n    }, { \"name\": \"Uruguay\", \"code\": \"URY\" }, { \"name\": \"Uzbekistan\", \"code\": \"UZB\" }, {\r\n        \"name\": \"Vanuatu\",\r\n        \"code\": \"VUT\"\r\n    }, { \"name\": \"Venezuela (Bolivarian Republic of)\", \"code\": \"VEN\" }, {\r\n        \"name\": \"Viet Nam\",\r\n        \"code\": \"VNM\"\r\n    }, { \"name\": \"Virgin Islands (British)\", \"code\": \"VGB\" }, {\r\n        \"name\": \"Virgin Islands (U.S.)\",\r\n        \"code\": \"VIR\"\r\n    }, { \"name\": \"Wallis and Futuna\", \"code\": \"WLF\" }, { \"name\": \"Western Sahara\", \"code\": \"ESH\" }, {\r\n        \"name\": \"Yemen\",\r\n        \"code\": \"YEM\"\r\n    }, { \"name\": \"Zambia\", \"code\": \"ZMB\" }, { \"name\": \"Zimbabwe\", \"code\": \"ZWE\" }\r\n];\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycEditTrustedContact.ts\nvar KycEditTrustedContact_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass KycEditTrustedContact {\r\n    constructor() {\r\n        this.modal = new Modal();\r\n    }\r\n    show() {\r\n        return KycEditTrustedContact_awaiter(this, void 0, void 0, function* () {\r\n            let userService = new UserService(Moralis);\r\n            let account = yield userService.getAccount();\r\n            let template = Handlebars.compile(Kyc_KycEditTrustedContact);\r\n            this.modal.showModal('Edit trusted contact', template({ countries: CountryHelper.Countries }));\r\n            if (account.trusted_contact) {\r\n                let contactProperties = Object.getOwnPropertyNames(account.trusted_contact);\r\n                FormHelper.fillInputs(contactProperties, account.trusted_contact);\r\n            }\r\n            this.bindEvents();\r\n        });\r\n    }\r\n    bindEvents() {\r\n        let trustedContactSubmit = document.getElementById('trustedContactSubmit');\r\n        trustedContactSubmit === null || trustedContactSubmit === void 0 ? void 0 : trustedContactSubmit.addEventListener('click', (evt) => KycEditTrustedContact_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            if (!FormHelper.validate('#kycTrustedContactForm'))\r\n                return;\r\n            LoadingHelper.setLoading(trustedContactSubmit);\r\n            let params = FormHelper.getParams('#kycTrustedContactForm');\r\n            let userService = new UserService(Moralis);\r\n            yield userService.updateTrustedContact(params).then((response) => {\r\n                if (response.message) {\r\n                    this.showError(response.message);\r\n                    return;\r\n                }\r\n                this.modal.hideModal();\r\n            }).catch(reason => {\r\n                if (reason.message) {\r\n                    this.showError(JSON.parse(reason.message).message);\r\n                }\r\n                else {\r\n                    this.showError(reason);\r\n                }\r\n            }).finally(() => {\r\n                LoadingHelper.removeLoading();\r\n            });\r\n        }));\r\n    }\r\n    showError(message) {\r\n        let kycEditNameError = document.getElementById('kycEditNameError');\r\n        if (!kycEditNameError)\r\n            return;\r\n        kycEditNameError.innerHTML = message;\r\n        kycEditNameError.style.display = 'block';\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/services/blockchain/AUSDService.ts\nvar AUSDService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\nclass AUSDService {\r\n    constructor(moralis) {\r\n        this.moralis = moralis;\r\n    }\r\n    getAUSDBalanceOf(ethAddress) {\r\n        return AUSDService_awaiter(this, void 0, void 0, function* () {\r\n            if (AUSDService.lastUpdate && AUSDService.aUSDAmount &&\r\n                DateHelper.isOlderThen(AUSDService.lastUpdate, 5)) {\r\n                return AUSDService.aUSDAmount;\r\n            }\r\n            let options = yield this.getOptions(\"balanceOf\", {\r\n                account: ethAddress\r\n            });\r\n            return yield this.moralis.executeFunction(options).then(balanceOf => {\r\n                let amount = this.moralis.Units.FromWei(balanceOf.toString(), 18);\r\n                AUSDService.aUSDAmount = new (bignumber_default())(amount);\r\n                AUSDService.lastUpdate = new Date();\r\n                return AUSDService.aUSDAmount;\r\n            }).catch((reason) => {\r\n                let blockchainError = new BlockchainError(reason);\r\n                ErrorInfo.report(blockchainError);\r\n                return new (bignumber_default())(0);\r\n            });\r\n        });\r\n    }\r\n    getAUsdAbi() {\r\n        return AUSDService_awaiter(this, void 0, void 0, function* () {\r\n            if (AUSDService.AUSDInfo)\r\n                return AUSDService.AUSDInfo.abi;\r\n            let response = yield fetch('../abi/aUSD.json');\r\n            AUSDService.AUSDInfo = yield response.json();\r\n            return AUSDService.AUSDInfo.abi;\r\n        });\r\n    }\r\n    transfer(symbolAddress, qty) {\r\n        return AUSDService_awaiter(this, void 0, void 0, function* () {\r\n            const options = yield this.getOptions('transfer', {\r\n                recipient: symbolAddress,\r\n                amount: Moralis.Units.Token(qty.toString(), 18)\r\n            });\r\n            let result = yield Moralis.executeFunction(options)\r\n                .then(result => { return result; })\r\n                .catch(reason => {\r\n                let blockchainError = new BlockchainError(reason);\r\n                throw ErrorInfo.report(blockchainError);\r\n            });\r\n            AUSDService.aUSDAmount = undefined;\r\n            AUSDService.lastUpdate = undefined;\r\n            return result;\r\n        });\r\n    }\r\n    getOptions(functionName, params) {\r\n        return AUSDService_awaiter(this, void 0, void 0, function* () {\r\n            let contractInfo = ContractInfo.getContractInfo();\r\n            let abi = yield this.getAUsdAbi();\r\n            const options = {\r\n                contractAddress: contractInfo.AUSD_ADDRESS,\r\n                functionName: functionName,\r\n                abi: abi,\r\n                params: params,\r\n            };\r\n            return options;\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/funding/FakeFunding.html\n// Module\nvar FakeFunding_code = \"<article>\\r\\n    <div id=\\\"beforeFunding\\\">\\r\\n        To use liminal.market you need some aUSD. aUSD is the same value as USD.\\r\\n        We can give you some aUSD (this is all fake money), so you can play with the system.\\r\\n\\r\\n        First, you need to add aUSD to you wallet.\\r\\n\\r\\n        <button id=\\\"addTokenToWallet\\\">Add aUSD to wallet</button>\\r\\n        <blockquote id=\\\"needToCopy\\\" class=\\\"d-none\\\">\\r\\n            If the button didn't work, you can copy the address here and import it into your wallet\\r\\n            <input value=\\\"{{aUSDAddress}}\\\"/>\\r\\n        </blockquote>\\r\\n        When you have aUSD to you wallet, you can request some money to trade with.\\r\\n\\r\\n        <button id=\\\"requestFakeAUSD\\\">Request some aUSD</button>\\r\\n        <div class=\\\"warningBar notificationBar d-none\\\" id=\\\"fundingError\\\"></div>\\r\\n    </div>\\r\\n    <div id=\\\"afterFunding\\\" class=\\\"d-none center\\\">\\r\\n        We have now sending aUSD to your wallet. This usually takes few minutes, so lets wait.\\r\\n<br /><br />\\r\\n        When you have the aUSD in you wallet, we will tell you.\\r\\n        <div>\\r\\n            <h3>Current aUSD balance</h3>\\r\\n            <div id=\\\"currentAUSDBalance\\\"></div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div id=\\\"errorAfterTryFunding\\\" class=\\\"d-none\\\">\\r\\n        We had an error while trying to fund you. We'll be cracking at the issue soon to fix it.\\r\\n        Try again in few minutes. If not, try again in few hours.\\r\\n    </div>\\r\\n\\r\\n    <a href=\\\"#\\\" id=\\\"registerBankInfo\\\">Register bank information (not needed for Sandbox)</a>\\r\\n</article>\";\n// Exports\n/* harmony default export */ const FakeFunding = (FakeFunding_code);\n;// CONCATENATED MODULE: ./src/services/broker/FundingService.ts\nvar FundingService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\nclass FundingService {\r\n    constructor(moralis) {\r\n        this.moralis = moralis;\r\n    }\r\n    requestFakeFunding() {\r\n        return FundingService_awaiter(this, void 0, void 0, function* () {\r\n            let networkInfo = NetworkInfo.getInstance();\r\n            return yield this.moralis.Cloud.run('fundUser', { chainId: networkInfo.ChainId });\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Funding/SelectFundingType.html\n// Module\nvar SelectFundingType_code = \"<p>Setup your bank relationship with Liminal.market. Please choose the type of transfer you want to make</p>\\r\\n<ul>\\r\\n    <li><label><input type=\\\"radio\\\" name=\\\"bank_transfer\\\" id=\\\"ach_transfer\\\" value=\\\"1\\\"/> ACH bank transfer (US)</label>\\r\\n    </li>\\r\\n    <li><label><input type=\\\"radio\\\" name=\\\"bank_transfer\\\" id=\\\"wire_transfer\\\" value=\\\"2\\\"/> Wire transfer\\r\\n        (International)</label></li>\\r\\n</ul>\\r\\n<div id=\\\"selectFundingTypeError\\\" class=\\\"input_error\\\"></div>\\r\\n<button id=\\\"next_bank_information\\\">Next: Bank information</button>\\r\\n\";\n// Exports\n/* harmony default export */ const Funding_SelectFundingType = (SelectFundingType_code);\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/SelectFundingType.ts\n\r\nclass SelectFundingType {\r\n    constructor(aUsdFund) {\r\n        this.aUsdFund = aUsdFund;\r\n    }\r\n    show() {\r\n        let template = Handlebars.compile(Funding_SelectFundingType);\r\n        this.aUsdFund.modal.showModal('Select funding type', template({}));\r\n        this.bindEvent();\r\n    }\r\n    bindEvent() {\r\n        let next_bank_information = document.getElementById('next_bank_information');\r\n        next_bank_information === null || next_bank_information === void 0 ? void 0 : next_bank_information.addEventListener('click', (evt) => {\r\n            this.aUsdFund.hideError('selectFundingTypeError');\r\n            let ach_transfer = document.getElementById('ach_transfer');\r\n            if (ach_transfer === null || ach_transfer === void 0 ? void 0 : ach_transfer.checked) {\r\n                this.aUsdFund.achRelationship.show();\r\n            }\r\n            let wire_transfer = document.getElementById('wire_transfer');\r\n            if (wire_transfer === null || wire_transfer === void 0 ? void 0 : wire_transfer.checked) {\r\n                this.aUsdFund.wireTransfer.show();\r\n            }\r\n            this.aUsdFund.showError('selectFundingTypeError', 'Please select funding type');\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Funding/ACHRelationship.html\n// Module\nvar ACHRelationship_code = \"<fieldset>\\r\\n    <p>Before you can transfer, you need to set up your bank information.\\r\\n        We use <a href=\\\"https://plaid.com\\\" target=\\\"_blank\\\">Plaid</a> to connect your account with the broker account\\r\\n        <br/><br/>\\r\\n        Plaid is a secure service that makes it easy for you to connect your bank account information.\\r\\n        We do not have access to transfer from you account or any other access to your bank account.\\r\\n    </p>\\r\\n    <form id=\\\"achForm\\\">\\r\\n        <div class=\\\"input_error\\\" id=\\\"achError\\\"></div>\\r\\n        <div class=\\\"grid\\\">\\r\\n            <button id=\\\"ach_previous\\\">Previous: Funding type</button>\\r\\n            <button id=\\\"connectPlaid\\\">Connect using Plaid</button>\\r\\n        </div>\\r\\n\\r\\n    </form>\\r\\n\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const Funding_ACHRelationship = (ACHRelationship_code);\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/ACHRelationship.ts\nvar ACHRelationship_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\nclass ACHRelationship {\r\n    constructor(aUsdFund) {\r\n        this.aUsdFund = aUsdFund;\r\n    }\r\n    show() {\r\n        let template = Handlebars.compile(Funding_ACHRelationship);\r\n        this.aUsdFund.modal.showModal('Bank information', template({}));\r\n        this.bindEvent();\r\n    }\r\n    bindEvent() {\r\n        let connectPlaid = document.getElementById('connectPlaid');\r\n        connectPlaid === null || connectPlaid === void 0 ? void 0 : connectPlaid.addEventListener('click', (evt) => ACHRelationship_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            yield this.connectPlaidAction();\r\n        }));\r\n        let ach_previous = document.getElementById('ach_previous');\r\n        ach_previous === null || ach_previous === void 0 ? void 0 : ach_previous.addEventListener('click', (evt) => {\r\n            evt.preventDefault();\r\n            this.aUsdFund.selectFundingType.show();\r\n        });\r\n    }\r\n    connectPlaidAction() {\r\n        return ACHRelationship_awaiter(this, void 0, void 0, function* () {\r\n            let connectPlaid = document.getElementById('connectPlaid');\r\n            LoadingHelper.setLoading(connectPlaid);\r\n            this.aUsdFund.hideError('achError');\r\n            let userService = new UserService(this.aUsdFund.moralis);\r\n            yield userService.getPlaidLinkToken()\r\n                .catch((reason) => {\r\n                this.aUsdFund.showError('achError', reason);\r\n                LoadingHelper.removeLoading();\r\n            }).then((response) => {\r\n                console.log('response', response);\r\n                let plaidToken = JSON.parse(response);\r\n                let script = document.createElement('script');\r\n                script.src = 'https://cdn.plaid.com/link/v2/stable/link-initialize.js';\r\n                script.addEventListener('load', () => {\r\n                    this.createPlaidConnection(plaidToken);\r\n                });\r\n                let achForm = document.getElementById('achForm');\r\n                achForm.append(script);\r\n            });\r\n        });\r\n    }\r\n    createPlaidConnection(plaidToken) {\r\n        let linkHandler = Plaid.create({\r\n            token: plaidToken.link_token,\r\n            onSuccess: (public_token, metadata) => ACHRelationship_awaiter(this, void 0, void 0, function* () {\r\n                if (!metadata.account) {\r\n                    LoadingHelper.removeLoading();\r\n                    this.aUsdFund.showError('achError', \"Didn't receive any information from Plaid. Please try again. If it doesn't work. Please contact us at info@liminal.market\");\r\n                }\r\n                let userService = new UserService(this.aUsdFund.moralis);\r\n                yield userService.createAchRelationship(public_token, metadata.account.id)\r\n                    .catch((reason) => ACHRelationship_awaiter(this, void 0, void 0, function* () {\r\n                    if (reason.error.indexOf('only one active ach relationship') != -1) {\r\n                        let bankRelationships = yield userService.getBankRelationships();\r\n                        yield this.aUsdFund.transfer.show(bankRelationships[0]);\r\n                    }\r\n                    else {\r\n                        this.aUsdFund.showError('achError', reason);\r\n                        LoadingHelper.removeLoading();\r\n                    }\r\n                })).then((response) => {\r\n                    console.log('createAchRelationship', response);\r\n                    this.aUsdFund.transfer.show(response);\r\n                });\r\n            }),\r\n            onExit: (err, metadata) => {\r\n                console.log(err, metadata);\r\n                LoadingHelper.removeLoading();\r\n            },\r\n        });\r\n        linkHandler.open();\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Funding/Transfer.html\n// Module\nvar Transfer_code = \"<fieldset>\\r\\n\\r\\n    <form>\\r\\n        <p>\\r\\n            To fill up your broker account, you need to notify Liminal.market first about your transfer,\\r\\n            we can then match it with your account.\\r\\n            <br/><br/>\\r\\n            Type in the amount you would like to transfer to you broker account.\\r\\n            {{#if bank_account_number}}\\r\\n            <br /><br />\\r\\n            The money should come from <strong>{{bank_account_number}}</strong>\\r\\n            {{/if}}\\r\\n        </p>\\r\\n        <br/>\\r\\n        <label>\\r\\n            Amount in US dollars ($)\\r\\n            <input name=\\\"amount\\\" class=\\\"amount\\\" type=\\\"tel\\\" id=\\\"amount\\\" minlength=\\\"1\\\" required/>\\r\\n        </label>\\r\\n        <input type=\\\"hidden\\\" name=\\\"transfer_type\\\" id=\\\"transfer_type\\\" value=\\\"{{transfer_type}}\\\"/>\\r\\n        <input type=\\\"hidden\\\" name=\\\"relationship_id\\\" id=\\\"relationship_id\\\" value=\\\"{{relationshipId}}\\\"/>\\r\\n        <input type=\\\"hidden\\\" name=\\\"direction\\\" id=\\\"direction\\\" value=\\\"INCOMING\\\"/>\\r\\n        <div class=\\\"input_error\\\" id=\\\"transferError\\\"></div>\\r\\n        <div class=\\\"grid\\\">\\r\\n            <button id=\\\"notifyTransfer\\\">Notify Liminal.market of incoming transfer</button>\\r\\n        </div>\\r\\n    </form>\\r\\n    {{{transfers}}}\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const Funding_Transfer = (Transfer_code);\n;// CONCATENATED MODULE: ./src/enums/TransferDirectionEnum.ts\nvar TransferDirectionEnum;\r\n(function (TransferDirectionEnum) {\r\n    TransferDirectionEnum[\"Incoming\"] = \"INCOMING\";\r\n    TransferDirectionEnum[\"Outgoing\"] = \"OUTGOING\";\r\n})(TransferDirectionEnum || (TransferDirectionEnum = {}));\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Funding/TransfersList.html\n// Module\nvar TransfersList_code = \"<hr/>\\r\\n<h3>{{Direction}} transfers</h3>\\r\\n{{#if transfers.length}}\\r\\n<p>Below is a list of transfers, confirmed and not confirmed.</p>\\r\\n<table>\\r\\n    <thead>\\r\\n    <tr>\\r\\n        <th>Amount</th>\\r\\n        <th>Status</th>\\r\\n        <th>Created</th>\\r\\n        <th>Expires</th>\\r\\n    </tr>\\r\\n    </thead>\\r\\n    <tbody>\\r\\n    {{#each transfers}}\\r\\n    <tr>\\r\\n        <td>${{amount}}</td>\\r\\n        <td id=\\\"status_{{id}}\\\">{{status}}</td>\\r\\n        <td>{{dateTimeFormat created_at}}</td>\\r\\n        <td>{{dateTimeFormat expires_at}}</td>\\r\\n        <td id=\\\"delete_{{id}}\\\" class=\\\"{{classByStatus status}}\\\"><a href=\\\"#\\\" class=\\\"deleteTransfer\\\" data-id=\\\"{{id}}\\\">Cancel</a>\\r\\n        </td>\\r\\n    </tr>\\r\\n    {{/each}}\\r\\n    </tbody>\\r\\n</table>\\r\\n{{else}}\\r\\n<p>No transfers registered</p>\\r\\n{{/if}}\";\n// Exports\n/* harmony default export */ const Funding_TransfersList = (TransfersList_code);\n;// CONCATENATED MODULE: ./src/util/HandlebarHelpers.ts\nclass HandlebarHelpers {\r\n    static registerHelpers() {\r\n        Handlebars.registerHelper('perc', function (number) {\r\n            return Math.round(parseFloat(number) * 10000) / 100 + '%';\r\n        });\r\n        Handlebars.registerHelper('round', function (number) {\r\n            return Math.round(parseFloat(number) * 100) / 100;\r\n        });\r\n        Handlebars.registerHelper('round2', function (number) {\r\n            return Math.round(parseFloat(number) * 10000) / 10000;\r\n        });\r\n        Handlebars.registerHelper('classColor', function (number) {\r\n            return (number > 0) ? \"green\" : \"red\";\r\n        });\r\n        Handlebars.registerHelper('dateTimeFormat', function (strDate) {\r\n            let date = new Date(strDate);\r\n            return date.toLocaleString();\r\n        });\r\n        Handlebars.registerHelper('classByStatus', function (status) {\r\n            return (status == 'QUEUED' || status == 'APPROVAL_PENDING') ? '' : 'hidden';\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/TransfersList.ts\nvar TransfersList_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\nclass TransfersList {\r\n    constructor(moralis) {\r\n        this.moralis = moralis;\r\n        this.userService = new UserService(this.moralis);\r\n    }\r\n    render(direction) {\r\n        return TransfersList_awaiter(this, void 0, void 0, function* () {\r\n            HandlebarHelpers.registerHelpers();\r\n            let transfersTemplate = Handlebars.compile(Funding_TransfersList);\r\n            let transfers = yield this.userService.getLatestTransfers(direction);\r\n            return transfersTemplate({ Direction: direction, transfers: transfers });\r\n        });\r\n    }\r\n    bindEvents() {\r\n        var _a;\r\n        let deleteTransfers = document.querySelectorAll('.deleteTransfer');\r\n        for (let i = 0; i < deleteTransfers.length; i++) {\r\n            (_a = deleteTransfers[i]) === null || _a === void 0 ? void 0 : _a.addEventListener('click', (evt) => TransfersList_awaiter(this, void 0, void 0, function* () {\r\n                evt.preventDefault();\r\n                if (!confirm('Are you sure you want to cancel this withdraw request?')) {\r\n                    return;\r\n                }\r\n                let id = deleteTransfers[i].dataset['id'];\r\n                if (!id)\r\n                    return;\r\n                let userService = new UserService(this.moralis);\r\n                yield userService.deleteTransfer(id)\r\n                    .then(() => {\r\n                    let statusTd = document.getElementById('status_' + id);\r\n                    if (statusTd) {\r\n                        statusTd.innerText = 'CANCELED';\r\n                    }\r\n                    let deleteTd = document.getElementById('delete_' + id);\r\n                    deleteTd === null || deleteTd === void 0 ? void 0 : deleteTd.remove();\r\n                });\r\n            }));\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/Transfer.ts\nvar Transfer_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Transfer {\r\n    constructor(moralis, aUsdFund) {\r\n        this.moralis = moralis;\r\n        this.aUsdFund = aUsdFund;\r\n        this.transfersList = new TransfersList(this.moralis);\r\n    }\r\n    show(bankRelationship) {\r\n        return Transfer_awaiter(this, void 0, void 0, function* () {\r\n            if (!bankRelationship) {\r\n                this.aUsdFund.modal.showModal('No bank relationship exists', 'No bank relationship exists. You need to create this before you can transfer money. Close the window and try again.');\r\n                return;\r\n            }\r\n            this.bankRelationship = bankRelationship;\r\n            let template = Handlebars.compile(Funding_Transfer);\r\n            let transfersListHtml = yield this.transfersList.render(TransferDirectionEnum.Incoming);\r\n            let transfer_type = (StringHelper.isNullOrEmpty(bankRelationship.bank_account_number) && bankRelationship.bank_account_type != '') ? 'wire' : 'ach';\r\n            this.aUsdFund.modal.showModal('Create transfer notification', template({\r\n                transfers: transfersListHtml,\r\n                transfer_type: transfer_type,\r\n                relationshipId: bankRelationship.id\r\n            }));\r\n            this.bindEvents();\r\n        });\r\n    }\r\n    bindEvents() {\r\n        this.transfersList.bindEvents();\r\n        let notifyTransfer = document.getElementById('notifyTransfer');\r\n        notifyTransfer === null || notifyTransfer === void 0 ? void 0 : notifyTransfer.addEventListener('click', (evt) => Transfer_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            this.aUsdFund.hideError('transferError');\r\n            let amount = document.getElementById('amount');\r\n            if (StringHelper.isNullOrEmpty(amount.value) || parseFloat(amount.value) < 10) {\r\n                this.aUsdFund.showError('amountError', 'Amount cannot be empty or below $10');\r\n            }\r\n            LoadingHelper.setLoading(notifyTransfer);\r\n            let relationship_id = document.getElementById('relationship_id');\r\n            let transfer_type = document.getElementById('transfer_type');\r\n            let userService = new UserService(this.moralis);\r\n            yield userService.createTransfer(amount.value, 'INCOMING', relationship_id.value, transfer_type.value)\r\n                .then((response) => {\r\n                console.log(response);\r\n                if (StringHelper.isNullOrEmpty(this.bankRelationship.processor_token)) {\r\n                    this.aUsdFund.wireTransferInfo.show(amount.value);\r\n                }\r\n                else {\r\n                    this.aUsdFund.achTransferInfo.show(amount.value);\r\n                }\r\n            })\r\n                .catch(reason => {\r\n                let httpError = JSON.parse(reason.message);\r\n                this.aUsdFund.showError('transferError', httpError.serverError.message);\r\n            })\r\n                .finally(() => {\r\n                LoadingHelper.removeLoading();\r\n            });\r\n        }));\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Funding/WireTransfer.html\n// Module\nvar WireTransfer_code = \"<fieldset>\\r\\n    <p>Before you can transfer, you need to set up your bank information</p>\\r\\n    <form id=\\\"wireTransferForm\\\">\\r\\n        <label>Name of bank\\r\\n            <input name=\\\"name\\\" required id=\\\"name\\\"/>\\r\\n        </label>\\r\\n        <div class=\\\"input_error\\\" id=\\\"swift_error\\\">BIC/SWIFT code should be 8 or 11 characters</div>\\r\\n        <label>\\r\\n            Bank code (BIC/SWIFT)\\r\\n            <input name=\\\"bank_code\\\" maxlength=\\\"11\\\" id=\\\"bank_code\\\" required/>\\r\\n        </label>\\r\\n        <label>\\r\\n            Account number (IBAN)\\r\\n            <input name=\\\"account_number\\\" id=\\\"account_number\\\" required/>\\r\\n        </label>\\r\\n        <label>\\r\\n            Street address\\r\\n            <input name=\\\"street_address\\\" id=\\\"street_address\\\" required/>\\r\\n        </label>\\r\\n        <label>\\r\\n            Postal code\\r\\n            <input name=\\\"postal_code\\\" id=\\\"postal_code\\\" required/>\\r\\n        </label>\\r\\n        <label>\\r\\n            City\\r\\n            <input name=\\\"city\\\" id=\\\"city\\\" required/>\\r\\n        </label>\\r\\n\\r\\n        <label>State\\r\\n            <input name=\\\"state_province\\\" id=\\\"state_province\\\" required/>\\r\\n        </label>\\r\\n        <label>\\r\\n            Country where bank account is located\\r\\n            <select required id=\\\"country\\\" required name=\\\"country\\\">\\r\\n                <option value=\\\"\\\"></option>\\r\\n                {{#each countries}}\\r\\n                <option value=\\\"{{code}}\\\">{{name}}</option>\\r\\n                {{/each}}\\r\\n            </select>\\r\\n        </label>\\r\\n\\r\\n        <input type=\\\"hidden\\\" name=\\\"bank_code_type\\\" value=\\\"BIC\\\"/>\\r\\n        <div id=\\\"writeTransferError\\\" class=\\\"input_error\\\"></div>\\r\\n        <div class=\\\"grid\\\">\\r\\n            <button id=\\\"wire_transfer_previous\\\">Previous: Funding type</button>\\r\\n            <button id=\\\"save_international_bank_information\\\">Next: Transfer</button>\\r\\n        </div>\\r\\n    </form>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const Funding_WireTransfer = (WireTransfer_code);\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/WireTransfer.ts\nvar WireTransfer_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nclass WireTransfer {\r\n    constructor(aUsdFund) {\r\n        this.aUsdFund = aUsdFund;\r\n    }\r\n    show() {\r\n        return WireTransfer_awaiter(this, void 0, void 0, function* () {\r\n            let template = Handlebars.compile(Funding_WireTransfer);\r\n            this.aUsdFund.modal.showModal('Create bank information', template({ countries: CountryHelper.Countries }));\r\n            this.bindEvents();\r\n        });\r\n    }\r\n    bindEvents() {\r\n        let wire_transfer_previous = document.getElementById('wire_transfer_previous');\r\n        wire_transfer_previous === null || wire_transfer_previous === void 0 ? void 0 : wire_transfer_previous.addEventListener('click', (evt) => {\r\n            this.aUsdFund.selectFundingType.show();\r\n        });\r\n        let save_international_bank_information = document.getElementById('save_international_bank_information');\r\n        save_international_bank_information === null || save_international_bank_information === void 0 ? void 0 : save_international_bank_information.addEventListener('click', (evt) => WireTransfer_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            if (!this.validate())\r\n                return;\r\n            let params = FormHelper.getParams('#wireTransferForm');\r\n            let userService = new UserService(this.aUsdFund.moralis);\r\n            yield userService.registerWireTransferRelationship(params)\r\n                .then(response => {\r\n                this.aUsdFund.transfer.show(response);\r\n            })\r\n                .catch((reason) => WireTransfer_awaiter(this, void 0, void 0, function* () {\r\n                let obj = JSON.parse(reason.message);\r\n                let writeTransferError = document.getElementById('writeTransferError');\r\n                if (writeTransferError) {\r\n                    if (obj.serverError.message.indexOf('only one bank association') != -1) {\r\n                        let bankRelationships = yield userService.getBankRelationships();\r\n                        if (bankRelationships.length == 0) {\r\n                            writeTransferError.innerText = 'We cannot create the bank connection. Something is not working as it should. Please contact us at <a href=\"mailto:info@liminal.market\">info@liminal.market</a>';\r\n                            writeTransferError.style.display = 'block';\r\n                        }\r\n                        else {\r\n                            yield this.aUsdFund.transfer.show(bankRelationships[0]);\r\n                        }\r\n                    }\r\n                    else {\r\n                        writeTransferError.innerText = obj.serverError.message;\r\n                        writeTransferError.style.display = 'block';\r\n                    }\r\n                }\r\n            }));\r\n        }));\r\n    }\r\n    validate() {\r\n        let swift_error = document.getElementById('swift_error');\r\n        if (swift_error)\r\n            swift_error.style.display = 'none';\r\n        let writeTransferError = document.getElementById('writeTransferError');\r\n        if (writeTransferError)\r\n            writeTransferError.style.display = 'none';\r\n        if (!FormHelper.validate('#wireTransferForm'))\r\n            return false;\r\n        let bank_code = document.getElementById('bank_code');\r\n        if (bank_code.value.length != 8 && bank_code.value.length != 11) {\r\n            bank_code.setAttribute('aria-invalid', 'true');\r\n            let swift_error = document.getElementById('swift_error');\r\n            if (swift_error)\r\n                swift_error.style.display = 'block';\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Funding/ACHTransferInfo.html\n// Module\nvar ACHTransferInfo_code = \"<h2>You need to transfer now</h2>\\r\\n<p>\\r\\n    Use this information to execute the transfer.\\r\\n    Alpaca...... information is needed.\\r\\n    ${{amount}}\\r\\n</p>\";\n// Exports\n/* harmony default export */ const Funding_ACHTransferInfo = (ACHTransferInfo_code);\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/ACHTransferInfo.ts\n\r\nclass ACHTransferInfo {\r\n    constructor(aUsdFund) {\r\n        this.aUsdFund = aUsdFund;\r\n    }\r\n    show(amount) {\r\n        let template = Handlebars.compile(Funding_ACHTransferInfo);\r\n        this.aUsdFund.modal.showModal('Transfer information', template({ amount: amount }), false, () => {\r\n        }, false);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Funding/WireTransferInfo.html\n// Module\nvar WireTransferInfo_code = \"<h2>You need to transfer now</h2>\\r\\n<p>\\r\\n    Use this information to execute the transfer.\\r\\n    Alpaca...... information is needed.\\r\\n    ${{amount}}\\r\\n</p>\";\n// Exports\n/* harmony default export */ const Funding_WireTransferInfo = (WireTransferInfo_code);\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/WireTransferInfo.ts\n\r\nclass WireTransferInfo {\r\n    constructor(aUsdFund) {\r\n        this.aUsdFund = aUsdFund;\r\n    }\r\n    show(amount) {\r\n        let template = Handlebars.compile(Funding_WireTransferInfo);\r\n        this.aUsdFund.modal.showModal('Transfer information', template({ amount: amount }));\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/AUSDFund.ts\nvar AUSDFund_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass AUSDFund {\r\n    constructor(moralis) {\r\n        this.moralis = moralis;\r\n        this.modal = new Modal();\r\n        this.selectFundingType = new SelectFundingType(this);\r\n        this.achRelationship = new ACHRelationship(this);\r\n        this.transfer = new Transfer(moralis, this);\r\n        this.wireTransfer = new WireTransfer(this);\r\n        this.achTransferInfo = new ACHTransferInfo(this);\r\n        this.wireTransferInfo = new WireTransferInfo(this);\r\n    }\r\n    show() {\r\n        return AUSDFund_awaiter(this, void 0, void 0, function* () {\r\n            let userService = new UserService(this.moralis);\r\n            let bankRelationship = yield userService.getBankRelationships();\r\n            if (bankRelationship.length > 0) {\r\n                yield this.transfer.show(bankRelationship[0]);\r\n            }\r\n            else {\r\n                this.selectFundingType.show();\r\n            }\r\n        });\r\n    }\r\n    showError(elementId, reason) {\r\n        let element = document.getElementById(elementId);\r\n        if (element) {\r\n            element.innerText = reason;\r\n            element.style.display = 'block';\r\n        }\r\n    }\r\n    hideError(elementId) {\r\n        let element = document.getElementById(elementId);\r\n        if (element) {\r\n            element.style.display = 'none';\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/FakeAUSDFund.ts\nvar FakeAUSDFund_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass FakeAUSDFund {\r\n    constructor(moralis) {\r\n        this.moralis = moralis;\r\n        this.currentBalance = new (bignumber_default())(-1);\r\n        this.modal = new Modal();\r\n    }\r\n    showAUSDFund(callback) {\r\n        //this is real instruction how to transfer to broker\r\n        callback();\r\n    }\r\n    showAUSDFakeFund(callback) {\r\n        let template = Handlebars.compile(FakeFunding);\r\n        let contractInfo = ContractInfo.getContractInfo();\r\n        let content = template({ aUSDAddress: contractInfo.AUSD_ADDRESS });\r\n        this.modal.showModal('Fund my account (Fake money)', content);\r\n        let addToWallet = document.getElementById('addTokenToWallet');\r\n        if (!addToWallet)\r\n            return;\r\n        addToWallet.addEventListener('click', (evt) => FakeAUSDFund_awaiter(this, void 0, void 0, function* () {\r\n            let contractInfo = ContractInfo.getContractInfo();\r\n            let walletHelper = new WalletHelper(this.moralis);\r\n            let result = yield walletHelper.addTokenToWallet(contractInfo.AUSD_ADDRESS, 'aUSD', () => {\r\n                this.showCopyField();\r\n            });\r\n            if (!result)\r\n                this.showCopyField();\r\n        }));\r\n        let registerBankInfo = document.getElementById('registerBankInfo');\r\n        registerBankInfo === null || registerBankInfo === void 0 ? void 0 : registerBankInfo.addEventListener('click', (evt) => {\r\n            this.modal.hideModal();\r\n            let aUsdFund = new AUSDFund(this.moralis);\r\n            aUsdFund.show();\r\n        });\r\n        let requestFakeAUSD = document.getElementById('requestFakeAUSD');\r\n        requestFakeAUSD === null || requestFakeAUSD === void 0 ? void 0 : requestFakeAUSD.addEventListener('click', (evt) => FakeAUSDFund_awaiter(this, void 0, void 0, function* () {\r\n            requestFakeAUSD.setAttribute('aria-busy', 'true');\r\n            let fundingService = new FundingService(this.moralis);\r\n            let result = yield fundingService.requestFakeFunding()\r\n                .catch((reason) => {\r\n                this.errorWhileFunding({});\r\n            });\r\n            console.log('success', result.success);\r\n            if (!result.success) {\r\n                console.log(result);\r\n                let fundingError = document.getElementById('fundingError');\r\n                if (fundingError) {\r\n                    requestFakeAUSD.removeAttribute('aria-busy');\r\n                    fundingError.classList.remove('d-none');\r\n                    fundingError.innerHTML = result.message;\r\n                    setTimeout(() => {\r\n                        fundingError.classList.add('d-none');\r\n                    }, 10 * 1000);\r\n                }\r\n            }\r\n            else if (result.success) {\r\n                let beforeFunding = document.getElementById('beforeFunding');\r\n                let afterFunding = document.getElementById('afterFunding');\r\n                if (!beforeFunding || !afterFunding)\r\n                    return;\r\n                yield this.loadAUSDBalance();\r\n                beforeFunding.classList.add('d-none');\r\n                afterFunding.classList.remove('d-none');\r\n            }\r\n            else {\r\n                this.errorWhileFunding(result);\r\n            }\r\n            //callback();\r\n        }));\r\n    }\r\n    loadAUSDBalance() {\r\n        return FakeAUSDFund_awaiter(this, void 0, void 0, function* () {\r\n            let currentAUSDBalance = document.getElementById('currentAUSDBalance');\r\n            if (!currentAUSDBalance)\r\n                return;\r\n            let aUSDService = new AUSDService(this.moralis);\r\n            let userService = new UserService(this.moralis);\r\n            let ethAddress = userService.getEthAddress();\r\n            let amount = yield aUSDService.getAUSDBalanceOf(ethAddress);\r\n            currentAUSDBalance.innerHTML = '$' + roundBigNumber(amount).toString();\r\n            if (this.currentBalance.eq(-1)) {\r\n                this.currentBalance = amount;\r\n            }\r\n            if (this.currentBalance.eq(amount)) {\r\n                setTimeout(() => FakeAUSDFund_awaiter(this, void 0, void 0, function* () {\r\n                    yield this.loadAUSDBalance();\r\n                }), 5 * 1000);\r\n            }\r\n            else {\r\n                window.location.reload();\r\n            }\r\n        });\r\n    }\r\n    showCopyField() {\r\n        let needToCopy = document.getElementById('needToCopy');\r\n        if (!needToCopy)\r\n            return;\r\n        needToCopy.classList.remove('d-none');\r\n    }\r\n    errorWhileFunding(result) {\r\n        let beforeFunding = document.getElementById('beforeFunding');\r\n        let errorAfterFunding = document.getElementById('errorAfterTryFunding');\r\n        if (!beforeFunding || !errorAfterFunding)\r\n            return;\r\n        if (result.message) {\r\n            errorAfterFunding.innerHTML = result.message;\r\n        }\r\n        beforeFunding.classList.add('d-none');\r\n        errorAfterFunding.classList.remove('d-none');\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Funding/WithdrawModal.html\n// Module\nvar WithdrawModal_code = \"<fieldset id=\\\"withdrawInput\\\">\\r\\n\\r\\n    {{#if bank.bank_code_type}}\\r\\n    Your money will be sent to {{bank.name}} to account number {{bank.account_number}}.\\r\\n    <br/><br/>\\r\\n    Outgoing International Wire Transfers cost is ${{transferCost}}.<br/>\\r\\n    Fees will be deducted from the amount.\\r\\n    {{/if}}\\r\\n    {{#unless bank.bank_code_type}}\\r\\n    Your money will be sent to account number {{bank.bank_account_number}}.\\r\\n    <br/><br/>\\r\\n    ACH transfer costs is ${{transferCost}}. Fees will be deducted from the amount.\\r\\n    {{/unless}}\\r\\n    <form id=\\\"withdrawForm\\\">\\r\\n        <label>Amount to withdraw\\r\\n            <input type=\\\"tel\\\" name=\\\"amount\\\" id=\\\"amount\\\"/>\\r\\n        </label>\\r\\n        <div class=\\\"input_error\\\" id=\\\"withdrawAmountError\\\">The amount is lower than the cost of transfer</div>\\r\\n        <button id=\\\"confirmWithdraw\\\">Confirm withdraw</button>\\r\\n    </form>\\r\\n    {{{Transfers}}}\\r\\n</fieldset>\\r\\n\\r\\n<fieldset id=\\\"withdrawConfirm\\\" class=\\\"hidden\\\">\\r\\n    You are about to withdraw $<span id=\\\"withdrawAmountText\\\"></span> from your account\\r\\n    <div class=\\\"warningBar\\\">\\r\\n        Warning: The fee of this transaction will be $<span id=\\\"feeWarning\\\"></span>\\r\\n        and is <span id=\\\"feePercentage\\\"></span>% of the amount.\\r\\n    </div>\\r\\n    <div class=\\\"input_error\\\" id=\\\"withdrawError\\\"></div>\\r\\n    <button id=\\\"confirmWithdrawButton\\\">Execute transfer</button>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const Funding_WithdrawModal = (WithdrawModal_code);\n;// CONCATENATED MODULE: ./src/ui/modals/Funding/WithdrawModal.ts\nvar WithdrawModal_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass WithdrawModal {\r\n    constructor(moralis) {\r\n        this.wireTransferCost = 50;\r\n        this.achTransferCost = 25;\r\n        this.moralis = moralis;\r\n        this.userService = new UserService(this.moralis);\r\n        this.transferCost = this.wireTransferCost;\r\n        this.transfersList = new TransfersList(this.moralis);\r\n    }\r\n    show() {\r\n        return WithdrawModal_awaiter(this, void 0, void 0, function* () {\r\n            let modal = new Modal();\r\n            let bankRelationships = yield this.userService.getBankRelationships();\r\n            if (bankRelationships.length == 0) {\r\n                modal.showModal('Withdraw information', \"You haven't setup bank connection. You cannot withdraw from without bank connection\");\r\n                return;\r\n            }\r\n            let transfersHtml = yield this.transfersList.render(TransferDirectionEnum.Outgoing);\r\n            let ausdService = new AUSDService(this.moralis);\r\n            this.currentBalance = (yield ausdService.getAUSDBalanceOf(this.userService.getEthAddress())).toNumber();\r\n            if (this.currentBalance == 0) {\r\n                let tmp = Handlebars.compile(\"Your current balance is $0. There is nothing to withdraw. {{{transfers}}}\");\r\n                modal.showModal('Withdraw information', tmp({ transfers: transfersHtml }));\r\n                return;\r\n            }\r\n            let withdrawTemplate = Handlebars.compile(Funding_WithdrawModal);\r\n            this.bankInfo = bankRelationships[0];\r\n            this.transferCost = (this.bankInfo.bank_code_type) ? this.wireTransferCost : this.achTransferCost;\r\n            let obj = {\r\n                amount: this.currentBalance,\r\n                transferCost: this.transferCost,\r\n                Transfers: transfersHtml,\r\n                bank: this.bankInfo\r\n            };\r\n            modal.showModal('Withdraw information', withdrawTemplate(obj));\r\n            this.bindEvents();\r\n            this.transfersList.bindEvents();\r\n        });\r\n    }\r\n    bindEvents() {\r\n        let confirmWithdraw = document.getElementById('confirmWithdraw');\r\n        confirmWithdraw === null || confirmWithdraw === void 0 ? void 0 : confirmWithdraw.addEventListener('click', (evt) => WithdrawModal_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            if (!this.bankInfo)\r\n                return;\r\n            let amount = document.getElementById('amount');\r\n            if (StringHelper.isNullOrEmpty(amount.value)) {\r\n                amount.setAttribute('aria-invalid', 'true');\r\n                return;\r\n            }\r\n            else if (parseFloat(amount.value) <= this.transferCost) {\r\n                let withdrawAmountError = document.getElementById('withdrawAmountError');\r\n                withdrawAmountError.style.display = 'block';\r\n                amount.setAttribute('aria-invalid', 'true');\r\n                return;\r\n            }\r\n            else {\r\n                amount.setAttribute('aria-invalid', 'false');\r\n            }\r\n            this.showWithdrawConfirmation();\r\n        }));\r\n    }\r\n    showWithdrawConfirmation() {\r\n        if (!this.bankInfo)\r\n            return;\r\n        let amount = document.getElementById('amount');\r\n        let withdrawInput = document.getElementById('withdrawInput');\r\n        withdrawInput === null || withdrawInput === void 0 ? void 0 : withdrawInput.classList.add('hidden');\r\n        let withdrawConfirm = document.getElementById('withdrawConfirm');\r\n        withdrawConfirm === null || withdrawConfirm === void 0 ? void 0 : withdrawConfirm.classList.remove('hidden');\r\n        let withdrawAmountText = document.getElementById('withdrawAmountText');\r\n        let feeWarning = document.getElementById('feeWarning');\r\n        let feePercentage = document.getElementById('feePercentage');\r\n        withdrawAmountText.innerText = amount.value;\r\n        feeWarning.innerText = this.transferCost.toString();\r\n        feePercentage.innerText = roundNumber((this.transferCost / parseFloat(amount.value)) * 100).toString();\r\n        let relationship_id = this.bankInfo.id;\r\n        let transfer_type = (this.bankInfo.bank_code_type) ? 'wire' : 'ach';\r\n        let confirmWithdrawButton = document.getElementById('confirmWithdrawButton');\r\n        confirmWithdrawButton === null || confirmWithdrawButton === void 0 ? void 0 : confirmWithdrawButton.addEventListener('click', (evt) => WithdrawModal_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            yield this.userService.createTransfer(amount.value, TransferDirectionEnum.Outgoing, relationship_id, transfer_type)\r\n                .then((response) => WithdrawModal_awaiter(this, void 0, void 0, function* () {\r\n                withdrawConfirm.innerHTML = yield this.transfersList.render(TransferDirectionEnum.Outgoing);\r\n                this.transfersList.bindEvents();\r\n            }))\r\n                .catch(reason => {\r\n                let withdrawError = document.getElementById('withdrawError');\r\n                if (!withdrawError)\r\n                    return;\r\n                if (withdrawError && isJSON(reason.message)) {\r\n                    let error = JSON.parse(reason.message);\r\n                    withdrawError.innerText = error.serverError.message;\r\n                }\r\n                else {\r\n                    withdrawError.innerText = reason.toString();\r\n                }\r\n                withdrawError.style.display = 'block';\r\n            });\r\n        }));\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/elements/AUsdBalance.ts\nvar AUsdBalance_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass AUsdBalance {\r\n    constructor(moralis, user) {\r\n        this.user = user;\r\n        this.moralis = moralis;\r\n    }\r\n    loadAUSDBalanceUI() {\r\n        return AUsdBalance_awaiter(this, void 0, void 0, function* () {\r\n            if (!this.user)\r\n                return;\r\n            let userInfoAUsdBalance = document.getElementById('userInfoAUsdBalance');\r\n            let frontpageAUsdBalance = document.getElementById('frontpageAUsdBalance');\r\n            if (userInfoAUsdBalance && !userInfoAUsdBalance.classList.contains('hidden')) {\r\n                return;\r\n            }\r\n            if (!this.user.get('alpacaId')) {\r\n                frontpageAUsdBalance === null || frontpageAUsdBalance === void 0 ? void 0 : frontpageAUsdBalance.classList.add('hidden');\r\n                userInfoAUsdBalance === null || userInfoAUsdBalance === void 0 ? void 0 : userInfoAUsdBalance.classList.add('hidden');\r\n                return;\r\n            }\r\n            else {\r\n                frontpageAUsdBalance === null || frontpageAUsdBalance === void 0 ? void 0 : frontpageAUsdBalance.classList.remove('hidden');\r\n                userInfoAUsdBalance === null || userInfoAUsdBalance === void 0 ? void 0 : userInfoAUsdBalance.classList.remove('hidden');\r\n            }\r\n            let aUSDService = new AUSDService(this.moralis);\r\n            let aUsdValue = yield aUSDService.getAUSDBalanceOf(this.user.get('ethAddress'));\r\n            aUsdValue = roundBigNumber(aUsdValue);\r\n            let frontpageAUSDBalance = document.getElementById('front_page_aUSD_balance');\r\n            if (frontpageAUSDBalance)\r\n                frontpageAUSDBalance.innerHTML = '$' + aUsdValue;\r\n            let user_info_ausd_balance = document.getElementById('user_info_ausd_balance');\r\n            if (user_info_ausd_balance)\r\n                user_info_ausd_balance.innerHTML = '$' + aUsdValue;\r\n            this.bindEvents();\r\n            if (aUsdValue.isLessThan(10)) {\r\n                let frontpage_fund_account = document.getElementById('frontpage_fund_account');\r\n                frontpage_fund_account === null || frontpage_fund_account === void 0 ? void 0 : frontpage_fund_account.classList.remove('hidden');\r\n            }\r\n        });\r\n    }\r\n    bindEvents() {\r\n        let networkInfo = NetworkInfo.getInstance();\r\n        let fund_accountButtons = document.querySelectorAll('.fund_account');\r\n        fund_accountButtons.forEach(element => {\r\n            let aUSDFundingModal = new FakeAUSDFund(this.moralis);\r\n            if (networkInfo.TestNetwork) {\r\n                element.innerHTML = 'Click for some aUSD';\r\n                element.addEventListener('click', (evt) => {\r\n                    evt.preventDefault();\r\n                    aUSDFundingModal.showAUSDFakeFund(() => {\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                element.addEventListener('click', (evt) => AUsdBalance_awaiter(this, void 0, void 0, function* () {\r\n                    evt.preventDefault();\r\n                    let aUsdFund = new AUSDFund(this.moralis);\r\n                    yield aUsdFund.show();\r\n                }));\r\n            }\r\n        });\r\n        let withdraw_from_account = document.getElementById('withdraw_from_account');\r\n        withdraw_from_account === null || withdraw_from_account === void 0 ? void 0 : withdraw_from_account.addEventListener('click', (evt) => AUsdBalance_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            let withdrawModal = new WithdrawModal(this.moralis);\r\n            yield withdrawModal.show();\r\n        }));\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/elements/UserInfo.ts\nvar UserInfo_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass UserInfo {\r\n    constructor(moralis, providerInfo, user) {\r\n        this.moralis = moralis;\r\n        this.user = user;\r\n        this.userService = new UserService(this.moralis);\r\n        this.providerInfo = providerInfo;\r\n    }\r\n    render(elementId) {\r\n        return UserInfo_awaiter(this, void 0, void 0, function* () {\r\n            if (!this.user)\r\n                return;\r\n            this.listenForWalletChanges();\r\n            this.loadUserMenuUI(elementId);\r\n            let aUsdBalance = new AUsdBalance(this.moralis, this.user);\r\n            yield aUsdBalance.loadAUSDBalanceUI();\r\n        });\r\n    }\r\n    listenForWalletChanges() {\r\n        this.moralis.onChainChanged(function () {\r\n            location.reload();\r\n        });\r\n        this.moralis.onAccountChanged(function () {\r\n            location.reload();\r\n        });\r\n        this.moralis.onDisconnect(function () {\r\n            location.reload();\r\n        });\r\n        this.moralis.onConnect(function () {\r\n            location.reload();\r\n        });\r\n    }\r\n    loadUserMenuUI(elementId) {\r\n        if (!this.user)\r\n            return;\r\n        let userInfoDiv = document.getElementById(elementId);\r\n        if (!userInfoDiv)\r\n            return;\r\n        let networkInfo = NetworkInfo.getInstance();\r\n        let obj = {\r\n            ethAddress: this.user.get('ethAddress'),\r\n            shortEthAddress: shortEth(this.user.get('ethAddress')),\r\n            walletName: this.providerInfo.WalletName,\r\n            networkName: networkInfo.ChainName + ((networkInfo.TestNetwork) ? ' - (Test network)' : ''),\r\n            blockchainExplorer: networkInfo.BlockExplorer + '/address/',\r\n            provider: ''\r\n        };\r\n        let template = Handlebars.compile(elements_UserInfo);\r\n        let html = template(obj);\r\n        userInfoDiv.innerHTML = html;\r\n        let userInfoAction = document.getElementById('userInfoAction');\r\n        userInfoAction === null || userInfoAction === void 0 ? void 0 : userInfoAction.addEventListener('click', (evt) => {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n            let userInfoDropdown = document.getElementById('userInfoDropdown');\r\n            if (!userInfoDropdown)\r\n                return;\r\n            userInfoDropdown.classList.toggle('d-none');\r\n            userInfoDropdown.addEventListener('click', (evt) => {\r\n                evt.stopPropagation();\r\n            });\r\n        });\r\n        let disconnectFromNetwork = document.getElementById('disconnectFromNetwork');\r\n        disconnectFromNetwork === null || disconnectFromNetwork === void 0 ? void 0 : disconnectFromNetwork.addEventListener('click', (evt) => {\r\n            evt.preventDefault();\r\n            this.moralis.User.logOut();\r\n            window.location.reload();\r\n        });\r\n        this.bindUserActionEvents();\r\n    }\r\n    bindUserActionEvents() {\r\n        let editName = document.getElementById('editName');\r\n        editName === null || editName === void 0 ? void 0 : editName.addEventListener('click', (evt) => UserInfo_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            let kycModal = new KycEditNameForm();\r\n            yield kycModal.show();\r\n        }));\r\n        let editContact = document.getElementById('editContact');\r\n        editContact === null || editContact === void 0 ? void 0 : editContact.addEventListener('click', (evt) => UserInfo_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            let kycModal = new KycEditContactForm();\r\n            yield kycModal.show();\r\n        }));\r\n        let editTrustedContact = document.getElementById('editTrustedContact');\r\n        editTrustedContact === null || editTrustedContact === void 0 ? void 0 : editTrustedContact.addEventListener('click', (evt) => UserInfo_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            let kycModal = new KycEditTrustedContact();\r\n            yield kycModal.show();\r\n        }));\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/elements/ConnectWalletButton.html\n// Module\nvar ConnectWalletButton_code = \"<button class=\\\"liminal_market_connect_wallet outline\\\">Connect wallet</button>\";\n// Exports\n/* harmony default export */ const ConnectWalletButton = (ConnectWalletButton_code);\n;// CONCATENATED MODULE: ./src/html/modal/SelectWalletProvider.html\n// Module\nvar SelectWalletProvider_code = \"\\r\\n<article id=\\\"tos_pp_cookie_panel\\\">\\r\\n    <p>\\r\\n        By connecting a wallet, I agree to liminal.market Terms of Use, Cookies Policy and Privacy Policy.\\r\\n    </p>\\r\\n    <ul>\\r\\n        <li>\\r\\n    <label>\\r\\n        <input type=\\\"checkbox\\\" name=\\\"all\\\" value=\\\"1\\\">\\r\\n\\r\\n        I accept all\\r\\n\\r\\n    </label>\\r\\n        </li>\\r\\n        <li>\\r\\n    <label>\\r\\n        <input type=\\\"checkbox\\\" name=\\\"tos\\\" value=\\\"1\\\">\\r\\n        <span>\\r\\n        I accept <a href=\\\"https://www.liminal.market/terms-of-service\\\" target=\\\"_blank\\\">Terms of service</a>\\r\\n        <small>Things to note. You are taking a risk by buying stocks. You will be asked to do KYC/AML. You are responsible for any transaction you make.</small>\\r\\n      </span>\\r\\n    </label></li>\\r\\n        <li>\\r\\n    <label>\\r\\n        <input type=\\\"checkbox\\\" name=\\\"pp\\\" value=\\\"1\\\">\\r\\n        <span>\\r\\n        I accept the <a href=\\\"https://www.liminal.market/privacy-policy\\\" target=\\\"_blank\\\">Privacy Policy</a>\\r\\n        <small>Liminal.market doesn't store any personal data. Any KYC info is stored with the broker. If you register on our mailing list, that will be the only personal info we store.</small>\\r\\n      </span>\\r\\n    </label></li>\\r\\n        <li>\\r\\n    <label>\\r\\n        <input type=\\\"checkbox\\\" name=\\\"cookie\\\" value=\\\"1\\\">\\r\\n        <span>\\r\\n        I accept <a href=\\\"https://www.liminal.market/cookie-policy\\\" target=\\\"_blank\\\">Cookie policy</a>\\r\\n        <small>We use some cookies & services to improve our service. You don't have to accept but we will then just store essential cookies.</small>\\r\\n      </span>\\r\\n    </label>\\r\\n        </li>\\r\\n    </ul>\\r\\n</article>\\r\\n\\r\\n<div class=\\\"d-none\\\" id=\\\"wallet_connector_panel\\\">\\r\\n    <article class=\\\"provider\\\" id=\\\"connect_wallet_walletConnect\\\" data-provider=\\\"walletConnect\\\">\\r\\n\\r\\n        <h3>Connect using WalletConnect</h3>\\r\\n        <p>\\r\\n            Popular option to connect your mobile wallet.\\r\\n            For mobile we like <a href=\\\"https://www.tokenpocket.pro/\\\" target=\\\"_blank onclick='event.stopProgation();'\\\">Token\\r\\n            Poket</a>\\r\\n            as is support test network</p>\\r\\n\\r\\n    </article>\\r\\n    <div class=\\\"d-none\\\" id=\\\"walletConnectConnectionInfo\\\"></div>\\r\\n    <!--\\r\\n    <article class=\\\"provider\\\" id=\\\"connect_wallet_coinbaseWallet\\\" data-provider=\\\"coinbase\\\">\\r\\n\\r\\n        <h3>Coinbase wallet</h3>\\r\\n        <p>Connect using your Coinbase app</p>\\r\\n\\r\\n    </article>\\r\\n    -->\\r\\n    <article id=\\\"connect_wallet_metamask\\\" class=\\\"provider\\\" data-provider=\\\"metamask\\\">\\r\\n\\r\\n        <h3>Metamask</h3>\\r\\n        <p>Connect using your Metamask</p>\\r\\n\\r\\n    </article>\\r\\n</div>\";\n// Exports\n/* harmony default export */ const SelectWalletProvider = (SelectWalletProvider_code);\n;// CONCATENATED MODULE: ./src/ui/modals/ConnectWallet.ts\nvar ConnectWallet_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass ConnectWallet {\r\n    constructor(moralis) {\r\n        this.moralis = moralis;\r\n        this.modal = new Modal();\r\n        this.providerInfo = new ProviderInfo(null);\r\n    }\r\n    renderButton(elementId) {\r\n        if (!document.getElementById(elementId))\r\n            return;\r\n        document.getElementById(elementId).innerHTML = ConnectWalletButton;\r\n        let elements = document.querySelectorAll(\".liminal_market_connect_wallet\");\r\n        elements.forEach(el => {\r\n            el.removeEventListener('click', () => this.chooseWalletProvider());\r\n            el.addEventListener('click', () => this.chooseWalletProvider());\r\n        });\r\n    }\r\n    chooseWalletProvider() {\r\n        this.modal.showModal('Connect to a wallet', SelectWalletProvider);\r\n        this.setupCheckboxes();\r\n        this.setupProviders();\r\n    }\r\n    setupCheckboxes() {\r\n        let checkboxes = { all: false, tos: false, pp: false, cookie: false };\r\n        let cookieHelper = new CookieHelper(document);\r\n        let tosConfirmed = cookieHelper.getCookieValue('tos');\r\n        if (tosConfirmed) {\r\n            checkboxes = { tos: true, pp: true };\r\n            this.toggleProviders(checkboxes);\r\n            document.getElementById('tos_pp_cookie_panel').classList.add('d-none');\r\n            return;\r\n        }\r\n        let inputs = document.querySelectorAll('#tos_pp_cookie_panel input');\r\n        inputs.forEach(input => {\r\n            let checkbox = input;\r\n            checkbox.addEventListener('click', () => {\r\n                let name = checkbox.getAttribute('name');\r\n                if (name == 'all') {\r\n                    let valueToSet = checkbox.checked;\r\n                    inputs.forEach(tmp => {\r\n                        let otherInput = tmp;\r\n                        checkboxes[otherInput.name] = valueToSet;\r\n                        otherInput.checked = valueToSet;\r\n                    });\r\n                }\r\n                else {\r\n                    checkboxes[name] = checkbox.checked;\r\n                }\r\n                this.toggleProviders(checkboxes);\r\n            });\r\n        });\r\n    }\r\n    setupProviders() {\r\n        let anchors = document.querySelectorAll('#wallet_connector_panel .provider');\r\n        anchors.forEach(element => {\r\n            element.addEventListener('click', (evt) => {\r\n                evt.preventDefault();\r\n                evt.stopPropagation();\r\n                let provider = evt.currentTarget.dataset.provider;\r\n                this.connectWallet(provider);\r\n            }, { capture: true });\r\n        });\r\n    }\r\n    toggleProviders(checkboxes) {\r\n        let cookieHelper = new CookieHelper(document);\r\n        if (checkboxes.tos && checkboxes.pp) {\r\n            cookieHelper.setCookie('tos', new Date().toDateString());\r\n            let walletHelper = new WalletHelper(this.moralis);\r\n            if (walletHelper.isWebview(window.navigator.userAgent)) {\r\n                this.modal.hideModal();\r\n                this.connectWallet('');\r\n            }\r\n            else {\r\n                document.getElementById('wallet_connector_panel').classList.remove('d-none');\r\n            }\r\n        }\r\n        else {\r\n            cookieHelper.deleteCookie('tos');\r\n            document.getElementById('wallet_connector_panel').classList.add('d-none');\r\n        }\r\n    }\r\n    showUnsupportedNetworkMessage(connectionInfo) {\r\n        let str = 'The network you are connecting to is not supported.';\r\n        str += 'Following networks are supported. ';\r\n        let networks = NetworkInfo.getNetworks();\r\n        for (let i = 0; i < networks.length; i++) {\r\n            if (i != 0)\r\n                str += ', ';\r\n            str += networks[i].Name;\r\n        }\r\n        connectionInfo.innerHTML = str;\r\n    }\r\n    connectWallet(providerName) {\r\n        let authenticationService = new AuthenticateService(this.moralis);\r\n        let cookieHelper = new CookieHelper(document);\r\n        cookieHelper.setCookieProvider(providerName);\r\n        authenticationService.authenticateUser(providerName, (walletConnectionInfo) => {\r\n            this.web3EnabledResult(providerName, walletConnectionInfo);\r\n        }, (user) => ConnectWallet_awaiter(this, void 0, void 0, function* () {\r\n            this.modal.hideModal();\r\n            let userInfo = new UserInfo(this.moralis, this.providerInfo, user);\r\n            yield userInfo.render('user_header_info');\r\n            if (document.getElementById('liminal_market_execute_trade')) {\r\n                let page = new TradePage(this.moralis);\r\n                yield page.load();\r\n            }\r\n        }))\r\n            .catch((reason) => {\r\n            ErrorInfo.report(reason);\r\n        });\r\n    }\r\n    web3EnabledResult(providerName, walletConnectionInfo) {\r\n        this.providerInfo = new ProviderInfo(walletConnectionInfo);\r\n        let connectionInfo = document.getElementById(providerName + 'ConnectionInfo');\r\n        if (!connectionInfo)\r\n            return;\r\n        connectionInfo.classList.replace('alert-warning', 'alert-info');\r\n        let networkInfo = NetworkInfo.getInstance();\r\n        if (this.providerInfo.ChainId != networkInfo.ChainId) {\r\n            let userNetwork = NetworkInfo.getNetworkInfoByChainId(this.providerInfo.ChainId);\r\n            if (!userNetwork) {\r\n                this.showUnsupportedNetworkMessage(connectionInfo);\r\n            }\r\n            else {\r\n                NetworkInfo.setNetworkByChainId(this.providerInfo.ChainId);\r\n            }\r\n        }\r\n        let str = 'Connecting to you wallet \"' + this.providerInfo.WalletName + '\" to address ' + shortEth(this.providerInfo.UserAddress);\r\n        str += '. Open ' + this.providerInfo.WalletName + ' and <strong>Confirm</strong> the sign in.';\r\n        connectionInfo.innerHTML = str;\r\n        connectionInfo.classList.remove('d-none');\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/services/blockchain/KYCService.ts\nvar KYCService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nclass KYCService {\r\n    constructor(moralis) {\r\n        this.moralis = moralis;\r\n    }\r\n    getKYCAbi() {\r\n        return KYCService_awaiter(this, void 0, void 0, function* () {\r\n            if (KYCService.KYCInfo)\r\n                return KYCService.KYCInfo.abi;\r\n            const response = yield fetch(\"../abi/KYC.json\");\r\n            KYCService.KYCInfo = yield response.json();\r\n            return KYCService.KYCInfo.abi;\r\n        });\r\n    }\r\n    hasValidKYC() {\r\n        return KYCService_awaiter(this, void 0, void 0, function* () {\r\n            if (KYCService.KycResponse && KYCService.KycResponse.isValidKyc)\r\n                return KYCService.KycResponse;\r\n            KYCService.KycResponse = (yield this.moralis.Cloud.run('isValidKyc', { chainId: this.moralis.chainId })\r\n                .catch(reason => {\r\n                let blockchainError = new BlockchainError(reason);\r\n                if (blockchainError.addressIsNotValidKYC()) {\r\n                    return false;\r\n                }\r\n                ErrorInfo.report(blockchainError);\r\n                return false;\r\n            }));\r\n            if (KYCService.KycResponse.alpacaId) {\r\n                let user = this.moralis.User.current();\r\n                user === null || user === void 0 ? void 0 : user.set('alpacaId', KYCService.KycResponse.alpacaId);\r\n                let aUsdBalance = new AUsdBalance(this.moralis, user);\r\n                yield aUsdBalance.loadAUSDBalanceUI();\r\n            }\r\n            return KYCService.KycResponse;\r\n        });\r\n    }\r\n    saveKYCInfo(data) {\r\n        return KYCService_awaiter(this, void 0, void 0, function* () {\r\n            let user = this.moralis.User.current();\r\n            if (!user)\r\n                throw new GeneralError(\"You need to be logged in to do KYC. Please login again.\");\r\n            return yield this.moralis.Cloud.run(\"kycRegistration\", data);\r\n        });\r\n    }\r\n    updateKYCInfo(data) {\r\n        return KYCService_awaiter(this, void 0, void 0, function* () {\r\n            let user = this.moralis.User.current();\r\n            if (!user)\r\n                throw new GeneralError(\"You need to be logged in to do KYC. Please login again.\");\r\n            return yield this.moralis.Cloud.run(\"updateAccount\", data);\r\n        });\r\n    }\r\n    isValidAccountId(str) {\r\n        const regex = new RegExp('^[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$');\r\n        return regex.test(str);\r\n    }\r\n    updateDocuments(params) {\r\n        return KYCService_awaiter(this, void 0, void 0, function* () {\r\n            let user = this.moralis.User.current();\r\n            if (!user)\r\n                throw new GeneralError(\"You need to be logged in to do KYC. Please login again.\");\r\n            return yield this.moralis.Cloud.run(\"kycActionRequiredUpdate\", params);\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/services/blockchain/SecurityTokenService.ts\nvar SecurityTokenService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass SecurityTokenService {\r\n    constructor(moralis) {\r\n        this.moralis = moralis;\r\n    }\r\n    getQuantityByAddress(symbol, ethAddress) {\r\n        return SecurityTokenService_awaiter(this, void 0, void 0, function* () {\r\n            let liminalMarketService = new LiminalMarketService(this.moralis);\r\n            let symbolAddress = yield liminalMarketService.getSymbolContractAddress(symbol);\r\n            if (symbolAddress === AddressZero)\r\n                return new (bignumber_default())(0);\r\n            let options = yield this.getOptions('balanceOf', symbolAddress, {\r\n                account: ethAddress\r\n            });\r\n            return yield this.moralis.executeFunction(options)\r\n                .then(balanceOf => {\r\n                let amount = this.moralis.Units.FromWei(balanceOf.toString(), 18);\r\n                return new (bignumber_default())(amount);\r\n            }).catch(reason => {\r\n                let blockchainError = new BlockchainError(reason);\r\n                ErrorInfo.report(blockchainError);\r\n                return new (bignumber_default())(0);\r\n            });\r\n        });\r\n    }\r\n    transfer(symbolAddress, qty) {\r\n        return SecurityTokenService_awaiter(this, void 0, void 0, function* () {\r\n            let contractInfo = ContractInfo.getContractInfo();\r\n            let options = yield this.getOptions('transfer', symbolAddress, {\r\n                recipient: contractInfo.AUSD_ADDRESS,\r\n                amount: Moralis.Units.Token(qty.toString(), 18)\r\n            });\r\n            let result = yield this.moralis.executeFunction(options)\r\n                .then(result => {\r\n                return result;\r\n            })\r\n                .catch(reason => {\r\n                let blockchainError = new BlockchainError(reason);\r\n                throw ErrorInfo.report(blockchainError);\r\n            });\r\n            return result;\r\n        });\r\n    }\r\n    getOptions(functionName, symbolAddress, params) {\r\n        return SecurityTokenService_awaiter(this, void 0, void 0, function* () {\r\n            let securitySymbolAbi = yield this.getSecurityTokenAbi();\r\n            const options = {\r\n                contractAddress: symbolAddress,\r\n                functionName: functionName,\r\n                abi: securitySymbolAbi,\r\n                params: params\r\n            };\r\n            return options;\r\n        });\r\n    }\r\n    getSecurityTokenAbi() {\r\n        return SecurityTokenService_awaiter(this, void 0, void 0, function* () {\r\n            if (SecurityTokenService.SecurityTokenInfo)\r\n                return SecurityTokenService.SecurityTokenInfo.abi;\r\n            let response = yield fetch('../abi/SecurityToken.json');\r\n            SecurityTokenService.SecurityTokenInfo = yield response.json();\r\n            return SecurityTokenService.SecurityTokenInfo.abi;\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/elements/Progress.ts\nclass Progress {\r\n    show(message, percentage, warning, hideElements) {\r\n        let progress = document.getElementById('progress');\r\n        if (!progress)\r\n            return;\r\n        if (hideElements) {\r\n            hideElements.forEach((el) => {\r\n                let element = document.getElementById(el);\r\n                if (!element)\r\n                    return;\r\n                element.style.display = 'none';\r\n            });\r\n        }\r\n        progress.style.display = 'block';\r\n        progress.innerHTML = '<div class=\"progress_text\">' + message + '</div>';\r\n        progress.style.width = percentage + '%';\r\n        progress.classList.toggle('progress-bar-striped', (percentage != 100));\r\n        progress.classList.toggle('progress-bar-animated', (percentage != 100));\r\n        if (warning) {\r\n            progress.classList.add('bg-warning');\r\n            progress.classList.add('progress_text_attn');\r\n        }\r\n        else {\r\n            progress.classList.remove('bg-warning');\r\n            progress.classList.remove('progress_text_attn');\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/services/backend/Subscription.ts\nvar Subscription_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\nclass Subscription {\r\n    constructor(moralis) {\r\n        this.moralis = moralis;\r\n    }\r\n    getOrderBuyTablePrefix() {\r\n        let networkInfo = NetworkInfo.getInstance();\r\n        return networkInfo.Name;\r\n    }\r\n    ;\r\n    subscribeToTable(tradeType, onUpdateCallback) {\r\n        return Subscription_awaiter(this, void 0, void 0, function* () {\r\n            let tableName = this.getOrderBuyTablePrefix() + 'Order' + tradeType;\r\n            console.log('subscribe to table:' + tableName);\r\n            let query = new this.moralis.Query(tableName);\r\n            let subscription = yield query.subscribe();\r\n            subscription.on('update', (response) => {\r\n                const object = response.toJSON();\r\n                console.log('object updated', JSON.stringify(object), object);\r\n                let ethLink = ' <a class=\"white-link\" target=\"_blank\" href=\"https://mumbai.polygonscan.com/tx/' + object.transaction_hash + '\">View transaction</a>';\r\n                onUpdateCallback(object);\r\n                console.log('status:', object.status);\r\n                let progress = new Progress();\r\n                if ((!object.status && object.confirmed) || object.status == 'money_sent') {\r\n                    progress.show('Blockchain has confirmed, money has been sent to broker.' + ethLink, 56);\r\n                    //blockchain has confirmed, money will arrive soon to broker\r\n                }\r\n                else if (object.status == 'money_arrived') {\r\n                    progress.show('Money has arrived, will now execute your buy order.' + ethLink, 70);\r\n                    //money has arrived to broker, we will now execute your order\r\n                }\r\n                else if (object.status == 'order_requested') {\r\n                    //order has been executed, we are waiting on response from the stock exchange\r\n                    progress.show('Buy order has been executed. We will update you when it has been filled.' + ethLink, 84);\r\n                }\r\n                else if (object.status == 'order_filled') {\r\n                    //order has been filled, you got object.filledQty of shares. You will see it soon in your wallet\r\n                    progress.show('Order has been filled, you will receive ' + object.filledQty + ' ' + Symbol + ' soon into your wallet.' + ethLink, 100);\r\n                }\r\n                else {\r\n                    progress.show('Waiting for blockchain to confirm transaction.', 99);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    ;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/enums/TradeType.ts\nvar TradeType;\r\n(function (TradeType) {\r\n    TradeType[\"Sell\"] = \"Sell\";\r\n    TradeType[\"Buy\"] = \"Buy\";\r\n})(TradeType || (TradeType = {}));\r\n\n;// CONCATENATED MODULE: ./src/html/elements/tradepanel/ExecuteTradeButton.html\n// Module\nvar ExecuteTradeButton_code = \"<button id=\\\"liminal_market_execute_trade\\\"></button>\";\n// Exports\n/* harmony default export */ const tradepanel_ExecuteTradeButton = (ExecuteTradeButton_code);\n;// CONCATENATED MODULE: ./src/html/elements/tradepanel/TradeExecuted.html\n// Module\nvar TradeExecuted_code = \"\\r\\n<article class=\\\"trade_executed\\\">\\r\\n    <nav>\\r\\n    <ul>\\r\\n        <li>\\r\\n            <img src=\\\"{{sellingLogo}}\\\"><br />\\r\\n            {{sellingSymbol}}<br />\\r\\n            {{sellingAmount}}\\r\\n        </li>\\r\\n    </ul>\\r\\n    <ul>\\r\\n        <li> ----> </li>\\r\\n    </ul>\\r\\n    <ul>\\r\\n        <li>\\r\\n            <img src=\\\"{{buyingLogo}}\\\" /><br />\\r\\n            {{buyingSymbol}}<br />\\r\\n            <abbr title=\\\"{{buyingQuantity}}\\\" data-tooltip=\\\"{{buyingQuantity}}\\\">{{buyingRoundQuantity}}</abbr>\\r\\n        </li>\\r\\n    </ul>\\r\\n    </nav>\\r\\n    <div>\\r\\n        If you haven't already, add the {{buyingSymbol}} to your wallet.\\r\\n        <br /><br />\\r\\n        <button id=\\\"addTokenToWallet\\\" data-address=\\\"{{tokenAddress}}\\\">Add {{buyingSymbol}} to wallet</button>\\r\\n        <div id=\\\"addTokenToWalletFailed\\\" class=\\\"d-none\\\">\\r\\n            You can copy the address, to import the token\\r\\n            <input value=\\\"{{tokenAddress}}\\\" />\\r\\n        </div>\\r\\n        <br />\\r\\n        Should be visible in your {{walletName}} on address {{shortEthAddress}}.\\r\\n        <br /><br />\\r\\n        <small>You can view the <a href=\\\"{{blockExplorerLink}}\\\" target=\\\"_blank\\\">block transaction here</a></small>\\r\\n    </div>\\r\\n</article>\\r\\n\";\n// Exports\n/* harmony default export */ const TradeExecuted = (TradeExecuted_code);\n;// CONCATENATED MODULE: ./src/html/modal/FakeNativeTokenNeeded.html\n// Module\nvar FakeNativeTokenNeeded_code = \"You need to have {{symbol}} currency in your wallet. You use {{symbol}} to pay for using the blockchain.\\r\\n\\r\\nTo get some {{symbol}} currency\\r\\n<ol>\\r\\n    <li>Copy your address shown below\\r\\n        <input value=\\\"{{ethAddress}}\\\" />\\r\\n    </li>\\r\\n    <li>Open <a href=\\\"{{faucetUrl}}\\\" id=\\\"getNativeTokens\\\" target=\\\"_blank\\\">{{faucetUrl}}</a></li>\\r\\n    <li>Paste in your address you just copied and click the submit button</li>\\r\\n</ol>\\r\\n\\r\\n<div class=\\\"infoBar d-none\\\" id=\\\"waitingForNativeToken\\\">Waiting for {{symbol}}. Window will close when you have some in\\r\\n    you wallet.\\r\\n    It might take few minutes after you requested it.\\r\\n    <progress></progress>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\";\n// Exports\n/* harmony default export */ const FakeNativeTokenNeeded = (FakeNativeTokenNeeded_code);\n;// CONCATENATED MODULE: ./src/html/modal/NativeTokenNeeded.html\n// Module\nvar NativeTokenNeeded_code = \"You need to have {{symbol}} currency in your wallet. You use {{symbol}} to pay for using the blockchain.\\r\\n\\r\\nTo get some {{symbol}} currency\\r\\n<ol>\\r\\n    <li>Copy your address shown below\\r\\n        <input value=\\\"{{ethAddress}}\\\" />\\r\\n    </li>\\r\\n    <li>Open <a href=\\\"{{buyUrl}}\\\" target=\\\"_blank\\\">{{buyUrl}}</a></li>\\r\\n    <li>Paste in your address you just copied and click the submit button</li>\\r\\n</ol>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\";\n// Exports\n/* harmony default export */ const modal_NativeTokenNeeded = (NativeTokenNeeded_code);\n;// CONCATENATED MODULE: ./src/ui/modals/NativeTokenNeeded.ts\nvar NativeTokenNeeded_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\nclass NativeTokenNeeded {\r\n    constructor(moralis, onNativeTokenArrived) {\r\n        this.timeOut = undefined;\r\n        this.moralis = moralis;\r\n        this.onNativeTokenArrived = onNativeTokenArrived;\r\n        this.modal = new Modal();\r\n    }\r\n    show() {\r\n        let networkInfo = NetworkInfo.getInstance();\r\n        let userService = new UserService();\r\n        let ethAddress = userService.getEthAddress();\r\n        if (networkInfo.TestNetwork) {\r\n            let template = Handlebars.compile(FakeNativeTokenNeeded);\r\n            let content = template({ symbol: networkInfo.NativeSymbol, faucetUrl: networkInfo.FaucetUrl, ethAddress: ethAddress });\r\n            this.modal.showModal('Get some ' + networkInfo.NativeSymbol, content, false, () => {\r\n                this.cancelTimer();\r\n            });\r\n        }\r\n        else {\r\n            let template = Handlebars.compile(modal_NativeTokenNeeded);\r\n            let content = template({ symbol: networkInfo.NativeSymbol, buyUrl: networkInfo.BuyUrl, ethAddress: ethAddress });\r\n            this.modal.showModal('Get some ' + networkInfo.NativeSymbol, content, false, () => {\r\n                this.cancelTimer();\r\n            });\r\n        }\r\n        let link = document.getElementById('getNativeTokens');\r\n        if (!link)\r\n            return;\r\n        link.addEventListener('click', () => NativeTokenNeeded_awaiter(this, void 0, void 0, function* () {\r\n            let waitingForNativeToken = document.getElementById('waitingForNativeToken');\r\n            waitingForNativeToken === null || waitingForNativeToken === void 0 ? void 0 : waitingForNativeToken.classList.remove('d-none');\r\n            yield this.checkForNativeTokens();\r\n        }));\r\n    }\r\n    cancelTimer() {\r\n        if (this.timeOut)\r\n            clearTimeout(this.timeOut);\r\n    }\r\n    checkForNativeTokens() {\r\n        return NativeTokenNeeded_awaiter(this, void 0, void 0, function* () {\r\n            let networkInfo = NetworkInfo.getInstance();\r\n            let hasEnoughNativeTokens = yield networkInfo.hasEnoughNativeTokens(this.moralis);\r\n            if (hasEnoughNativeTokens) {\r\n                this.modal.hideModal();\r\n                this.onNativeTokenArrived();\r\n            }\r\n            else {\r\n                this.timeOut = setTimeout(() => this.checkForNativeTokens(), 5 * 1000);\r\n            }\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycActionRequired.html\n// Module\nvar KycActionRequired_code = \"<div id=\\\"kycActionRequiredDiv\\\">\\r\\n\\r\\n    {{#if Other}}\\r\\n    <strong>This is the message from KYC processor we received</strong>\\r\\n    <blockquote>\\r\\n        {{Other}}\\r\\n    </blockquote>\\r\\n    {{/if}}\\r\\n    <form novalidate id=\\\"kycActionRequiredForm\\\" name=\\\"kycActionRequiredForm\\\" onsubmit=\\\"return false;\\\">\\r\\n        {{{KycInfo}}}\\r\\n        {{#if SubmitData}}\\r\\n        <div class=\\\"input_error\\\" id=\\\"kycActionRequiredError\\\"></div>\\r\\n        <div class=\\\"buttons\\\">\\r\\n            <button type=\\\"submit\\\" id=\\\"kycActionRequiredSubmit\\\">Send new information</button>\\r\\n        </div>\\r\\n        {{/if}}\\r\\n    </form>\\r\\n</div>\\r\\n\\r\\n<div id=\\\"kycActionRequiredSubmittedDiv\\\" class=\\\"hidden center\\\">\\r\\n    <h3>You documents have been submitted.<br/>We will email you when your account is ready.</h3>\\r\\n    You can close this window.\\r\\n</div>\";\n// Exports\n/* harmony default export */ const Kyc_KycActionRequired = (KycActionRequired_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/WeDontKnowWhy.html\n// Module\nvar WeDontKnowWhy_code = \"<fieldset>\\r\\n    Your application has been rejected during KYC process.<br/><br/>\\r\\n    We don't have the information on why that happened, but you can email us at\\r\\n    <a href='mailto:info@liminal.market?subject=My application was rejected&body=Hi, can you help me to find out what the problem is? My name is _______ and I used the email _______ to register at liminal.market'>info@liminal.market</a>\\r\\n    and we can find out, and we should be able to solve it together.\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const WeDontKnowWhy = (WeDontKnowWhy_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/IDENTITY_VERIFICATION.html\n// Module\nvar IDENTITY_VERIFICATION_code = \"<fieldset>\\r\\n    <p>\\r\\n        Identity needs to be verified.\\r\\n        This means you need to upload\\r\\n        a new photo of your id. You might try another type of ID, such as\\r\\n        driver's license if you tried passport before\\r\\n    </p>\\r\\n    <div class=\\\"grid\\\">\\r\\n        {{{fileUpload \\\"identity_verification\\\" \\\"Photo ID Front (Front of passport)\\\"}}}\\r\\n    </div>\\r\\n    <div class=\\\"grid\\\">\\r\\n        {{{fileUpload \\\"identity_verification_2\\\" \\\"Photo ID Back (Passport picture of ID) \\\"}}}\\r\\n    </div>\\r\\n\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const IDENTITY_VERIFICATION = (IDENTITY_VERIFICATION_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/ADDRESS_VERIFICATION.html\n// Module\nvar ADDRESS_VERIFICATION_code = \"<fieldset>\\r\\n    <p>\\r\\n        Address needs to be verified. Please upload document that confirms your address.\\r\\n        A bill from the government or utility company in that last 30 days with your name it should work.\\r\\n    </p>\\r\\n    <div class=\\\"grid\\\">\\r\\n        {{{fileUpload \\\"address_verification\\\" \\\"Picture of address verification\\\"}}}\\r\\n    </div>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const ADDRESS_VERIFICATION = (ADDRESS_VERIFICATION_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/AFFILIATED.html\n// Module\nvar AFFILIATED_code = \"<fieldset>\\r\\n    Further information needs to be submitted if account owner is affiliated to finra or an exchange\\r\\n    <br/>\\r\\n    Please contact us at <a href=\\\"mailto:info@liminal.market\\\">info@liminal.market</a> for further information\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const AFFILIATED = (AFFILIATED_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/CONTROL_PERSON.html\n// Module\nvar CONTROL_PERSON_code = \"<fieldset>\\r\\n    Further information needs to be submitted if account owner is a control person\\r\\n    <br/>\\r\\n    Please contact us at <a href=\\\"mailto:info@liminal.market\\\">info@liminal.market</a> for further information\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const CONTROL_PERSON = (CONTROL_PERSON_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/COUNTRY_NOT_SUPPORTED.html\n// Module\nvar COUNTRY_NOT_SUPPORTED_code = \"<fieldset>\\r\\n    The account owner’s country of tax residence is not supported by our KYC providers.\\r\\n    In this case, we’ll manually perform KYC on the user\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const COUNTRY_NOT_SUPPORTED = (COUNTRY_NOT_SUPPORTED_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/DATE_OF_BIRTH.html\n// Module\nvar DATE_OF_BIRTH_code = \"<fieldset>\\r\\n    Date of birth needs to be verified. Please upload document that confirms your date of birth.\\r\\n\\r\\n    <div class=\\\"grid\\\">\\r\\n        {{{fileUpload \\\"date_of_birth_verification\\\" \\\"Date of birth verification\\\"}}}\\r\\n    </div>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const DATE_OF_BIRTH = (DATE_OF_BIRTH_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/FAMILY_MEMBER_PEP.html\n// Module\nvar FAMILY_MEMBER_PEP_code = \"<fieldset>\\r\\n    Further information needs to be submitted if family member is a politically exposed person\\r\\n    <br/>\\r\\n    Please contact us at <a href=\\\"mailto:info@liminal.market\\\">info@liminal.market</a> for further information\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const FAMILY_MEMBER_PEP = (FAMILY_MEMBER_PEP_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/INVALID_IDENTITY_PASSPORT.html\n// Module\nvar INVALID_IDENTITY_PASSPORT_code = \"<fieldset>\\r\\n    Identity needs to be verified via a government issued ID.\\r\\n\\r\\n    <div class=\\\"grid\\\">\\r\\n        {{{fileUpload \\\"identity_verification\\\" \\\"Photo ID Front (Front of passport)\\\"}}}\\r\\n    </div>\\r\\n    <div class=\\\"grid\\\">\\r\\n        {{{fileUpload \\\"identity_verification_2\\\" \\\"Photo ID Back (Passport picture of ID) \\\"}}}\\r\\n    </div>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const INVALID_IDENTITY_PASSPORT = (INVALID_IDENTITY_PASSPORT_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/PEP.html\n// Module\nvar PEP_code = \"<fieldset>\\r\\n    Further information needs to be submitted if account owner is politically exposed person\\r\\n    <br/>\\r\\n    Please contact us at <a href=\\\"mailto:info@liminal.market\\\">info@liminal.market</a> for further information\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const PEP = (PEP_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/SELFIE_VERIFICATION.html\n// Module\nvar SELFIE_VERIFICATION_code = \"<fieldset>\\r\\n    Identity needs to be verified via a live selfie of the account owner\\r\\n\\r\\n    <div class=\\\"grid\\\">\\r\\n        {{{fileUpload \\\"identity_verification\\\" \\\"Live selfie verification\\\"}}}\\r\\n    </div>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const SELFIE_VERIFICATION = (SELFIE_VERIFICATION_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/TAX_IDENTIFICATION.html\n// Module\nvar TAX_IDENTIFICATION_code = \"<fieldset>\\r\\n    Tax ID number needs to be verified. Please upload document that confirms your Tax Id\\r\\n\\r\\n    <div class=\\\"grid\\\">\\r\\n        {{{fileUpload \\\"tax_id_verification\\\" \\\"Tax id verification\\\"}}}\\r\\n    </div>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const TAX_IDENTIFICATION = (TAX_IDENTIFICATION_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/VISA_TYPE_OTHER.html\n// Module\nvar VISA_TYPE_OTHER_code = \"<fieldset>\\r\\n    Further information needs to be submitted about account owner’s visa\\r\\n    <br/>\\r\\n    Please contact us at <a href=\\\"mailto:info@liminal.market\\\">info@liminal.market</a> for further information\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const VISA_TYPE_OTHER = (VISA_TYPE_OTHER_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/ActionRequired/W8BEN_CORRECTION.html\n// Module\nvar W8BEN_CORRECTION_code = \"<fieldset>\\r\\n    Identifying information submitted by the user was incorrect so a new, corrected, W8BEN needs to be submitted\\r\\n    <br/>\\r\\n    Please contact us at <a href=\\\"mailto:info@liminal.market\\\">info@liminal.market</a> for further information\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const W8BEN_CORRECTION = (W8BEN_CORRECTION_code);\n;// CONCATENATED MODULE: ./src/html/elements/FileUpload.html\n// Module\nvar FileUpload_code = \"<div>\\r\\n    <label for=\\\"{{inputId}}\\\">{{label}}</label>\\r\\n    <input type=\\\"file\\\" required id=\\\"{{inputId}}\\\" accept=\\\"{{accept}}\\\" capture=\\\"{{capture}}\\\"/>\\r\\n    <input type=\\\"hidden\\\" id=\\\"{{inputId}}_base64\\\" name=\\\"{{inputId}}_base64\\\"/>\\r\\n    <div class=\\\"error hidden\\\" id=\\\"{{inputId}}_error\\\"></div>\\r\\n</div>\\r\\n<div id=\\\"{{inputId}}_preview\\\">\\r\\n\\r\\n</div>\";\n// Exports\n/* harmony default export */ const elements_FileUpload = (FileUpload_code);\n;// CONCATENATED MODULE: ./src/ui/elements/FileUpload.ts\n\r\nclass FileUpload {\r\n    constructor(inputId, label, accept = \"image/png,image/jpeg,.pdf\", capture = 'environment') {\r\n        this.maxFileSize = 8 * 1024 * 1024 * 10; //10MB\r\n        this.accept = \"image/*,.pdf\";\r\n        this.capture = 'environment';\r\n        this.inputId = inputId;\r\n        this.label = label;\r\n        this.accept = accept;\r\n        this.capture = capture;\r\n    }\r\n    render() {\r\n        let template = Handlebars.compile(elements_FileUpload);\r\n        return template(this);\r\n    }\r\n    bindEvents() {\r\n        let fileInput = document.getElementById(this.inputId);\r\n        fileInput === null || fileInput === void 0 ? void 0 : fileInput.addEventListener('change', (evt) => {\r\n            this.processFile(fileInput);\r\n        });\r\n    }\r\n    processFile(element) {\r\n        this.hideFileRelatedInfo(element.id);\r\n        let files = element.files;\r\n        if (!files)\r\n            return;\r\n        let file = files[0];\r\n        if (!file) {\r\n            this.showFileRelatedInfo(element.id, 'No file selected. Please select file.');\r\n            this.setBase64Input(element.id, '');\r\n            return;\r\n        }\r\n        if (file.size > this.maxFileSize) {\r\n            this.showFileRelatedInfo(element.id, 'File ' + file.name + ' is to large. Files cannot be larger then 10MB. You need to make it smaller before submitting your application');\r\n            this.setBase64Input(element.id, '');\r\n            return;\r\n        }\r\n        let reader = new FileReader();\r\n        reader.addEventListener('load', () => {\r\n            this.setBase64Input(element.id, reader.result);\r\n        });\r\n        reader.addEventListener('error', () => {\r\n            this.showFileRelatedInfo(element.id, 'Could not read file ' + file.name + '. Either the file is corrupt or your browser does not allow us to read it');\r\n        });\r\n        reader.readAsDataURL(file);\r\n    }\r\n    setBase64Input(elementId, value) {\r\n        let base64Input = document.getElementById(elementId + '_base64');\r\n        base64Input.value = value;\r\n        let previewElement = document.getElementById(elementId + '_preview');\r\n        if (!previewElement)\r\n            return;\r\n        if (value.indexOf('data:image') != -1) {\r\n            previewElement.innerHTML = '<img src=\"' + base64Input.value + '\" />';\r\n        }\r\n        else {\r\n            previewElement.innerHTML = '';\r\n        }\r\n    }\r\n    showFileRelatedInfo(elementId, text) {\r\n        let fileRelatedInfo = document.getElementById(elementId + '_error');\r\n        if (!fileRelatedInfo)\r\n            return;\r\n        fileRelatedInfo.innerHTML = text;\r\n        fileRelatedInfo.classList.remove('hidden');\r\n    }\r\n    hideFileRelatedInfo(elementId) {\r\n        let fileRelatedInfo = document.getElementById(elementId + '_error');\r\n        if (!fileRelatedInfo)\r\n            return;\r\n        fileRelatedInfo.classList.add('hidden');\r\n    }\r\n    static registerHandler() {\r\n        Handlebars.registerHelper('fileUpload', (id, label) => {\r\n            let fileUpload = new FileUpload(id, label);\r\n            FileUpload.fileUploads.push(fileUpload);\r\n            return fileUpload.render();\r\n        });\r\n    }\r\n}\r\nFileUpload.fileUploads = [];\r\n\n;// CONCATENATED MODULE: ./src/util/FormValidator.ts\n\r\nclass FormValidator {\r\n    constructor(selector) {\r\n        this.selector = selector;\r\n    }\r\n    validateRequiredFields() {\r\n        let inputs = document.querySelectorAll(this.selector + ' input[required], ' + this.selector + ' select[required]');\r\n        for (let i = 0; i < inputs.length; i++) {\r\n            let input = inputs[i];\r\n            if (this.isMissingInputFromUser(input)) {\r\n                let obj = {\r\n                    message: 'You must fill into this field',\r\n                    inputName: input.id,\r\n                    labelText: document.querySelector('label[for=' + input.id + ']').innerHTML,\r\n                    pattern: input.pattern\r\n                };\r\n                this.handle(obj);\r\n                return false;\r\n            }\r\n            if (input.pattern) {\r\n                let pattern = input.pattern;\r\n                let matches = input.value.match(pattern);\r\n                if (matches == null) {\r\n                    let obj = {\r\n                        message: 'This is not valid date format, please use YYYY-MM-DD (year-month-date)',\r\n                        inputName: input.id,\r\n                        labelText: document.querySelector('label[for=' + input.id + ']').innerHTML,\r\n                        pattern: input.pattern\r\n                    };\r\n                    this.handle(obj);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    isMissingInputFromUser(input) {\r\n        return ((input.type == 'checkbox' && !input.checked) || StringHelper.isNullOrEmpty(input.value));\r\n    }\r\n    removeMissingInfo(errorDivId, focusElementId) {\r\n        let element = document.getElementById(errorDivId);\r\n        if (!element)\r\n            return;\r\n        element.style.display = 'none';\r\n        if (!focusElementId)\r\n            return;\r\n        let focusElement = document.getElementById(focusElementId);\r\n        if (focusElement) {\r\n            focusElement.removeAttribute('aria-invalid');\r\n        }\r\n    }\r\n    setMissingInfo(errorDivId, text, focusElementId) {\r\n        var _a, _b;\r\n        let element = document.getElementById(errorDivId);\r\n        if (!element)\r\n            return;\r\n        element.innerHTML = text;\r\n        if (text == '') {\r\n            element.style.display = 'none';\r\n        }\r\n        else {\r\n            element.style.display = 'block';\r\n            if (focusElementId) {\r\n                (_a = document.getElementById(focusElementId)) === null || _a === void 0 ? void 0 : _a.focus();\r\n                (_b = document.getElementById(focusElementId)) === null || _b === void 0 ? void 0 : _b.setAttribute('aria-invalid', 'true');\r\n            }\r\n        }\r\n    }\r\n    handle(obj) {\r\n        let input = document.getElementById(obj.inputName);\r\n        if (!input)\r\n            return;\r\n        let inputError = input.parentElement.querySelector('.input_error');\r\n        if (inputError) {\r\n            inputError.scrollIntoView({ block: 'center' });\r\n            return;\r\n        }\r\n        input.setAttribute('aria-invalid', 'true');\r\n        input.insertAdjacentHTML(\"beforebegin\", '<div class=\"input_error\" style=\"display: block\" id=\"input_error_' + obj.inputName + '\">' + obj.message + '</div>');\r\n        input.focus();\r\n        if (obj.pattern) {\r\n            input.setAttribute('pattern', obj.pattern);\r\n        }\r\n        input.addEventListener('blur', (evt) => {\r\n            evt.preventDefault();\r\n            setTimeout(() => {\r\n                let input = evt.target;\r\n                let pattern = input.getAttribute('pattern');\r\n                if ((pattern && input.value.match(pattern)) || (input.required && input.value) || input.checked) {\r\n                    input.removeAttribute('aria-invalid');\r\n                    let errorMessage = document.getElementById('input_error_' + obj.inputName);\r\n                    if (errorMessage)\r\n                        errorMessage.remove();\r\n                }\r\n            }, 800);\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycActionRequired.ts\nvar KycActionRequired_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass KycActionRequired {\r\n    constructor(executeTradeButton) {\r\n        this.modal = new Modal();\r\n        this.templates = new Map();\r\n        this.executeTradeButton = executeTradeButton;\r\n        this.templates.set('WeDontKnowWhyHtml', WeDontKnowWhy);\r\n        this.templates.set('ADDRESS_VERIFICATION', ADDRESS_VERIFICATION);\r\n        this.templates.set('AFFILIATED', AFFILIATED);\r\n        this.templates.set('CONTROL_PERSON', CONTROL_PERSON);\r\n        this.templates.set('COUNTRY_NOT_SUPPORTED', COUNTRY_NOT_SUPPORTED);\r\n        this.templates.set('DATE_OF_BIRTH', DATE_OF_BIRTH);\r\n        this.templates.set('FAMILY_MEMBER_PEP', FAMILY_MEMBER_PEP);\r\n        this.templates.set('IDENTITY_VERIFICATION', IDENTITY_VERIFICATION);\r\n        this.templates.set('INVALID_IDENTITY_PASSPORT', INVALID_IDENTITY_PASSPORT);\r\n        this.templates.set('PEP', PEP);\r\n        this.templates.set('SELFIE_VERIFICATION', SELFIE_VERIFICATION);\r\n        this.templates.set('TAX_IDENTIFICATION', TAX_IDENTIFICATION);\r\n        this.templates.set('VISA_TYPE_OTHER', VISA_TYPE_OTHER);\r\n        this.templates.set('W8BEN_CORRECTION', W8BEN_CORRECTION);\r\n        FileUpload.registerHandler();\r\n    }\r\n    show() {\r\n        return KycActionRequired_awaiter(this, void 0, void 0, function* () {\r\n            let userService = new UserService(Moralis);\r\n            let kycResult = yield userService.kycActionRequired();\r\n            if (!kycResult)\r\n                return;\r\n            let kycInfo = this.getKycMessages(kycResult.messages);\r\n            let template = Handlebars.compile(Kyc_KycActionRequired);\r\n            let content = template({\r\n                json: JSON.stringify(kycResult),\r\n                KycInfo: kycInfo,\r\n                Other: kycResult.additional_information,\r\n                SubmitData: kycInfo.indexOf('<input') != -1\r\n            });\r\n            this.modal.showModal('Action required', content, false, () => {\r\n            }, false);\r\n            let kycActionRequiredForm = document.getElementById('kycActionRequiredForm');\r\n            kycActionRequiredForm === null || kycActionRequiredForm === void 0 ? void 0 : kycActionRequiredForm.addEventListener('submit', (evt) => KycActionRequired_awaiter(this, void 0, void 0, function* () {\r\n                evt.preventDefault();\r\n                this.hideError();\r\n                let submitBtn = document.getElementById('kycActionRequiredSubmit');\r\n                LoadingHelper.setLoading(submitBtn);\r\n                let formValidator = new FormValidator('#kycActionRequiredForm');\r\n                if (!formValidator.validateRequiredFields())\r\n                    return;\r\n                let params = FormHelper.getParams('#kycActionRequiredForm');\r\n                let kycService = new KYCService(Moralis);\r\n                yield kycService.updateDocuments(params)\r\n                    .then(() => {\r\n                    let kycActionRequiredDiv = document.getElementById('kycActionRequiredDiv');\r\n                    kycActionRequiredDiv === null || kycActionRequiredDiv === void 0 ? void 0 : kycActionRequiredDiv.classList.add('hidden');\r\n                    let kycActionRequiredSubmittedDiv = document.getElementById('kycActionRequiredSubmittedDiv');\r\n                    kycActionRequiredSubmittedDiv === null || kycActionRequiredSubmittedDiv === void 0 ? void 0 : kycActionRequiredSubmittedDiv.classList.remove('hidden');\r\n                    this.executeTradeButton.checkKycIsDone();\r\n                    this.executeTradeButton.renderButton();\r\n                })\r\n                    .catch(reason => {\r\n                    this.showError(reason);\r\n                }).finally(() => {\r\n                    LoadingHelper.removeLoading();\r\n                });\r\n            }));\r\n            for (let i = 0; i < FileUpload.fileUploads.length; i++) {\r\n                FileUpload.fileUploads[i].bindEvents();\r\n            }\r\n        });\r\n    }\r\n    getKycMessages(messages) {\r\n        let kycInfo = '';\r\n        for (let i = 0; i < messages.length; i++) {\r\n            let htmlTemplate = this.templates.get(messages[i].key);\r\n            if (!htmlTemplate) {\r\n                //TODO: Here we should to logger, critical that we dont know why\r\n                continue;\r\n            }\r\n            let template = Handlebars.compile(htmlTemplate);\r\n            kycInfo += template({ message: messages[i].message });\r\n        }\r\n        if (kycInfo == '') {\r\n            let html = this.templates.get('WeDontKnowWhyHtml');\r\n            let template = Handlebars.compile(html);\r\n            kycInfo = template({});\r\n        }\r\n        return kycInfo;\r\n    }\r\n    hideError() {\r\n        let kycActionRequiredError = document.getElementById('kycActionRequiredError');\r\n        if (!kycActionRequiredError)\r\n            return;\r\n        kycActionRequiredError.style.display = 'none';\r\n    }\r\n    showError(reason) {\r\n        let kycActionRequiredError = document.getElementById('kycActionRequiredError');\r\n        if (!kycActionRequiredError)\r\n            return;\r\n        kycActionRequiredError.innerHTML = 'Error occurred while saving your documents. Reason:' + reason;\r\n        kycActionRequiredError.style.display = 'block';\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/KYCModal.html\n// Module\nvar KYCModal_code = \"<div id=\\\"kyc_reg\\\">\\r\\n\\r\\n    <form id=\\\"kyc_wizard_form\\\" name=\\\"kyc_wizard_form\\\" novalidate onsubmit=\\\"return false\\\">\\r\\n        {{{KycContactHtml}}}\\r\\n        {{{KycIdentityHtml}}}\\r\\n        {{{KycTrustedContactHtml}}}\\r\\n        {{{KycDisclosureHtml}}}\\r\\n        {{{KycUploadHtml}}}\\r\\n        {{{KycAccountAgreementHtml}}}\\r\\n    </form>\\r\\n</div>\\r\\n\\r\\n<div id=\\\"waiting_for_kyc_reg\\\" class=\\\"hidden\\\">\\r\\n    KYC is being processed. This may take about 4-5 minutes. Window will close when it's done.\\r\\n    <br/><br/>\\r\\n    You can close the window, we will email you when KYC is finished.\\r\\n\\r\\n    <progress></progress>\\r\\n\\r\\n</div>\";\n// Exports\n/* harmony default export */ const KYCModal = (KYCModal_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycContact.html\n// Module\nvar KycContact_code = \"<fieldset class=\\\"kycContact hidden\\\" data-form=\\\"1\\\">\\r\\n    <div class=\\\"explain\\\">\\r\\n        To be able to trade on the stock market, we need to get your information.\\r\\n        This is a requirement from the financial regulators.\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"email_address\\\">Email</label>\\r\\n        <input type=\\\"email\\\" required class=\\\"form-control\\\" id=\\\"email_address\\\" name=\\\"email_address\\\"\\r\\n               placeholder=\\\"name@example.com\\\" autocomplete=\\\"email\\\"\\r\\n               value=\\\"\\\">\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"phone_number\\\">Phone</label>\\r\\n        <input type=\\\"tel\\\" class=\\\"form-control\\\" id=\\\"phone_number\\\" name=\\\"phone_number\\\"\\r\\n               placeholder=\\\"+1-555-666-7788\\\" autocomplete=\\\"tel\\\" value=\\\"\\\">\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"street_address\\\">Permanent Residential Address</label>\\r\\n        <div class=\\\"explain\\\">It must be a physical address, not a PO box.</div>\\r\\n        <input required id=\\\"street_address\\\" name=\\\"street_address\\\"\\r\\n               placeholder=\\\"20 N San Mateo Dr\\\" value=\\\"\\\" autocomplete=\\\"address-line1\\\">\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"unit\\\">Unit / Apt #</label>\\r\\n        <input id=\\\"unit\\\" name=\\\"unit\\\" value=\\\"\\\">\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"city\\\">City</label>\\r\\n        <input id=\\\"city\\\" name=\\\"city\\\" placeholder=\\\"Pawnee\\\"\\r\\n               value=\\\"\\\" autocomplete=\\\"address-level2\\\">\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"postal_code\\\">Postal code</label>\\r\\n        <input required id=\\\"postal_code\\\" autocomplete=\\\"postal-code\\\" name=\\\"postal_code\\\"\\r\\n               placeholder=\\\"94401\\\"\\r\\n               value=\\\"\\\">\\r\\n    </div>\\r\\n    <div id=\\\"state_div\\\">\\r\\n        <label for=\\\"state\\\">State (2 letters)</label>\\r\\n        <input maxlength=\\\"2\\\" id=\\\"state\\\" name=\\\"state\\\" placeholder=\\\"NY\\\"\\r\\n               value=\\\"\\\" autocomplete=\\\"address-level1\\\">\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"country_of_tax_residence\\\">Country of tax residence</label>\\r\\n        {{#if edit}}\\r\\n        <input name=\\\"country_of_tax_residence\\\" readonly id=\\\"country_of_tax_residence\\\"/>\\r\\n        {{/if}}\\r\\n        {{#unless edit}}\\r\\n        <select required id=\\\"country_of_tax_residence\\\" name=\\\"country_of_tax_residence\\\" autocomplete=\\\"country\\\">\\r\\n            <option value=\\\"\\\"></option>\\r\\n            {{#each countries}}\\r\\n            <option value=\\\"{{code}}\\\">{{name}}</option>\\r\\n            {{/each}}\\r\\n        </select>\\r\\n        {{/unless}}\\r\\n    </div>\\r\\n    <div class=\\\"buttons\\\">\\r\\n        <button type=\\\"button\\\" id=\\\"contact_next\\\">Next: Identity</button>\\r\\n    </div>\\r\\n</fieldset>\\r\\n\";\n// Exports\n/* harmony default export */ const Kyc_KycContact = (KycContact_code);\n;// CONCATENATED MODULE: ./src/errors/cloud/KycValidatorError.ts\nvar KycValidatorError_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\nclass KycValidatorError {\r\n    constructor(error, kycForm) {\r\n        var _a, _b;\r\n        this.validValues = '';\r\n        this.inputName = '';\r\n        this.labelText = '';\r\n        this.pattern = '';\r\n        let obj = {};\r\n        try {\r\n            if (!error.inputName) {\r\n                obj = JSON.parse(error);\r\n            }\r\n            else {\r\n                obj = error;\r\n            }\r\n            this.message = (_a = obj.message) === null || _a === void 0 ? void 0 : _a.replace(/_/g, ' ');\r\n            this.validValues = (_b = obj.validValues) === null || _b === void 0 ? void 0 : _b.replace(/_/g, ' ');\r\n            this.inputName = obj.inputName;\r\n            this.labelText = obj.labelText;\r\n            this.pattern = obj.pattern;\r\n            this.onshow = obj.onshow;\r\n        }\r\n        catch (e) {\r\n            this.message = error.messsage;\r\n        }\r\n        this.kycForm = kycForm;\r\n    }\r\n    handle() {\r\n        if (StringHelper.isNullOrEmpty(this.inputName)) {\r\n            let activeFieldset = document.querySelector(this.kycForm.activeFieldsetSelector);\r\n            let inputError = activeFieldset.querySelector('.input_error');\r\n            if (inputError) {\r\n                if (this.validValues) {\r\n                    inputError.innerHTML = this.validValues.toString();\r\n                }\r\n                else {\r\n                    if (this.message && this.message.indexOf('Invalid function') != -1 || this.message.indexOf('Unable to connect to the Parse API') != -1) {\r\n                        inputError.innerHTML = 'We just deployed new version of our website. This can cause interruption. Please wait 30 seconds and submit again';\r\n                    }\r\n                    else {\r\n                        inputError.innerHTML = this.message;\r\n                    }\r\n                }\r\n                inputError.style.display = 'block';\r\n                inputError.scrollIntoView();\r\n            }\r\n            return;\r\n        }\r\n        let input = document.getElementById(this.inputName);\r\n        if (!input)\r\n            return;\r\n        let inputError = input.parentElement.querySelector('.input_error');\r\n        if (inputError) {\r\n            inputError.scrollIntoView({ block: 'center' });\r\n            return;\r\n        }\r\n        input.setAttribute('aria-invalid', 'true');\r\n        let errorInput = '<div class=\"input_error\" style=\"display: block\" id=\"input_error_' + this.inputName + '\">' + this.message + '</div>';\r\n        if (input.clientWidth < 300) {\r\n            let div = this.getDivToDisplayErrorMessage(input);\r\n            div.insertAdjacentHTML(\"beforebegin\", errorInput);\r\n        }\r\n        else {\r\n            input.insertAdjacentHTML(\"beforebegin\", errorInput);\r\n        }\r\n        input.focus();\r\n        if (this.pattern) {\r\n            input.setAttribute('pattern', this.pattern);\r\n        }\r\n        input.addEventListener('blur', (evt) => {\r\n            evt.preventDefault();\r\n            setTimeout(() => {\r\n                let input = evt.target;\r\n                let pattern = input.getAttribute('pattern');\r\n                if ((pattern && input.value.match(pattern)) || (input.type != 'checkbox' && input.type != 'radio' && input.required && input.value) || input.checked) {\r\n                    input.removeAttribute('aria-invalid');\r\n                    let errorMessage = document.getElementById('input_error_' + this.inputName);\r\n                    if (errorMessage)\r\n                        errorMessage.remove();\r\n                }\r\n            }, 800);\r\n        });\r\n        let fieldsetElement = input.closest('fieldset[data-form=\"1\"]');\r\n        if (fieldsetElement) {\r\n            let className = fieldsetElement.className.replace('hidden', '').trim();\r\n            this.kycForm.show(className);\r\n            input.scrollIntoView(false);\r\n        }\r\n        if (this.onshow) {\r\n            let link = document.getElementById(this.onshow.id);\r\n            if (!link)\r\n                return;\r\n            link.addEventListener('click', (evt) => KycValidatorError_awaiter(this, void 0, void 0, function* () {\r\n                evt.preventDefault();\r\n                yield Moralis.Cloud.run(this.onshow.functionName, this.onshow.params);\r\n                document.getElementById('input_error_' + this.inputName).innerHTML = 'Email has been sent to ' + this.onshow.params.email;\r\n            }));\r\n        }\r\n    }\r\n    getDivToDisplayErrorMessage(input, counter = 1) {\r\n        let div = input.parentElement.closest('div');\r\n        if (!div)\r\n            return input;\r\n        if (div.clientWidth > 300 || counter > 5) {\r\n            return div;\r\n        }\r\n        return this.getDivToDisplayErrorMessage(div, ++counter);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycBase.ts\n\r\n\r\n\r\nclass KycBase {\r\n    constructor(kycForm) {\r\n        this.kycForm = kycForm;\r\n        FileUpload.registerHandler();\r\n    }\r\n    showFieldset(selector, header) {\r\n        var _a;\r\n        this.hideFieldsets();\r\n        (_a = document.querySelector(selector)) === null || _a === void 0 ? void 0 : _a.classList.remove('hidden');\r\n        document.querySelector('#liminal_market_modal_div > article > header > span').innerHTML = header;\r\n        document.querySelector('#liminal_market_modal_div > article').scrollTop = 0;\r\n        this.kycForm.activeFieldsetSelector = selector;\r\n    }\r\n    showRequiredMarker() {\r\n        let inputs = document.querySelectorAll('input, select');\r\n        for (let i = 0; i < inputs.length; i++) {\r\n            let input = inputs[i];\r\n            if (!input.id)\r\n                continue;\r\n            let label = document.querySelector('label[for=' + input.id + ']');\r\n            if (!label)\r\n                continue;\r\n            if (input.required) {\r\n                if (label.innerHTML.indexOf('*') == -1) {\r\n                    label.innerHTML += '*';\r\n                }\r\n            }\r\n            else {\r\n                if (label.innerHTML.indexOf('*') != -1) {\r\n                    label.innerHTML = label.innerHTML.replace('*', '');\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setRequired(inputId) {\r\n        var _a;\r\n        (_a = document.getElementById(inputId)) === null || _a === void 0 ? void 0 : _a.setAttribute('required', 'required');\r\n    }\r\n    removeRequired(inputId) {\r\n        var _a;\r\n        (_a = document.getElementById(inputId)) === null || _a === void 0 ? void 0 : _a.removeAttribute('required');\r\n    }\r\n    bind(selector, eventName, action) {\r\n        let elements = document.querySelectorAll(selector);\r\n        for (let i = 0; i < elements.length; i++) {\r\n            elements[i].addEventListener(eventName, (evt) => {\r\n                action(evt);\r\n            });\r\n        }\r\n    }\r\n    bindFileUploads() {\r\n        for (let i = 0; i < FileUpload.fileUploads.length; i++) {\r\n            FileUpload.fileUploads[i].bindEvents();\r\n        }\r\n    }\r\n    hideFieldsets() {\r\n        let fieldsets = document.querySelectorAll('#kyc_wizard_form > fieldset');\r\n        for (let i = 0; i < fieldsets.length; i++) {\r\n            fieldsets[i].classList.add('hidden');\r\n        }\r\n    }\r\n    validateRequiredFields(selector) {\r\n        let inputs = document.querySelectorAll(selector + ' input[required], ' + selector + ' select[required]');\r\n        for (let i = 0; i < inputs.length; i++) {\r\n            let input = inputs[i];\r\n            if (this.isMissingInputFromUser(input)) {\r\n                let obj = {\r\n                    message: 'You must fill into this field',\r\n                    inputName: input.id,\r\n                    labelText: document.querySelector('label[for=' + input.id + ']').innerHTML,\r\n                    pattern: input.pattern\r\n                };\r\n                let kycValidationError = new KycValidatorError(obj, this.kycForm);\r\n                kycValidationError.handle();\r\n                return false;\r\n            }\r\n            if (input.pattern) {\r\n                let pattern = input.pattern;\r\n                let matches = input.value.match(pattern);\r\n                if (matches == null) {\r\n                    let obj = {\r\n                        message: 'This is not valid date format, please use YYYY-MM-DD (year-month-date)',\r\n                        inputName: input.id,\r\n                        labelText: document.querySelector('label[for=' + input.id + ']').innerHTML,\r\n                        pattern: input.pattern\r\n                    };\r\n                    let kycValidationError = new KycValidatorError(obj, this.kycForm);\r\n                    kycValidationError.handle();\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    showElement(elementId) {\r\n        var _a;\r\n        (_a = document.getElementById(elementId)) === null || _a === void 0 ? void 0 : _a.classList.remove('hidden');\r\n    }\r\n    hideElement(elementId) {\r\n        var _a;\r\n        (_a = document.getElementById(elementId)) === null || _a === void 0 ? void 0 : _a.classList.add('hidden');\r\n    }\r\n    setLabel(elementId, text) {\r\n        let element = document.getElementById('tax_id_label');\r\n        if (!element)\r\n            return;\r\n        element.innerHTML = text;\r\n    }\r\n    isMissingInputFromUser(input) {\r\n        return ((input.type == 'checkbox' && !input.checked) || StringHelper.isNullOrEmpty(input.value));\r\n    }\r\n    removeMissingInfo(errorDivId, focusElementId) {\r\n        let element = document.getElementById(errorDivId);\r\n        if (!element)\r\n            return;\r\n        element.style.display = 'none';\r\n        if (!focusElementId)\r\n            return;\r\n        let focusElement = document.getElementById(focusElementId);\r\n        if (focusElement) {\r\n            focusElement.removeAttribute('aria-invalid');\r\n        }\r\n    }\r\n    setMissingInfo(errorDivId, text, focusElementId) {\r\n        var _a, _b;\r\n        let element = document.getElementById(errorDivId);\r\n        if (!element)\r\n            return;\r\n        element.innerHTML = text;\r\n        if (text == '') {\r\n            element.style.display = 'none';\r\n        }\r\n        else {\r\n            element.style.display = 'block';\r\n            if (focusElementId) {\r\n                (_a = document.getElementById(focusElementId)) === null || _a === void 0 ? void 0 : _a.focus();\r\n                (_b = document.getElementById(focusElementId)) === null || _b === void 0 ? void 0 : _b.setAttribute('aria-invalid', 'true');\r\n            }\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycContact.ts\n\r\n\r\n\r\nclass KycContact extends KycBase {\r\n    constructor(kycForm) {\r\n        super(kycForm);\r\n        this.usTaxResidence = false;\r\n    }\r\n    render(edit = false) {\r\n        let template = Handlebars.compile(Kyc_KycContact);\r\n        return template({ edit: edit, countries: CountryHelper.Countries });\r\n    }\r\n    show() {\r\n        this.showFieldset('.kycContact', 'Contact information');\r\n    }\r\n    bindEvents() {\r\n        this.bind('#country_of_tax_residence', 'change', (evt) => {\r\n            var _a, _b;\r\n            let input = evt.target;\r\n            this.usTaxResidence = (input.value.toUpperCase() == 'USA');\r\n            if (this.usTaxResidence) {\r\n                (_a = document.getElementById('state_div')) === null || _a === void 0 ? void 0 : _a.classList.remove('hidden');\r\n                this.kycForm.setSteps(5);\r\n                this.setRequired('state');\r\n            }\r\n            else {\r\n                this.kycForm.setSteps(6);\r\n                this.removeRequired('state');\r\n                (_b = document.getElementById('state_div')) === null || _b === void 0 ? void 0 : _b.classList.add('hidden');\r\n            }\r\n        });\r\n        let showIdentityButton = document.getElementById('contact_next');\r\n        if (showIdentityButton) {\r\n            showIdentityButton.addEventListener('click', (evt) => {\r\n                if (!this.validateRequiredFields('.kycContact'))\r\n                    return;\r\n                this.kycForm.kycIdentity.show();\r\n            });\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycIdentity.html\n// Module\nvar KycIdentity_code = \"<fieldset class=\\\"kycIdentity hidden\\\" data-form=\\\"1\\\">\\r\\n    <div>\\r\\n        <label for=\\\"given_name\\\">Legal First name</label>\\r\\n        <input required id=\\\"given_name\\\" name=\\\"given_name\\\"\\r\\n               placeholder=\\\"Ron\\\"\\r\\n               value=\\\"\\\" autocomplete=\\\"given-name\\\">\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"middle_name\\\">Legal Middle name</label>\\r\\n        <input id=\\\"middle_name\\\" name=\\\"middle_name\\\"\\r\\n               placeholder=\\\"\\\"\\r\\n               value=\\\"\\\" autocomplete=\\\"additional-name\\\">\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"family_name\\\">Legal Last name</label>\\r\\n        <input required id=\\\"family_name\\\" name=\\\"family_name\\\"\\r\\n               placeholder=\\\"Swanson\\\"\\r\\n               value=\\\"\\\" autocomplete=\\\"family-name\\\">\\r\\n    </div>\\r\\n    {{#unless edit}}\\r\\n    <div>\\r\\n        <label for=\\\"date_of_birth\\\">Date of birth</label>\\r\\n        <input type=\\\"date\\\" required id=\\\"date_of_birth\\\" name=\\\"date_of_birth\\\"\\r\\n               placeholder=\\\"1978-11-24\\\" pattern=\\\"\\\\d{4}-\\\\d{2}-\\\\d{2}\\\" value=\\\"\\\" autocomplete=\\\"bday\\\">\\r\\n    </div>\\r\\n\\r\\n    <div id=\\\"citizen_of_usa_question\\\" class=\\\"hidden\\\">\\r\\n        <label for=\\\"citizen_yes\\\">Are you a citizen of the United States?</label>\\r\\n        <fieldset>\\r\\n            <label>\\r\\n                <input type=\\\"radio\\\" id=\\\"citizen_yes\\\"\\r\\n                       name=\\\"citizen\\\" value=\\\"1\\\"> Yes\\r\\n            </label>\\r\\n            <label>\\r\\n                <input type=\\\"radio\\\" id=\\\"citizen_no\\\"\\r\\n                       name=\\\"citizen\\\" value=\\\"0\\\"> No\\r\\n            </label>\\r\\n            <fieldset id=\\\"citizen_no_type_options\\\" class=\\\"hidden\\\">\\r\\n                <label>\\r\\n                    <input type=\\\"radio\\\" name=\\\"permanent_resident\\\" id=\\\"citizen_no_type_options_1\\\" value=\\\"1\\\"/> Green Card\\r\\n                    / Permanent Resident\\r\\n                </label>\\r\\n                <label><input type=\\\"radio\\\" name=\\\"permanent_resident\\\" id=\\\"citizen_no_type_options_2\\\" value=\\\"0\\\"/>\\r\\n                    Visa</label>\\r\\n            </fieldset>\\r\\n        </fieldset>\\r\\n    </div>\\r\\n    <div id=\\\"tax_id_type_options\\\">\\r\\n        <label for=\\\"tax_id_type\\\">Tax Id Type</label>\\r\\n        <select required id=\\\"tax_id_type\\\" name=\\\"tax_id_type\\\" placeholder=\\\"USA_SSN\\\">\\r\\n            <option value=\\\"USA_SSN\\\"></option>\\r\\n            <option value=\\\"ARG_AR_CUIT\\\">Argentina CUIT</option>\\r\\n            <option value=\\\"AUS_TFN\\\">Australian Tax File Number</option>\\r\\n            <option value=\\\"AUS_ABN\\\">Australian Business Number</option>\\r\\n            <option value=\\\"BOL_NIT\\\">Bolivia NIT</option>\\r\\n            <option value=\\\"BRA_CPF\\\">Brazil CPF</option>\\r\\n            <option value=\\\"CHL_RUT\\\">Chile RUT</option>\\r\\n            <option value=\\\"COL_NIT\\\">Colombia NIT</option>\\r\\n            <option value=\\\"CRI_NITE\\\">Costa Rica NITE</option>\\r\\n            <option value=\\\"DEU_TAX_ID\\\">Germany Tax ID (Identifikationsnummer)</option>\\r\\n            <option value=\\\"DOM_RNC\\\">Dominican Republic RNC</option>\\r\\n            <option value=\\\"ECU_RUC\\\">Ecuador RUC</option>\\r\\n            <option value=\\\"FRA_SPI\\\">France SPI (Reference Tax Number)</option>\\r\\n            <option value=\\\"GBR_UTR\\\">UK UTR (Unique Taxpayer Reference)</option>\\r\\n            <option value=\\\"GBR_NINO\\\">UK NINO (National Insurance Number)</option>\\r\\n            <option value=\\\"GTM_NIT\\\">Guatemala NIT</option>\\r\\n            <option value=\\\"HND_RTN\\\">Honduras RTN</option>\\r\\n            <option value=\\\"HUN_TIN\\\">Hungary TIN Number</option>\\r\\n            <option value=\\\"IDN_KTP\\\">Indonesia KTP</option>\\r\\n            <option value=\\\"IND_PAN\\\">India PAN Number</option>\\r\\n            <option value=\\\"ISR_TAX_ID\\\">Israel Tax ID (Teudat Zehut)</option>\\r\\n            <option value=\\\"ITA_TAX_ID\\\">Italy Tax ID (Codice Fiscale)</option>\\r\\n            <option value=\\\"JPN_TAX_ID\\\">Japan Tax ID (Koijin Bango)</option>\\r\\n            <option value=\\\"MEX_RFC\\\">Mexico RFC</option>\\r\\n            <option value=\\\"NIC_RUC\\\">Nicaragua RUC</option>\\r\\n            <option value=\\\"NLD_TIN\\\">Netherlands TIN Number</option>\\r\\n            <option value=\\\"PAN_RUC\\\">Panama RUC</option>\\r\\n            <option value=\\\"PER_RUC\\\">Peru RUC</option>\\r\\n            <option value=\\\"PRY_RUC\\\">Paraguay RUC</option>\\r\\n            <option value=\\\"SGP_NRIC\\\">Singapore NRIC</option>\\r\\n            <option value=\\\"SGP_FIN\\\">Singapore FIN</option>\\r\\n            <option value=\\\"SGP_ASGD\\\">Singapore ASGD</option>\\r\\n            <option value=\\\"SGP_ITR\\\">Singapore ITR</option>\\r\\n            <option value=\\\"SLV_NIT\\\">El Salvador NIT</option>\\r\\n            <option value=\\\"SWE_TAX_ID\\\">Sweden Tax ID (Personnummer)</option>\\r\\n            <option value=\\\"URY_RUT\\\">Uruguay RUT</option>\\r\\n            <option value=\\\"VEN_RIF\\\">Venezuela RIF</option>\\r\\n            <option value=\\\"NOT_SPECIFIED\\\">Other Tax IDs</option>\\r\\n        </select>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label id=\\\"tax_id_label\\\" for=\\\"tax_id\\\">Tax Id (SSN)</label>\\r\\n        <input required id=\\\"tax_id\\\" name=\\\"tax_id\\\"\\r\\n               placeholder=\\\"666-55-4321\\\"\\r\\n               value=\\\"\\\">\\r\\n    </div>\\r\\n    <div id=\\\"country_of_birth_option\\\">\\r\\n        <label for=\\\"country_of_birth\\\">Country of birth</label>\\r\\n        <select id=\\\"country_of_birth\\\" name=\\\"country_of_birth\\\">\\r\\n            {{#each countries}}\\r\\n            <option value=\\\"{{code}}\\\">{{name}}</option>\\r\\n            {{/each}}\\r\\n        </select>\\r\\n    </div>\\r\\n    <div id=\\\"country_of_citizenship_option\\\">\\r\\n        <label for=\\\"country_of_citizenship\\\">Country of citizenship</label>\\r\\n        <select required id=\\\"country_of_citizenship\\\" name=\\\"country_of_citizenship\\\">\\r\\n            <option value=\\\"\\\"></option>\\r\\n            {{#each countries}}\\r\\n            <option value=\\\"{{code}}\\\">{{name}}</option>\\r\\n            {{/each}}\\r\\n        </select>\\r\\n    </div>\\r\\n    <div id=\\\"visa_type_option\\\" class=\\\"hidden\\\">\\r\\n        <div>\\r\\n            <label for=\\\"visa_type\\\">Visa type - <a\\r\\n                    href=\\\"https://travel.state.gov/content/travel/en/us-visas/visa-information-resources/all-visa-categories.html\\\"\\r\\n                    target=\\\"_blank\\\">Visa\\r\\n                information</a></label>\\r\\n            <select id=\\\"visa_type\\\" name=\\\"visa_type\\\">\\r\\n                <option value=\\\"\\\"></option>\\r\\n                <option value=\\\"B1\\\" selected>USA Visa Category B-1</option>\\r\\n                <option value=\\\"B2\\\">USA Visa Category B-2</option>\\r\\n                <option value=\\\"DACA\\\">USA Visa Category DACA</option>\\r\\n                <option value=\\\"E1\\\">USA Visa Category E-1</option>\\r\\n                <option value=\\\"E2\\\">USA Visa Category E-2</option>\\r\\n                <option value=\\\"E3\\\">USA Visa Category E-3</option>\\r\\n                <option value=\\\"F1\\\">USA Visa Category F-1</option>\\r\\n                <option value=\\\"G4\\\">USA Visa Category G-4</option>\\r\\n                <option value=\\\"H1B\\\">USA Visa Category H-1B</option>\\r\\n                <option value=\\\"J1\\\">USA Visa Category J-1</option>\\r\\n                <option value=\\\"L1\\\">USA Visa Category L-1</option>\\r\\n                <option value=\\\"OTHER\\\">Any other USA Visa Category</option>\\r\\n                <option value=\\\"O1\\\">USA Visa Category O-1</option>\\r\\n                <option value=\\\"TN1\\\">USA Visa Category TN-1</option>\\r\\n            </select>\\r\\n        </div>\\r\\n        <div id=\\\"visa_expiration_date_option\\\">\\r\\n            <label for=\\\"visa_expiration_date\\\">Visa expiration date</label>\\r\\n            <input type=\\\"date\\\" id=\\\"visa_expiration_date\\\"\\r\\n                   name=\\\"visa_expiration_date\\\" placeholder=\\\"2028-05-01\\\" value=\\\"\\\">\\r\\n        </div>\\r\\n        <div id=\\\"date_of_departure_from_usa_option\\\">\\r\\n            <label for=\\\"date_of_departure_from_usa\\\">Date of departure from USA</label>\\r\\n            <input type=\\\"date\\\" id=\\\"date_of_departure_from_usa\\\"\\r\\n                   name=\\\"date_of_departure_from_usa\\\" placeholder=\\\"2028-05-01\\\" value=\\\"\\\">\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"annual_income\\\">Annual Household Income</label>\\r\\n        <div class=\\\"explain\\\">\\r\\n            Annual household income includes income from sources such as employment, alimony, social security,\\r\\n            investment income, etc.\\r\\n        </div>\\r\\n        <select name=\\\"annual_income\\\" id=\\\"annual_income\\\">\\r\\n            <option value=\\\"\\\"></option>\\r\\n            <option value=\\\"1\\\">0 - $20,000</option>\\r\\n            <option value=\\\"2\\\">$20,000 - $49,999</option>\\r\\n            <option value=\\\"3\\\">$50,000 - $99,999</option>\\r\\n            <option value=\\\"4\\\">$100,000 - $499,999</option>\\r\\n            <option value=\\\"5\\\">$500,000 - $999,999</option>\\r\\n            <option value=\\\"6\\\">$1,000,000 - $9,999,999</option>\\r\\n        </select>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"liquid_net_worth\\\">Liquid Assets</label>\\r\\n        <div class=\\\"explain\\\">Liquid assets is your net worth minus assets that cannot be\\r\\n            converted quickly and easily into cash, such as real estate, business equity,\\r\\n            personal property and automobiles, expected inheritances, assets earmarked for\\r\\n            other purposes, and investments or accounts subject to substantial penalties\\r\\n            if they were sold or if assets were withdrawn from them.\\r\\n        </div>\\r\\n        <select name=\\\"liquid_net_worth\\\" required id=\\\"liquid_net_worth\\\">\\r\\n            <option value=\\\"\\\"></option>\\r\\n            <option value=\\\"1\\\">0 - $20,000</option>\\r\\n            <option value=\\\"2\\\">$20,000 - $49,999</option>\\r\\n            <option value=\\\"3\\\">$50,000 - $99,999</option>\\r\\n            <option value=\\\"4\\\">$100,000 - $499,999</option>\\r\\n            <option value=\\\"5\\\">$500,000 - $999,999</option>\\r\\n            <option value=\\\"1\\\">$1,000,000 - $9,999,999</option>\\r\\n        </select>\\r\\n    </div>\\r\\n\\r\\n    <div>\\r\\n        <label for=\\\"funding_source\\\">Funding source</label>\\r\\n        <select required id=\\\"funding_source\\\" name=\\\"funding_source\\\"\\r\\n                multiple size=\\\"4\\\" aria-label=\\\"size 3 select\\\">\\r\\n            <option value=\\\"employment_income\\\">Employment income</option>\\r\\n            <option value=\\\"investments\\\">Investments</option>\\r\\n            <option value=\\\"inheritance\\\">Inheritance</option>\\r\\n            <option value=\\\"business_income\\\">Business income</option>\\r\\n            <option value=\\\"savings\\\">Savings</option>\\r\\n            <option value=\\\"family\\\">Family</option>\\r\\n        </select>\\r\\n    </div>\\r\\n    {{/unless}}\\r\\n    <div class=\\\"grid buttons\\\">\\r\\n        <button type=\\\"button\\\" id=\\\"identity_prev\\\">Previous: Contact</button>\\r\\n        <button type=\\\"button\\\" id=\\\"identity_next\\\">Next: Trusted contacts</button>\\r\\n    </div>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const Kyc_KycIdentity = (KycIdentity_code);\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycIdentity.ts\n\r\n\r\n\r\n\r\nclass KycIdentity extends KycBase {\r\n    constructor(kycForm) {\r\n        super(kycForm);\r\n        this.edit = false;\r\n    }\r\n    render(edit = false) {\r\n        this.edit = edit;\r\n        let template = Handlebars.compile(Kyc_KycIdentity);\r\n        return template({ edit: edit, countries: CountryHelper.Countries });\r\n    }\r\n    show() {\r\n        if (this.kycForm.kycContact.usTaxResidence) {\r\n            this.showElement('citizen_of_usa_question');\r\n            this.hideElement('tax_id_type_options');\r\n            this.setLabel('tax_id_label', 'SSN');\r\n        }\r\n        else {\r\n            this.hideElement('citizen_of_usa_question');\r\n            this.setLabel('tax_id_label', 'National Tax Id (SSN)');\r\n            this.showElement('tax_id_type_options');\r\n        }\r\n        this.showFieldset('.kycIdentity', 'Identity');\r\n        this.showElement('country_of_citizenship_option');\r\n        let country_of_citizenship = document.getElementById('country_of_citizenship');\r\n        if (country_of_citizenship) {\r\n            country_of_citizenship.options[1].disabled = false;\r\n        }\r\n    }\r\n    bindEvents() {\r\n        this.bind('#citizen_yes', 'click', (evt) => {\r\n            let input = evt.target;\r\n            if (input.checked) {\r\n                let taxIdType = document.getElementById('tax_id_type');\r\n                if (taxIdType)\r\n                    taxIdType.value = 'USA_SSN';\r\n                let country_of_citizenship = document.getElementById('country_of_citizenship');\r\n                country_of_citizenship.options[1].disabled = false;\r\n                country_of_citizenship.value = 'USA';\r\n                this.hideElement('citizen_no_type_options');\r\n                this.hideElement('visa_type_option');\r\n                this.hideElement('country_of_citizenship_option');\r\n                this.removeRequired('country_of_birth');\r\n                this.removeRequired('visa_type');\r\n                this.removeRequired('visa_expiration_date');\r\n                this.removeRequired('date_of_departure_from_usa');\r\n                document.getElementById('tax_id_label').innerHTML = 'SSN';\r\n                this.hideCitizenErrorMessage();\r\n            }\r\n        });\r\n        this.bind('#citizen_no', 'click', (evt) => {\r\n            let input = evt.target;\r\n            if (input.checked) {\r\n                this.showElement('citizen_no_type_options');\r\n                this.showElement('country_of_citizenship_option');\r\n                this.setRequired('country_of_birth');\r\n                document.getElementById('tax_id_label').innerHTML = 'SSN';\r\n                let country_of_citizenship = document.getElementById('country_of_citizenship');\r\n                country_of_citizenship.options[0].selected = true;\r\n                country_of_citizenship.options[1].disabled = true;\r\n                this.hideCitizenErrorMessage();\r\n            }\r\n        });\r\n        this.bind('#citizen_no_type_options_1', 'click', (evt) => {\r\n            let input = evt.target;\r\n            if (input.checked) {\r\n                this.showElement('country_of_citizenship_option');\r\n                this.hideElement('visa_type_option');\r\n                this.setRequired('country_of_birth');\r\n                this.removeRequired('visa_type');\r\n                this.removeRequired('visa_expiration_date');\r\n                this.removeRequired('date_of_departure_from_usa');\r\n            }\r\n        });\r\n        this.bind('#citizen_no_type_options_2', 'click', (evt) => {\r\n            let input = evt.target;\r\n            if (input.checked) {\r\n                this.showElement('visa_type_option');\r\n                this.showElement('country_of_citizenship_option');\r\n                this.setRequired('country_of_birth');\r\n                this.setRequired('country_of_citizenship');\r\n                this.setRequired('visa_type');\r\n                this.setRequired('visa_expiration_date');\r\n                this.setRequired('date_of_departure_from_usa');\r\n            }\r\n        });\r\n        this.bind('#visa_type', 'change', (evt) => {\r\n            let input = evt.target;\r\n            if (input.value == 'B1' || input.value == 'B2') {\r\n                this.showElement('date_of_departure_from_usa_option');\r\n            }\r\n            else {\r\n                this.hideElement('date_of_departure_from_usa_option');\r\n            }\r\n        });\r\n        this.bindButtons();\r\n    }\r\n    hideCitizenErrorMessage() {\r\n        document.getElementById('citizen_yes').removeAttribute('aria-invalid');\r\n        let errorMessage = document.getElementById('input_error_citizen_yes');\r\n        if (errorMessage)\r\n            errorMessage.remove();\r\n    }\r\n    bindButtons() {\r\n        let showContactButton = document.getElementById('identity_prev');\r\n        showContactButton === null || showContactButton === void 0 ? void 0 : showContactButton.addEventListener('click', (evt) => {\r\n            this.kycForm.kycContact.show();\r\n        });\r\n        let showDisclosuresButton = document.getElementById('identity_next');\r\n        showDisclosuresButton === null || showDisclosuresButton === void 0 ? void 0 : showDisclosuresButton.addEventListener('click', (evt) => {\r\n            if (!this.validateInputs())\r\n                return;\r\n            if (!this.validateRequiredFields('.kycIdentity'))\r\n                return;\r\n            this.kycForm.kycTrustedContact.show();\r\n        });\r\n    }\r\n    validateInputs() {\r\n        if (this.edit)\r\n            return true;\r\n        let citizen_yes = document.getElementById('citizen_yes');\r\n        let citizen_no = document.getElementById('citizen_no');\r\n        if (!this.kycForm.kycContact.usTaxResidence) {\r\n            citizen_yes.checked = false;\r\n            citizen_no.checked = false;\r\n            return true;\r\n        }\r\n        if (!citizen_yes.checked && !citizen_no.checked) {\r\n            let obj = {\r\n                message: 'You must select either option',\r\n                inputName: 'citizen_yes',\r\n                labelText: document.querySelector('label[for=citizen_yes]').innerHTML\r\n            };\r\n            let kycValidationError = new KycValidatorError(obj, this.kycForm);\r\n            kycValidationError.handle();\r\n            return false;\r\n        }\r\n        let greenCardOption = document.getElementById('citizen_no_type_options_1');\r\n        let visaOption = document.getElementById('citizen_no_type_options_2');\r\n        if (citizen_no.checked && !greenCardOption.checked && !visaOption.checked) {\r\n            let obj = {\r\n                message: 'You must select either option, \"Green Card / Permanent Resident\" or \"Visa\"',\r\n                inputName: 'citizen_no',\r\n                labelText: ''\r\n            };\r\n            let kycValidationError = new KycValidatorError(obj, this.kycForm);\r\n            kycValidationError.handle();\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycDisclosures.html\n// Module\nvar KycDisclosures_code = \"<fieldset class=\\\"kycDisclosures hidden\\\" data-form=\\\"1\\\">\\r\\n    {{#unless edit}}\\r\\n    <div>\\r\\n        <label for=\\\"employment_status\\\">Employment status</label>\\r\\n        <select id=\\\"employment_status\\\" required name=\\\"employment_status\\\">\\r\\n            <option value=\\\"\\\"></option>\\r\\n            <option value=\\\"employed\\\">Employed</option>\\r\\n            <option value=\\\"unemployed\\\">Unemployed</option>\\r\\n            <option value=\\\"retired\\\">Retired</option>\\r\\n            <option value=\\\"student\\\">Student</option>\\r\\n        </select>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"employer_name\\\">Employer name</label>\\r\\n        <input name=\\\"employer_name\\\" id=\\\"employer_name\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"employer_address\\\">Employer address</label>\\r\\n        <input name=\\\"employer_address\\\" id=\\\"employer_address\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"employment_position\\\">Occupation / Job title</label>\\r\\n        <input name=\\\"employment_position\\\" id=\\\"employment_position\\\" autocomplete=\\\"organization-title\\\"/>\\r\\n    </div>\\r\\n    {{/unless}}\\r\\n    <div class=\\\"disclosure_selections\\\">\\r\\n        Do any of the following apply to you or a member of your immediate family?\\r\\n        <div class=\\\"grid\\\">\\r\\n            <div>\\r\\n                <label for=\\\"is_affiliated_exchange_or_finra\\\">\\r\\n                    <input type=\\\"checkbox\\\" id=\\\"is_affiliated_exchange_or_finra\\\" name=\\\"is_affiliated_exchange_or_finra\\\"\\r\\n                           role=\\\"switch\\\">\\r\\n                </label>\\r\\n            </div>\\r\\n            <div>\\r\\n                Affiliated or work with a US registered broker-dealer or\\r\\n                FINRA.\\r\\n                <small class=\\\"explain\\\">Are you or an immediate family member affiliated with or employed by a stock\\r\\n                    exchange, regulatory body, member firm of an exchange, FINRA or a municipal securities\\r\\n                    broker-dealer?</small>\\r\\n\\r\\n                <div id=\\\"is_affiliated_exchange_or_finra_extra\\\"></div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"grid\\\">\\r\\n            <div>\\r\\n                <label for=\\\"is_control_person\\\">\\r\\n                    <input type=\\\"checkbox\\\" id=\\\"is_control_person\\\" name=\\\"is_control_person\\\" role=\\\"switch\\\">\\r\\n                </label>\\r\\n            </div>\\r\\n            <div>\\r\\n\\r\\n                Senior executive at or a 10% or greater shareholder of a publicly traded company.\\r\\n                <small class=\\\"explain\\\">Are you or an immediate family member an officer or 10% or greater shareholder of\\r\\n                    a publicly traded company, subject to the US Securities Exchange Act 1934?</small>\\r\\n                <div id=\\\"is_control_person_extra\\\"></div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"grid\\\">\\r\\n            <div>\\r\\n                <label for=\\\"is_politically_exposed\\\">\\r\\n                    <input type=\\\"checkbox\\\" id=\\\"is_politically_exposed\\\" name=\\\"is_politically_exposed\\\" role=\\\"switch\\\">\\r\\n                </label>\\r\\n            </div>\\r\\n            <div>\\r\\n                I am a senior political figure.\\r\\n                <small class=\\\"explain\\\">Are you currently or formerly a Politically Exposed Person or Public Official\\r\\n                    (PEP)? <a href=\\\"https://www.google.com/search?q=%E2%80%9CPolitically+Exposed+Person%E2%80%9D+(PEP)\\\"\\r\\n                              target=\\\"_blank\\\">What is PEP?</a> </a></small>\\r\\n                <div id=\\\"is_politically_exposed_extra\\\"></div>\\r\\n            </div>\\r\\n            </label>\\r\\n        </div>\\r\\n        <div class=\\\"grid\\\">\\r\\n            <div>\\r\\n                <label for=\\\"immediate_family_exposed\\\">\\r\\n                    <input type=\\\"checkbox\\\" id=\\\"immediate_family_exposed\\\" name=\\\"immediate_family_exposed\\\" role=\\\"switch\\\">\\r\\n                </label>\\r\\n            </div>\\r\\n            <div>\\r\\n                I am a family member or relative of a senior political figure.\\r\\n                <small class=\\\"explain\\\">Are you an immediate family member currently or formerly a Politically Exposed\\r\\n                    Person or Public Official (PEP)? <a\\r\\n                            href=\\\"https://www.google.com/search?q=%E2%80%9CPolitically+Exposed+Person%E2%80%9D+(PEP)\\\"\\r\\n                            target=\\\"_blank\\\">What is PEP?</a></small>\\r\\n                <div id=\\\"immediate_family_exposed_extra\\\"></div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"grid\\\">\\r\\n            <div>\\r\\n                <label for=\\\"none_above\\\">\\r\\n                    <input type=\\\"checkbox\\\" id=\\\"none_above\\\" name=\\\"none_above\\\" role=\\\"switch\\\"></label>\\r\\n            </div>\\r\\n            <div>\\r\\n                None of the above apply to me or my family.\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"input_error\\\" id=\\\"none_above_error\\\"></div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"grid buttons\\\">\\r\\n        <button type=\\\"button\\\" id=\\\"disclosures_prev\\\">Previous: Trusted contact</button>\\r\\n        <button type=\\\"button\\\" id=\\\"disclosures_next\\\">Next: Agreements</button>\\r\\n    </div>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const Kyc_KycDisclosures = (KycDisclosures_code);\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycAffiliateOrControlled.html\n// Module\nvar KycAffiliateOrControlled_code = \"<fieldset id=\\\"affiliate_or_controlled\\\">\\r\\n    <div>You need to fill in the following information</div>\\r\\n    <div>\\r\\n        <label for=\\\"company_name\\\">Company name</label>\\r\\n        <input name=\\\"company_name\\\" required id=\\\"company_name\\\" autocomplete=\\\"organization\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"company_street_address\\\">Company street address</label>\\r\\n        <input name=\\\"company_street_address\\\" required id=\\\"company_street_address\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"company_city\\\">Company city</label>\\r\\n        <input name=\\\"company_city\\\" required id=\\\"company_city\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"company_state\\\">Company state</label>\\r\\n        <input name=\\\"company_state\\\" required id=\\\"company_state\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"company_country\\\">Company country</label>\\r\\n        <select required id=\\\"company_country\\\" required name=\\\"company_country\\\">\\r\\n            {{#each countries}}\\r\\n            <option value=\\\"{{code}}\\\">{{name}}</option>\\r\\n            {{/each}}\\r\\n        </select>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"company_compliance_email\\\">Company compliance officer email</label>\\r\\n        <input name=\\\"company_compliance_email\\\" required id=\\\"company_compliance_email\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <div class=\\\"explain\\\">\\r\\n            In accordance with applicable FINRA rules, user will need to obtain a letter written\\r\\n            and signed by a compliance officer on company letterhead explicitly granting permission for\\r\\n            the applicant to carry the account and explicitly stating whether or not the firm requires\\r\\n            access to duplicate account statements and/or trade confirmations.\\r\\n\\r\\n            If the firm would like online access your duplicate account statements and/or trade confirmations,\\r\\n            include in the letter the applicant's full name and the following information for the interested\\r\\n            party: First and last name, title, email address, telephone number.\\r\\n\\r\\n        </div>\\r\\n        {{{fileUpload \\\"account_approval_letter\\\" \\\"Account approval letter\\\"}}}\\r\\n\\r\\n    </div>\\r\\n</fieldset>\\r\\n\";\n// Exports\n/* harmony default export */ const Kyc_KycAffiliateOrControlled = (KycAffiliateOrControlled_code);\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycAffiliateOrControlled.ts\n\r\n\r\n\r\nclass KycAffiliateOrControlled extends KycBase {\r\n    constructor(kycForm) {\r\n        super(kycForm);\r\n    }\r\n    render() {\r\n        let kycAffiliateOrControlledTemplate = Handlebars.compile(Kyc_KycAffiliateOrControlled);\r\n        return kycAffiliateOrControlledTemplate({ countries: CountryHelper.Countries });\r\n    }\r\n    bindEvents() {\r\n        this.bindFileUploads();\r\n        let company_country = document.getElementById('company_country');\r\n        company_country === null || company_country === void 0 ? void 0 : company_country.addEventListener('change', (evt) => {\r\n            let select = evt.target;\r\n            if (select.value === 'USA') {\r\n                this.setRequired('company_state');\r\n            }\r\n            else {\r\n                this.removeRequired('company_state');\r\n            }\r\n        });\r\n    }\r\n    validate() {\r\n        let company_name = document.getElementById('company_name');\r\n        if (!company_name)\r\n            return true;\r\n        return this.validateRequiredFields('#affiliate_or_controlled');\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycImmediateFamily.html\n// Module\nvar KycImmediateFamily_code = \"<fieldset id=\\\"immediate_family\\\">\\r\\n    <div>Since you chose that your immediate family member, you need to fill in the following information</div>\\r\\n    <div>\\r\\n        <label for=\\\"disclosure_given_name\\\">Given name of political person</label>\\r\\n        <input name=\\\"disclosure_given_name\\\" id=\\\"disclosure_given_name\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"disclosure_family_name\\\">Family name of political person</label>\\r\\n        <input name=\\\"disclosure_family_name\\\" id=\\\"disclosure_family_name\\\"/>\\r\\n    </div>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const Kyc_KycImmediateFamily = (KycImmediateFamily_code);\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycImmediateFamily.ts\n\r\n\r\nclass KycImmediateFamily extends KycBase {\r\n    constructor(kycForm) {\r\n        super(kycForm);\r\n    }\r\n    render() {\r\n        let kycImmediateFamilyTemplate = Handlebars.compile(Kyc_KycImmediateFamily);\r\n        return kycImmediateFamilyTemplate({});\r\n    }\r\n    bindEvents() {\r\n    }\r\n    validate() {\r\n        let disclosure_given_name = document.getElementById('disclosure_given_name');\r\n        if (!disclosure_given_name)\r\n            return true;\r\n        return this.validateRequiredFields('#immediate_family');\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycDisclosures.ts\n\r\n\r\n\r\n\r\nclass KycDisclosures extends KycBase {\r\n    constructor(kycForm) {\r\n        super(kycForm);\r\n        this.kycAffiliatedOrControlled = new KycAffiliateOrControlled(this.kycForm);\r\n        this.kycImmediateFamily = new KycImmediateFamily(this.kycForm);\r\n    }\r\n    render(edit = false) {\r\n        let template = Handlebars.compile(Kyc_KycDisclosures);\r\n        return template({ edit: edit });\r\n    }\r\n    show() {\r\n        if (this.kycForm.steps == 5) {\r\n            document.getElementById('disclosures_next').innerText = 'Next: Agreements';\r\n        }\r\n        else {\r\n            document.getElementById('disclosures_next').innerText = 'Next: Upload documents';\r\n        }\r\n        this.showFieldset('.kycDisclosures', 'Disclosures');\r\n    }\r\n    bindEvents() {\r\n        let is_affiliated_exchange_or_finra = document.getElementById('is_affiliated_exchange_or_finra');\r\n        is_affiliated_exchange_or_finra === null || is_affiliated_exchange_or_finra === void 0 ? void 0 : is_affiliated_exchange_or_finra.addEventListener('click', (evt) => {\r\n            this.loadAffiliatedOrControlComponent('is_affiliated_exchange_or_finra');\r\n        });\r\n        let is_control_person = document.getElementById('is_control_person');\r\n        is_control_person === null || is_control_person === void 0 ? void 0 : is_control_person.addEventListener('click', (evt) => {\r\n            this.loadAffiliatedOrControlComponent('is_control_person');\r\n        });\r\n        let immediate_family_exposed = document.getElementById('immediate_family_exposed');\r\n        immediate_family_exposed === null || immediate_family_exposed === void 0 ? void 0 : immediate_family_exposed.addEventListener('click', (evt) => {\r\n            this.loadPep('immediate_family_exposed');\r\n        });\r\n        let is_politically_exposed = document.getElementById('is_politically_exposed');\r\n        is_politically_exposed === null || is_politically_exposed === void 0 ? void 0 : is_politically_exposed.addEventListener('click', (evt) => {\r\n            this.uncheck('immediate_family_exposed');\r\n        });\r\n        let none_above = document.getElementById('none_above');\r\n        none_above === null || none_above === void 0 ? void 0 : none_above.addEventListener('click', (evt) => {\r\n            this.removeMissingInfo('none_above_error');\r\n            none_above.removeAttribute('aria-invalid');\r\n        });\r\n        let prev = document.getElementById('disclosures_prev');\r\n        prev === null || prev === void 0 ? void 0 : prev.addEventListener('click', (evt) => {\r\n            this.kycForm.kycTrustedContact.show();\r\n        });\r\n        let next = document.getElementById('disclosures_next');\r\n        next === null || next === void 0 ? void 0 : next.addEventListener('click', (evt) => {\r\n            if (!this.validateFields())\r\n                return;\r\n            if (this.kycForm.steps == 5) {\r\n                this.kycForm.kycAccountAgreement.show();\r\n            }\r\n            else {\r\n                this.kycForm.kycUpload.show();\r\n            }\r\n        });\r\n    }\r\n    loadAffiliatedOrControlComponent(elementId) {\r\n        if (elementId == 'is_affiliated_exchange_or_finra') {\r\n            this.uncheck('is_control_person');\r\n        }\r\n        else {\r\n            this.uncheck('is_affiliated_exchange_or_finra');\r\n        }\r\n        let element = document.getElementById(elementId);\r\n        let extra = document.getElementById(elementId + '_extra');\r\n        if (!extra)\r\n            return;\r\n        if (element.checked) {\r\n            extra.innerHTML = this.kycAffiliatedOrControlled.render();\r\n            this.kycAffiliatedOrControlled.bindEvents();\r\n        }\r\n        else {\r\n            extra.innerHTML = '';\r\n        }\r\n    }\r\n    loadPep(elementId) {\r\n        if (elementId == 'immediate_family_exposed') {\r\n            this.uncheck('is_politically_exposed');\r\n        }\r\n        else {\r\n            this.uncheck('immediate_family_exposed');\r\n        }\r\n        let element = document.getElementById(elementId);\r\n        let extra = document.getElementById(elementId + '_extra');\r\n        if (!extra)\r\n            return;\r\n        if (element.checked) {\r\n            extra.innerHTML = this.kycImmediateFamily.render();\r\n            this.kycImmediateFamily.bindEvents();\r\n        }\r\n        else {\r\n            extra.innerHTML = '';\r\n        }\r\n    }\r\n    uncheck(elementId) {\r\n        let element = document.getElementById(elementId);\r\n        element.checked = false;\r\n        let extra = document.getElementById(elementId + '_extra');\r\n        extra.innerHTML = '';\r\n    }\r\n    validateFields() {\r\n        if (!this.validateRequiredFields('.kycDisclosures'))\r\n            return false;\r\n        if (!this.kycImmediateFamily.validate())\r\n            return false;\r\n        if (!this.kycAffiliatedOrControlled.validate())\r\n            return false;\r\n        let is_affiliated_exchange_or_finra = document.getElementById('is_affiliated_exchange_or_finra');\r\n        let is_control_person = document.getElementById('is_control_person');\r\n        let is_politically_exposed = document.getElementById('is_politically_exposed');\r\n        let immediate_family_exposed = document.getElementById('immediate_family_exposed');\r\n        let none_above = document.getElementById('none_above');\r\n        if (!none_above.checked && !is_affiliated_exchange_or_finra.checked && !is_control_person.checked\r\n            && !is_politically_exposed.checked && !immediate_family_exposed.checked) {\r\n            this.setMissingInfo('none_above_error', 'You must select, \"None of the above apply to me or my family.\" if nothing is selected', 'none_above');\r\n            return false;\r\n        }\r\n        if (none_above.checked && (is_affiliated_exchange_or_finra.checked || is_control_person.checked\r\n            || is_politically_exposed.checked || immediate_family_exposed.checked)) {\r\n            this.setMissingInfo('none_above_error', 'You cannot have \"None of the above apply to me or my family.\" selected and other options selected. Please select only one', 'none_above');\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycAccountAgreement.html\n// Module\nvar KycAccountAgreement_code = \"<fieldset class=\\\"kycAccountAgreement hidden\\\" data-form=\\\"1\\\">\\r\\n    <div class=\\\"kycAccountAgreementGrid\\\">\\r\\n        <div id=\\\"account_agreement_error\\\" class=\\\"input_error\\\"></div>\\r\\n        <div class=\\\"grid\\\">\\r\\n            <div>\\r\\n                <label for=\\\"account_agreement\\\">\\r\\n                    <input required type=\\\"checkbox\\\" name=\\\"account_agreement\\\" id=\\\"account_agreement\\\" value=\\\"1\\\"/>\\r\\n                </label>\\r\\n            </div>\\r\\n            <div>\\r\\n                <label for=\\\"account_agreement\\\">\\r\\n                    I agree to <a href=\\\"https://files.alpaca.markets/disclosures/library/AcctAppMarginAndCustAgmt.pdf\\\"\\r\\n                                  target=\\\"_blank\\\">Alpaca Customer Agreement</a>\\r\\n                </label>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div id=\\\"customer_agreement_error\\\" class=\\\"input_error\\\"></div>\\r\\n        <div class=\\\"grid\\\">\\r\\n            <div>\\r\\n                <label for=\\\"customer_agreement\\\">\\r\\n                    <input required type=\\\"checkbox\\\" name=\\\"customer_agreement\\\" id=\\\"customer_agreement\\\" value=\\\"1\\\"/>\\r\\n                </label>\\r\\n            </div>\\r\\n            <div>\\r\\n                <label for=\\\"customer_agreement\\\">\\r\\n                    Customer Agreement Acknowledgement</label>\\r\\n                <div class=\\\"explain\\\">\\r\\n                    I have read, understood, and agree to be bound by Alpaca Securities LLC and Liminal.market Inc.\\r\\n                    account\\r\\n                    terms,\\r\\n                    and all other terms, disclosures and disclaimers applicable to me, as referenced in the Alpaca\\r\\n                    Customer\\r\\n                    Agreement.\\r\\n                    I also acknowledge that the Alpaca Customer Agreement contains a pre-dispute arbitration clause\\r\\n                    in\\r\\n                    Section\\r\\n                    43.\\r\\n                </div>\\r\\n\\r\\n            </div>\\r\\n\\r\\n        </div>\\r\\n        <div id=\\\"digital_signature_error\\\" class=\\\"input_error\\\"></div>\\r\\n        <div class=\\\"grid\\\">\\r\\n            <div>\\r\\n                <label for=\\\"digital_signature\\\">\\r\\n                    <input required type=\\\"checkbox\\\" name=\\\"digital_signature\\\" id=\\\"digital_signature\\\" value=\\\"1\\\"/>\\r\\n                </label>\\r\\n            </div>\\r\\n            <div>\\r\\n                <label for=\\\"digital_signature\\\">\\r\\n                    Digital Signature Acknowledgement</label>\\r\\n                <div class=\\\"explain\\\">\\r\\n                    I understand I am signing this agreement electronically,\\r\\n                    and that my electronic signature will have the same effect as physically signing and returning\\r\\n                    the\\r\\n                    Application Agreement.\\r\\n                </div>\\r\\n\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"grid hidden\\\" id=\\\"w8disclosure_div\\\">\\r\\n            <div>\\r\\n                <label for=\\\"w8disclosure\\\">\\r\\n                    <input required type=\\\"checkbox\\\" name=\\\"w8disclosure\\\" id=\\\"w8disclosure\\\" value=\\\"1\\\"/>\\r\\n                </label>\\r\\n            </div>\\r\\n            <div><label for=\\\"w8disclosure\\\">\\r\\n                I certify that I am not a US citizen, US resident alien or other US person for US tax purposes,\\r\\n                and I am submitting the applicable Form W-8 BEN with this form to certify my foreign status and,\\r\\n                if applicable, claim tax treaty benefits. </label>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"grid buttons\\\">\\r\\n        <button type=\\\"button\\\" id=\\\"account_agreement_prev\\\">Previous: Upload documents</button>\\r\\n        <button type=\\\"submit\\\" id=\\\"submitKYC\\\">Confirm identity</button>\\r\\n    </div>\\r\\n    <div class=\\\"alert alert-danger\\\" id=\\\"kycError\\\" role=\\\"alert\\\"></div>\\r\\n</fieldset>\\r\\n\";\n// Exports\n/* harmony default export */ const Kyc_KycAccountAgreement = (KycAccountAgreement_code);\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycAccountAgreement.ts\nvar KycAccountAgreement_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass KycAccountAgreement extends KycBase {\r\n    constructor(kycForm) {\r\n        super(kycForm);\r\n    }\r\n    render(edit = false) {\r\n        let template = Handlebars.compile(Kyc_KycAccountAgreement);\r\n        return template({ edit: edit });\r\n    }\r\n    show() {\r\n        var _a, _b;\r\n        this.showFieldset('.kycAccountAgreement', 'Agreements');\r\n        if (this.kycForm.steps == 5) {\r\n            document.getElementById('account_agreement_prev').innerText = 'Previous: Disclosure';\r\n        }\r\n        else {\r\n            document.getElementById('account_agreement_prev').innerText = 'Previous: Upload documents';\r\n        }\r\n        if (this.kycForm.kycContact.usTaxResidence) {\r\n            (_a = document.getElementById('w8disclosure_div')) === null || _a === void 0 ? void 0 : _a.classList.add('hidden');\r\n        }\r\n        else {\r\n            (_b = document.getElementById('w8disclosure_div')) === null || _b === void 0 ? void 0 : _b.classList.remove('hidden');\r\n        }\r\n    }\r\n    bindEvents() {\r\n        let account_agreement_prev = document.getElementById('account_agreement_prev');\r\n        account_agreement_prev === null || account_agreement_prev === void 0 ? void 0 : account_agreement_prev.addEventListener('click', (evt) => {\r\n            if (this.kycForm.steps == 5) {\r\n                this.kycForm.kycDisclosures.show();\r\n            }\r\n            else {\r\n                this.kycForm.kycUpload.show();\r\n            }\r\n        });\r\n        this.bindSubmitKyc();\r\n    }\r\n    bindSubmitKyc(edit = false) {\r\n        let submitKYC = document.getElementById('submitKYC');\r\n        if (!submitKYC)\r\n            return;\r\n        submitKYC.addEventListener('click', (evt) => KycAccountAgreement_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            if (!edit && !this.validate())\r\n                return;\r\n            let account_agreement_prev = document.getElementById('account_agreement_prev');\r\n            //if (account_agreement_prev) account_agreement_prev.classList.add('hidden');\r\n            let liminal_market_modal_close = document.getElementById('liminal_market_modal_close');\r\n            // if (liminal_market_modal_close) liminal_market_modal_close.style.display = 'none';\r\n            let submitBtn = evt.target;\r\n            LoadingHelper.setLoading(submitBtn);\r\n            let params = FormHelper.getParams('#kyc_wizard_form');\r\n            let networkInfo = NetworkInfo.getInstance();\r\n            params.chainId = networkInfo.ChainId;\r\n            let kycService = new KYCService(Moralis);\r\n            let result = yield kycService.saveKYCInfo(params)\r\n                .catch((reason) => {\r\n                if (account_agreement_prev)\r\n                    account_agreement_prev.classList.remove('hidden');\r\n                LoadingHelper.removeLoading();\r\n                if (reason.message) {\r\n                    let kycError = new KycValidatorError(reason.message, this.kycForm);\r\n                    kycError.handle();\r\n                }\r\n                else {\r\n                    console.log(reason);\r\n                }\r\n            });\r\n            if (result) {\r\n                this.kycForm.kycWaiting.show();\r\n                ExecuteTradeButton.Instance.renderButton();\r\n            }\r\n            else {\r\n                if (account_agreement_prev)\r\n                    account_agreement_prev.classList.remove('hidden');\r\n                LoadingHelper.removeLoading();\r\n            }\r\n        }));\r\n    }\r\n    validate() {\r\n        let account_agreement = document.getElementById('account_agreement');\r\n        if (!(account_agreement === null || account_agreement === void 0 ? void 0 : account_agreement.checked)) {\r\n            this.setMissingInfo('account_agreement_error', 'You need to agree to agreements', 'account_agreement');\r\n            return false;\r\n        }\r\n        else {\r\n            this.removeMissingInfo('account_agreement_error', 'account_agreement');\r\n        }\r\n        let customer_agreement = document.getElementById('customer_agreement');\r\n        if (!(customer_agreement === null || customer_agreement === void 0 ? void 0 : customer_agreement.checked)) {\r\n            this.setMissingInfo('customer_agreement_error', 'You need to agree to customer agrement', 'customer_agreement');\r\n            return false;\r\n        }\r\n        else {\r\n            this.removeMissingInfo('customer_agreement_error', 'customer_agreement');\r\n        }\r\n        let digital_signature = document.getElementById('digital_signature');\r\n        if (!(digital_signature === null || digital_signature === void 0 ? void 0 : digital_signature.checked)) {\r\n            this.setMissingInfo('digital_signature_error', 'You need to sign', 'digital_signature');\r\n            return false;\r\n        }\r\n        else {\r\n            this.removeMissingInfo('digital_signature_error', 'digital_signature');\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycTrustedContact.html\n// Module\nvar KycTrustedContact_code = \"<fieldset class=\\\"kycTrustedContact hidden\\\" data-form=\\\"1\\\">\\r\\n    <div class=\\\"explain\\\">\\r\\n        A trusted contact is a person you authorize your financial firm to contact in limited circumstances,\\r\\n        such as if there is a concern about activity in your account and they have been unable to get in touch with you.\\r\\n        <br/><br/>\\r\\n        A trusted contact may be a family member, attorney, accountant or another third-party who you believe would\\r\\n        respect your privacy and know how to handle the responsibility.\\r\\n        The trusted person should be 18 years old or older.\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"trusted_first_name\\\">Legal first name of trusted contact</label>\\r\\n        <input id=\\\"trusted_first_name\\\" name=\\\"trusted_first_name\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"trusted_last_name\\\">Legal last name of trusted contact</label>\\r\\n        <input id=\\\"trusted_last_name\\\" name=\\\"trusted_last_name\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        If you fill in name, you are required to fill in one of the following, email, phone or address\\r\\n    </div>\\r\\n    <div class=\\\"input_error\\\" id=\\\"trusted_contact_missing_info\\\"></div>\\r\\n    <div>\\r\\n        <label for=\\\"trusted_email\\\">Email of trusted contact</label>\\r\\n        <input id=\\\"trusted_email\\\" type=\\\"email\\\" name=\\\"trusted_email\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"trusted_phone\\\">Phone of trusted contact</label>\\r\\n        <input id=\\\"trusted_phone\\\" type=\\\"tel\\\" name=\\\"trusted_phone\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"trusted_street_address\\\">Address of trusted contact</label>\\r\\n        <input id=\\\"trusted_street_address\\\" name=\\\"trusted_street_address\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"trusted_city\\\">City of trusted contact</label>\\r\\n        <input id=\\\"trusted_city\\\" name=\\\"trusted_city\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"trusted_state\\\">State of trusted contact</label>\\r\\n        <input id=\\\"trusted_state\\\" name=\\\"trusted_state\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"trusted_postal_code\\\">Postal code of trusted contact</label>\\r\\n        <input id=\\\"trusted_postal_code\\\" name=\\\"trusted_postal_code\\\"/>\\r\\n    </div>\\r\\n    <div>\\r\\n        <label for=\\\"trusted_country\\\">Country of trusted contact</label>\\r\\n        <select required id=\\\"trusted_country\\\" required name=\\\"trusted_country\\\">\\r\\n            <option value=\\\"\\\"></option>\\r\\n            {{#each countries}}\\r\\n            <option value=\\\"{{code}}\\\">{{name}}</option>\\r\\n            {{/each}}\\r\\n        </select>\\r\\n    </div>\\r\\n    {{#unless edit}}\\r\\n    <div class=\\\"grid buttons\\\">\\r\\n        <button type=\\\"button\\\" id=\\\"trustedContact_prev\\\">Previous: Identity</button>\\r\\n        <button type=\\\"button\\\" id=\\\"trustedContact_next\\\">Next: Disclosures</button>\\r\\n    </div>\\r\\n    {{/unless}}\\r\\n    {{#if edit}}\\r\\n    <div class=\\\"grid buttons\\\">\\r\\n        <button type=\\\"button\\\" id=\\\"trustedContact_prev\\\">Previous: Identity</button>\\r\\n        <button type=\\\"submit\\\" id=\\\"submitKYC\\\">Update account</button>\\r\\n    </div>\\r\\n    <div class=\\\"alert alert-danger\\\" id=\\\"kycError\\\" role=\\\"alert\\\"></div>\\r\\n    {{/if}}\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const Kyc_KycTrustedContact = (KycTrustedContact_code);\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycTrustedContact.ts\n\r\n\r\n\r\n\r\n\r\nclass KycTrustedContact extends KycBase {\r\n    constructor(kycForm) {\r\n        super(kycForm);\r\n        this.edit = false;\r\n    }\r\n    render(edit = false) {\r\n        this.edit = edit;\r\n        let template = Handlebars.compile(Kyc_KycTrustedContact);\r\n        return template({ edit: edit, countries: CountryHelper.Countries });\r\n    }\r\n    show() {\r\n        this.showFieldset('.kycTrustedContact', 'Trusted contact');\r\n    }\r\n    bindEvents() {\r\n        let showPrev = document.getElementById('trustedContact_prev');\r\n        showPrev === null || showPrev === void 0 ? void 0 : showPrev.addEventListener('click', (evt) => {\r\n            this.kycForm.kycIdentity.show();\r\n        });\r\n        let showNext = document.getElementById('trustedContact_next');\r\n        showNext === null || showNext === void 0 ? void 0 : showNext.addEventListener('click', (evt) => {\r\n            if (!this.validate())\r\n                return;\r\n            this.kycForm.kycDisclosures.show();\r\n        });\r\n        if (this.edit) {\r\n            let kycAccount = new KycAccountAgreement(this.kycForm);\r\n            if (!this.validate())\r\n                return;\r\n            kycAccount.bindSubmitKyc(this.edit);\r\n        }\r\n    }\r\n    validate() {\r\n        this.setMissingInfo('trusted_contact_missing_info', '');\r\n        let trusted_first_name = document.getElementById('trusted_first_name');\r\n        if (trusted_first_name && !StringHelper.isNullOrEmpty(trusted_first_name.value)) {\r\n            let trusted_email = document.getElementById('trusted_email');\r\n            let trusted_phone = document.getElementById('trusted_phone');\r\n            let trusted_street_address = document.getElementById('trusted_street_address');\r\n            let trusted_city = document.getElementById('trusted_city');\r\n            let trusted_postal_code = document.getElementById('trusted_postal_code');\r\n            let trusted_country = document.getElementById('trusted_country');\r\n            if (StringHelper.isNullOrEmpty(trusted_email.value) && StringHelper.isNullOrEmpty(trusted_phone.value)\r\n                && StringHelper.isNullOrEmpty(trusted_street_address.value)) {\r\n                this.setMissingInfo('trusted_contact_missing_info', 'You need to fill in either email, phone or address');\r\n                return;\r\n            }\r\n            if (!StringHelper.isNullOrEmpty(trusted_email.value) && trusted_email.value.indexOf('@') == -1) {\r\n                this.setMissingInfo('trusted_contact_missing_info', 'Email is not valid. It must contain @ sign');\r\n                return;\r\n            }\r\n            if (!StringHelper.isNullOrEmpty(trusted_street_address.value) &&\r\n                (StringHelper.isNullOrEmpty(trusted_city.value) ||\r\n                    StringHelper.isNullOrEmpty(trusted_postal_code.value) ||\r\n                    StringHelper.isNullOrEmpty(trusted_country.value))) {\r\n                this.setMissingInfo('trusted_contact_missing_info', 'You need fill inn into City, Postal code and Country when filling the street address');\r\n                return;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycUpload.html\n// Module\nvar KycUpload_code = \"<fieldset class=\\\"kycUpload hidden\\\" data-form=\\\"1\\\">\\r\\n    <div class=\\\"grid\\\">\\r\\n        {{{fileUpload \\\"identity_verification\\\" \\\"Photo ID Front (Front of passport)\\\"}}}\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"grid\\\">\\r\\n        {{{fileUpload \\\"identity_verification_2\\\" \\\"Photo ID Back (Passport picture of ID) \\\"}}}\\r\\n    </div>\\r\\n    <div class=\\\"grid\\\">\\r\\n        {{{fileUpload \\\"address_verification\\\" \\\"Picture of address verification\\\"}}}\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"grid buttons\\\">\\r\\n        <button type=\\\"button\\\" id=\\\"upload_prev\\\">Previous: Disclosures</button>\\r\\n        <button type=\\\"button\\\" id=\\\"upload_next\\\">Next: Agreements</button>\\r\\n    </div>\\r\\n</fieldset>\";\n// Exports\n/* harmony default export */ const Kyc_KycUpload = (KycUpload_code);\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycUpload.ts\n\r\n\r\nclass KycUpload extends KycBase {\r\n    constructor(kycForm) {\r\n        super(kycForm);\r\n    }\r\n    render() {\r\n        let template = Handlebars.compile(Kyc_KycUpload);\r\n        return template({});\r\n    }\r\n    show() {\r\n        this.showFieldset('.kycUpload', 'Upload documents');\r\n    }\r\n    bindEvents() {\r\n        this.bindFileUploads();\r\n        let upload_prev = document.getElementById('upload_prev');\r\n        upload_prev === null || upload_prev === void 0 ? void 0 : upload_prev.addEventListener('click', (evt) => {\r\n            this.kycForm.kycDisclosures.show();\r\n        });\r\n        let upload_next = document.getElementById('upload_next');\r\n        upload_next === null || upload_next === void 0 ? void 0 : upload_next.addEventListener('click', (evt) => {\r\n            if (!this.validateRequiredFields('.kycUpload'))\r\n                return;\r\n            this.kycForm.kycAccountAgreement.show();\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycWaiting.ts\nvar KycWaiting_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\nclass KycWaiting extends KycBase {\r\n    constructor(kycForm) {\r\n        super(kycForm);\r\n    }\r\n    show() {\r\n        var _a, _b;\r\n        (_a = document.getElementById('kyc_reg')) === null || _a === void 0 ? void 0 : _a.classList.add('hidden');\r\n        (_b = document.getElementById('waiting_for_kyc_reg')) === null || _b === void 0 ? void 0 : _b.classList.remove('hidden');\r\n        document.querySelector('#liminal_market_modal_div > article > header > span').innerHTML = 'Waiting for KYC to be approved';\r\n        this.kycForm.timeout = setTimeout(() => KycWaiting_awaiter(this, void 0, void 0, function* () {\r\n            yield this.checkKycStatus();\r\n        }), 5 * 1000);\r\n    }\r\n    checkKycStatus() {\r\n        return KycWaiting_awaiter(this, void 0, void 0, function* () {\r\n            let kycService = new KYCService(Moralis);\r\n            let kycResponse = yield kycService.hasValidKYC();\r\n            if (kycResponse.isValidKyc) {\r\n                clearTimeout(this.kycForm.timeout);\r\n                this.kycForm.modal.hideModal();\r\n            }\r\n            else {\r\n                this.kycForm.timeout = setTimeout(() => {\r\n                    this.checkKycStatus();\r\n                }, 5 * 1000);\r\n            }\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/KYCForm.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass KYCForm {\r\n    constructor(onHide) {\r\n        this.steps = 5;\r\n        this.timeout = undefined;\r\n        this.activeFieldsetSelector = '.kycContact';\r\n        this.modal = new Modal();\r\n        this.onHide = onHide;\r\n        this.kycContact = new KycContact(this);\r\n        this.kycIdentity = new KycIdentity(this);\r\n        this.kycTrustedContact = new KycTrustedContact(this);\r\n        this.kycDisclosures = new KycDisclosures(this);\r\n        this.kycAccountAgreement = new KycAccountAgreement(this);\r\n        this.kycUpload = new KycUpload(this);\r\n        this.kycWaiting = new KycWaiting(this);\r\n    }\r\n    show(className) {\r\n        let kycForm = new KYCForm(() => {\r\n        });\r\n        const ble = className;\r\n        this[ble].show();\r\n        this.activeFieldsetSelector = className;\r\n    }\r\n    showKYCForm(edit = false) {\r\n        let template = Handlebars.compile(KYCModal);\r\n        let obj = {\r\n            KycContactHtml: this.kycContact.render(),\r\n            KycIdentityHtml: this.kycIdentity.render(),\r\n            KycDisclosureHtml: this.kycDisclosures.render(),\r\n            KycTrustedContactHtml: this.kycTrustedContact.render(),\r\n            KycAccountAgreementHtml: this.kycAccountAgreement.render(),\r\n            KycUploadHtml: this.kycUpload.render()\r\n        };\r\n        let content = template(obj);\r\n        let newModal = this.modal.showModal('KYC & AML', content, true, () => {\r\n            this.clearTimeout();\r\n            this.onHide();\r\n        }, false);\r\n        let taxResidence = document.getElementById('country_of_tax_residence');\r\n        if (taxResidence) {\r\n            this.steps = (taxResidence.value == 'USA') ? 5 : 6;\r\n        }\r\n        if (newModal) {\r\n            this.kycContact.bindEvents();\r\n            this.kycIdentity.bindEvents();\r\n            this.kycTrustedContact.bindEvents();\r\n            this.kycDisclosures.bindEvents();\r\n            this.kycUpload.bindEvents();\r\n            this.kycAccountAgreement.bindEvents();\r\n            document.getElementById('kyc_wizard_form').addEventListener('keyup', (evt) => {\r\n                if (evt.key == 'Enter') {\r\n                    evt.preventDefault();\r\n                    evt.stopPropagation();\r\n                }\r\n            });\r\n        }\r\n        this.kycContact.show();\r\n    }\r\n    setSteps(steps) {\r\n        this.steps = steps;\r\n    }\r\n    clearTimeout() {\r\n        if (this.timeout)\r\n            clearTimeout(this.timeout);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/modals/KYC/KycStatusHandler.ts\nvar KycStatusHandler_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\nclass KycStatusHandler {\r\n    constructor(kycResponse, executeTradeButton) {\r\n        this.kycResponse = kycResponse;\r\n        this.executeTradeButton = executeTradeButton;\r\n    }\r\n    getButtonText() {\r\n        let txt = 'Finish KYC';\r\n        switch (this.kycResponse.status) {\r\n            case 'SUBMITTED':\r\n            case 'ONBOARDING':\r\n            case 'INACTIVE':\r\n            case 'APPROVED':\r\n            case 'EDITED':\r\n            case 'APPROVAL_PENDING':\r\n                txt = 'Submitted to KYC processor';\r\n                break;\r\n            case 'ACTION_REQUIRED':\r\n                txt = 'Action required. Click to continue';\r\n                break;\r\n            case 'REJECTED':\r\n                txt = 'Your application was rejected';\r\n                break;\r\n            case 'DISABLED':\r\n                txt = 'Your account has been disabled';\r\n                break;\r\n            case 'ACTIVE':\r\n            case 'ACCOUNT_UPDATED':\r\n                txt = 'You are approved. KYC is being sent to blockchain. Give it few minutes';\r\n                break;\r\n            case 'ACCOUNT_CLOSED':\r\n                txt = 'Your account has been closed';\r\n                break;\r\n        }\r\n        return txt + '<small>Click for more info</small>';\r\n    }\r\n    getButtonClickEvent(executeTradeButton) {\r\n        switch (this.kycResponse.status) {\r\n            case 'SUBMITTED':\r\n            case 'ONBOARDING':\r\n            case 'INACTIVE':\r\n            case 'APPROVED':\r\n            case 'EDITED':\r\n            case 'APPROVAL_PENDING':\r\n                return this.showModal('Application is being processed', \"You need to wait for KYC to be approved. Then you'll be able to do trades. \" +\r\n                    \"This usually takes few minutes. We will email you when you are approved or if there are problems<br /><br />\" +\r\n                    \"If this status has been for more than 1 day, and you haven't gotten any email from us. Please email us at \" +\r\n                    \"<a target='_blank' href='mailto:info@liminal.market?subject=My application is being processed for to long&body=Hi, can you help me to find out what the problem is, the KYC process has not changed for some time? My name is _______ and I used the email _______ to register at liminal.market'>info@liminal.market</a>\");\r\n            case 'ACTION_REQUIRED':\r\n                return () => KycStatusHandler_awaiter(this, void 0, void 0, function* () {\r\n                    let kycActionRequired = new KycActionRequired(executeTradeButton);\r\n                    yield kycActionRequired.show();\r\n                });\r\n            case 'REJECTED':\r\n                return this.showModal('Application was rejected', \"Your application has been rejected during KYC process.<br /><br />\" +\r\n                    \"We don't have the information on why that happened, but you can email us at \" +\r\n                    \"<a target='_blank' href='mailto:info@liminal.market?subject=My application was rejected&body=Hi, can you help me to find out what the problem is? My name is _______ and I used the email _______ to register at liminal.market'>info@liminal.market</a>\" +\r\n                    \" and we can find out, and we should be able to solve it together.\");\r\n            case 'DISABLED':\r\n                return this.showModal('Application was disabled', \"Your account has been disabled.<br /><br />\" +\r\n                    \"We don't have the information on why that happened, but you can email us at \" +\r\n                    \"<a target='_blank' href='mailto:info@liminal.market?subject=My application was disabled&body=Hi, can you help me to find out what the problem is? My name is _______ and I used the email _______ to register at liminal.market'>info@liminal.market</a>\" +\r\n                    \" and we can find out, and we should be able to solve it together.\");\r\n            case 'ACCOUNT_CLOSED':\r\n                return this.showModal('Application was closed', \"Your account has been closed.<br /><br />\" +\r\n                    \"We don't have the information on why that happened, but you can email us at \" +\r\n                    \"<a target='_blank' href='mailto:info@liminal.market?subject=My application was closed&body=Hi, can you help me to find out what the problem is? My name is _______ and I used the email _______ to register at liminal.market'>info@liminal.market</a>\" +\r\n                    \" and we can find out, and we should be able to solve it together.\");\r\n            case 'ACCOUNT_UPDATED':\r\n            case 'ACTIVE':\r\n                return this.showModal('Account soon ready', 'Your account has been approved...<br /><br/>' +\r\n                    '..but, after we approve your account, we write the information to the blockchain.' +\r\n                    ' This usually takes just few(2-3) minutes.<br /><br/> If this is taking longer, ' +\r\n                    'please email us at <a target=\"_blank\" href=\"mailto:info@liminal.market?subject=KYC is being written to blockchain&body=Hi, can you help me to find out what the problem is? My name is _______ and I used the email _______ to register at liminal.market\">info@liminal.market</a>');\r\n        }\r\n        return () => {\r\n            let kycForm = new KYCForm(() => KycStatusHandler_awaiter(this, void 0, void 0, function* () {\r\n                yield this.executeTradeButton.renderButton();\r\n            }));\r\n            kycForm.showKYCForm();\r\n        };\r\n    }\r\n    showModal(title, content) {\r\n        return () => {\r\n            let modal = new Modal();\r\n            modal.showModal(title, content);\r\n        };\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/Kyc/KycApproved.html\n// Module\nvar KycApproved_code = \"<h2>You are account has been approved</h2>\\r\\n<p>We have approved your account. You can now fund your account and start to trade.\\r\\n\\r\\n    <button id=\\\"kycApprovedFund\\\">Fund account</button>\\r\\n</p>\";\n// Exports\n/* harmony default export */ const KycApproved = (KycApproved_code);\n;// CONCATENATED MODULE: ./src/ui/elements/tradepanel/ExecuteTradeButton.ts\nvar ExecuteTradeButton_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass ExecuteTradeButton {\r\n    constructor(moralis, sellTradeInput, buyTradeInput) {\r\n        this.moralis = moralis;\r\n        this.sellTradeInput = sellTradeInput;\r\n        this.buyTradeInput = buyTradeInput;\r\n        this.authenticateService = new AuthenticateService(this.moralis);\r\n        this.template = Handlebars.compile(tradepanel_ExecuteTradeButton);\r\n        let htmlButton = this.template();\r\n        this.button = document.getElementById('liminal_market_execute_trade');\r\n        //this.button.outerHTML = htmlButton;\r\n        ExecuteTradeButton.Instance = this;\r\n    }\r\n    renderButton() {\r\n        return ExecuteTradeButton_awaiter(this, void 0, void 0, function* () {\r\n            this.button = document.getElementById('liminal_market_execute_trade');\r\n            this.loadingButton(this.button);\r\n            //wallet connected\r\n            if (!this.walletIsConnected(this.button)) {\r\n                return;\r\n            }\r\n            //user logged in\r\n            if (!this.userIsLoggedIn(this.button)) {\r\n                return;\r\n            }\r\n            //chain id correct\r\n            if (!this.chainIdIsCorrect(this.button)) {\r\n                return;\r\n            }\r\n            //native token is available\r\n            if (!(yield this.userHasNativeToken(this.button))) {\r\n                return;\r\n            }\r\n            //kyc is done\r\n            if (!(yield this.kycIsDone(this.button))) {\r\n                return;\r\n            }\r\n            //ausd is setup\r\n            if (!(yield this.userHasAUSD(this.button))) {\r\n                return;\r\n            }\r\n            //ausd > buy amount\r\n            if (!(yield this.userHasEnoughQty(this.button))) {\r\n                return;\r\n            }\r\n            if (!this.hasQuantityAndSymbol(this.button)) {\r\n                return;\r\n            }\r\n            if (!(yield this.isMarketOpen(this.button))) {\r\n                return;\r\n            }\r\n            this.enableExecuteTrade(this.button);\r\n        });\r\n    }\r\n    enableExecuteTrade(button) {\r\n        //if (this.sellTradeInput.quantity.eq(0)) return;\r\n        //execute trade can be done\r\n        button.innerHTML = 'Execute trade';\r\n        button.classList.replace('disabled', 'enabled');\r\n        this.stopLoadingButton(button);\r\n        button.addEventListener('click', () => ExecuteTradeButton_awaiter(this, void 0, void 0, function* () {\r\n            this.loadingButton(button);\r\n            let providerInfo = ProviderInfo.Instance;\r\n            button.innerHTML = 'Confirm transaction in your ' + providerInfo.WalletName + ' wallet';\r\n            if (this.sellTradeInput.symbol == 'aUSD') {\r\n                let liminalMarketService = new LiminalMarketService(this.moralis);\r\n                let symbolAddress = yield liminalMarketService.getSymbolContractAddress(this.buyTradeInput.symbol);\r\n                if (symbolAddress === AddressZero) {\r\n                    let result = yield liminalMarketService.createToken(this.buyTradeInput.symbol, () => {\r\n                        button.innerHTML = 'Creating token. Give it few seconds';\r\n                    }).finally(() => {\r\n                        this.stopLoadingButton(button);\r\n                        button.innerHTML = 'Execute trade';\r\n                    });\r\n                    if (result instanceof BlockchainError)\r\n                        return;\r\n                    symbolAddress = result;\r\n                }\r\n                yield this.executeTransfer(symbolAddress, button);\r\n            }\r\n            else {\r\n                let liminalMarketService = new LiminalMarketService(this.moralis);\r\n                let symbolAddress = yield liminalMarketService.getSymbolContractAddress(this.sellTradeInput.symbol);\r\n                let securityTokenService = new SecurityTokenService(this.moralis);\r\n                yield securityTokenService.transfer(symbolAddress, this.sellTradeInput.quantity)\r\n                    .catch(reason => {\r\n                    console.log('CATCH - securityTokenService.transfer', reason);\r\n                })\r\n                    .then(transaction => {\r\n                    console.log('THEN - securityTokenService.transfer', transaction);\r\n                    if (!transaction)\r\n                        return;\r\n                    this.monitorExecuteTrade(transaction, TradeType.Sell);\r\n                }).finally(() => {\r\n                    this.stopLoadingButton(button);\r\n                    button.innerHTML = 'Execute trade';\r\n                });\r\n            }\r\n        }));\r\n    }\r\n    executeTransfer(symbolAddress, button) {\r\n        return ExecuteTradeButton_awaiter(this, void 0, void 0, function* () {\r\n            let aUsdService = new AUSDService(this.moralis);\r\n            yield aUsdService.transfer(symbolAddress, this.sellTradeInput.quantity)\r\n                .catch(reason => {\r\n                console.log('CATCH - aUsdService.transfer', reason);\r\n            }).then(transaction => {\r\n                if (!transaction)\r\n                    return;\r\n                this.monitorExecuteTrade(transaction, TradeType.Buy);\r\n                this.setProgressText('Sending to blockchain', transaction.hash);\r\n            }).finally(() => {\r\n                this.stopLoadingButton(button);\r\n                button.innerHTML = 'Execute trade';\r\n            });\r\n        });\r\n    }\r\n    getBuyingSharesObj(object) {\r\n        let ethAddress = object.userAddress;\r\n        let tokenAddress = object.tokenAddress;\r\n        let buyingQuantity = object.filled_qty;\r\n        let sellingAmount = '$' + new (bignumber_default())(object.amount).div(Math.pow(10, 18)).toFixed();\r\n        return {\r\n            sellingLogo: '/img/logos/aUSD.png',\r\n            sellingSymbol: 'aUSD',\r\n            sellingAmount: sellingAmount,\r\n            buyingLogo: '/img/logos/' + object.symbol + '.png',\r\n            buyingSymbol: object.symbol,\r\n            buyingQuantity: buyingQuantity,\r\n            buyingRoundQuantity: roundNumberDecimal(buyingQuantity, 6) + ' shares',\r\n            shortEthAddress: shortEth(ethAddress),\r\n            tokenAddress: tokenAddress\r\n        };\r\n    }\r\n    getSellSharesObj(object) {\r\n        let ethAddress = object.sender;\r\n        let tokenAddress = object.recipient;\r\n        let buyingQuantity = new (bignumber_default())(object.filled_avg_price).multipliedBy(new (bignumber_default())(object.filled_qty));\r\n        let sellingAmount = object.filled_qty;\r\n        return {\r\n            sellingLogo: '/img/logos/' + object.symbol + '.png',\r\n            sellingSymbol: object.symbol,\r\n            sellingAmount: sellingAmount + ' shares',\r\n            buyingLogo: '/img/logos/aUSD.png',\r\n            buyingSymbol: 'aUSD',\r\n            buyingQuantity: buyingQuantity.toFixed(),\r\n            buyingRoundQuantity: '$' + roundBigNumberDecimal(buyingQuantity, 6).toFixed(),\r\n            shortEthAddress: shortEth(ethAddress),\r\n            tokenAddress: tokenAddress\r\n        };\r\n    }\r\n    showTradeExecuted(object) {\r\n        return ExecuteTradeButton_awaiter(this, void 0, void 0, function* () {\r\n            let providerInfo = ProviderInfo.Instance;\r\n            let networkInfo = NetworkInfo.getInstance();\r\n            let isBuy = (object.side == 'buy');\r\n            let obj = (isBuy) ? this.getBuyingSharesObj(object) : this.getSellSharesObj(object);\r\n            obj.walletName = providerInfo.WalletName;\r\n            obj.blockExplorerLink = networkInfo.BlockExplorer + '/tx/' + object.transaction_hash;\r\n            let template = Handlebars.compile(TradeExecuted);\r\n            let content = template(obj);\r\n            let modal = new Modal();\r\n            modal.showModal('Trade executed', content);\r\n            let addTokenToWallet = document.getElementById('addTokenToWallet');\r\n            if (!addTokenToWallet)\r\n                return;\r\n            addTokenToWallet.addEventListener('click', (evt) => {\r\n                let address = evt.target.dataset.address;\r\n                let walletHelper = new WalletHelper(this.moralis);\r\n                walletHelper.addTokenToWallet(address, this.buyTradeInput.symbol, () => {\r\n                    let addTokenToWalletFailed = document.getElementById('addTokenToWalletFailed');\r\n                    if (!addTokenToWalletFailed)\r\n                        return;\r\n                    addTokenToWalletFailed.classList.remove('d-none');\r\n                });\r\n            });\r\n        });\r\n    }\r\n    monitorExecuteTrade(transaction, tradeType) {\r\n        return ExecuteTradeButton_awaiter(this, void 0, void 0, function* () {\r\n            let subscription = new Subscription(this.moralis);\r\n            yield subscription.subscribeToTable(tradeType, (object) => {\r\n                let user = this.moralis.User.current();\r\n                if (!user)\r\n                    return;\r\n                if (object.userAddress != user.get('ethAddress')) {\r\n                    console.log('obj.userAddress:' + object.userAddress + ' user:' + user.get('ethAddress'));\r\n                    return;\r\n                }\r\n                if (object.status == 'order_filled') {\r\n                    this.showTradeExecuted(object);\r\n                    let executingTrade = document.getElementById('executing-trade-progress');\r\n                    if (!executingTrade)\r\n                        return;\r\n                    executingTrade.classList.add('d-none');\r\n                }\r\n                else if (object.status == 'order_failed') {\r\n                    let modal = new Modal();\r\n                    modal.showModal('Order failed', 'We could not finish your order.');\r\n                }\r\n                else if (!object.status) {\r\n                    this.setProgressText('Received order sending to stock exchange', object.transaction_hash);\r\n                }\r\n                else if (object.status == 'order_requested') {\r\n                    this.setProgressText('Sent to stock exchange', object.transaction_hash);\r\n                }\r\n            });\r\n            let executingTrade = document.getElementById('executing-trade-progress');\r\n            if (!executingTrade)\r\n                return;\r\n            executingTrade.classList.remove('d-none');\r\n        });\r\n    }\r\n    loadingButton(button) {\r\n        button.setAttribute('aria-busy', 'true');\r\n    }\r\n    stopLoadingButton(button) {\r\n        button.removeAttribute('aria-busy');\r\n    }\r\n    walletIsConnected(button) {\r\n        let walletConnected = this.authenticateService.isWalletConnected();\r\n        if (walletConnected)\r\n            return true;\r\n        this.removeClickEvent(button);\r\n        button.innerHTML = 'Connect wallet';\r\n        button.addEventListener('click', () => {\r\n            let connectWallet = new ConnectWallet(this.moralis);\r\n            connectWallet.chooseWalletProvider();\r\n        });\r\n        this.stopLoadingButton(button);\r\n        return false;\r\n    }\r\n    userIsLoggedIn(button) {\r\n        let userLoggedIn = this.authenticateService.isUserLoggedIn();\r\n        if (userLoggedIn)\r\n            return true;\r\n        button.innerHTML = 'Login';\r\n        button.addEventListener('click', () => ExecuteTradeButton_awaiter(this, void 0, void 0, function* () {\r\n            yield this.authenticateService.authenticateUser(ConnectWallet.Provider);\r\n        }));\r\n        this.stopLoadingButton(button);\r\n        return false;\r\n    }\r\n    chainIdIsCorrect(button) {\r\n        let chainId = this.authenticateService.getChainId();\r\n        let networkInfo = NetworkInfo.getInstance();\r\n        if (chainId === networkInfo.ChainId)\r\n            return true;\r\n        let usersWalletNetwork = NetworkInfo.getNetworkInfoByChainId(chainId);\r\n        if (usersWalletNetwork) {\r\n            NetworkInfo.setNetworkByChainId(chainId);\r\n            return true;\r\n        }\r\n        button.innerHTML = 'Switch Network';\r\n        button.addEventListener('click', () => ExecuteTradeButton_awaiter(this, void 0, void 0, function* () {\r\n            yield networkInfo.addNetworkToWallet(this.moralis);\r\n        }));\r\n        this.stopLoadingButton(button);\r\n        return false;\r\n    }\r\n    userHasNativeToken(button) {\r\n        return ExecuteTradeButton_awaiter(this, void 0, void 0, function* () {\r\n            let networkInfo = NetworkInfo.getInstance();\r\n            let hasEnoughNativeTokens = yield networkInfo.hasEnoughNativeTokens(this.moralis);\r\n            if (hasEnoughNativeTokens)\r\n                return true;\r\n            button.classList.replace('enabled', 'disabled');\r\n            button.innerHTML = 'You need ' + networkInfo.NativeCurrencyName + ' tokens. Click me for some tokens';\r\n            button.addEventListener('click', () => {\r\n                let nativeTokenNeededModal = new NativeTokenNeeded(this.moralis, () => {\r\n                    this.renderButton();\r\n                });\r\n                nativeTokenNeededModal.show();\r\n            });\r\n            this.stopLoadingButton(button);\r\n            return false;\r\n        });\r\n    }\r\n    kycIsDone(button, intervalCheck = false) {\r\n        return ExecuteTradeButton_awaiter(this, void 0, void 0, function* () {\r\n            let kycService = new KYCService(this.moralis);\r\n            let ethAddress = this.authenticateService.getEthAddress();\r\n            if (ethAddress === '') {\r\n                console.log('no ETH address, kyc check failed');\r\n                return false;\r\n            }\r\n            let kycResponse = yield kycService.hasValidKYC();\r\n            if (kycResponse.isValidKyc) {\r\n                if (intervalCheck) {\r\n                    clearInterval(this.kycIdDoneTimeout);\r\n                    let template = Handlebars.compile(KycApproved);\r\n                    let modal = new Modal();\r\n                    modal.showModal('Account approved', template({}));\r\n                    let fundAccount = document.getElementById('kycApprovedFund');\r\n                    fundAccount === null || fundAccount === void 0 ? void 0 : fundAccount.addEventListener('click', (evt) => {\r\n                        modal.hideModal();\r\n                        let ausdFund = new FakeAUSDFund(this.moralis);\r\n                        ausdFund.showAUSDFakeFund(() => {\r\n                            this.renderButton();\r\n                        });\r\n                    });\r\n                }\r\n                return true;\r\n            }\r\n            let kycStatusHandler = new KycStatusHandler(kycResponse, this);\r\n            button.innerHTML = kycStatusHandler.getButtonText();\r\n            button.addEventListener('click', kycStatusHandler.getButtonClickEvent(this));\r\n            this.stopLoadingButton(button);\r\n            return false;\r\n        });\r\n    }\r\n    checkKycIsDone() {\r\n        if (this.kycIdDoneTimeout)\r\n            return;\r\n        this.kycIdDoneTimeout = setInterval(() => ExecuteTradeButton_awaiter(this, void 0, void 0, function* () {\r\n            yield this.kycIsDone(this.button, true);\r\n        }), 10 * 1000);\r\n    }\r\n    userHasAUSD(button) {\r\n        return ExecuteTradeButton_awaiter(this, void 0, void 0, function* () {\r\n            let ausdService = new AUSDService(this.moralis);\r\n            let balance = yield ausdService.getAUSDBalanceOf(this.authenticateService.getEthAddress());\r\n            if (balance.isGreaterThan(0))\r\n                return true;\r\n            let networkInfo = NetworkInfo.getInstance();\r\n            if (networkInfo.TestNetwork) {\r\n                button.innerHTML = 'You need aUSD. Click here to get some';\r\n                button.addEventListener('click', () => {\r\n                    let ausdFund = new FakeAUSDFund(this.moralis);\r\n                    ausdFund.showAUSDFakeFund(() => {\r\n                        this.renderButton();\r\n                    });\r\n                });\r\n            }\r\n            else {\r\n                button.innerHTML = 'You need aUSD. Click here for instructions';\r\n                button.addEventListener('click', () => {\r\n                    let ausdFund = new FakeAUSDFund(this.moralis);\r\n                    ausdFund.showAUSDFund(() => {\r\n                        this.renderButton();\r\n                    });\r\n                });\r\n            }\r\n            this.stopLoadingButton(button);\r\n            return false;\r\n        });\r\n    }\r\n    userHasEnoughQty(button) {\r\n        return ExecuteTradeButton_awaiter(this, void 0, void 0, function* () {\r\n            let ausdService = new AUSDService(this.moralis);\r\n            if (this.sellTradeInput.symbol == 'aUSD') {\r\n                let balance = yield ausdService.getAUSDBalanceOf(this.authenticateService.getEthAddress());\r\n                if (balance.isGreaterThanOrEqualTo(this.sellTradeInput.quantity))\r\n                    return true;\r\n                button.innerHTML = \"You don't have enough aUSD. Click for more funding\";\r\n                button.addEventListener('click', () => {\r\n                    let networkInfo = NetworkInfo.getInstance();\r\n                    let ausdFund = new FakeAUSDFund(this.moralis);\r\n                    if (networkInfo.TestNetwork) {\r\n                        ausdFund.showAUSDFakeFund(() => {\r\n                            this.renderButton();\r\n                        });\r\n                    }\r\n                    else {\r\n                        ausdFund.showAUSDFund(() => {\r\n                            this.renderButton();\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                let securityTokenService = new SecurityTokenService(this.moralis);\r\n                let authenticateService = new AuthenticateService(this.moralis);\r\n                let ethAddress = authenticateService.getEthAddress();\r\n                let userQuantity = yield securityTokenService.getQuantityByAddress(this.sellTradeInput.symbol, ethAddress);\r\n                if (this.sellTradeInput.quantity <= userQuantity)\r\n                    return true;\r\n                button.innerHTML = \"You don't have enough \" + this.sellTradeInput.symbol;\r\n                button.classList.replace('disable', 'enable');\r\n            }\r\n            this.stopLoadingButton(button);\r\n            return false;\r\n        });\r\n    }\r\n    isMarketOpen(button) {\r\n        return ExecuteTradeButton_awaiter(this, void 0, void 0, function* () {\r\n            let userService = new UserService(this.moralis);\r\n            let isMarketOpen = yield userService.isMarketOpenOrUserOffHours();\r\n            if (isMarketOpen)\r\n                return true;\r\n            button.innerHTML = 'Market is closed';\r\n            button.classList.replace('enabled', 'disabled');\r\n            this.stopLoadingButton(button);\r\n            return false;\r\n        });\r\n    }\r\n    removeClickEvent(button) {\r\n        let f = (event) => button.onclick ? (event) : undefined;\r\n        if (f) {\r\n            button.removeEventListener('click', f);\r\n        }\r\n    }\r\n    hasQuantityAndSymbol(button) {\r\n        if (this.sellTradeInput.quantity.eq(0)) {\r\n            button.innerHTML = 'Type in quantity';\r\n            this.stopLoadingButton(button);\r\n            return false;\r\n        }\r\n        if (this.buyTradeInput.name == '') {\r\n            button.innerHTML = 'Select stock to buy';\r\n            this.stopLoadingButton(button);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    setProgressText(text, hash) {\r\n        let progressText = document.getElementById('progress-text');\r\n        if (progressText) {\r\n            let networkInfo = NetworkInfo.getInstance();\r\n            progressText.innerHTML = text + '<br /><a href=\"' + networkInfo.BlockExplorer + '/tx/' + hash + '\" target=\"_blank\" style=\"font-size:10px\">View</a>';\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/elements/tradepanel/TradeInput.html\n// Module\nvar TradeInput_code = \"<article class=\\\"{{tradeType}}Inputs tradeInputArticle\\\">\\r\\n    <div class=\\\"grid tradeInput\\\">\\r\\n        <div class=\\\"select_token\\\">\\r\\n            <a id=\\\"{{tradeType}}SelectStock\\\" href=\\\"#\\\" role=\\\"button\\\">\\r\\n                <img src=\\\"{{logo}}\\\"/>\\r\\n                {{symbol}}\\r\\n            </a>\\r\\n        </div>\\r\\n        <div class=\\\"trade_input\\\"><input autocomplete=\\\"off\\\" autocorrect=\\\"off\\\" type=\\\"tel\\\" spellcheck=\\\"false\\\"\\r\\n                                        value=\\\"{{strQuantity}}\\\" placeholder=\\\"0.0\\\"/></div>\\r\\n        <div class=\\\"balance\\\">Balance : <abbr title=\\\"{{balance}}\\\" data-tooltip=\\\"{{balance}}\\\" class=\\\"balance_value\\\">{{abbrBalance}}</abbr>\\r\\n            <a href=\\\"\\\" class=\\\"balance_max\\\">Max</a></div>\\r\\n        <div class=\\\"price_per_share\\\"></div>\\r\\n    </div>\\r\\n    <progress class=\\\"progress d-none\\\" value=\\\"0\\\" max=\\\"1\\\"></progress>\\r\\n    <div class=\\\"exceeds_wallet_balance d-none\\\">Exceeds wallet balance</div>\\r\\n</article>\\r\\n\";\n// Exports\n/* harmony default export */ const TradeInput = (TradeInput_code);\n;// CONCATENATED MODULE: ./src/ui/modals/SecuritiesListModal.ts\nvar SecuritiesListModal_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\nclass SecuritiesListModal {\r\n    constructor() {\r\n        this.tbodyId = 'liminal_market_securities_list';\r\n        this.page = 0;\r\n        this.loadmore = true;\r\n        this.modal = new Modal();\r\n    }\r\n    showModal(onSelectSymbol) {\r\n        return SecuritiesListModal_awaiter(this, void 0, void 0, function* () {\r\n            let securitiesList = new SecuritiesList();\r\n            let content = yield securitiesList.render();\r\n            let newInstance = this.modal.showModal('Select stock to buy', content, true);\r\n            //if (newInstance)\r\n            {\r\n                yield securitiesList.bindEvents(onSelectSymbol);\r\n            }\r\n        });\r\n    }\r\n    hideModal() {\r\n        this.modal.hideModal();\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/services/backend/TradeInfo.ts\nclass TradeInfo {\r\n    constructor(price, lastTrade) {\r\n        this.price = price;\r\n        this.lastTrade = lastTrade;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/errors/cloud/HttpError.ts\n\r\n\r\nclass HttpError {\r\n    constructor(obj) {\r\n        this.method = obj.method;\r\n        this.url = obj.url;\r\n        this.body = obj.body;\r\n        this.serverError = obj.serverError;\r\n    }\r\n    handle() {\r\n        console.log(this);\r\n        ErrorInfo.report(new GeneralError('Error doing request. Server response was:' + this.serverError.data.message));\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/errors/CloudError.ts\n\r\n\r\n\r\nclass CloudError extends GeneralError {\r\n    constructor(e) {\r\n        super(e);\r\n        try {\r\n            let obj = JSON.parse(e.message);\r\n            if (obj.name) {\r\n                let errorHandler = CloudError.getActionInstance(obj.name, obj);\r\n                if (errorHandler) {\r\n                    errorHandler.handle();\r\n                    return;\r\n                }\r\n            }\r\n            ErrorInfo.error(obj);\r\n        }\r\n        catch (jsonError) {\r\n            ErrorInfo.error(e);\r\n        }\r\n    }\r\n    static getActionInstance(action, obj) {\r\n        let tmp = undefined;\r\n        for (let i = 0; i < CloudError.Errors.length; i++) {\r\n            if (CloudError.Errors[i].name === action) {\r\n                let errorHandler = CloudError.Errors[i];\r\n                return new errorHandler(obj);\r\n            }\r\n        }\r\n        return tmp;\r\n    }\r\n}\r\nCloudError.Errors = [\r\n    HttpError\r\n];\r\n\n;// CONCATENATED MODULE: ./src/services/backend/StockPriceService.ts\nvar StockPriceService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\nclass StockPriceService {\r\n    constructor(moralis) {\r\n        this.moralis = moralis;\r\n    }\r\n    getSymbolPrice(symbol, tradeType) {\r\n        return StockPriceService_awaiter(this, void 0, void 0, function* () {\r\n            const params = {\r\n                symbol: symbol\r\n            };\r\n            let result = yield this.moralis.Cloud.run(\"getSymbolPrice\", params)\r\n                .catch(e => {\r\n                throw new CloudError(e);\r\n            });\r\n            let quote = result.quotes[result.quotes.length - 1];\r\n            let price = (tradeType == TradeType.Sell) ? quote.ap : quote.bp;\r\n            let tradeInfo = new TradeInfo(price, quote.t);\r\n            return tradeInfo;\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/elements/tradepanel/PricePerShare.html\n// Module\nvar PricePerShare_code = \"<abbr title=\\\"Last trade was {{lastTraded}}\\\" data-tooltip=\\\"Last trade was {{lastTraded}}\\\">{{text}}</abbr>\";\n// Exports\n/* harmony default export */ const PricePerShare = (PricePerShare_code);\n;// CONCATENATED MODULE: ./src/ui/elements/tradepanel/TradePanelInput.ts\nvar TradePanelInput_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass TradePanelInput {\r\n    constructor(moralis, symbol, name, logo, address, tradeType) {\r\n        this.isDirty = false;\r\n        this.moralis = moralis;\r\n        this.symbol = symbol;\r\n        this.name = name;\r\n        this.logo = logo;\r\n        this.address = address;\r\n        this.tradeType = tradeType;\r\n        this.quantity = new (bignumber_default())(0);\r\n        this.strQuantity = '';\r\n        this.balance = new (bignumber_default())(0);\r\n        this.lastPrice = 0;\r\n        this.qtyPerDollar = 0;\r\n        this.lastTraded = '';\r\n        this.template = Handlebars.compile(TradeInput);\r\n        this.pricePerShareTemplate = Handlebars.compile(PricePerShare);\r\n    }\r\n    setOtherTradePanelInput(tradePanelInput) {\r\n        this.otherTradePanelInput = tradePanelInput;\r\n    }\r\n    renderToString() {\r\n        return this.template(this);\r\n    }\r\n    render(bindEvents = true) {\r\n        let element = document.querySelector('.' + this.tradeType + 'Inputs');\r\n        element.outerHTML = this.renderToString();\r\n        if (bindEvents) {\r\n            this.bindEvents();\r\n        }\r\n    }\r\n    bindEvents() {\r\n        this.bindQuantityListener();\r\n        this.bindSelectStockButton();\r\n        this.bindMaxLink();\r\n    }\r\n    setSymbol(symbol, name, logo) {\r\n        this.symbol = symbol;\r\n        this.name = name;\r\n        this.logo = logo;\r\n        this.isDirty = true;\r\n    }\r\n    bindSelectStockButton() {\r\n        let selectStock = document.querySelector('#' + this.tradeType + 'SelectStock');\r\n        if (!selectStock)\r\n            return;\r\n        selectStock.addEventListener('click', (evt) => TradePanelInput_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            let securityList = new SecuritiesListModal();\r\n            yield securityList.showModal((symbol, name, logo) => TradePanelInput_awaiter(this, void 0, void 0, function* () {\r\n                securityList.hideModal();\r\n                if (this.otherTradePanelInput && this.symbol == 'aUSD' && symbol != this.symbol) {\r\n                    this.otherTradePanelInput.setSymbol(this.symbol, this.name, this.logo);\r\n                }\r\n                this.symbol = symbol;\r\n                this.name = name;\r\n                this.logo = logo;\r\n                let liminalMarketService = new LiminalMarketService(this.moralis);\r\n                this.address = yield liminalMarketService.getSymbolContractAddress(symbol);\r\n                this.render();\r\n                this.loadBalance().then();\r\n                yield this.loadLastTrade();\r\n                if (this.onUpdate)\r\n                    this.onUpdate();\r\n            }));\r\n        }));\r\n    }\r\n    bindQuantityListener() {\r\n        let qtyInput = document.querySelector('.' + this.tradeType + 'Inputs .trade_input input');\r\n        if (!qtyInput)\r\n            return;\r\n        let inputTimer;\r\n        qtyInput.addEventListener('keyup', (evt) => {\r\n            if (inputTimer)\r\n                clearTimeout(inputTimer);\r\n            inputTimer = setTimeout(() => {\r\n                let inputValue = evt.target.value;\r\n                this.setQuantity(inputValue);\r\n                this.loadProgressbar();\r\n                if (this.otherTradePanelInput)\r\n                    this.otherTradePanelInput.updateQuantity();\r\n                if (this.onUpdate)\r\n                    this.onUpdate();\r\n            }, 300);\r\n        });\r\n    }\r\n    bindMaxLink() {\r\n        let maxBalanceDom = document.querySelector('.' + this.tradeType + 'Inputs .balance_max');\r\n        if (!maxBalanceDom)\r\n            return;\r\n        maxBalanceDom.addEventListener('click', (evt) => {\r\n            evt.preventDefault();\r\n            let qtyInput = document.querySelector('.' + this.tradeType + 'Inputs .trade_input input');\r\n            if (!qtyInput)\r\n                return;\r\n            qtyInput.value = this.balance.toFixed();\r\n            this.setQuantity(qtyInput.value);\r\n            this.loadProgressbar();\r\n            if (this.otherTradePanelInput)\r\n                this.otherTradePanelInput.updateQuantity();\r\n            if (this.onUpdate)\r\n                this.onUpdate();\r\n        });\r\n    }\r\n    loadBalance() {\r\n        return TradePanelInput_awaiter(this, void 0, void 0, function* () {\r\n            let userService = new UserService(this.moralis);\r\n            let ethAddress = userService.getEthAddress();\r\n            let balanceDom = document.querySelector('.' + this.tradeType + 'Inputs .balance_value');\r\n            if (!balanceDom)\r\n                return;\r\n            if (this.symbol === 'aUSD') {\r\n                let aUsdService = new AUSDService(this.moralis);\r\n                this.balance = yield aUsdService.getAUSDBalanceOf(ethAddress);\r\n                balanceDom.innerHTML = '$' + roundBigNumber(this.balance).toString();\r\n            }\r\n            else if (this.name !== '') {\r\n                let securityTokenService = new SecurityTokenService(this.moralis);\r\n                this.balance = yield securityTokenService.getQuantityByAddress(this.symbol, ethAddress);\r\n                balanceDom.innerHTML = roundBigNumberDecimal(this.balance, 6).toString();\r\n            }\r\n            balanceDom.dataset.tooltip = this.balance.toString();\r\n            balanceDom.title = this.balance.toString();\r\n            this.loadProgressbar();\r\n            this.toggleMaxBalanceLink();\r\n        });\r\n    }\r\n    loadLastTrade() {\r\n        return TradePanelInput_awaiter(this, void 0, void 0, function* () {\r\n            if (this.symbol === 'aUSD') {\r\n                this.lastPrice = 1;\r\n                this.qtyPerDollar = 1;\r\n                return;\r\n            }\r\n            if (!this.otherTradePanelInput || this.name == '')\r\n                return;\r\n            let aUsdPricePerShare = document.querySelector('.' + this.otherTradePanelInput.tradeType + 'Inputs .price_per_share');\r\n            if (!aUsdPricePerShare)\r\n                return;\r\n            let pricePerShare = document.querySelector('.' + this.tradeType + 'Inputs .price_per_share');\r\n            if (!pricePerShare)\r\n                return;\r\n            aUsdPricePerShare.setAttribute('aria-busy', 'true');\r\n            pricePerShare.setAttribute('aria-busy', 'true');\r\n            let stockPriceService = new StockPriceService(this.moralis);\r\n            let tradeInfo = yield stockPriceService.getSymbolPrice(this.symbol, this.otherTradePanelInput.tradeType);\r\n            this.lastPrice = tradeInfo.price;\r\n            this.lastTraded = tradeInfo.lastTrade.toString();\r\n            this.qtyPerDollar = 1 / this.lastPrice;\r\n            let pricePerShareHtml = {\r\n                lastTraded: this.lastTraded,\r\n                text: '≈ $' + this.lastPrice + ' per share'\r\n            };\r\n            pricePerShare.innerHTML = this.pricePerShareTemplate(pricePerShareHtml);\r\n            let pricePerAUsdHtml = {\r\n                lastTraded: this.lastTraded,\r\n                text: '1 aUSD ≈ ' + roundNumberDecimal(this.qtyPerDollar, 6) + ' ' + this.symbol\r\n            };\r\n            aUsdPricePerShare.innerHTML = this.pricePerShareTemplate(pricePerAUsdHtml);\r\n            this.updateQuantity();\r\n            aUsdPricePerShare.removeAttribute('aria-busy');\r\n            pricePerShare.removeAttribute('aria-busy');\r\n        });\r\n    }\r\n    updateQuantity() {\r\n        if (!this.otherTradePanelInput)\r\n            return;\r\n        let qtyInput = document.querySelector('.' + this.tradeType + 'Inputs .trade_input input');\r\n        if (!qtyInput)\r\n            return;\r\n        if (this.symbol === 'aUSD') {\r\n            qtyInput.value = this.otherTradePanelInput.quantity.div(this.otherTradePanelInput.qtyPerDollar).toString();\r\n        }\r\n        else {\r\n            qtyInput.value = this.otherTradePanelInput.quantity.multipliedBy(this.qtyPerDollar).toString();\r\n        }\r\n        this.setQuantity(qtyInput.value);\r\n        this.loadProgressbar();\r\n    }\r\n    loadProgressbar() {\r\n        if (this.quantity.eq(0) || this.balance.eq(0) || this.tradeType == TradeType.Buy)\r\n            return;\r\n        let progressDom = document.querySelector('.' + this.tradeType + 'Inputs .progress');\r\n        if (!progressDom)\r\n            return;\r\n        let percentage = this.quantity.div(this.balance).toNumber();\r\n        progressDom.value = percentage;\r\n        progressDom.classList.remove('d-none');\r\n        let exceedsBalance = document.querySelector('.' + this.tradeType + 'Inputs .exceeds_wallet_balance');\r\n        if (percentage > 1) {\r\n            exceedsBalance.classList.remove('d-none');\r\n            progressDom.setAttribute('aria-invalid', 'true');\r\n        }\r\n        else {\r\n            exceedsBalance.classList.add('d-none');\r\n        }\r\n    }\r\n    static switchPanels(sellTradePanelInput, buyTradePanelInput) {\r\n        return TradePanelInput_awaiter(this, void 0, void 0, function* () {\r\n            let sellSymbol = sellTradePanelInput.symbol;\r\n            let sellName = sellTradePanelInput.name;\r\n            let sellLogo = sellTradePanelInput.logo;\r\n            let sellQuantity = sellTradePanelInput.quantity;\r\n            sellTradePanelInput.setSymbol(buyTradePanelInput.symbol, buyTradePanelInput.name, buyTradePanelInput.logo);\r\n            sellTradePanelInput.quantity = buyTradePanelInput.quantity;\r\n            buyTradePanelInput.setSymbol(sellSymbol, sellName, sellLogo);\r\n            buyTradePanelInput.quantity = sellQuantity;\r\n            yield sellTradePanelInput.updatePanel();\r\n            yield buyTradePanelInput.updatePanel();\r\n            return [sellTradePanelInput, buyTradePanelInput];\r\n        });\r\n    }\r\n    setQuantity(value) {\r\n        if (value == '' || value == '0')\r\n            return;\r\n        this.quantity = new (bignumber_default())(value);\r\n        this.strQuantity = value;\r\n    }\r\n    quantityFormatted() {\r\n        return (this.symbol === 'aUSD') ? '$' + this.quantity : this.quantity;\r\n    }\r\n    updatePanel() {\r\n        return TradePanelInput_awaiter(this, void 0, void 0, function* () {\r\n            this.updateQuantity();\r\n            this.render(true);\r\n            yield this.loadBalance();\r\n            yield this.loadLastTrade();\r\n        });\r\n    }\r\n    toggleMaxBalanceLink() {\r\n        let maxBalanceDom = document.querySelector('.' + this.tradeType + 'Inputs .balance_max');\r\n        if (!maxBalanceDom)\r\n            return;\r\n        if (this.balance.eq(0)) {\r\n            maxBalanceDom.classList.add('d-none');\r\n        }\r\n        else {\r\n            maxBalanceDom.classList.remove('d-none');\r\n        }\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/elements/tradepanel/TradeSwitch.html\n// Module\nvar TradeSwitch_code = \"<div class=\\\"grid tradeSwitch\\\">\\r\\n    <a title=\\\"Switch the trade\\\" href=\\\"\\\" class=\\\"switchBtn\\\" class=\\\"outline\\\"></a>\\r\\n</div>\";\n// Exports\n/* harmony default export */ const tradepanel_TradeSwitch = (TradeSwitch_code);\n;// CONCATENATED MODULE: ./src/ui/elements/tradepanel/TradeSwitch.ts\nvar TradeSwitch_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\nclass TradeSwitch {\r\n    constructor() {\r\n        this.template = undefined;\r\n        this.template = Handlebars.compile(tradepanel_TradeSwitch);\r\n    }\r\n    renderToString() {\r\n        return this.template();\r\n    }\r\n    render() {\r\n        let dom = document.querySelector('.tradeSwitch');\r\n        if (!dom)\r\n            return;\r\n        dom.outerHTML = this.renderToString();\r\n    }\r\n    bindEvents(sellTradePanelInput, buyTradePanelInput, executeTradeButton) {\r\n        let dom = document.querySelector('.switchBtn');\r\n        if (!dom)\r\n            return;\r\n        dom.addEventListener('click', (evt) => TradeSwitch_awaiter(this, void 0, void 0, function* () {\r\n            evt.preventDefault();\r\n            [sellTradePanelInput, buyTradePanelInput] = yield TradePanelInput.switchPanels(sellTradePanelInput, buyTradePanelInput);\r\n        }));\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/elements/TradePanel.ts\nvar TradePanel_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\nclass TradePanel {\r\n    constructor(moralis) {\r\n        this.moralis = moralis;\r\n        this.quantity = 0;\r\n    }\r\n    render(elementId, symbol, name, logo, address) {\r\n        return TradePanel_awaiter(this, void 0, void 0, function* () {\r\n            let element = document.getElementById(elementId);\r\n            if (!element)\r\n                return;\r\n            let contractInfo = ContractInfo.getContractInfo();\r\n            let sellTradeInput = new TradePanelInput(this.moralis, \"aUSD\", \"aUSD at Broker\", \"/img/ausd.png\", contractInfo.AUSD_ADDRESS, TradeType.Sell);\r\n            let buyTradeInput;\r\n            if (!symbol) {\r\n                buyTradeInput = new TradePanelInput(this.moralis, \"Select stock\", \"\", \"\", \"\", TradeType.Buy);\r\n            }\r\n            else {\r\n                buyTradeInput = new TradePanelInput(this.moralis, symbol, name, logo, address, TradeType.Buy);\r\n            }\r\n            sellTradeInput.setOtherTradePanelInput(buyTradeInput);\r\n            buyTradeInput.setOtherTradePanelInput(sellTradeInput);\r\n            let tradeSwitch = new TradeSwitch();\r\n            let sellInput = sellTradeInput.renderToString();\r\n            let buyInput = buyTradeInput.renderToString();\r\n            let switchHtml = tradeSwitch.renderToString();\r\n            element.innerHTML = sellInput + switchHtml + buyInput;\r\n            yield sellTradeInput.loadBalance();\r\n            yield buyTradeInput.loadBalance();\r\n            if (symbol) {\r\n                yield buyTradeInput.loadLastTrade();\r\n            }\r\n            sellTradeInput.bindEvents();\r\n            buyTradeInput.bindEvents();\r\n            let executeTradeButton = new ExecuteTradeButton(this.moralis, sellTradeInput, buyTradeInput);\r\n            yield executeTradeButton.renderButton();\r\n            tradeSwitch.bindEvents(sellTradeInput, buyTradeInput, executeTradeButton);\r\n            sellTradeInput.onUpdate = () => {\r\n                if (buyTradeInput.isDirty)\r\n                    buyTradeInput.updatePanel();\r\n                executeTradeButton.renderButton();\r\n            };\r\n            buyTradeInput.onUpdate = () => {\r\n                if (sellTradeInput.isDirty)\r\n                    sellTradeInput.updatePanel();\r\n                executeTradeButton.renderButton();\r\n            };\r\n        });\r\n    }\r\n    formatBuyPanel(symbol, name, logo, tradeType, contractAddress) {\r\n        document.getElementById('liminal_market_select_symbol').innerHTML = symbol;\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/pages/trade.html\n// Module\nvar trade_code = \"<div id=\\\"tradingPanel\\\">\\r\\n    <a href=\\\"#use_wallet_for_orders\\\" id=\\\"use_wallet_for_orders_link\\\" class=\\\"not_visible\\\">Trade in your wallet instead of\\r\\n        here</a>\\r\\n    <article id=\\\"liminal_market_trade_panel\\\"></article>\\r\\n    <div id=\\\"executing-trade-progress\\\" class=\\\"d-none\\\">\\r\\n        <div id=\\\"progress-text\\\"></div>\\r\\n        <progress></progress>\\r\\n    </div>\\r\\n    <button id=\\\"liminal_market_execute_trade\\\"></button>\\r\\n\\r\\n    <article id=\\\"use_wallet_for_orders\\\">\\r\\n\\r\\n        <h3>How to buy in wallet</h3>\\r\\n        <ul>\\r\\n            <li>If you haven't added aUSD to your wallet, now is the time - <small><a href=\\\"\\\" id=\\\"addAUSDToWallet\\\">Click\\r\\n                here to add aUSD to wallet</a></small></li>\\r\\n            <li><a href=\\\"\\\" class=\\\"findSymbol\\\">Find symbol</a> you want to buy & click \\\"Get address\\\"</li>\\r\\n            <li>Go to your wallet and find the aUSD token, click \\\"Send\\\"</li>\\r\\n            <li>Paste in the address you just copied for the Receiver.\\r\\n                <ul>\\r\\n                    <li><em>Note: If you can, save the address to your contact list for easy access next time</em></li>\\r\\n                </ul>\\r\\n            </li>\\r\\n\\r\\n            <li>Type in the amount & click Confirm</li>\\r\\n            <li>You have now bought the shares, don't forget to <a href=\\\"\\\" class=\\\"findSymbol\\\">add the token to wallet</a>. &#127881;</li>\\r\\n        </ul>\\r\\n        <div style=\\\"text-align: center;\\\">\\r\\n            <!--\\r\\n                        <iframe width=\\\"380\\\" height=\\\"500\\\" src=\\\"https://www.youtube.com/embed/m1iNotgaic4?autoplay=1&cc_load_policy=1&playlist=m1iNotgaic4&loop=1\\\" title=\\\"YouTube video player\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\\" allowfullscreen></iframe>\\r\\n            -->\\r\\n        </div>\\r\\n\\r\\n\\r\\n        <h3>Sell your securities</h3>\\r\\n\\r\\n        <ul>\\r\\n            <li>Find the token you want so sell in you wallet and click Send</li>\\r\\n            <li>Put the in the aUSD address<br/><input id=\\\"aUsdAddress\\\" value=\\\"{{AUSDAddress}}\\\">\\r\\n                <ul>\\r\\n                    <li><em>Note: If you can, save the address to your contact list for easy access next time</em></li>\\r\\n                </ul>\\r\\n            </li>\\r\\n            <li>Type in the quantity of shares you want to sell & click Confirm</li>\\r\\n            <li>You have now sold the shares &#127881;</li>\\r\\n        </ul>\\r\\n\\r\\n    </article>\\r\\n</div>\";\n// Exports\n/* harmony default export */ const trade = (trade_code);\n;// CONCATENATED MODULE: ./src/html/modal/CopyTokenAddressToAddToWallet.html\n// Module\nvar CopyTokenAddressToAddToWallet_code = \"\\r\\n\\r\\n    You can copy the address of {{symbol}} and import it into your wallet\\r\\n    <input id=\\\"tokenAddress\\\" value=\\\"{{tokenAddress}}\\\" />\\r\\n\\r\\n\";\n// Exports\n/* harmony default export */ const CopyTokenAddressToAddToWallet = (CopyTokenAddressToAddToWallet_code);\n;// CONCATENATED MODULE: ./src/ui/pages/TradePage.ts\nvar TradePage_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass TradePage {\r\n    constructor(moralis) {\r\n        this.moralis = moralis;\r\n    }\r\n    load(symbol, name, logo, address) {\r\n        return TradePage_awaiter(this, void 0, void 0, function* () {\r\n            let mark1 = 'start';\r\n            let mark2 = 'template';\r\n            let mark3 = 'render tradePanel';\r\n            let mark4 = 'selectSymbol';\r\n            let mark5 = 'aUsd';\r\n            let mark6 = 'bindEvents';\r\n            performance.mark(mark1);\r\n            let mainContainer = document.getElementById('main_container');\r\n            if (!mainContainer)\r\n                return;\r\n            let contractInfo = ContractInfo.getContractInfo();\r\n            let template = Handlebars.compile(trade);\r\n            mainContainer.innerHTML = template({ AUSDAddress: contractInfo.AUSD_ADDRESS });\r\n            performance.mark(mark2);\r\n            let tradePanel = new TradePanel(this.moralis);\r\n            yield tradePanel.render('liminal_market_trade_panel');\r\n            performance.mark(mark3);\r\n            if (symbol) {\r\n                yield this.selectSymbol(symbol, name, logo, address);\r\n            }\r\n            performance.mark(mark4);\r\n            let user = new UserService(this.moralis);\r\n            let aUSDService = new AUSDService(this.moralis);\r\n            let ausdAmount = yield aUSDService.getAUSDBalanceOf(user.getEthAddress());\r\n            performance.mark(mark5);\r\n            let userWallet = document.getElementById('use_wallet_for_orders');\r\n            let userWalletLink = document.getElementById('use_wallet_for_orders_link');\r\n            if (ausdAmount.eq(0)) {\r\n                userWallet === null || userWallet === void 0 ? void 0 : userWallet.classList.add('hidden');\r\n                userWalletLink === null || userWalletLink === void 0 ? void 0 : userWalletLink.classList.add('not_visible');\r\n            }\r\n            else {\r\n                userWallet === null || userWallet === void 0 ? void 0 : userWallet.classList.remove('hidden');\r\n                userWalletLink === null || userWalletLink === void 0 ? void 0 : userWalletLink.classList.remove('not_visible');\r\n            }\r\n            let findSymbols = document.querySelectorAll('.findSymbol');\r\n            findSymbols === null || findSymbols === void 0 ? void 0 : findSymbols.forEach(findSymbol => {\r\n                findSymbol.addEventListener('click', (evt) => {\r\n                    evt.preventDefault();\r\n                    let securitiesModal = new SecuritiesListModal();\r\n                    securitiesModal.showModal(() => {\r\n                        securitiesModal.hideModal();\r\n                    });\r\n                });\r\n            });\r\n            let addAUSDToWallet = document.getElementById('addAUSDToWallet');\r\n            addAUSDToWallet === null || addAUSDToWallet === void 0 ? void 0 : addAUSDToWallet.addEventListener('click', (evt) => {\r\n                evt.preventDefault();\r\n                let walletHelper = new WalletHelper(this.moralis);\r\n                walletHelper.addTokenToWallet(contractInfo.AUSD_ADDRESS, 'aUSD', () => {\r\n                    let modal = new Modal();\r\n                    let template = Handlebars.compile(CopyTokenAddressToAddToWallet);\r\n                    let content = template({ symbol: 'aUSD', tokenAddress: contractInfo.AUSD_ADDRESS });\r\n                    modal.showModal('Add aUSD to wallet', content);\r\n                });\r\n            });\r\n            performance.mark(mark6);\r\n            performance.measure(\"start to template\", mark1, mark2);\r\n            performance.measure(\"template to render\", mark2, mark3);\r\n            performance.measure(\"render to selectSymbol\", mark3, mark4);\r\n            performance.measure(\"selectSymbol to ausd\", mark4, mark5);\r\n            performance.measure(\"ausd to bind\", mark5, mark6);\r\n            // Pull out all of the measurements.\r\n            console.log(performance.getEntriesByType(\"measure\"));\r\n            // Finally, clean up the entries.\r\n            performance.clearMarks();\r\n            performance.clearMeasures();\r\n        });\r\n    }\r\n    ;\r\n    selectSymbol(symbol, name, logo, address) {\r\n        return TradePage_awaiter(this, void 0, void 0, function* () {\r\n            let tradePanel = new TradePanel(this.moralis);\r\n            yield tradePanel.render('liminal_market_trade_panel', symbol, name, logo, address);\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/pages/stockspage.html\n// Module\nvar stockspage_code = \"\\r\\n<article id=\\\"stockList\\\">\\r\\n <div id=\\\"ua\\\"></div>\\r\\n <div id=\\\"list_of_securities\\\">{{{securities}}}</div>\\r\\n\\r\\n</article>\";\n// Exports\n/* harmony default export */ const stockspage = (stockspage_code);\n;// CONCATENATED MODULE: ./src/ui/pages/StocksPage.ts\nvar StocksPage_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nclass StocksPage {\r\n    constructor(moralis) {\r\n        this.moralis = moralis;\r\n    }\r\n    load() {\r\n        return StocksPage_awaiter(this, void 0, void 0, function* () {\r\n            let mainContainer = document.getElementById('main_container');\r\n            if (!mainContainer)\r\n                return;\r\n            let securitiesList = new SecuritiesList();\r\n            let securities = yield securitiesList.render();\r\n            let template = Handlebars.compile(stockspage);\r\n            mainContainer.innerHTML = template({ securities: securities });\r\n            yield securitiesList.loadMore();\r\n            yield securitiesList.bindEvents((symbol, name, logo) => StocksPage_awaiter(this, void 0, void 0, function* () {\r\n                let liminalMarketService = new LiminalMarketService(this.moralis);\r\n                let address = yield liminalMarketService.getSymbolContractAddress(symbol);\r\n                let tradePage = new TradePage(this.moralis);\r\n                window.scrollTo(0, 0);\r\n                history.pushState(null, 'Buy stocks', '#/trade');\r\n                yield tradePage.load(symbol, name, logo, address);\r\n            }));\r\n        });\r\n    }\r\n    ;\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/elements/documents.html\n// Module\nvar documents_code = \"<h3>Documents</h3>\\r\\n<p>These are your documents for your trades, generated by the broker. These documents are trade confirmation & monthly statements.\\r\\n\\tThey are generated at the end of the day, between 06:30PM-07:30PM EST.\\r\\n</p>\\r\\n{{#if result}}\\r\\n<table class=\\\"table table-hover\\\">\\r\\n\\t<thead>\\r\\n\\t\\t<tr>\\r\\n\\t\\t\\t<th>Type</th>\\r\\n\\t\\t\\t<th>Date</th>\\r\\n\\t\\t\\t<th>Download</th>\\r\\n\\t\\t</tr>\\r\\n\\t</thead>\\r\\n\\t<tbody>\\r\\n\\t\\t{{#each result}}\\r\\n\\t\\t<tr>\\r\\n\\t\\t\\t<td title=\\\"{{id}}\\\">{{type}}</a></td>\\r\\n\\t\\t\\t<td>{{date}}</td>\\r\\n\\t\\t\\t<td><a href=\\\"\\\" class=\\\"downloadDoc\\\" data-docid=\\\"{{id}}\\\">Download</a></td>\\r\\n\\t\\t</tr>\\r\\n\\t\\t{{/each}}\\r\\n\\t</tbody>\\r\\n</table>\\r\\n{{/if}}\";\n// Exports\n/* harmony default export */ const elements_documents = (documents_code);\n;// CONCATENATED MODULE: ./src/services/backend/DocumentService.ts\nvar DocumentService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nclass DocumentService {\r\n    constructor(moralis) {\r\n        this.moralis = moralis;\r\n    }\r\n    getDocuments() {\r\n        return DocumentService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.moralis.Cloud.run('documents');\r\n        });\r\n    }\r\n    getDocument(documentId) {\r\n        return DocumentService_awaiter(this, void 0, void 0, function* () {\r\n            const params = {\r\n                documentId: documentId\r\n            };\r\n            return yield this.moralis.Cloud.run(\"download\", params);\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/modal/CreateToken.html\n// Module\nvar CreateToken_code = \"Token for {{symbol}} does not exist. You can click the button below to create the token. This will cost a bit of gas.\\r\\n<br /><br />\\r\\nAfter the token has been created we will try to add it to your wallet.\\r\\n<br /><br />\\r\\n<button id=\\\"createTokenBtn\\\">Create token</button>\\r\\n\\r\\n<div class=\\\"d-none\\\" id=\\\"copyAddressInfo\\\">\\r\\n    You can copy the address of the token and import it into your wallet\\r\\n    <input id=\\\"tokenAddress\\\" />\\r\\n\\r\\n</div>\";\n// Exports\n/* harmony default export */ const modal_CreateToken = (CreateToken_code);\n;// CONCATENATED MODULE: ./src/ui/modals/CreateToken.ts\nvar CreateToken_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass CreateToken {\r\n    constructor(moralis) {\r\n        this.moralis = moralis;\r\n    }\r\n    show(symbol) {\r\n        let modal = new Modal();\r\n        let template = Handlebars.compile(modal_CreateToken);\r\n        modal.showModal(\"Token \" + symbol + \" doesn't exist\", template({ symbol: symbol }));\r\n        let btn = document.getElementById('createTokenBtn');\r\n        if (!btn)\r\n            return;\r\n        btn.addEventListener('click', () => CreateToken_awaiter(this, void 0, void 0, function* () {\r\n            LoadingHelper.setLoading(btn);\r\n            let liminalMarketService = new LiminalMarketService(this.moralis);\r\n            let address = yield liminalMarketService.getSymbolContractAddress(symbol);\r\n            if (address === AddressZero) {\r\n                let result = yield liminalMarketService.createToken(symbol, () => {\r\n                    btn.innerHTML = 'Creating token. Give it few seconds';\r\n                });\r\n                if (result instanceof BlockchainError && result.code == BlockchainError.UserCancelled) {\r\n                    LoadingHelper.removeLoading();\r\n                    return;\r\n                }\r\n                address = result;\r\n            }\r\n            LoadingHelper.removeLoading();\r\n            btn.innerHTML = 'Add token to wallet';\r\n            let walletHelper = new WalletHelper(this.moralis);\r\n            yield walletHelper.addTokenToWallet(address, symbol, () => {\r\n                let tokenAddressInput = document.getElementById('tokenAddress');\r\n                if (!tokenAddressInput)\r\n                    return;\r\n                tokenAddressInput.innerHTML = address;\r\n                document.getElementById('copyAddressInfo').classList.remove('d-none');\r\n            });\r\n        }));\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/html/pages/positions.html\n// Module\nvar positions_code = \"<article class=\\\"loaded-content2\\\">\\r\\n\\t<h3>Positions<!-- <a href=\\\"\\\" role=\\\"button\\\" id=\\\"syncWallet\\\">Sync wallet</a>--></h3>\\r\\n\\t<p>These are your positions registered with the broker. These would be registered to you on the stock exchange if we weren't running on\\r\\n\\t\\ta sandbox at the broker. Want to know when we open for live trading? <a href=\\\"https://liminal.market\\\" target=\\\"_blank\\\">Register your email with us</a>\\r\\n\\r\\n\\t</p>\\r\\n\\t<figure>\\r\\n\\t<table>\\r\\n\\t\\t<thead>\\r\\n\\t\\t\\t<tr>\\r\\n\\t\\t\\t\\t<th></th>\\r\\n\\t\\t\\t\\t<th>Symbol</th>\\r\\n\\t\\t\\t\\t<th>Current price</th>\\r\\n\\t\\t\\t\\t<th>Avg. entry value</th>\\r\\n\\t\\t\\t\\t<th>Quantity</th>\\r\\n\\t\\t\\t\\t<th>Market value</th>\\r\\n\\t\\t\\t\\t<th>Unrealize PL</th>\\r\\n\\t\\t\\t\\t<th>Trade</th>\\r\\n\\t\\t\\t\\t<th>Add to wallet</th>\\r\\n\\t\\t\\t</tr>\\r\\n\\t\\t</thead>\\r\\n\\t\\t<tbody>\\r\\n\\t\\t\\t{{#if result}}\\r\\n\\t\\t\\t{{#each result}}\\r\\n\\t\\t\\t<tr>\\r\\n\\t\\t\\t\\t<td class=\\\"symbol_logo\\\"><img id=\\\"symbol_logo_{{symbol}}\\\" src=\\\"/img/logos/default_logo.png\\\" /></td>\\r\\n\\t\\t\\t\\t<td><a href=\\\"https://strike.market/stocks/{{symbol}}\\\" target=\\\"_blank\\\">{{symbol}}</a></td>\\r\\n\\t\\t\\t\\t<td>{{current_price}}</td>\\r\\n\\t\\t\\t\\t<td>{{round2 avg_entry_price}}</td>\\r\\n\\t\\t\\t\\t<td>{{round2 qty}}</td>\\r\\n\\t\\t\\t\\t<td>${{round market_value}}</td>\\r\\n\\t\\t\\t\\t<td class=\\\"{{classColor unrealized_pl}}\\\">${{round unrealized_pl}} ({{perc unrealized_plpc}})</td>\\r\\n\\t\\t\\t\\t<td><a href=\\\"#\\\" class=\\\"tradeSecurity\\\" data-symbol=\\\"{{symbol}}\\\" data-qty={{qty}}>Trade</a></td>\\r\\n\\t\\t\\t\\t<td><a href=\\\"\\\" class=\\\"addToWallet\\\" data-symbol=\\\"{{symbol}}\\\">Add</a></td>\\r\\n\\t\\t\\t</tr>\\r\\n\\t\\t\\t{{/each}}\\r\\n\\t\\t\\t{{/if}}\\r\\n\\t\\t</tbody>\\r\\n\\t</table>\\r\\n\\t</figure>\\r\\n\\t<div id=\\\"documents\\\"></div>\\r\\n\\r\\n</article>\";\n// Exports\n/* harmony default export */ const pages_positions = (positions_code);\n;// CONCATENATED MODULE: ./src/html/modal/SyncStock.html\n// Module\nvar SyncStock_code = \"<article>\\r\\n    If your wallet is out of sync with your position you can sync it here. This happens when you move from\\r\\n    one chain to another. If you like to switch to new chain click the button below.\\r\\n    <br/><br/>\\r\\n    You will be asked to confirm a transaction of {{totalCost}} {{NativeSymbol}} (${{priceInNativeToken}}).\\r\\n    Each stock costs {{costPerShare}} {{NativeSymbol}} to sync. You have total of {{shareCount}} share.\\r\\n    <br/><br/>\\r\\n    <button id=\\\"syncAllPositions\\\">Sync stock to my wallet</button>\\r\\n</article>\";\n// Exports\n/* harmony default export */ const SyncStock = (SyncStock_code);\n;// CONCATENATED MODULE: ./src/services/backend/PositionsService.ts\nvar PositionsService_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nclass PositionsService {\r\n    constructor(moralis) {\r\n        this.moralis = moralis;\r\n    }\r\n    getPositions() {\r\n        return PositionsService_awaiter(this, void 0, void 0, function* () {\r\n            return yield this.moralis.Cloud.run('positions');\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/pages/PositionsPage.ts\nvar PositionsPage_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass PositionsPage {\r\n    constructor(moralis) {\r\n        this.moralis = moralis;\r\n        this.documentService = new DocumentService(this.moralis);\r\n    }\r\n    load() {\r\n        return PositionsPage_awaiter(this, void 0, void 0, function* () {\r\n            let mainContainer = document.getElementById('main_container');\r\n            if (!mainContainer)\r\n                return;\r\n            let positionService = new PositionsService(this.moralis);\r\n            let positions = yield positionService.getPositions();\r\n            HandlebarHelpers.registerHelpers();\r\n            let template = Handlebars.compile(pages_positions);\r\n            mainContainer.innerHTML = template({ result: positions });\r\n            let syncWalletBtn = document.getElementById('syncWallet');\r\n            if (syncWalletBtn) {\r\n                syncWalletBtn.addEventListener('click', (evt) => {\r\n                    evt.preventDefault();\r\n                    this.syncAllTokens();\r\n                });\r\n            }\r\n            let symbols = new Array();\r\n            const sellLinks = document.getElementsByClassName('tradeSecurity');\r\n            for (let i = 0; i < sellLinks.length; i++) {\r\n                let element = sellLinks[i];\r\n                let symbol = element.dataset.symbol;\r\n                if (!symbol)\r\n                    continue;\r\n                symbols.push(symbol);\r\n                sellLinks[i].addEventListener('click', (evt) => PositionsPage_awaiter(this, void 0, void 0, function* () {\r\n                    evt.preventDefault();\r\n                    let element = evt.target;\r\n                    let symbol = element.dataset.symbol;\r\n                    if (!symbol)\r\n                        return;\r\n                    let liminalMarketService = new LiminalMarketService(this.moralis);\r\n                    let contractAddress = yield liminalMarketService.getSymbolContractAddress(symbol);\r\n                    let securitiesService = yield SecuritiesService.getInstance();\r\n                    let security = yield securitiesService.getSecurityBySymbol(symbol);\r\n                    let tradePage = new TradePage(this.moralis);\r\n                    yield tradePage.load(symbol, security.Name, security.LogoPath + security.Logo, contractAddress);\r\n                    window.scrollTo(0, 0);\r\n                }));\r\n            }\r\n            const addToWalletLinks = document.getElementsByClassName('addToWallet');\r\n            for (let i = 0; i < addToWalletLinks.length; i++) {\r\n                addToWalletLinks[i].addEventListener('click', (evt) => PositionsPage_awaiter(this, void 0, void 0, function* () {\r\n                    evt.preventDefault();\r\n                    console.log(evt.target);\r\n                    let element = addToWalletLinks[i];\r\n                    let symbol = element.dataset.symbol;\r\n                    let liminalMarketService = new LiminalMarketService(this.moralis);\r\n                    let contractAddress = yield liminalMarketService.getSymbolContractAddress(symbol);\r\n                    if (contractAddress.toString() == AddressZero) {\r\n                        let createToken = new CreateToken(this.moralis);\r\n                        createToken.show(symbol);\r\n                        return;\r\n                    }\r\n                    let walletHelper = new WalletHelper(this.moralis);\r\n                    yield walletHelper.addTokenToWallet(contractAddress.toString(), symbol, () => {\r\n                        let modal = new Modal();\r\n                        let template = Handlebars.compile(AddressInfo);\r\n                        let content = template({ symbol: symbol, address: contractAddress });\r\n                        modal.showModal('Import token to wallet', content);\r\n                    });\r\n                }));\r\n            }\r\n            yield this.renderSymbolLogos(symbols);\r\n            let docTemplate = Handlebars.compile(elements_documents);\r\n            let documents = yield this.documentService.getDocuments();\r\n            let documentDom = document.getElementById('documents');\r\n            if (!documentDom)\r\n                return;\r\n            documentDom.innerHTML = docTemplate({ result: documents });\r\n            yield this.initDocuments();\r\n        });\r\n    }\r\n    renderSymbolLogos(symbols) {\r\n        return PositionsPage_awaiter(this, void 0, void 0, function* () {\r\n            let securitiesService = yield SecuritiesService.getInstance();\r\n            const assets = yield securitiesService.getSecurities();\r\n            let asset;\r\n            for (let i = 0; i < symbols.length; i++) {\r\n                asset = assets.get(symbols[i]);\r\n                if (asset) {\r\n                    document.getElementById('symbol_logo_' + symbols[i]).setAttribute('src', '/img/logos/' + asset.Logo);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    syncAllTokens() {\r\n        return PositionsPage_awaiter(this, void 0, void 0, function* () {\r\n            let networkInfo = NetworkInfo.getInstance();\r\n            let costOfSync = yield this.moralis.Cloud.run('costOfSync');\r\n            let template = Handlebars.compile(SyncStock);\r\n            let content = template({\r\n                shareCount: costOfSync.shareCount,\r\n                costPerShare: Moralis.Units.FromWei(costOfSync.costPerShare, 18),\r\n                priceInNativeToken: costOfSync.priceInNativeToken,\r\n                totalCost: Moralis.Units.FromWei(costOfSync.cost, 18),\r\n                NativeSymbol: networkInfo.NativeSymbol\r\n            });\r\n            let modal = new Modal();\r\n            modal.showModal('Sync all stock to wallet', content);\r\n            let syncAllPositions = document.getElementById('syncAllPositions');\r\n            if (syncAllPositions) {\r\n                syncAllPositions.addEventListener('click', (evt) => PositionsPage_awaiter(this, void 0, void 0, function* () {\r\n                    evt.preventDefault();\r\n                }));\r\n            }\r\n        });\r\n    }\r\n    initDocuments() {\r\n        return PositionsPage_awaiter(this, void 0, void 0, function* () {\r\n            const links = document.getElementsByClassName('downloadDoc');\r\n            const user = this.moralis.User.current();\r\n            if (!user)\r\n                return;\r\n            for (let i = 0; i < links.length; i++) {\r\n                links[i].addEventListener('click', (evt) => PositionsPage_awaiter(this, void 0, void 0, function* () {\r\n                    evt.preventDefault();\r\n                    let documentId = links[i].dataset.docid;\r\n                    if (!documentId)\r\n                        return;\r\n                    let locationUrl = yield this.documentService.getDocument(documentId);\r\n                    if (locationUrl == '') {\r\n                        alert('Could not find document. Please contact us if you should have gotten a document');\r\n                        return;\r\n                    }\r\n                    window.location = locationUrl;\r\n                }));\r\n            }\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/routing/Routing.ts\nvar Routing_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\nclass Routing {\r\n    constructor(moralis) {\r\n        this.settings = {\r\n            show_trade: this.showTrade,\r\n            show_positions: this.showPositions,\r\n            show_stocks: this.showStocks,\r\n            show_kyc_action_required: this.showKycActionRequired,\r\n            show_funding: this.showFunding,\r\n            show_kyc: this.showKyc\r\n        };\r\n        this.moralis = moralis;\r\n    }\r\n    loadRoutes() {\r\n        var _a;\r\n        return Routing_awaiter(this, void 0, void 0, function* () {\r\n            let path = window.location.hash.replace('#', '').replace('/', '');\r\n            if (window.location.search !== '')\r\n                path = window.location.search.replace('?', '');\r\n            if (path === '')\r\n                path = 'stocks';\r\n            this.attachNavLinks();\r\n            let fn = (_a = this.settings['show_' + path]) !== null && _a !== void 0 ? _a : this.settings['show_stocks'];\r\n            if (typeof fn === 'function') {\r\n                yield fn(this);\r\n            }\r\n        });\r\n    }\r\n    showKycActionRequired(routing, evt) {\r\n        return Routing_awaiter(this, void 0, void 0, function* () {\r\n            if (evt)\r\n                evt.preventDefault();\r\n            let page = new TradePage(routing.moralis);\r\n            yield page.load();\r\n            history.pushState(null, 'Buy stocks', '#/kyc_action_required');\r\n            let button = document.getElementById('liminal_market_execute_trade');\r\n            button === null || button === void 0 ? void 0 : button.dispatchEvent(new MouseEvent('click'));\r\n        });\r\n    }\r\n    showKyc(routing, evt) {\r\n        return Routing_awaiter(this, void 0, void 0, function* () {\r\n            if (evt)\r\n                evt.preventDefault();\r\n            let page = new TradePage(routing.moralis);\r\n            yield page.load();\r\n            history.pushState(null, 'Buy stocks', '#/kyc');\r\n            let button = document.getElementById('liminal_market_execute_trade');\r\n            button === null || button === void 0 ? void 0 : button.dispatchEvent(new MouseEvent('click'));\r\n        });\r\n    }\r\n    showFunding(routing, evt) {\r\n        return Routing_awaiter(this, void 0, void 0, function* () {\r\n            if (evt)\r\n                evt.preventDefault();\r\n            let page = new TradePage(routing.moralis);\r\n            yield page.load();\r\n            history.pushState(null, 'Buy stocks', '#/funding');\r\n            let aUSDFundingModal = new FakeAUSDFund(this.moralis);\r\n            let networkInfo = NetworkInfo.getInstance();\r\n            if (networkInfo.TestNetwork) {\r\n                aUSDFundingModal.showAUSDFakeFund(() => {\r\n                });\r\n            }\r\n            else {\r\n                aUSDFundingModal.showAUSDFund(() => {\r\n                });\r\n            }\r\n        });\r\n    }\r\n    showTrade(routing, evt) {\r\n        return Routing_awaiter(this, void 0, void 0, function* () {\r\n            if (evt)\r\n                evt.preventDefault();\r\n            let page = new TradePage(routing.moralis);\r\n            yield page.load();\r\n            history.pushState(null, 'Buy stocks', '#/trade');\r\n        });\r\n    }\r\n    showStocks(routing, evt) {\r\n        return Routing_awaiter(this, void 0, void 0, function* () {\r\n            if (evt)\r\n                evt.preventDefault();\r\n            let page = new StocksPage(routing.moralis);\r\n            yield page.load();\r\n            history.pushState(null, 'Stocks', '#/stocks');\r\n        });\r\n    }\r\n    showPositions(routing, evt) {\r\n        return Routing_awaiter(this, void 0, void 0, function* () {\r\n            if (evt)\r\n                evt.preventDefault();\r\n            let page = new PositionsPage(routing.moralis);\r\n            yield page.load();\r\n            history.pushState(null, 'Positions', '#/positions');\r\n        });\r\n    }\r\n    attachNavLinks() {\r\n        let router = this;\r\n        let tradeNavLinks = document.querySelectorAll('.tradeNavLink');\r\n        tradeNavLinks.forEach(link => {\r\n            link.addEventListener('click', function (evt) {\r\n                return Routing_awaiter(this, void 0, void 0, function* () {\r\n                    yield router.showTrade(router, evt);\r\n                    link.parentElement.parentElement.parentElement.removeAttribute('open');\r\n                });\r\n            });\r\n        });\r\n        let investLinks = document.querySelectorAll('.investNavLink');\r\n        investLinks.forEach(link => {\r\n            link.addEventListener('click', function (evt) {\r\n                return Routing_awaiter(this, void 0, void 0, function* () {\r\n                    yield router.showStocks(router, evt);\r\n                    link.parentElement.parentElement.parentElement.removeAttribute('open');\r\n                });\r\n            });\r\n        });\r\n        let positionLinks = document.querySelectorAll('.positionNavLink');\r\n        positionLinks.forEach(link => {\r\n            link.addEventListener('click', function (evt) {\r\n                return Routing_awaiter(this, void 0, void 0, function* () {\r\n                    yield router.showPositions(router, evt);\r\n                    link.parentElement.parentElement.parentElement.removeAttribute('open');\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/ui/elements/Header.ts\nclass Header {\r\n    static loadImage() {\r\n        let header = document.querySelector('body > header');\r\n        if (!header)\r\n            return;\r\n        let random = Math.floor(Math.random() * 10);\r\n        header.style.backgroundImage = \"url(/img/header/\" + random + \".jpg)\";\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/main.ts\nvar main_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst start = function () {\r\n    return main_awaiter(this, void 0, void 0, function* () {\r\n        let slowServerTimer = setTimeout(slowServer, 5 * 1000);\r\n        let connectionService = new ConnectionService();\r\n        connectionService.start().then(function () {\r\n            return main_awaiter(this, void 0, void 0, function* () {\r\n                clearTimeout(slowServerTimer);\r\n                let loadingMessage = document.querySelector('.loading');\r\n                let userService = new UserService(Moralis);\r\n                let loggedInUser = yield userService.isLoggedIn(loadingMessage);\r\n                if (loggedInUser) {\r\n                    let userInfo = new UserInfo(Moralis, loggedInUser.providerInfo, loggedInUser);\r\n                    yield userInfo.render('user_header_info');\r\n                }\r\n                else {\r\n                    //show Connect Wallet button\r\n                    let connectWallet = new ConnectWallet(Moralis);\r\n                    connectWallet.renderButton('user_header_info');\r\n                }\r\n                let routing = new Routing(Moralis);\r\n                yield routing.loadRoutes();\r\n            });\r\n        }).catch((reason) => {\r\n            ErrorInfo.report(new GeneralError(\"Server is down. Please try again later.<br /><br />\" + reason));\r\n        });\r\n        document.body.addEventListener('click', (evt) => {\r\n            let userInfoDropdown = document.getElementById('userInfoDropdown');\r\n            if (userInfoDropdown && !userInfoDropdown.classList.contains('d-none')) {\r\n                userInfoDropdown.classList.add('d-none');\r\n                evt.stopPropagation();\r\n                evt.preventDefault();\r\n            }\r\n        });\r\n        let walletHelper = new WalletHelper(Moralis);\r\n        if (walletHelper.isWebview(window.navigator.userAgent)) {\r\n            //console = ErrorInfo as any;\r\n        }\r\n        function slowServer() {\r\n            let loading = document.querySelector('.loading');\r\n            if (!loading) {\r\n                clearTimeout(slowServerTimer);\r\n                return;\r\n            }\r\n            loading.innerHTML = 'Hmmm.... our servers are slow and might be down. Give it few minutes.';\r\n        }\r\n        Header.loadImage();\r\n    });\r\n};\r\nstart().then();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/main.ts\n");

            /***/
        })

        /******/
    });
    /************************************************************************/
    /******/ 	// The module cache
    /******/
    var __webpack_module_cache__ = {};
    /******/
    /******/ 	// The require function
    /******/
    function __webpack_require__(moduleId) {
        /******/ 		// Check if module is in cache
        /******/
        var cachedModule = __webpack_module_cache__[moduleId];
        /******/
        if (cachedModule !== undefined) {
            /******/
            return cachedModule.exports;
            /******/
        }
        /******/ 		// Create a new module (and put it into the cache)
        /******/
        var module = __webpack_module_cache__[moduleId] = {
            /******/ 			// no module.id needed
            /******/ 			// no module.loaded needed
            /******/            exports: {}
            /******/
        };
        /******/
        /******/ 		// Execute the module function
        /******/
        __webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/
        /******/ 		// Return the exports of the module
        /******/
        return module.exports;
        /******/
    }

    /******/
    /************************************************************************/
    /******/ 	/* webpack/runtime/compat get default export */
    /******/
    (() => {
        /******/ 		// getDefaultExport function for compatibility with non-harmony modules
        /******/
        __webpack_require__.n = (module) => {
            /******/
            var getter = module && module.__esModule ?
                /******/                () => (module['default']) :
                /******/                () => (module);
            /******/
            __webpack_require__.d(getter, {a: getter});
            /******/
            return getter;
            /******/
        };
        /******/
    })();
    /******/
    /******/ 	/* webpack/runtime/define property getters */
    /******/
    (() => {
        /******/ 		// define getter functions for harmony exports
        /******/
        __webpack_require__.d = (exports, definition) => {
            /******/
            for (var key in definition) {
                /******/
                if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
                    /******/
                    Object.defineProperty(exports, key, {enumerable: true, get: definition[key]});
                    /******/
                }
                /******/
            }
            /******/
        };
        /******/
    })();
    /******/
    /******/ 	/* webpack/runtime/hasOwnProperty shorthand */
    /******/
    (() => {
        /******/
        __webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
        /******/
    })();
    /******/
    /******/ 	/* webpack/runtime/make namespace object */
    /******/
    (() => {
        /******/ 		// define __esModule on exports
        /******/
        __webpack_require__.r = (exports) => {
            /******/
            if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
                /******/
                Object.defineProperty(exports, Symbol.toStringTag, {value: 'Module'});
                /******/
            }
            /******/
            Object.defineProperty(exports, '__esModule', {value: true});
            /******/
        };
        /******/
    })();
    /******/
    /************************************************************************/
    /******/
    /******/ 	// startup
    /******/ 	// Load entry module and return exports
    /******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
    /******/
    var __webpack_exports__ = __webpack_require__("./src/main.ts");
    /******/
    /******/
})()
;